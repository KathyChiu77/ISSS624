[
  {
    "objectID": "Take-home Ex/Take-home Ex 1/Take-home_Exercise_1.html",
    "href": "Take-home Ex/Take-home Ex 1/Take-home_Exercise_1.html",
    "title": "Take-home Exercise 1: A Comprehensive Spatial Pattern Analysis of Bus Passenger Trips in Singapore",
    "section": "",
    "text": "In modern cities, digital transformations in transportation and public utilities, including buses, taxis, mass transit, and roads, generate extensive datasets. These datasets can track patterns of movement over time and space, especially with the widespread integration of technologies like GPS and RFID in vehicles. For instance, smart cards and GPS devices on public buses help gather data on routes and ridership. The vast amount of movement data thus collected likely reveals structural patterns and useful insights about the observed phenomena. Analyzing and comparing these patterns can offer deeper understanding of human movements and behaviors within urban environments. Such insights are valuable for enhancing city management and providing key information to both private and public urban transport service providers, aiding them in making informed decisions for a competitive edge.\nHowever, in practical applications, the utilization of this extensive location-aware data is often limited to basic tracking and mapping using GIS (Geographic Information System) tools. This limitation stems mainly from the inadequate capabilities of traditional GIS in effectively analyzing and modeling spatial and spatio-temporal data."
  },
  {
    "objectID": "Take-home Ex/Take-home Ex 1/Take-home_Exercise_1.html#setting-the-scene",
    "href": "Take-home Ex/Take-home Ex 1/Take-home_Exercise_1.html#setting-the-scene",
    "title": "Take-home Exercise 1: A Comprehensive Spatial Pattern Analysis of Bus Passenger Trips in Singapore",
    "section": "",
    "text": "In modern cities, digital transformations in transportation and public utilities, including buses, taxis, mass transit, and roads, generate extensive datasets. These datasets can track patterns of movement over time and space, especially with the widespread integration of technologies like GPS and RFID in vehicles. For instance, smart cards and GPS devices on public buses help gather data on routes and ridership. The vast amount of movement data thus collected likely reveals structural patterns and useful insights about the observed phenomena. Analyzing and comparing these patterns can offer deeper understanding of human movements and behaviors within urban environments. Such insights are valuable for enhancing city management and providing key information to both private and public urban transport service providers, aiding them in making informed decisions for a competitive edge.\nHowever, in practical applications, the utilization of this extensive location-aware data is often limited to basic tracking and mapping using GIS (Geographic Information System) tools. This limitation stems mainly from the inadequate capabilities of traditional GIS in effectively analyzing and modeling spatial and spatio-temporal data."
  },
  {
    "objectID": "Take-home Ex/Take-home Ex 1/Take-home_Exercise_1.html#objectives",
    "href": "Take-home Ex/Take-home Ex 1/Take-home_Exercise_1.html#objectives",
    "title": "Take-home Exercise 1: A Comprehensive Spatial Pattern Analysis of Bus Passenger Trips in Singapore",
    "section": "Objectives",
    "text": "Objectives\n\nApply Exploratory Spatial Data Analysis (ESDA) to uncover spatial and spatio-temporal mobility patterns of public bus passengers in Singapore.\nUtilize Local Indicators of Spatial Association (LISA) and Emerging Hot Spot Analysis (EHSA) for this analysis."
  },
  {
    "objectID": "Take-home Ex/Take-home Ex 1/Take-home_Exercise_1.html#tasks",
    "href": "Take-home Ex/Take-home Ex 1/Take-home_Exercise_1.html#tasks",
    "title": "Take-home Exercise 1: A Comprehensive Spatial Pattern Analysis of Bus Passenger Trips in Singapore",
    "section": "Tasks",
    "text": "Tasks\n\nTask 1: Geovisualisation and Analysis\n\nCompute passenger trips from origin at the hexagon level during different peak hours.\n\n\n\n\nPeak hour period\nBus tap on time\n\n\n\n\nWeekday morning peak\n6am to 9am\n\n\nWeekday afternoon peak\n5pm to 8pm\n\n\nWeekend/holiday morning peak\n11am to 2pm\n\n\nWeekend/holiday evening peak\n4pm to 7pm\n\n\n\n\nUse appropriate geovisualisation methods to display geographical distribution of these trips.\nDescribe spatial patterns observed in the geovisualisations.\n\n\n\nTask 2: Local Indicators of Spatial Association (LISA) Analysis\n\nCalculate LISA for passenger trips by origin at hexagon level.\nDisplay LISA maps for these trips, highlighting only significant results (p-value &lt; 0.05).\nDraw statistical conclusions based on the analysis results.\n\n\n\nTask 3: Emerging Hot Spot Analysis (EHSA)\n\nConduct Mann-Kendall Test using spatio-temporal local Gi* values for passenger trips by origin at the hexagon level for the four time intervals.\nPrepare EHSA maps showing Gi* values of passenger trips by origin at hexagon level, focusing on significant results (p-value &lt; 0.05).\nDescribe spatial patterns revealed in EHSA maps and data visual."
  },
  {
    "objectID": "Take-home Ex/Take-home Ex 1/Take-home_Exercise_1.html#installing-and-loading-the-r-packages",
    "href": "Take-home Ex/Take-home Ex 1/Take-home_Exercise_1.html#installing-and-loading-the-r-packages",
    "title": "Take-home Exercise 1: A Comprehensive Spatial Pattern Analysis of Bus Passenger Trips in Singapore",
    "section": "1.Installing and Loading the R Packages",
    "text": "1.Installing and Loading the R Packages\nIn the opening of our analysis, we begin by loading all the necessary packages to ensure a seamless and comprehensive analysis of spatial patterns in bus passenger trips in Singapore. The R code utilizes the pacman package for efficient package management. With pacman::p_load, we conveniently load a suite of essential packages including:\n\nsf for handling spatial data\ndplyr for data manipulation\nsfdep and spdep for spatial dependencies\nmapview and tmap for interactive mapping\nplotly for creating interactive plots\ntidyverse for an integrated approach to data science\nknitr for dynamic report generation\nggplot2 for sophisticated graphics\nspacetime for handling spatio-temporal data.\n\nThis suite of packages equips us with a robust set of tools necessary to conduct an in-depth and multifaceted analysis.\n\npacman::p_load(sf, dplyr, sfdep, spdep, mapview, tmap, plotly, tidyverse, knitr, ggplot2, spacetime)"
  },
  {
    "objectID": "Take-home Ex/Take-home Ex 1/Take-home_Exercise_1.html#data-importing-and-wrangling",
    "href": "Take-home Ex/Take-home Ex 1/Take-home_Exercise_1.html#data-importing-and-wrangling",
    "title": "Take-home Exercise 1: A Comprehensive Spatial Pattern Analysis of Bus Passenger Trips in Singapore",
    "section": "2.Data Importing and Wrangling",
    "text": "2.Data Importing and Wrangling\n\n2.1Aspatial Data\n\n2.1.1Importing Original Passenger Trips Data\n\nPassenger Volume by Origin Destination Bus Stops from LTA DataMall. In this study, we will focus on the latest data which is collected in Octomber, 2023.\n\nRun the code chunk below to load the corresponding csv.file.\n\n    odbus &lt;- read_csv(\"data/aspatial/origin_destination_bus_202310.csv\")\n\nUsing function glimpse() to grasp the basic structure and information of data odbus.\n\nglimpse(odbus)\n\nRows: 5,694,297\nColumns: 7\n$ YEAR_MONTH          &lt;chr&gt; \"2023-10\", \"2023-10\", \"2023-10\", \"2023-10\", \"2023-…\n$ DAY_TYPE            &lt;chr&gt; \"WEEKENDS/HOLIDAY\", \"WEEKDAY\", \"WEEKENDS/HOLIDAY\",…\n$ TIME_PER_HOUR       &lt;dbl&gt; 16, 16, 14, 14, 17, 17, 17, 7, 14, 14, 10, 20, 20,…\n$ PT_TYPE             &lt;chr&gt; \"BUS\", \"BUS\", \"BUS\", \"BUS\", \"BUS\", \"BUS\", \"BUS\", \"…\n$ ORIGIN_PT_CODE      &lt;chr&gt; \"04168\", \"04168\", \"80119\", \"80119\", \"44069\", \"2028…\n$ DESTINATION_PT_CODE &lt;chr&gt; \"10051\", \"10051\", \"90079\", \"90079\", \"17229\", \"2014…\n$ TOTAL_TRIPS         &lt;dbl&gt; 3, 5, 3, 5, 4, 1, 24, 2, 1, 7, 3, 2, 5, 1, 1, 1, 1…\n\n\nThis code converts two columns ORIGIN_PT_CODE and DESTINATION_PT_CODE, into factors, which are categorical variables in R, facilitating their use in statistical modeling and analysis.\n\nodbus$ORIGIN_PT_CODE &lt;- as.factor(odbus$ORIGIN_PT_CODE)\nodbus$DESTINATION_PT_CODE &lt;- as.factor(odbus$DESTINATION_PT_CODE)\n\nCheck again and notice that both of them are in factor data type now.\n\nglimpse(odbus)\n\nRows: 5,694,297\nColumns: 7\n$ YEAR_MONTH          &lt;chr&gt; \"2023-10\", \"2023-10\", \"2023-10\", \"2023-10\", \"2023-…\n$ DAY_TYPE            &lt;chr&gt; \"WEEKENDS/HOLIDAY\", \"WEEKDAY\", \"WEEKENDS/HOLIDAY\",…\n$ TIME_PER_HOUR       &lt;dbl&gt; 16, 16, 14, 14, 17, 17, 17, 7, 14, 14, 10, 20, 20,…\n$ PT_TYPE             &lt;chr&gt; \"BUS\", \"BUS\", \"BUS\", \"BUS\", \"BUS\", \"BUS\", \"BUS\", \"…\n$ ORIGIN_PT_CODE      &lt;fct&gt; 04168, 04168, 80119, 80119, 44069, 20281, 20281, 1…\n$ DESTINATION_PT_CODE &lt;fct&gt; 10051, 10051, 90079, 90079, 17229, 20141, 20141, 1…\n$ TOTAL_TRIPS         &lt;dbl&gt; 3, 5, 3, 5, 4, 1, 24, 2, 1, 7, 3, 2, 5, 1, 1, 1, 1…\n\n\n\n\n2.2.2Extract Commuting Flow data\nThis code chunk below filters and summarizes the odbus data to calculate the total number of passenger trips during the weekday morning peak hours (6am to 9am). It first filters for entries on weekdays, then narrows down to entries between 6am and 9am. It groups the data by the origin point code, sums up the total trips from each origin, and replaces any missing values (NA) in the resulting trip totals with 0.\n\nweekday_morning_peak &lt;- odbus %&gt;%\n  filter(DAY_TYPE == \"WEEKDAY\") %&gt;%\n  filter(TIME_PER_HOUR &gt;= 6 & TIME_PER_HOUR &lt;= 9) %&gt;%\n  group_by(ORIGIN_PT_CODE) %&gt;%\n  summarise(TRIPS = sum(TOTAL_TRIPS)) %&gt;%\n  mutate(TRIPS = ifelse(is.na(TRIPS), 0, TRIPS))\n\nThis code displays the first few rows (head) of the weekday_morning_peak data frame in a well-formatted table using the kable() function, which is commonly used for creating markdown or HTML tables in R.\n\nkable(head(weekday_morning_peak))\n\n\n\n\nORIGIN_PT_CODE\nTRIPS\n\n\n\n\n01012\n1770\n\n\n01013\n841\n\n\n01019\n1530\n\n\n01029\n2483\n\n\n01039\n2919\n\n\n01059\n1734\n\n\n\n\n\nThis code chunk below filters and summarizes the odbus data to calculate the total number of passenger trips during the weekday afternoon peak hours (5pm to 8pm). It first filters for entries on weekdays, then narrows down to entries between 6am and 9am. It groups the data by the origin point code, sums up the total trips from each origin, and replaces any missing values (NA) in the resulting trip totals with 0.\n\nweekday_afternoon_peak &lt;- odbus %&gt;%\n  filter(DAY_TYPE == \"WEEKDAY\") %&gt;%\n  filter(TIME_PER_HOUR &gt;= 17 & TIME_PER_HOUR &lt;= 20) %&gt;%\n  group_by(ORIGIN_PT_CODE) %&gt;%\n  summarise(TRIPS = sum(TOTAL_TRIPS)) %&gt;%\n  mutate(TRIPS = ifelse(is.na(TRIPS), 0, TRIPS))\n\n\nkable(head(weekday_afternoon_peak))\n\n\n\n\nORIGIN_PT_CODE\nTRIPS\n\n\n\n\n01012\n8000\n\n\n01013\n7038\n\n\n01019\n3398\n\n\n01029\n9089\n\n\n01039\n12095\n\n\n01059\n2212\n\n\n\n\n\nThis code chunk below filters and summarizes the odbus data to calculate the total number of passenger trips during the weekends/holidays morning peak hours (11am to 2pm). It first filters for entries on weekends/holidays, then narrows down to entries between 11am and 2pm. It groups the data by the origin point code, sums up the total trips from each origin, and replaces any missing values (NA) in the resulting trip totals with 0.\n\nweekend_morning_peak &lt;- odbus %&gt;%\n  filter(DAY_TYPE == \"WEEKENDS/HOLIDAY\") %&gt;%\n  filter(TIME_PER_HOUR &gt;= 11 & TIME_PER_HOUR &lt;= 14) %&gt;%\n  group_by(ORIGIN_PT_CODE) %&gt;%\n  summarise(TRIPS = sum(TOTAL_TRIPS)) %&gt;%\n  mutate(TRIPS = ifelse(is.na(TRIPS), 0, TRIPS))\n\n\nkable(head(weekend_morning_peak))\n\n\n\n\nORIGIN_PT_CODE\nTRIPS\n\n\n\n\n01012\n2177\n\n\n01013\n1818\n\n\n01019\n1536\n\n\n01029\n3217\n\n\n01039\n5408\n\n\n01059\n1159\n\n\n\n\n\nThis code chunk below filters and summarizes the odbus data to calculate the total number of passenger trips during the weekends/holidays evening peak hours (4pm to 7pm). It first filters for entries on weekends/holidays, then narrows down to entries between 4pm and 7pm. It groups the data by the origin point code, sums up the total trips from each origin, and replaces any missing values (NA) in the resulting trip totals with 0.\n\nweekend_evening_peak &lt;- odbus %&gt;%\n  filter(DAY_TYPE == \"WEEKENDS/HOLIDAY\") %&gt;%\n  filter(TIME_PER_HOUR &gt;= 16 & TIME_PER_HOUR &lt;= 19) %&gt;%\n  group_by(ORIGIN_PT_CODE) %&gt;%\n  summarise(TRIPS = sum(TOTAL_TRIPS)) %&gt;%\n  mutate(TRIPS = ifelse(is.na(TRIPS), 0, TRIPS))\n\n\nkable(head(weekend_evening_peak))\n\n\n\n\nORIGIN_PT_CODE\nTRIPS\n\n\n\n\n01012\n3061\n\n\n01013\n2770\n\n\n01019\n1685\n\n\n01029\n4063\n\n\n01039\n7263\n\n\n01059\n1118\n\n\n\n\n\nThis code calculates the total number of bus trips for each hour on weekdays, grouped by the origin point code. It filters the odbus data for weekday entries, groups the data by origin point and hour, then sums up the trips for each group, handling missing values by removing them. Finally, it replaces any resulting missing total trip values with 0, which helps in understanding hourly variations in trip counts.\n\nweekday_trips &lt;- odbus %&gt;%\n  filter(DAY_TYPE == \"WEEKDAY\") %&gt;%\n  group_by(ORIGIN_PT_CODE, TIME_PER_HOUR) %&gt;%\n  summarise(TRIPS = sum(TOTAL_TRIPS, na.rm = TRUE)) %&gt;%\n  mutate(TRIPS = ifelse(is.na(TRIPS), 0, TRIPS))\n\nThis code calculates the total number of bus trips for each hour on weekends/holidays, grouped by the origin point code. It filters the odbus data for weekends/holidays entries, groups the data by origin point and hour, then sums up the trips for each group, handling missing values by removing them. Finally, it replaces any resulting missing total trip values with 0, which helps in understanding hourly variations in trip counts.\n\nweekend_trips &lt;- odbus %&gt;%\n  filter(DAY_TYPE == \"WEEKENDS/HOLIDAY\") %&gt;%\n  group_by(ORIGIN_PT_CODE, TIME_PER_HOUR) %&gt;%\n  summarise(TRIPS = sum(TOTAL_TRIPS, na.rm = TRUE)) %&gt;%\n  mutate(TRIPS = ifelse(is.na(TRIPS), 0, TRIPS))\n\nThis code uses the rm() function in R to remove the odbus dataset from the current R environment. This is often done to declutter the workspace and free up memory, especially when the dataset is no longer needed, thereby reducing visual distraction and potential confusion with other datasets.\n\nrm(odbus)\n\n\n\n\n2.2Geospatial Data\n\n2.2.1Importing Bus Stop Location\n\nBus Stop Location from LTA DataMall: Contains information on all bus stops serviced by buses, including bus stop codes and location coordinates.\n\nThe code chunk below uses st_read() from the sf package to read the spatial data. After importing, the code transforms the spatial reference system of the bus stop data to coordinate reference system (CRS) 3414 using st_transform(), ensuring the data is in the correct format for spatial analysis within the Singapore context.\n\n    busstop &lt;- st_read(dsn = \"data/geospatial\",\n                       layer = \"BusStop\") %&gt;%\n      st_transform(crs = 3414)\n\nReading layer `BusStop' from data source \n  `D:\\KathyChiu77\\ISSS624\\Take-home Ex\\Take-home Ex 1\\data\\geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 5161 features and 3 fields\nGeometry type: POINT\nDimension:     XY\nBounding box:  xmin: 3970.122 ymin: 26482.1 xmax: 48284.56 ymax: 52983.82\nProjected CRS: SVY21\n\n\nThis code is likely part of the R mapview package, which is designed to create interactive visualizations of spatial data. By calling this function with the busstop data, an interactive map is generated where each bus stop is likely represented as a point.\n\nmapview(busstop)\n\n\n\n\n\n\nLooking at the map above:\n\nThe blank areas on the map where there are no purple points could represent regions without bus stops, non-residential ( like around Marina Bay) or industrial areas, parks ( like Bukit Timah Nature Reserve), or bodies of water where no bus service is.\nThe concentration of bus stops can give insights into urban planning, population density, and the public transport network’s reach within Singapore.\nThe interactive nature of the map allows users to zoom in and out to inspect areas of interest in more detail, which can be useful for both planning and analysis purposes.\n\n\n\n2.2.2Creating the New Hexagon Layer\nThe code creates a hexagonal grid overlay using the st_make_grid() function applied to the busstop dataset, which contains bus stop locations in Singapore. The specified cellsize determines that each hexagon in the grid will have a diameter of approximately 577.35 meters, calculated to ensure accurate hexagonal sizing. Setting square = FALSE ensures the grid is composed of hexagons, not squares.\n\nhex_grid &lt;- st_make_grid(busstop, cellsize = (4/3)*sqrt(3)*250, square = FALSE)\n\nThe provided code transforms the hexagonal grid into a spatial dataframe (sf object) using the st_sf() function, assigning the grid geometries as its spatial features. Subsequently, it appends a unique identifier to each hexagon by creating a new column, hex_id, with a sequence of numbers from 1 to the number of hexagons in the grid.\n\nhex_grid_sf &lt;- st_sf(geometry = hex_grid) %&gt;%\n  mutate(hex_id = 1:length(hex_grid))\n\nBy using the st_intersects() function, which detects the intersections between the hexagons and the bus stops, the code effectively identifies which bus stops fall within each hexagonal cell. The lengths() function is then applied to the list returned by st_intersects() to count the number of bus stops intersecting each hexagon.\n\nhex_grid_sf$bus_stop_count &lt;- lengths(st_intersects(hex_grid_sf, busstop))\n\nThe code refines the visualization by filtering out hexagons that do not contain any bus stops.\n\nhex_grid_sf &lt;- filter(hex_grid_sf, bus_stop_count &gt; 0)\n\nThe code block initializes an interactive mapping mode with tmap_mode(\"view\"), preparing for the creation of an interactive map. It then constructs the map using the tm_shape() function to specify the spatial data (hex_grid_sf) as the basis for the map. Various tm_* functions are chained together to define the map’s aesthetics and interactivity:\n\ntm_fill: This function is used to color the hexagons based on the bus_stop_count attribute, using a blue color palette and a continuous style, with semi-transparency set by alpha = 0.6.\ntm_borders: Adds grey borders to each hexagon to delineate them clearly.\ntm_layout: Adjusts the layout, setting the legend to appear on the left bottom of the map.\n\n\ntmap_mode(\"view\")\n\nmap_hexagon &lt;- tm_shape(hex_grid_sf) +\n  tm_fill(\n    col = \"bus_stop_count\",\n    palette = \"Blues\",\n    style = \"cont\",\n    title = \"Number of Bus Stops\",\n    id = \"hex_id\",\n    showNA = FALSE,\n    alpha = 0.6,\n    popup.vars = c(\n      \"Number of Bus Stops: \" = \"bus_stop_count\"\n    ),\n    popup.format = list(\n      bus_stop_count = list(format = \"f\", digits = 0)\n    )\n  ) +\n  tm_borders(col = \"grey40\", lwd = 0.7) +\n  tm_layout(legend.position = c(\"left\", \"bottom\"))\n\nmap_hexagon\n\n\n\n\n\n\nThe map visualizes the number of bus stops within each hexagonal grid cell across Singapore. The shading of the hexagons, ranging from light to dark blue, corresponds to the number of bus stops, with darker blues indicating a higher count. The darkest blue areas—Pioneer, Jurong East, Choa Chu Kang Road, Bukit Panjang Road, around Fort Canning Park and so on—suggest these are hubs with a higher density of bus stops. These locations are likely to be key transit areas that cater to significant passenger volumes due to factors like commercial activity, residential populations, and connectivity to other modes of transport. For instance, Fort Canning Park, being a popular recreational area, might also have enhanced bus services to support tourism and leisure activities.\nUses the st_write() function to save the hex_grid_sf spatial dataframe, which contains the hexagonal grid layer, to a shapefile named “hex_layer.shp” located in the “data/geospatial” directory. The append = FALSE parameter ensures that if a file with the same name already exists, it will be overwritten rather than appending the new data to the existing file.\n\nst_write(hex_grid_sf, \"data/geospatial/hex_layer.shp\", append = FALSE)\n\nDeleting layer `hex_layer' using driver `ESRI Shapefile'\nWriting layer `hex_layer' to data source \n  `data/geospatial/hex_layer.shp' using driver `ESRI Shapefile'\nWriting 1237 features with 2 fields and geometry type Polygon.\n\n\nmap_hexagon and hex_grid are removed from R environment.\n\nrm(map_hexagon, hex_grid)"
  },
  {
    "objectID": "Take-home Ex/Take-home Ex 1/Take-home_Exercise_1.html#integrating-passenger-trips-with-hexagonal-grids-for-multidimensional-transit-analysis",
    "href": "Take-home Ex/Take-home Ex 1/Take-home_Exercise_1.html#integrating-passenger-trips-with-hexagonal-grids-for-multidimensional-transit-analysis",
    "title": "Take-home Exercise 1: A Comprehensive Spatial Pattern Analysis of Bus Passenger Trips in Singapore",
    "section": "3.Integrating Passenger Trips with Hexagonal Grids for Multidimensional Transit Analysis",
    "text": "3.Integrating Passenger Trips with Hexagonal Grids for Multidimensional Transit Analysis\n\n3.1Weekday Morning Peak\nTo align bus stops with the corresponding hexagonal grid cells they are located in, a spatial join is executed using the st_join function from the sf package.\n\nbusstop_hex &lt;- st_join(busstop, hex_grid_sf)\n\nThis code merges two datasets: busstop_hex, which contains bus stops assigned to their respective hexagons, and weekday_morning_peak, which includes data on bus trips during weekday morning peak hours. The inner_join() function links the records based on the matching bus stop numbers (BUS_STOP_N) and origin point codes (ORIGIN_PT_CODE). The resulting weekday_morning_trips contains only the records that have a corresponding match in both dataframes, specifically for bus stops active during weekday morning peak times.\n\nweekday_morning_trips &lt;- busstop_hex %&gt;%\n  inner_join(weekday_morning_peak, by = c(\"BUS_STOP_N\" = \"ORIGIN_PT_CODE\"))\n\nThe code is designed to identify duplicate records in the weekday_morning_trips dataframe. It groups the data by all columns using group_by_all(), then filters for groups with more than one entry using filter(n() &gt; 1), which would indicate duplicates. After removing the grouping with ungroup(), it uses glimpse(duplicate) to provide a quick overview of the resulting dataframe. The output indicates that no rows are returned, meaning there are no duplicate entries.\n\nduplicate &lt;- weekday_morning_trips %&gt;%\n  group_by_all() %&gt;%\n  filter(n()&gt;1) %&gt;%\n  ungroup()\nglimpse(duplicate)\n\nRows: 0\nColumns: 7\n$ BUS_STOP_N     &lt;chr&gt; \n$ BUS_ROOF_N     &lt;chr&gt; \n$ LOC_DESC       &lt;chr&gt; \n$ hex_id         &lt;int&gt; \n$ bus_stop_count &lt;int&gt; \n$ TRIPS          &lt;dbl&gt; \n$ geometry       &lt;GEOMETRY [m]&gt; \n\n\nThis code aggregates the trip data for weekday mornings by hexagon grid cells. It groups the weekday_morning_trips dataframe by hex_id (each hexagon’s unique identifier), then calculates the sum of trips for each hexagon, ensuring that any missing values (NA) are not included in the sum (na.rm = TRUE). In case there are any NA values resulting from the summarisation, it uses mutate() with ifelse to replace them with zero. The final output, hex_weekday_morning, contains the total number of trips that originated in each hexagon during weekday morning peak hours.\n\nhex_weekday_morning &lt;- weekday_morning_trips %&gt;%\n  group_by(hex_id) %&gt;%\n  summarise(weekday_morning_trips = sum(TRIPS, na.rm = TRUE)) %&gt;%\n  mutate(weekday_morning_trips = ifelse(is.na(weekday_morning_trips), 0, weekday_morning_trips))\n\nThe geometry column is temporarily removed from the hex_weekday_morning dataset to prepare for joining, creating a non-spatial dataframe hex_weekday_morning_df. This is done because the geometry column can sometimes complicate joins due to its complex structure.\nA spatial join is then performed using inner_join from the dplyr package, which merges the trip summary data in hex_weekday_morning_df back into the hex_grid_sf spatial dataframe based on the hex_id column. This enriches the hexagon grid with the aggregated trip data, allowing for spatial analysis of trips within each hexagon.\n\n# Remove the geometry column temporarily for the join\nhex_weekday_morning_df &lt;- hex_weekday_morning %&gt;% \n  st_set_geometry(NULL)\n# Perform the join using dplyr's left_join\nhex_grid_sf &lt;- hex_grid_sf %&gt;%\n  inner_join(hex_weekday_morning_df, by = \"hex_id\")\n\nThe next code chunk is set to generate a static map that visualizes the distribution of weekday morning peak passenger trips across the hexagonal grid, using varying shades of blue to represent the data quantiles\n\ntmap_mode(\"plot\")\ntm_shape(hex_grid_sf) +\n  tm_fill(\"weekday_morning_trips\", \n          style = \"quantile\", \n          palette = \"Blues\",\n          title = \"Passenger trips\") +\n  tm_layout(main.title = \"Weekday Morning Peak Passenger Trips\",\n            main.title.position = \"center\",\n            main.title.size = 1.2,\n            legend.height = 0.45, \n            legend.width = 0.35,\n            frame = TRUE) +\n  tm_borders(alpha = 0.5) +\n  tm_compass(type=\"8star\", size = 2) +\n  tm_scale_bar() +\n  tm_grid(alpha =0.2) +\n  tm_credits(\"Source: LTA DataMall\", position = c(\"left\", \"bottom\"))\n\n\n\n\nThe image depicts a hexagon-based choropleth map of Singapore, illustrating the number of passenger trips made during weekday morning peak hours. From this map, we can conclude that there are significant variations in public bus usage across different areas. High-density areas, likely to be central and suburban commercial or residential hubs, show a larger number of trips, indicating these are key focus areas for transit services. Lighter shaded areas may correspond to less populated or industrial regions with fewer bus trips.\n\n\n3.2Weekday Afternoon Peak\nFor weekday afternoon peak hours, the weekday_afternoon_trips dataframe is created by merging busstop_hex with data on afternoon trips, connecting bus stops to their trip counts using an inner join.\n\nweekday_afternoon_trips &lt;- busstop_hex %&gt;%\n  inner_join(weekday_afternoon_peak, by = c(\"BUS_STOP_N\" = \"ORIGIN_PT_CODE\"))\n\nFor weekday afternoon trips, the code checks for duplicates in the weekday_afternoon_trips dataframe, and confirms there are none.\n\nduplicate &lt;- weekday_morning_trips %&gt;%\n  group_by_all() %&gt;%\n  filter(n()&gt;1) %&gt;%\n  ungroup()\nglimpse(duplicate)\n\nRows: 0\nColumns: 7\n$ BUS_STOP_N     &lt;chr&gt; \n$ BUS_ROOF_N     &lt;chr&gt; \n$ LOC_DESC       &lt;chr&gt; \n$ hex_id         &lt;int&gt; \n$ bus_stop_count &lt;int&gt; \n$ TRIPS          &lt;dbl&gt; \n$ geometry       &lt;GEOMETRY [m]&gt; \n\n\nThe hex_weekday_afternoon data sums up afternoon trips for each hexagon on weekdays, replacing any missing data with zeros.\n\nhex_weekday_afternoon &lt;- weekday_afternoon_trips %&gt;%\n  group_by(hex_id) %&gt;%\n  summarise(weekday_afternoon_trips = sum(TRIPS, na.rm = TRUE)) %&gt;%\n  mutate(weekday_afternoon_trips = ifelse(is.na(weekday_afternoon_trips), 0, weekday_afternoon_trips))\n\nThe hex_weekday_afternoon dataframe is joined with the spatial grid, merging afternoon trip data based on hexagon IDs.\n\n# Remove the geometry column temporarily for the join\nhex_weekday_afternoon_df &lt;- hex_weekday_afternoon %&gt;% \n  st_set_geometry(NULL)\n\n# Perform the join using dplyr's left_join\nhex_grid_sf &lt;- hex_grid_sf %&gt;%\n  inner_join(hex_weekday_afternoon_df, by = \"hex_id\")\n\nA map will display the weekday afternoon peak trips, shaded in blue to show the number of passengers.\n\ntm_shape(hex_grid_sf) +\n  tm_fill(\"weekday_afternoon_trips\", \n          style = \"quantile\", \n          palette = \"Blues\",\n          title = \"Passenger trips\") +\n  tm_layout(main.title = \"Weekday Afternoon Peak Passenger Trips\",\n            main.title.position = \"center\",\n            main.title.size = 1.2,\n            legend.height = 0.45, \n            legend.width = 0.35,\n            frame = TRUE) +\n  tm_borders(alpha = 0.5) +\n  tm_compass(type=\"8star\", size = 2) +\n  tm_scale_bar() +\n  tm_grid(alpha =0.2) +\n  tm_credits(\"Source: LTA DataMall\", position = c(\"left\", \"bottom\"))\n\n\n\n\nThe afternoon peak map for weekdays indicates a different pattern of passenger trips across Singapore compared to the morning peak. Notably, the overall trip counts appear to be higher in the afternoon, as suggested by a greater prevalence of darker blues, possibly due to people returning from work or school. The central areas remain highly active during both time slots, reflecting consistent transit usage in these urban hubs. However, there is a visible increase in activity in the outskirts in the afternoon, suggesting a movement of people towards residential areas after the workday. This contrast may reflect Singapore’s daily work commute patterns, with morning peaks focused on entry into commercial districts and afternoon peaks dispersing towards suburban residential zones.\n\n\n3.3Weekend Morning Peak\nThe weekend_morning_trips dataframe compiles weekend morning data by joining busstop_hex with morning trip information, ensuring each bus stop’s weekend activity is accounted for.\n\nweekend_morning_trips &lt;- busstop_hex %&gt;%\n  inner_join(weekend_morning_peak, by = c(\"BUS_STOP_N\" = \"ORIGIN_PT_CODE\"))\n\nIn the weekend_morning_trips dataframe, the same method ensures no trip entries are repeated for weekend mornings.\n\nduplicate &lt;- weekend_morning_trips %&gt;%\n  group_by_all() %&gt;%\n  filter(n()&gt;1) %&gt;%\n  ungroup()\nglimpse(duplicate)\n\nRows: 0\nColumns: 7\n$ BUS_STOP_N     &lt;chr&gt; \n$ BUS_ROOF_N     &lt;chr&gt; \n$ LOC_DESC       &lt;chr&gt; \n$ hex_id         &lt;int&gt; \n$ bus_stop_count &lt;int&gt; \n$ TRIPS          &lt;dbl&gt; \n$ geometry       &lt;GEOMETRY [m]&gt; \n\n\nWeekend morning trips are totaled in hex_weekend_morning for each hexagon, with missing values set to zero.\n\nhex_weekend_morning &lt;- weekend_morning_trips %&gt;%\n  group_by(hex_id) %&gt;%\n  summarise(weekend_morning_trips = sum(TRIPS, na.rm = TRUE)) %&gt;%\n  mutate(weekend_morning_trips = ifelse(is.na(weekend_morning_trips), 0, weekend_morning_trips))\n\nFor weekend mornings, trip summaries are integrated into the spatial grid through a join on hex_weekend_morning.\n\n# Remove the geometry column temporarily for the join\nhex_weekend_morning_df &lt;- hex_weekend_morning %&gt;% \n  st_set_geometry(NULL)\n\n# Perform the join using dplyr's left_join\nhex_grid_sf &lt;- hex_grid_sf %&gt;%\n  inner_join(hex_weekend_morning_df, by = \"hex_id\")\n\nThe weekend morning peak trips will be depicted on a map with a blue gradient indicating trip frequencies.\n\ntm_shape(hex_grid_sf) +\n  tm_fill(\"weekend_morning_trips\", \n          style = \"quantile\", \n          palette = \"Blues\",\n          title = \"Passenger trips\") +\n  tm_layout(main.title = \"Weekend & Holiday Morning Peak Passenger Trips\",\n            main.title.position = \"center\",\n            main.title.size = 1.2,\n            legend.height = 0.45, \n            legend.width = 0.35,\n            frame = TRUE) +\n  tm_borders(alpha = 0.5) +\n  tm_compass(type=\"8star\", size = 2) +\n  tm_scale_bar() +\n  tm_grid(alpha =0.2) +\n  tm_credits(\"Source: LTA DataMall\", position = c(\"left\", \"bottom\"))\n\n\n\n\nThe map for weekend & holiday morning peak passenger trips in Singapore exhibits a distinct distribution when compared to the weekday morning. The range of trip counts is generally lower, as evidenced by fewer areas with the darkest shade of blue, which could be indicative of a reduced volume of commuters traveling to work or school. There appears to be a more uniform spread of medium-density travel across the island, possibly reflecting leisure or non-work-related travel patterns. The decreased intensity in central business districts and increased activity in residential or recreational areas highlight a shift in transit use, corresponding with the non-working nature of weekends in Singapore.\n\n\n3.4Weekend Evening Peak\nweekend_evening_trips brings together busstop_hex and data on evening bus trips during the weekend, combining the datasets to reflect each hexagon’s bus stop usage.\n\nweekend_evening_trips &lt;- busstop_hex %&gt;%\n  inner_join(weekend_evening_peak, by = c(\"BUS_STOP_N\" = \"ORIGIN_PT_CODE\"))\n\nSimilarly, the weekend_evening_trips dataframe is verified to be free of duplicates for bus trips in the weekend evenings.\n\nduplicate &lt;- weekend_evening_trips %&gt;%\n  group_by_all() %&gt;%\n  filter(n()&gt;1) %&gt;%\n  ungroup()\nglimpse(duplicate)\n\nRows: 0\nColumns: 7\n$ BUS_STOP_N     &lt;chr&gt; \n$ BUS_ROOF_N     &lt;chr&gt; \n$ LOC_DESC       &lt;chr&gt; \n$ hex_id         &lt;int&gt; \n$ bus_stop_count &lt;int&gt; \n$ TRIPS          &lt;dbl&gt; \n$ geometry       &lt;GEOMETRY [m]&gt; \n\n\nhex_weekend_evening compiles the evening trip counts for each hexagon on weekends, accounting for and correcting any missing entries.\n\nhex_weekend_evening &lt;- weekend_evening_trips %&gt;%\n  group_by(hex_id) %&gt;%\n  summarise(weekend_evening_trips = sum(TRIPS, na.rm = TRUE)) %&gt;%\n  mutate(weekend_evening_trips = ifelse(is.na(weekend_evening_trips), 0, weekend_evening_trips))\n\nEvening trip data for the weekend is combined with the hexagonal grid in the hex_weekend_evening dataframe using a similar join method.\n\n# Remove the geometry column temporarily for the join\nhex_weekend_evening_df &lt;- hex_weekend_evening %&gt;% \n  st_set_geometry(NULL)\n\n# Perform the join using dplyr's left_join\nhex_grid_sf &lt;- hex_grid_sf %&gt;%\n  inner_join(hex_weekend_evening_df, by = \"hex_id\")\n\nFor the weekend evening, a map will illustrate passenger trips with blue shades reflecting the volume of travel.\n\ntm_shape(hex_grid_sf) +\n  tm_fill(\"weekend_evening_trips\", \n          style = \"quantile\", \n          palette = \"Blues\",\n          title = \"Passenger trips\") +\n  tm_layout(main.title = \"Weekend & Holiday Evening Peak Passenger Trips\",\n            main.title.position = \"center\",\n            main.title.size = 1.2,\n            legend.height = 0.45, \n            legend.width = 0.35,\n            frame = TRUE) +\n  tm_borders(alpha = 0.5) +\n  tm_compass(type=\"8star\", size = 2) +\n  tm_scale_bar() +\n  tm_grid(alpha =0.2) +\n  tm_credits(\"Source: LTA DataMall\", position = c(\"left\", \"bottom\"))\n\n\n\n\nThe weekend and holiday evening peak passenger trip map for Singapore reveals a different dynamic compared to the weekday afternoon. The trip densities are more evenly distributed across the island, with fewer areas of intense dark blue, which may reflect a more recreational or social travel pattern as opposed to the work-related commutes seen on weekdays. There’s also a notable presence of trips in areas that could be associated with leisure destinations or residential areas, which aligns with typical weekend and holiday evening activities. The lighter shades in the central business district areas suggest a lower volume of commuter traffic compared to the bustling weekday afternoons. This shift highlights the transition from work-focused movement to more leisurely and dispersed travel behavior in the evenings of weekends and holidays in Singapore.\nThe code provided is removing a list of data frames and variables related to various analyses of bus trips during different times of the day and week. By executing this command, the user is clearing the R environment of these specific objects, which helps declutter the workspace, potentially freeing up memory, and makes it easier to focus on the remaining data and analyses without the distraction of no longer needed datasets.\n\nrm(hex_weekday_afternoon, hex_weekday_morning, hex_weekend_evening, hex_weekend_morning, hex_weekday_afternoon_df, hex_weekday_morning_df, hex_weekend_evening_df, hex_weekend_morning_df, weekday_afternoon_peak, weekday_afternoon_trips, weekday_morning_peak, weekday_morning_trips, weekend_evening_peak, weekend_evening_trips, weekend_morning_peak, weekend_morning_trips)"
  },
  {
    "objectID": "Take-home Ex/Take-home Ex 1/Take-home_Exercise_1.html#global-measures-of-spatial-association",
    "href": "Take-home Ex/Take-home Ex 1/Take-home_Exercise_1.html#global-measures-of-spatial-association",
    "title": "Take-home Exercise 1: A Comprehensive Spatial Pattern Analysis of Bus Passenger Trips in Singapore",
    "section": "Global Measures of Spatial Association",
    "text": "Global Measures of Spatial Association\n\nDeriving fixed distance weights\n\ngeo &lt;- sf::st_geometry(hex_grid_sf)\nnb &lt;- st_knn(geo, longlat = TRUE)\ndists &lt;- unlist(st_nb_dists(geo, nb))\n\n\nsummary(dists)\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n  577.4   577.4   577.4   584.1   577.4  4358.9 \n\n\n\nwm_fd &lt;- hex_grid_sf %&gt;%\n  mutate(nb = st_dist_band(geometry,\n                           upper = 4359),\n               wt = st_weights(nb),\n               .before = 1)\n\n\n\nDeriving adaptive distance weights\n\nwm_ad &lt;- hex_grid_sf %&gt;% \n  mutate(nb = st_knn(geometry,\n                     k=6),\n         wt = st_weights(nb),\n               .before = 1)\n\n\n\nCalculate inverse distance weights\n\nwm_idw &lt;- hex_grid_sf %&gt;%\n  mutate(nb = st_contiguity(geometry),\n         wts = st_inverse_distance(nb, geometry,\n                                   scale = 1,\n                                   alpha = 1),\n         .before = 1)\n\n\n\nPerforming Global Moran’sI test\nIn general, Moran’s I test will be performed instead of just computing the Moran’s I statistics. With sfdep package, Moran’s I test can be performed by using global_moran_test() as shown in the code chunk below.\n\nglobal_moran_test(wm_idw$weekday_morning_trips,\n                       wm_idw$nb,\n                       wm_idw$wts,\n                       zero.policy = TRUE)\n\n\n    Moran I test under randomisation\n\ndata:  x  \nweights: listw  n reduced by no-neighbour observations\n  \n\nMoran I statistic standard deviate = 13.666, p-value &lt; 2.2e-16\nalternative hypothesis: greater\nsample estimates:\nMoran I statistic       Expectation          Variance \n     0.2562577532     -0.0008445946      0.0003539315 \n\n\n\nglobal_moran_test(wm_idw$weekday_afternoon_trips,\n                       wm_idw$nb,\n                       wm_idw$wts,\n                       zero.policy = TRUE)\n\n\n    Moran I test under randomisation\n\ndata:  x  \nweights: listw  n reduced by no-neighbour observations\n  \n\nMoran I statistic standard deviate = 3.0872, p-value = 0.00101\nalternative hypothesis: greater\nsample estimates:\nMoran I statistic       Expectation          Variance \n     0.0564036260     -0.0008445946      0.0003438615 \n\n\n\nglobal_moran_test(wm_idw$weekend_morning_trips,\n                       wm_idw$nb,\n                       wm_idw$wts,\n                       zero.policy = TRUE)\n\n\n    Moran I test under randomisation\n\ndata:  x  \nweights: listw  n reduced by no-neighbour observations\n  \n\nMoran I statistic standard deviate = 9.5213, p-value &lt; 2.2e-16\nalternative hypothesis: greater\nsample estimates:\nMoran I statistic       Expectation          Variance \n     0.1778617811     -0.0008445946      0.0003522790 \n\n\n\nglobal_moran_test(wm_idw$weekend_evening_trips,\n                       wm_idw$nb,\n                       wm_idw$wts,\n                       zero.policy = TRUE)\n\n\n    Moran I test under randomisation\n\ndata:  x  \nweights: listw  n reduced by no-neighbour observations\n  \n\nMoran I statistic standard deviate = 6.1501, p-value = 3.872e-10\nalternative hypothesis: greater\nsample estimates:\nMoran I statistic       Expectation          Variance \n     0.1138372546     -0.0008445946      0.0003477194 \n\n\n\n\nPerforming Global Moran’I permutation test\nIt is always a good practice to use set.seed() before performing simulation. This is to ensure that the computation is reproducible.\n\nset.seed(1234)\n\nNext, global_moran_perm() is used to perform Monte Carlo simulation.\n\nglobal_moran_perm(wm_idw$weekday_morning_trips,\n                       wm_idw$nb,\n                       wm_idw$wts,\n                       zero.policy = TRUE,\n                  nsim = 99)\n\n\n    Monte-Carlo simulation of Moran I\n\ndata:  x \nweights: listw  \nnumber of simulations + 1: 100 \n\nstatistic = 0.25626, observed rank = 100, p-value &lt; 2.2e-16\nalternative hypothesis: two.sided\n\n\n\nglobal_moran_perm(wm_idw$weekday_afternoon_trips,\n                       wm_idw$nb,\n                       wm_idw$wts,\n                       zero.policy = TRUE,\n                  nsim = 99)\n\n\n    Monte-Carlo simulation of Moran I\n\ndata:  x \nweights: listw  \nnumber of simulations + 1: 100 \n\nstatistic = 0.056404, observed rank = 98, p-value = 0.04\nalternative hypothesis: two.sided\n\n\n\nglobal_moran_perm(wm_idw$weekend_morning_trips,\n                       wm_idw$nb,\n                       wm_idw$wts,\n                       zero.policy = TRUE,\n                  nsim = 99)\n\n\n    Monte-Carlo simulation of Moran I\n\ndata:  x \nweights: listw  \nnumber of simulations + 1: 100 \n\nstatistic = 0.17786, observed rank = 100, p-value &lt; 2.2e-16\nalternative hypothesis: two.sided\n\n\n\nglobal_moran_perm(wm_idw$weekend_evening_trips,\n                       wm_idw$nb,\n                       wm_idw$wts,\n                       zero.policy = TRUE,\n                  nsim = 99)\n\n\n    Monte-Carlo simulation of Moran I\n\ndata:  x \nweights: listw  \nnumber of simulations + 1: 100 \n\nstatistic = 0.11384, observed rank = 100, p-value &lt; 2.2e-16\nalternative hypothesis: two.sided"
  },
  {
    "objectID": "Take-home Ex/Take-home Ex 1/Take-home_Exercise_1.html#compute-and-visualize-local-morans-i",
    "href": "Take-home Ex/Take-home Ex 1/Take-home_Exercise_1.html#compute-and-visualize-local-morans-i",
    "title": "Take-home Exercise 1: A Comprehensive Spatial Pattern Analysis of Bus Passenger Trips in Singapore",
    "section": "Compute and Visualize local Moran’s I",
    "text": "Compute and Visualize local Moran’s I\n\nlisa_wdm &lt;- wm_idw %&gt;% \n  mutate(local_moran = local_moran(\n    weekday_morning_trips, nb, wts, nsim = 99, zero.policy = TRUE),\n         .before = 1) %&gt;%\n  unnest(local_moran)\n\n\ntmap_mode(\"plot\")\nmap1 &lt;- tm_shape(lisa_wdm) +\n  tm_fill(\"ii\") + \n  tm_borders(alpha = 0.5) +\n  tm_view(set.zoom.limits = c(6,8)) +\n  tm_layout(main.title = \"local Moran's I of Weekday Morning Trips\",\n            main.title.size = 0.8)\n\nmap2 &lt;- tm_shape(lisa_wdm) +\n  tm_fill(\"p_ii_sim\",\n          breaks = c(0, 0.001, 0.01, 0.05, 1),\n              labels = c(\"0.001\", \"0.01\", \"0.05\", \"Not sig\")) + \n  tm_borders(alpha = 0.5) +\n  tm_layout(main.title = \"p-value of local Moran's I\",\n            main.title.size = 0.8)\n\ntmap_arrange(map1, map2, ncol = 2)\n\n\n\n\n\nlisa_wdm_sig &lt;- lisa_wdm  %&gt;%\n  filter(p_ii_sim &lt; 0.05)\ntmap_mode(\"plot\")\ntm_shape(lisa_wdm) +\n  tm_polygons() +\n  tm_borders(alpha = 0.5) +\ntm_shape(lisa_wdm_sig) +\n  tm_fill(\"mean\") + \n  tm_borders(alpha = 0.4)\n\n\n\n\n\nlisa_wda &lt;- wm_idw %&gt;% \n  mutate(local_moran = local_moran(\n    weekday_afternoon_trips, nb, wts, nsim = 99, zero.policy = TRUE),\n         .before = 1) %&gt;%\n  unnest(local_moran)\n\n\ntmap_mode(\"plot\")\nmap1 &lt;- tm_shape(lisa_wda) +\n  tm_fill(\"ii\") + \n  tm_borders(alpha = 0.5) +\n  tm_view(set.zoom.limits = c(6,8)) +\n  tm_layout(main.title = \"local Moran's I of Weekday Afternoon Trips\",\n            main.title.size = 0.8)\n\nmap2 &lt;- tm_shape(lisa_wda) +\n  tm_fill(\"p_ii_sim\",\n          breaks = c(0, 0.001, 0.01, 0.05, 1),\n              labels = c(\"0.001\", \"0.01\", \"0.05\", \"Not sig\")) + \n  tm_borders(alpha = 0.5) +\n  tm_layout(main.title = \"p-value of local Moran's I\",\n            main.title.size = 0.8)\n\ntmap_arrange(map1, map2, ncol = 2)\n\n\n\n\n\nlisa_wda_sig &lt;- lisa_wda  %&gt;%\n  filter(p_ii_sim &lt; 0.05)\ntmap_mode(\"plot\")\ntm_shape(lisa_wda) +\n  tm_polygons() +\n  tm_borders(alpha = 0.5) +\ntm_shape(lisa_wdm_sig) +\n  tm_fill(\"mean\") + \n  tm_borders(alpha = 0.4)\n\n\n\n\n\nlisa_wem &lt;- wm_idw %&gt;% \n  mutate(local_moran = local_moran(\n    weekend_morning_trips, nb, wts, nsim = 99, zero.policy = TRUE),\n         .before = 1) %&gt;%\n  unnest(local_moran)\n\n\ntmap_mode(\"plot\")\nmap1 &lt;- tm_shape(lisa_wem) +\n  tm_fill(\"ii\") + \n  tm_borders(alpha = 0.5) +\n  tm_view(set.zoom.limits = c(6,8)) +\n  tm_layout(main.title = \"local Moran's I of Weekend Morning Trips\",\n            main.title.size = 0.8)\n\nmap2 &lt;- tm_shape(lisa_wem) +\n  tm_fill(\"p_ii_sim\",\n          breaks = c(0, 0.001, 0.01, 0.05, 1),\n              labels = c(\"0.001\", \"0.01\", \"0.05\", \"Not sig\")) + \n  tm_borders(alpha = 0.5) +\n  tm_layout(main.title = \"p-value of local Moran's I\",\n            main.title.size = 0.8)\n\ntmap_arrange(map1, map2, ncol = 2)\n\n\n\n\n\nlisa_wem_sig &lt;- lisa_wem  %&gt;%\n  filter(p_ii_sim &lt; 0.05)\ntmap_mode(\"plot\")\ntm_shape(lisa_wem) +\n  tm_polygons() +\n  tm_borders(alpha = 0.5) +\ntm_shape(lisa_wem_sig) +\n  tm_fill(\"mean\") + \n  tm_borders(alpha = 0.4)\n\n\n\n\n\nlisa_wee &lt;- wm_idw %&gt;% \n  mutate(local_moran = local_moran(\n    weekend_evening_trips, nb, wts, nsim = 99, zero.policy = TRUE),\n         .before = 1) %&gt;%\n  unnest(local_moran)\n\n\ntmap_mode(\"plot\")\nmap1 &lt;- tm_shape(lisa_wee) +\n  tm_fill(\"ii\") + \n  tm_borders(alpha = 0.5) +\n  tm_view(set.zoom.limits = c(6,8)) +\n  tm_layout(main.title = \"local Moran's I of Weekend Evening Trips\",\n            main.title.size = 0.8)\n\nmap2 &lt;- tm_shape(lisa_wee) +\n  tm_fill(\"p_ii_sim\",\n          breaks = c(0, 0.001, 0.01, 0.05, 1),\n              labels = c(\"0.001\", \"0.01\", \"0.05\", \"Not sig\")) + \n  tm_borders(alpha = 0.5) +\n  tm_layout(main.title = \"p-value of local Moran's I\",\n            main.title.size = 0.8)\n\ntmap_arrange(map1, map2, ncol = 2)\n\n\n\n\n\nlisa_wee_sig &lt;- lisa_wee  %&gt;%\n  filter(p_ii_sim &lt; 0.05)\ntmap_mode(\"plot\")\ntm_shape(lisa_wee) +\n  tm_polygons() +\n  tm_borders(alpha = 0.5) +\ntm_shape(lisa_wee_sig) +\n  tm_fill(\"mean\") + \n  tm_borders(alpha = 0.4)\n\n\n\n\n\nrm(lisa_wda, lisa_wda_sig, lisa_wdm, lisa_wdm_sig, lisa_wee, lisa_wee_sig, lisa_wem, lisa_wem_sig, map1, map2, nb, wm_ad, wm_fd, wm_idw, dists)"
  },
  {
    "objectID": "Take-home Ex/Take-home Ex 1/Take-home_Exercise_1.html#reference",
    "href": "Take-home Ex/Take-home Ex 1/Take-home_Exercise_1.html#reference",
    "title": "Take-home Exercise 1: A Comprehensive Spatial Pattern Analysis of Bus Passenger Trips in Singapore",
    "section": "Reference",
    "text": "Reference\nhttps://desktop.arcgis.com/zh-cn/arcmap/latest/tools/spatial-statistics-toolbox/h-whyhexagons.htm\nhttps://urbandatapalette.com/post/2021-08-tessellation-sf/"
  }
]