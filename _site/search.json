[
  {
    "objectID": "Take-home Ex/Take-home Ex 2/Take-home_Ex_2.html",
    "href": "Take-home Ex/Take-home Ex 2/Take-home_Ex_2.html",
    "title": "Take-home Exercise 2: Analyzing the Dynamics of Bus Commute Flow and Spatial Interaction in Singapore",
    "section": "",
    "text": "The inquiry focuses on the key motivators prompting city residents to rise early for their daily commutes from home to work, and the consequences of discontinuing public bus services along specific routes. These issues represent significant challenges for transport operators and urban planners.\nTraditionally, understanding these dynamics involved conducting extensive commuter surveys. These surveys, however, are expensive, time-intensive, and laborious. Moreover, the data collected often requires extensive processing and analysis, leading to reports that are frequently outdated by the time they are completed.\nWith the digitalization of urban infrastructure, including public buses, mass rapid transit systems, public utilities, and roads, new opportunities for data collection arise. The integration of pervasive computing technologies like GPS in vehicles and SMART cards among public transport users allows for detailed tracking of movement patterns across time and space.\nDespite this, the rapid accumulation of geospatial data has overwhelmed planners’ capacity to effectively analyze and convert it into valuable insights. This inefficiency negatively impacts the return on investment in data collection and management."
  },
  {
    "objectID": "Take-home Ex/Take-home Ex 2/Take-home_Ex_2.html#setting-the-scene",
    "href": "Take-home Ex/Take-home Ex 2/Take-home_Ex_2.html#setting-the-scene",
    "title": "Take-home Exercise 2: Analyzing the Dynamics of Bus Commute Flow and Spatial Interaction in Singapore",
    "section": "",
    "text": "The inquiry focuses on the key motivators prompting city residents to rise early for their daily commutes from home to work, and the consequences of discontinuing public bus services along specific routes. These issues represent significant challenges for transport operators and urban planners.\nTraditionally, understanding these dynamics involved conducting extensive commuter surveys. These surveys, however, are expensive, time-intensive, and laborious. Moreover, the data collected often requires extensive processing and analysis, leading to reports that are frequently outdated by the time they are completed.\nWith the digitalization of urban infrastructure, including public buses, mass rapid transit systems, public utilities, and roads, new opportunities for data collection arise. The integration of pervasive computing technologies like GPS in vehicles and SMART cards among public transport users allows for detailed tracking of movement patterns across time and space.\nDespite this, the rapid accumulation of geospatial data has overwhelmed planners’ capacity to effectively analyze and convert it into valuable insights. This inefficiency negatively impacts the return on investment in data collection and management."
  },
  {
    "objectID": "Take-home Ex/Take-home Ex 2/Take-home_Ex_2.html#motivation-and-objective",
    "href": "Take-home Ex/Take-home Ex 2/Take-home_Ex_2.html#motivation-and-objective",
    "title": "Take-home Exercise 2: Analyzing the Dynamics of Bus Commute Flow and Spatial Interaction in Singapore",
    "section": "Motivation and Objective",
    "text": "Motivation and Objective\nThe purpose of this take-home project is twofold. First, it addresses the gap in applied research demonstrating the integration, analysis, and modeling of the increasingly available open data for effective policy-making. Despite the abundance of such data, there is a noticeable absence of practical studies showcasing its potential use in policy decisions.\nSecond, the project aims to fill the void in practical research illustrating the application of geospatial data science and analysis (GDSA) in decision-making processes.\nTherefore, the assignment involves conducting a case study to showcase the value of GDSA. This will involve synthesizing publicly accessible data from various sources to construct spatial interaction models. These models will be used to identify and analyze factors influencing the urban mobility patterns of public bus transit."
  },
  {
    "objectID": "Take-home Ex/Take-home Ex 2/Take-home_Ex_2.html#getting-started",
    "href": "Take-home Ex/Take-home Ex 2/Take-home_Ex_2.html#getting-started",
    "title": "Take-home Exercise 2: Analyzing the Dynamics of Bus Commute Flow and Spatial Interaction in Singapore",
    "section": "1.Getting Started",
    "text": "1.Getting Started\nThe code snippet shown is responsible for loading various packages that provide essential tools and functions for the analysis.\n\npacman::p_load(tmap, sf, dplyr, DT, sp,\n               stplanr, performance, mapview,\n               ggpubr, tidyverse, httr,\n               units, reshape2)\n\n\npacman::p_load: This function from the pacman package streamlines the process of loading multiple R packages. If a package is not already installed, p_load will install it before loading.\ntmap: Utilized for creating thematic maps, essential in visualizing geospatial data.\nsf: Stands for “simple features” and is used for handling and analyzing geospatial data.\ndplyr: A part of the tidyverse collection, this package is instrumental in data manipulation tasks like filtering, selecting, and summarizing data.\nDT: Provides an R interface to the JavaScript library “DataTables”, enabling interactive display of data in tables.\nsp: Offers classes and methods for spatial data, crucial for handling spatial points, lines, and polygons.\nstplanr: Specifically designed for sustainable transport planning with spatial data.\nperformance: Useful for assessing and comparing the performance of statistical models.\nmapview: Facilitates interactive viewing of spatial data in R.\nggpubr: A part of the ggplot2 ecosystem, this package provides additional functions for creating publication-ready plots.\ntidyverse: A collection of R packages designed for data science, providing tools for data manipulation, visualization, and more.\nhttr: Used for working with HTTP protocols to access web resources.\nunits: Deals with measurement units, crucial for handling and converting between different units of measurement in spatial data.\nreshape2: Aids in reshaping data, transitioning between wide and long formats, which is often necessary in data analysis.\n\nEach of these packages plays a specific role in the analysis, ranging from data manipulation and visualization to handling spatial and web-based data."
  },
  {
    "objectID": "Take-home Ex/Take-home Ex 2/Take-home_Ex_2.html#data-importing",
    "href": "Take-home Ex/Take-home Ex 2/Take-home_Ex_2.html#data-importing",
    "title": "Take-home Exercise 2: Analyzing the Dynamics of Bus Commute Flow and Spatial Interaction in Singapore",
    "section": "2.Data Importing",
    "text": "2.Data Importing\n\n2.1Geospatial Data Importing\nThis R code snippet is focused on importing and transforming geospatial data related to Singapore’s bus stops and Metropolitan Planning Strategy Zones (MPSZ) for the year 2019. Using st_read from the sf package, it loads the BusStop and MPSZ-2019 layers from a specified directory (data/geospatial). Both datasets are then transformed to the local Singapore coordinate reference system (CRS code 3414) using st_transform.\n\nbusstop &lt;- st_read(dsn = \"data/geospatial\",\n                   layer = \"BusStop\") %&gt;%\n  st_transform(crs = 3414)\n\nReading layer `BusStop' from data source \n  `D:\\KathyChiu77\\ISSS624\\Take-home Ex\\Take-home Ex 2\\data\\geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 5161 features and 3 fields\nGeometry type: POINT\nDimension:     XY\nBounding box:  xmin: 3970.122 ymin: 26482.1 xmax: 48284.56 ymax: 52983.82\nProjected CRS: SVY21\n\n\n\nmpsz &lt;- st_read(dsn = \"data/geospatial\",\n                   layer = \"MPSZ-2019\") %&gt;%\n  st_transform(crs = 3414)\n\nReading layer `MPSZ-2019' from data source \n  `D:\\KathyChiu77\\ISSS624\\Take-home Ex\\Take-home Ex 2\\data\\geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 332 features and 6 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 103.6057 ymin: 1.158699 xmax: 104.0885 ymax: 1.470775\nGeodetic CRS:  WGS 84\n\n\nDisplay and grasp the basic situation of geospatial dataset mpsz.\n\nmpsz\n\nSimple feature collection with 332 features and 6 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2667.538 ymin: 15748.72 xmax: 56396.44 ymax: 50256.33\nProjected CRS: SVY21 / Singapore TM\nFirst 10 features:\n                 SUBZONE_N SUBZONE_C       PLN_AREA_N PLN_AREA_C       REGION_N\n1              MARINA EAST    MESZ01      MARINA EAST         ME CENTRAL REGION\n2         INSTITUTION HILL    RVSZ05     RIVER VALLEY         RV CENTRAL REGION\n3           ROBERTSON QUAY    SRSZ01  SINGAPORE RIVER         SR CENTRAL REGION\n4  JURONG ISLAND AND BUKOM    WISZ01  WESTERN ISLANDS         WI    WEST REGION\n5             FORT CANNING    MUSZ02           MUSEUM         MU CENTRAL REGION\n6         MARINA EAST (MP)    MPSZ05    MARINE PARADE         MP CENTRAL REGION\n7                   SUDONG    WISZ03  WESTERN ISLANDS         WI    WEST REGION\n8                  SEMAKAU    WISZ02  WESTERN ISLANDS         WI    WEST REGION\n9           SOUTHERN GROUP    SISZ02 SOUTHERN ISLANDS         SI CENTRAL REGION\n10                 SENTOSA    SISZ01 SOUTHERN ISLANDS         SI CENTRAL REGION\n   REGION_C                       geometry\n1        CR MULTIPOLYGON (((33222.98 29...\n2        CR MULTIPOLYGON (((28481.45 30...\n3        CR MULTIPOLYGON (((28087.34 30...\n4        WR MULTIPOLYGON (((14557.7 304...\n5        CR MULTIPOLYGON (((29542.53 31...\n6        CR MULTIPOLYGON (((35279.55 30...\n7        WR MULTIPOLYGON (((15772.59 21...\n8        WR MULTIPOLYGON (((19843.41 21...\n9        CR MULTIPOLYGON (((30870.53 22...\n10       CR MULTIPOLYGON (((26879.04 26...\n\n\nExport and save in rds format for later use.\n\nmpsz &lt;- write_rds(mpsz, \"data/rds/mpsz.rds\")\n\n\n\n2.2Aspatial Data Importing\nThis line of R code is used for importing an aspatial dataset named origin_destination_bus_202310.csv from a specified directory (data/aspatial). The function read_csv from the tidyverse package efficiently reads the CSV file, converting it into a dataframe. This dataset likely contains origin-destination information for bus routes in October, 2023.\n\nodbus &lt;- read_csv(\"data/aspatial/origin_destination_bus_202310.csv\")\n\nThe glimpse(odbus) function provides a quick overview of the structure and contents of the odbus dataframe, summarizing its columns, data types, and a few initial entries.\n\nglimpse(odbus)\n\nRows: 5,694,297\nColumns: 7\n$ YEAR_MONTH          &lt;chr&gt; \"2023-10\", \"2023-10\", \"2023-10\", \"2023-10\", \"2023-…\n$ DAY_TYPE            &lt;chr&gt; \"WEEKENDS/HOLIDAY\", \"WEEKDAY\", \"WEEKENDS/HOLIDAY\",…\n$ TIME_PER_HOUR       &lt;dbl&gt; 16, 16, 14, 14, 17, 17, 17, 7, 14, 14, 10, 20, 20,…\n$ PT_TYPE             &lt;chr&gt; \"BUS\", \"BUS\", \"BUS\", \"BUS\", \"BUS\", \"BUS\", \"BUS\", \"…\n$ ORIGIN_PT_CODE      &lt;chr&gt; \"04168\", \"04168\", \"80119\", \"80119\", \"44069\", \"2028…\n$ DESTINATION_PT_CODE &lt;chr&gt; \"10051\", \"10051\", \"90079\", \"90079\", \"17229\", \"2014…\n$ TOTAL_TRIPS         &lt;dbl&gt; 3, 5, 3, 5, 4, 1, 24, 2, 1, 7, 3, 2, 5, 1, 1, 1, 1…\n\n\nThis code converts the ORIGIN_PT_CODE and DESTINATION_PT_CODE columns in the odbus dataframe to factors, categorizing unique bus stop codes for analysis.\n\nodbus$ORIGIN_PT_CODE &lt;- as.factor(odbus$ORIGIN_PT_CODE)\nodbus$DESTINATION_PT_CODE &lt;- as.factor(odbus$DESTINATION_PT_CODE) \n\n\n\n2.3Extracting the Study Data\n\n2.3.1Extracting the Trips Volume of Weekday Morning Peak\nThis code snippet filters and summarizes the odbus dataframe to extract data on bus trips during weekday morning peak hours (6 to 9 AM). It selects records marked as WEEKDAY, groups them by origin and destination bus stop codes, and then calculates the total number of trips between each stop pair in this time frame.\n\nweekday6_9 &lt;- odbus %&gt;%\n  filter(DAY_TYPE == \"WEEKDAY\") %&gt;%\n  filter(TIME_PER_HOUR &gt;= 6 &\n           TIME_PER_HOUR &lt;= 9) %&gt;%\n  group_by(ORIGIN_PT_CODE,\n           DESTINATION_PT_CODE) %&gt;%\n  summarise(TRIPS = sum(TOTAL_TRIPS))\n\nThe datatable(weekday6_9) function creates an interactive table display of the weekday6_9 dataframe, facilitating easy exploration and analysis of the data.\n\ndatatable(weekday6_9)\n\n\n\n\n\n\nThe write_rds(weekday6_9, \"data/rds/weekday6_9.rds\") function saves the weekday6_9 dataframe to a file named weekday6_9.rds for future use.\n\nwrite_rds(weekday6_9, \"data/rds/weekday6_9.rds\")\n\nThe read_rds(\"data/rds/weekday6_9.rds\") function loads the previously saved weekday6_9 dataframe back into the R environment.\n\nweekday6_9 &lt;- read_rds(\"data/rds/weekday6_9.rds\")\n\n\n\n2.3.2Extracting the Trips Volume of Weekday Afternoon Peak\nRepeat the process above for weekday afternoon peak (5-8 PM).\n\nweekday17_20 &lt;- odbus %&gt;%\n  filter(DAY_TYPE == \"WEEKDAY\") %&gt;%\n  filter(TIME_PER_HOUR &gt;= 17 &\n           TIME_PER_HOUR &lt;= 20) %&gt;%\n  group_by(ORIGIN_PT_CODE,\n           DESTINATION_PT_CODE) %&gt;%\n  summarise(TRIPS = sum(TOTAL_TRIPS))\n\n\ndatatable(weekday17_20)\n\n\n\n\n\n\n\nwrite_rds(weekday17_20, \"data/rds/weekday17_20.rds\")\n\n\nweekday17_20 &lt;- read_rds(\"data/rds/weekday17_20.rds\")\n\n\n\n2.3.3Extracting the Trips Volume of Weekend/Holiday Morning Peak\nRepeat the process above for weekend/holiday morning peak (11 AM-2 PM).\n\nweekend11_14 &lt;- odbus %&gt;%\n  filter(DAY_TYPE == \"WEEKENDS/HOLIDAY\") %&gt;%\n  filter(TIME_PER_HOUR &gt;= 11 &\n           TIME_PER_HOUR &lt;= 14) %&gt;%\n  group_by(ORIGIN_PT_CODE,\n           DESTINATION_PT_CODE) %&gt;%\n  summarise(TRIPS = sum(TOTAL_TRIPS))\n\n\ndatatable(weekend11_14)\n\n\n\n\n\n\n\nwrite_rds(weekend11_14, \"data/rds/weekend11_14.rds\")\n\n\nweekend11_14 &lt;- read_rds(\"data/rds/weekend11_14.rds\")\n\n\n\n2.3.4Extracting the Trips Volume of Weekend/Holiday Evening Peak\nRepeat the process above for weekend/holiday evening peak (4-7 PM).\n\nweekend16_19 &lt;- odbus %&gt;%\n  filter(DAY_TYPE == \"WEEKENDS/HOLIDAY\") %&gt;%\n  filter(TIME_PER_HOUR &gt;= 16 &\n           TIME_PER_HOUR &lt;= 19) %&gt;%\n  group_by(ORIGIN_PT_CODE,\n           DESTINATION_PT_CODE) %&gt;%\n  summarise(TRIPS = sum(TOTAL_TRIPS))\n\n\ndatatable(weekend16_19)\n\n\n\n\n\n\n\nwrite_rds(weekend16_19, \"data/rds/weekend16_19.rds\")\n\n\nweekend16_19 &lt;- read_rds(\"data/rds/weekend16_19.rds\")"
  },
  {
    "objectID": "Take-home Ex/Take-home Ex 2/Take-home_Ex_2.html#geospatial-data-wrangling",
    "href": "Take-home Ex/Take-home Ex 2/Take-home_Ex_2.html#geospatial-data-wrangling",
    "title": "Take-home Exercise 2: Analyzing the Dynamics of Bus Commute Flow and Spatial Interaction in Singapore",
    "section": "4.Geospatial Data Wrangling",
    "text": "4.Geospatial Data Wrangling\n\n4.1Combining busstop and mpsz\nThe code st_intersection(busstop, mpsz) combines the busstop and mpsz datasets to retain only those bus stops located within the boundaries of Singapore’s metropolitan planning zones. The select(BUS_STOP_N, SUBZONE_C) part then extracts specific columns, namely bus stop IDs and subzone codes, from the intersected dataset.\n\nbusstop_mpsz &lt;- st_intersection(busstop, mpsz) %&gt;%\n  select(BUS_STOP_N, SUBZONE_C)\n\nThe mapview(busstop_mpsz) function creates an interactive map displaying the spatial data from the busstop_mpsz dataframe, visualizing the locations of bus stops within Singapore’s planning zones.\n\nmapview(busstop_mpsz)\n\n\n\n\n\n\n\n\n4.2Creating Hexagon Layer\nThe code st_make_grid(mpsz, cellsize = 2 * 375 / sqrt(3), square = FALSE) generates a hexagonal grid overlay on the mpsz spatial data. Each hexagon in the grid has a perpendicular distance from its center to its edges of 375 meters, effectively creating a hexagonal pattern to represent Traffic Analysis Zones (TAZs).\n\nhex_grid &lt;- st_make_grid(mpsz, cellsize = 2 * 375 / sqrt(3), square = FALSE)\n\nThis code converts the hex_grid object into a simple features (sf) dataframe hex_grid_sf, and then adds a new column hex_id that assigns a unique identifier to each hexagon in the grid.\n\nhex_grid_sf &lt;- st_sf(geometry = hex_grid) %&gt;%\n  mutate(hex_id = 1:length(hex_grid))\n\nThis code calculates the number of bus stops within each hexagon of the hex_grid_sf grid. It uses st_intersects to identify which bus stops (busstop_mpsz) fall within each hexagon, and then applies a function to count these stops for each hexagon, handling any missing values (na.rm = TRUE).\n\nbusstop_counts &lt;- st_intersects(hex_grid_sf, busstop_mpsz, sparse = FALSE) %&gt;% \n  apply(1, function(x) sum(x, na.rm = TRUE))\n\nThis step assigns the computed bus stop counts (busstop_counts) to a new column bus_stop_count in the hex_grid_sf dataframe, effectively adding the number of bus stops within each hexagon to the grid data.\n\nhex_grid_sf$bus_stop_count &lt;- busstop_counts\n\nThis code filters the hex_grid_sf dataframe to keep only those hexagons that have one or more bus stops, effectively removing hexagons with no bus stop presence.\n\nhex_grid_sf &lt;- hex_grid_sf %&gt;%\n  filter(bus_stop_count &gt; 0)\n\nThis code creates a visual map in R using the tmap package. It overlays hexagons from hex_grid_sf onto the mpsz spatial layout, coloring them based on the count of bus stops in each hexagon. The map features a legend, titles, and styling details for clarity and visual appeal. The final map displays the distribution of bus stops across Singapore, with additional borders for context and credits for data sources.\n\ntmap_options(check.and.fix = TRUE)\nmap_hexagon &lt;- tm_shape(hex_grid_sf) +\n  tm_polygons(\n    col = \"bus_stop_count\",\n    palette = \"Purples\",\n    style = \"cont\",\n    title = \"Number of Bus Stops\",\n    id = \"hex_id\",\n    showNA = FALSE,\n    alpha = 0.6,\n    popup.vars = c(\"Number of Bus Stops\" = \"bus_stop_count\"),\n    popup.format = list(bus_stop_count = list(format = \"f\", digits = 0))\n  ) +\n  tm_shape(mpsz) + \n  tm_borders(col = \"grey75\", lwd = 0.7) +\n  tm_layout(\n    main.title = \"Bus Stop Distribution in Singapore\",\n    main.title.size = 1.5,\n    legend.title.size = 1,\n    legend.text.size = 0.8,\n    legend.position = c(\"left\", \"bottom\"),\n    frame = FALSE,\n    inner.margins = c(0.05, 0.05, 0.05, 0.05)\n  ) +\n  tm_credits(\"Data Source: LTA DataMall, Data.gov.sg\", position = c(\"RIGHT\", \"BOTTOM\"), size = 0.8) +\n  tm_view(view.legend.position = c(\"left\", \"bottom\"))\n\nmap_hexagon\n\n\n\n\nObservations from the map:\n\nBlank Areas: The absence of hexagons in certain parts of the map suggests these are areas with no bus stops. These could be non-residential areas, such as industrial zones, green spaces, or water bodies where public bus services are not necessary or practical.\nBus Stop-Dense Areas: Regions densely packed with hexagons indicate a high concentration of bus stops. These areas are likely to be highly urbanized with significant residential and commercial activities, necessitating a greater number of bus stops to accommodate the public transport needs of the population.\n\nThe distribution pattern reflects the urban planning and public transportation infrastructure of Singapore, designed to cater to areas with high commuter demand while excluding zones where bus stops are not viable.\n\n\n4.3Correspondence of Hexagon and Bus Stop ID\nThe code creates a new dataset busstop_hex by intersecting busstop locations with the hex_grid_sf to assign a hex_id to each bus stop. It then selects the bus stop number and corresponding hex_id, and removes the spatial geometry data for a simple reference table. The final step omits any entries with missing values to ensure a clean dataset for merging with other data based on hexagon and bus stop IDs.\n\nbusstop_hex &lt;- st_intersection(busstop, hex_grid_sf) %&gt;%\n  select(BUS_STOP_N, hex_id) %&gt;%\n  st_drop_geometry()\n\n\nbusstop_hex &lt;- na.omit(busstop_hex)\n\nThe head(busstop_hex) function displays the first few rows of the busstop_hex dataframe for a quick preview of its structure and data.\n\nhead(busstop_hex)\n\n     BUS_STOP_N hex_id\n3269      25059    393\n254       26379    444\n2570      25751    488\n4203      26389    490\n2403      26369    491\n2897      25761    535\n\n\nExport and save busstop_hex in rds format for future use.\n\nwrite_rds(busstop_hex, \"data/rds/busstop_hex.rds\")  \n\nRemove items no longer needed from R environment to free memory and avoid redundancy.\n\nrm(hex_grid, map_hexagon, odbus, busstop_counts)"
  },
  {
    "objectID": "Take-home Ex/Take-home Ex 2/Take-home_Ex_2.html#preparing-commute-flow-data",
    "href": "Take-home Ex/Take-home Ex 2/Take-home_Ex_2.html#preparing-commute-flow-data",
    "title": "Take-home Exercise 2: Analyzing the Dynamics of Bus Commute Flow and Spatial Interaction in Singapore",
    "section": "5.Preparing Commute Flow Data",
    "text": "5.Preparing Commute Flow Data\n\n5.1Weekday Morning Peak Flow\nThe code merges flow data from weekday6_9 with bus stop IDs from busstop_hex based on common origin bus stop numbers, then renames the key columns for clarity, assigning hex IDs to origin points and preserving destination bus stop codes.\n\nweekday_morning_od &lt;- left_join(weekday6_9 , busstop_hex,\n            by = c(\"ORIGIN_PT_CODE\" = \"BUS_STOP_N\")) %&gt;%\n  rename(ORIGIN_BS = ORIGIN_PT_CODE,\n         ORIGIN_HEX = hex_id,\n         DESTIN_BS = DESTINATION_PT_CODE)\n\nBefore continue, it is a good practice for us to check for duplicating records (It can be judged based on data frame is blank or not).\n\nduplicate &lt;- weekday_morning_od %&gt;%\n  group_by_all() %&gt;%\n  filter(n()&gt;1) %&gt;%\n  ungroup()\n\nIf duplicated records are found, the code chunk below will be used to retain the unique records.\n\nweekday_morning_od &lt;- unique(weekday_morning_od)\n\nThis code further enhances the weekday_morning_od dataframe by joining it with the busstop_hex dataframe to append hex_id information corresponding to the destination bus stops, linking each trip’s endpoint to its respective hexagonal spatial zone.\n\nweekday_morning_od &lt;- left_join(weekday_morning_od , busstop_hex,\n            by = c(\"DESTIN_BS\" = \"BUS_STOP_N\"))\n\n\nduplicate &lt;- weekday_morning_od %&gt;%\n  group_by_all() %&gt;%\n  filter(n()&gt;1) %&gt;%\n  ungroup()\n\n\nweekday_morning_od &lt;- unique(weekday_morning_od)\n\nThis step renames the destination hex ID column for clarity, removes any rows with missing data, then groups the data by origin and destination hex IDs, and summarizes it to calculate the total number of trips made during the weekday morning peak hours between each hexagon pair.\n\nweekday_morning_od &lt;- weekday_morning_od %&gt;%\n  rename(DESTIN_HEX = hex_id) %&gt;%\n  drop_na() %&gt;%\n  group_by(ORIGIN_HEX, DESTIN_HEX) %&gt;%\n  summarise(WEEKDAY_MORNING_PEAK = sum(TRIPS))\n\nIt is time to save the output into an rds file format.\n\nwrite_rds(weekday_morning_od, \"data/rds/weekday_morning_od.rds\")\n\n\nweekday_morning_od &lt;- read_rds(\"data/rds/weekday_morning_od.rds\")\n\n\n\n5.2Weekday Afternoon Peak Flow\nRepeat the process above for weekday afternoon peak (5-8 PM).\n\nweekday_afternoon_od &lt;- left_join(weekday17_20 , busstop_hex,\n            by = c(\"ORIGIN_PT_CODE\" = \"BUS_STOP_N\")) %&gt;%\n  rename(ORIGIN_BS = ORIGIN_PT_CODE,\n         ORIGIN_HEX = hex_id,\n         DESTIN_BS = DESTINATION_PT_CODE)\n\n\nduplicate &lt;- weekday_afternoon_od %&gt;%\n  group_by_all() %&gt;%\n  filter(n()&gt;1) %&gt;%\n  ungroup()\n\n\nweekday_afternoon_od &lt;- unique(weekday_afternoon_od)\n\n\nweekday_afternoon_od &lt;- left_join(weekday_afternoon_od , busstop_hex,\n            by = c(\"DESTIN_BS\" = \"BUS_STOP_N\"))\n\n\nduplicate &lt;- weekday_afternoon_od %&gt;%\n  group_by_all() %&gt;%\n  filter(n()&gt;1) %&gt;%\n  ungroup()\n\n\nweekday_afternoon_od &lt;- unique(weekday_afternoon_od)\n\n\nweekday_afternoon_od &lt;- weekday_afternoon_od %&gt;%\n  rename(DESTIN_HEX = hex_id) %&gt;%\n  drop_na() %&gt;%\n  group_by(ORIGIN_HEX, DESTIN_HEX) %&gt;%\n  summarise(WEEKDAY_AFTERNOON_PEAK = sum(TRIPS))\n\n\nwrite_rds(weekday_afternoon_od, \"data/rds/weekday_afternoon_od.rds\")\n\n\nweekday_afternoon_od &lt;- read_rds(\"data/rds/weekday_afternoon_od.rds\")\n\n\n\n5.3Weekend Morning Peak Flow\nRepeat the process above for weekend/holiday morning peak (11 AM-2 PM).\n\nweekend_morning_od &lt;- left_join(weekend11_14 , busstop_hex,\n            by = c(\"ORIGIN_PT_CODE\" = \"BUS_STOP_N\")) %&gt;%\n  rename(ORIGIN_BS = ORIGIN_PT_CODE,\n         ORIGIN_HEX = hex_id,\n         DESTIN_BS = DESTINATION_PT_CODE)\n\n\nduplicate &lt;- weekend_morning_od %&gt;%\n  group_by_all() %&gt;%\n  filter(n()&gt;1) %&gt;%\n  ungroup()\n\n\nweekend_morning_od &lt;- unique(weekend_morning_od)\n\n\nweekend_morning_od &lt;- left_join(weekend_morning_od , busstop_hex,\n            by = c(\"DESTIN_BS\" = \"BUS_STOP_N\"))\n\n\nduplicate &lt;- weekend_morning_od %&gt;%\n  group_by_all() %&gt;%\n  filter(n()&gt;1) %&gt;%\n  ungroup()\n\n\nweekend_morning_od &lt;- unique(weekend_morning_od)\n\n\nweekend_morning_od &lt;- weekend_morning_od %&gt;%\n  rename(DESTIN_HEX = hex_id) %&gt;%\n  drop_na() %&gt;%\n  group_by(ORIGIN_HEX, DESTIN_HEX) %&gt;%\n  summarise(WEEKEND_MORNING_PEAK = sum(TRIPS))\n\n\nwrite_rds(weekend_morning_od, \"data/rds/weekend_morning_od.rds\")\n\n\nweekend_morning_od &lt;- read_rds(\"data/rds/weekend_morning_od.rds\")\n\n\n\n5.4Weekend Evening Peak Flow\nRepeat the process above for weekend/holiday evening peak (4-7 PM).\n\nweekend_evening_od &lt;- left_join(weekend16_19 , busstop_hex,\n            by = c(\"ORIGIN_PT_CODE\" = \"BUS_STOP_N\")) %&gt;%\n  rename(ORIGIN_BS = ORIGIN_PT_CODE,\n         ORIGIN_HEX = hex_id,\n         DESTIN_BS = DESTINATION_PT_CODE)\n\n\nduplicate &lt;- weekend_evening_od %&gt;%\n  group_by_all() %&gt;%\n  filter(n()&gt;1) %&gt;%\n  ungroup()\n\n\nweekend_evening_od &lt;- unique(weekend_evening_od)\n\n\nweekend_evening_od &lt;- left_join(weekend_evening_od , busstop_hex,\n            by = c(\"DESTIN_BS\" = \"BUS_STOP_N\"))\n\n\nduplicate &lt;- weekend_evening_od %&gt;%\n  group_by_all() %&gt;%\n  filter(n()&gt;1) %&gt;%\n  ungroup()\n\n\nweekend_evening_od &lt;- unique(weekend_evening_od)\n\n\nweekend_evening_od &lt;- weekend_evening_od %&gt;%\n  rename(DESTIN_HEX = hex_id) %&gt;%\n  drop_na() %&gt;%\n  group_by(ORIGIN_HEX, DESTIN_HEX) %&gt;%\n  summarise(WEEKEND_EVENING_PEAK = sum(TRIPS))\n\n\nwrite_rds(weekend_evening_od, \"data/rds/weekend_evening_od.rds\")\n\n\nweekend_evening_od &lt;- read_rds(\"data/rds/weekend_evening_od.rds\")\n\nRemove items no longer needed to free memory and avoid redundancy.\n\nrm(weekday6_9, weekday17_20, weekend11_14, weekend16_19)"
  },
  {
    "objectID": "Take-home Ex/Take-home Ex 2/Take-home_Ex_2.html#visualising-spatial-interaction",
    "href": "Take-home Ex/Take-home Ex 2/Take-home_Ex_2.html#visualising-spatial-interaction",
    "title": "Take-home Exercise 2",
    "section": "6.Visualising Spatial Interaction",
    "text": "6.Visualising Spatial Interaction\n\n6.1Removing Intra-zonal Flows\n\nweekday_morning_od1 &lt;- weekday_morning_od[weekday_morning_od$ORIGIN_HEX!=weekday_morning_od$DESTIN_HEX,]\n\n\nweekday_afternoon_od1 &lt;- weekday_afternoon_od[weekday_afternoon_od$ORIGIN_HEX!=weekday_afternoon_od$DESTIN_HEX,]\n\n\nweekend_morning_od1 &lt;- weekend_morning_od[weekend_morning_od$ORIGIN_HEX!=weekend_morning_od$DESTIN_HEX,]\n\n\nweekend_evening_od1 &lt;- weekend_evening_od[weekend_evening_od$ORIGIN_HEX!=weekend_evening_od$DESTIN_HEX,]\n\n\n\n6.2Creating the Desire Lines\n\nweekday_morning_flowLine &lt;- od2line(flow = weekday_morning_od1, \n                    zones = hex_grid_sf,\n                    zone_code = \"hex_id\")\n\n\nweekday_afternoon_flowLine &lt;- od2line(flow = weekday_afternoon_od1, \n                    zones = hex_grid_sf,\n                    zone_code = \"hex_id\")\n\n\nweekend_morning_flowLine &lt;- od2line(flow = weekend_morning_od1, \n                    zones = hex_grid_sf,\n                    zone_code = \"hex_id\")\n\n\nweekend_evening_flowLine &lt;- od2line(flow = weekend_evening_od1, \n                    zones = hex_grid_sf,\n                    zone_code = \"hex_id\")\n\n\n\n6.3Visualising the Desire Lines\n\ntm_shape(hex_grid_sf) +\n  tm_polygons(\n    border.col = \"grey50\", \n    border.alpha = 0.6, \n    alpha = 0.1\n  ) +\n  tm_shape(weekday_morning_flowLine %&gt;% \n             filter(WEEKDAY_MORNING_PEAK &gt;= 5000)) +\n  tm_lines(\n    lwd = \"WEEKDAY_MORNING_PEAK\",\n    style = \"quantile\",\n    scale = c(0.1, 1, 3, 5, 7, 10),\n    n = 6,\n    alpha = 0.5,\n    palette = \"Blues\"\n  ) +\n  tm_shape(mpsz) +\n  tm_borders(\n    col = \"darkblue\", \n    alpha = 0.1,\n    lwd = 1.5\n  ) +\n  tm_layout(\n    main.title = \"Weekday Morning Commute Flows in Singapore\",\n    main.title.position = \"center\",\n    main.title.size = 1.0,\n    legend.title.size = 0.8,\n    legend.text.size = 0.7,\n    legend.position = c(\"left\", \"bottom\"),\n    frame = FALSE,\n    inner.margins = c(0.05, 0.05, 0.05, 0.05)\n  ) +\n  tm_credits(\"Source: LTA DataMall\", position = c(\"RIGHT\", \"BOTTOM\"), size = 0.5)\n\n\n\n\n\ntm_shape(hex_grid_sf) +\n  tm_polygons(\n    border.col = \"grey50\", \n    border.alpha = 0.6, \n    alpha = 0.1\n  ) +\n  tm_shape(weekday_afternoon_flowLine %&gt;% \n             filter(WEEKDAY_AFTERNOON_PEAK &gt;= 5000)) +\n  tm_lines(\n    lwd = \"WEEKDAY_AFTERNOON_PEAK\",\n    style = \"quantile\",\n    scale = c(0.1, 1, 3, 5, 7, 10),\n    n = 6,\n    alpha = 0.5,\n    palette = \"Blues\"\n  ) +\n  tm_shape(mpsz) +\n  tm_borders(\n    col = \"darkblue\", \n    alpha = 0.1,\n    lwd = 1.5\n  ) +\n  tm_layout(\n    main.title = \"Weekday Afternoon Commute Flows in Singapore\",\n    main.title.position = \"center\",\n    main.title.size = 1.0,\n    legend.title.size = 0.8,\n    legend.text.size = 0.7,\n    legend.position = c(\"left\", \"bottom\"),\n    frame = FALSE,\n    inner.margins = c(0.05, 0.05, 0.05, 0.05)\n  ) +\n  tm_credits(\"Source: LTA DataMall\", position = c(\"RIGHT\", \"BOTTOM\"), size = 0.5)\n\n\n\n\n\ntm_shape(hex_grid_sf) +\n  tm_polygons(\n    border.col = \"grey50\", \n    border.alpha = 0.6, \n    alpha = 0.1\n  ) +\n  tm_shape(weekend_morning_flowLine %&gt;% \n             filter(WEEKEND_MORNING_PEAK &gt;= 3000)) +\n  tm_lines(\n    lwd = \"WEEKEND_MORNING_PEAK\",\n    style = \"quantile\",\n    scale = c(0.1, 1, 3, 5, 7, 13, 15),\n    n = 7,\n    alpha = 0.5,\n    palette = \"Blues\"\n  ) +\n  tm_shape(mpsz) +\n  tm_borders(\n    col = \"darkblue\", \n    alpha = 0.1,\n    lwd = 1.5\n  ) +\n  tm_layout(\n    main.title = \"Weekend Morning Commute Flows in Singapore\",\n    main.title.position = \"center\",\n    main.title.size = 1.0,\n    legend.title.size = 0.8,\n    legend.text.size = 0.7,\n    legend.position = c(\"left\", \"bottom\"),\n    frame = FALSE,\n    inner.margins = c(0.05, 0.05, 0.05, 0.05)\n  ) +\n  tm_credits(\"Source: LTA DataMall\", position = c(\"RIGHT\", \"BOTTOM\"), size = 0.5)\n\n\n\n\n\ntm_shape(hex_grid_sf) +\n  tm_polygons(\n    border.col = \"grey50\", \n    border.alpha = 0.6, \n    alpha = 0.1\n  ) +\n  tm_shape(weekend_evening_flowLine %&gt;% \n             filter(WEEKEND_EVENING_PEAK &gt;= 3000)) +\n  tm_lines(\n    lwd = \"WEEKEND_EVENING_PEAK\",\n    style = \"quantile\",\n    scale = c(0.1, 1, 3, 5, 7, 10),\n    n = 6,\n    alpha = 0.5,\n    palette = \"Blues\"\n  ) +\n  tm_shape(mpsz) +\n  tm_borders(\n    col = \"darkblue\", \n    alpha = 0.1,\n    lwd = 1.5\n  ) +\n  tm_layout(\n    main.title = \"Weekend Evening Commute Flows in Singapore\",\n    main.title.position = \"center\",\n    main.title.size = 1.0,\n    legend.title.size = 0.8,\n    legend.text.size = 0.7,\n    legend.position = c(\"left\", \"bottom\"),\n    frame = FALSE,\n    inner.margins = c(0.05, 0.05, 0.05, 0.05)\n  ) +\n  tm_credits(\"Source: LTA DataMall\", position = c(\"RIGHT\", \"BOTTOM\"), size = 0.5)\n\n\n\n\n\nrm(duplicate, weekday_morning_flowLine, weekday_morning_od, weekday_morning_od1,\n   weekend_morning_flowLine, weekend_morning_od, weekend_morning_od1,\n   weekend_evening_flowLine, weekend_evening_od, weekend_evening_od1)"
  },
  {
    "objectID": "Take-home Ex/Take-home Ex 2/Take-home_Ex_2.html#attractiveness-factors",
    "href": "Take-home Ex/Take-home Ex 2/Take-home_Ex_2.html#attractiveness-factors",
    "title": "Take-home Exercise 2: Analyzing the Dynamics of Bus Commute Flow and Spatial Interaction in Singapore",
    "section": "7.Attractiveness Factors",
    "text": "7.Attractiveness Factors\nIn the subsequent section, we will delve into a targeted analysis of the weekday afternoon peak period. The reason for this focus stems from the comprehensive nature of commute drivers during this time. On weekday afternoons, residents are not only heading home from work or school but often transition to leisure activities such as shopping or entertainment venues directly. This complexity presents a rich tapestry of commuting patterns worthy of in-depth examination.\n\n7.1Entertainment Distribution Integration\nEntertainment distribution is considered an attractiveness factor because these venues often draw people to travel to them, influencing commuting and traffic flows. The provided code reads in the entertn geospatial data and then calculates the count of entertainment venues within each hexagon of the hex_grid_sf grid, integrating this data to quantify the level of entertainment-related attractiveness of different areas.\n\nentertn &lt;- st_read(dsn = \"data/geospatial\",\n                      layer = \"entertn\")\n\nReading layer `entertn' from data source \n  `D:\\KathyChiu77\\ISSS624\\Take-home Ex\\Take-home Ex 2\\data\\geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 114 features and 3 fields\nGeometry type: POINT\nDimension:     XY\nBounding box:  xmin: 10809.34 ymin: 26528.63 xmax: 41600.62 ymax: 46375.77\nProjected CRS: SVY21 / Singapore TM\n\n\n\nhex_grid_sf$entertn_count &lt;- lengths(st_intersects(hex_grid_sf, entertn))\n\n\n\n7.2Food & Beverage Distribution Integration\nFood and beverage (F&B) venues act as attractiveness factors because they are destinations that people may frequently visit after work, thus influencing traffic and transportation patterns within an area.\n\nFB &lt;- st_read(dsn = \"data/geospatial\",\n                   layer = \"F&B\")\n\nReading layer `F&B' from data source \n  `D:\\KathyChiu77\\ISSS624\\Take-home Ex\\Take-home Ex 2\\data\\geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 1919 features and 3 fields\nGeometry type: POINT\nDimension:     XY\nBounding box:  xmin: 6010.495 ymin: 25343.27 xmax: 45462.43 ymax: 48796.21\nProjected CRS: SVY21 / Singapore TM\n\n\n\nhex_grid_sf$FB_count &lt;- lengths(st_intersects(hex_grid_sf, FB))\n\n\n\n7.3Leisure & Recreation Distribution Integration\nLeisure and recreation spots are included in the study of weekday afternoon peak times because they are popular destinations that contribute to the flow of people and the overall demand for transportation services during these periods.\n\nlere &lt;- st_read(dsn = \"data/geospatial\",\n                   layer = \"Liesure&Recreation\")\n\nReading layer `Liesure&Recreation' from data source \n  `D:\\KathyChiu77\\ISSS624\\Take-home Ex\\Take-home Ex 2\\data\\geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 1217 features and 30 fields\nGeometry type: POINT\nDimension:     XY\nBounding box:  xmin: 6010.495 ymin: 25134.28 xmax: 48439.77 ymax: 50078.88\nProjected CRS: SVY21 / Singapore TM\n\n\n\nhex_grid_sf$lere_count &lt;- lengths(st_intersects(hex_grid_sf, lere))\n\n\n\n7.4Retail Distribution Integration\nRetail locations are included in the analysis because they are key destinations that attract shoppers, impacting people’s movement and transit patterns, especially during peak times.\n\nretail &lt;- st_read(dsn = \"data/geospatial\",\n                  layer = \"Retails\")\n\nReading layer `Retails' from data source \n  `D:\\KathyChiu77\\ISSS624\\Take-home Ex\\Take-home Ex 2\\data\\geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 37635 features and 3 fields\nGeometry type: POINT\nDimension:     XY\nBounding box:  xmin: 4737.982 ymin: 25171.88 xmax: 48265.04 ymax: 50135.28\nProjected CRS: SVY21 / Singapore TM\n\n\n\nhex_grid_sf$retail_count &lt;- lengths(st_intersects(hex_grid_sf, retail))\n\n\n\n7.5Train Exits Distribution Integration\n\ntrainexits &lt;- st_read(dsn = \"data/geospatial\",\n                      layer = \"Train_Station_Exit_Layer\")\n\nReading layer `Train_Station_Exit_Layer' from data source \n  `D:\\KathyChiu77\\ISSS624\\Take-home Ex\\Take-home Ex 2\\data\\geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 565 features and 2 fields\nGeometry type: POINT\nDimension:     XY\nBounding box:  xmin: 6134.086 ymin: 27499.7 xmax: 45356.36 ymax: 47865.92\nProjected CRS: SVY21\n\n\nThe code transforms the coordinates of train exit locations to match the coordinate reference system of the hexagonal grid and then counts the number of train exits within each hexagon. This reflects the influence of proximity to train stations on bus ridership, as people often use buses to access MRT stations in Singapore.\n\ntrainexits &lt;- st_transform(trainexits, st_crs(hex_grid_sf))\nhex_grid_sf$trainexits_count &lt;- lengths(st_intersects(hex_grid_sf, trainexits))\n\n\n\n7.6Residence Distribution Integration\nThe code reads a CSV file containing housing data (hdb.csv), filters for entries marked as residential (Y), selects columns for latitude, longitude, and total dwelling units, and removes any rows with missing data. This prepares a dataset of residential locations and their capacity, which is important for analyzing homebound travel patterns.\n\nhdb &lt;- read_csv(\"data/aspatial/hdb.csv\")\n\n\nresidential &lt;- hdb %&gt;%\n  filter(residential == \"Y\") %&gt;%\n  select(lat, lng, total_dwelling_units) %&gt;%\n  na.omit()\n\n\nresidential &lt;- st_as_sf(residential, \n                           coords = c(\"lng\", \"lat\"), \n                           crs = 4326) %&gt;%\n  st_transform(crs = st_crs(hex_grid_sf))\n\n\nintersections &lt;- st_intersects(hex_grid_sf, residential, sparse = TRUE)\nhex_grid_sf$residential_count &lt;- mapply(function(index, residential) {\n  sum(residential$total_dwelling_units[index], na.rm = TRUE)\n}, intersections, MoreArgs = list(residential = residential))\n\n\nrm(intersections)"
  },
  {
    "objectID": "Take-home Ex/Take-home Ex 2/Take-home_Ex_2.html#propulsive-factors",
    "href": "Take-home Ex/Take-home Ex 2/Take-home_Ex_2.html#propulsive-factors",
    "title": "Take-home Exercise 2: Analyzing the Dynamics of Bus Commute Flow and Spatial Interaction in Singapore",
    "section": "8.Propulsive Factors",
    "text": "8.Propulsive Factors\n\n8.1Business Distribution Integration\n\nbusiness &lt;- st_read(dsn = \"data/geospatial\",\n                      layer = \"Business\")\n\nReading layer `Business' from data source \n  `D:\\KathyChiu77\\ISSS624\\Take-home Ex\\Take-home Ex 2\\data\\geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 6550 features and 3 fields\nGeometry type: POINT\nDimension:     XY\nBounding box:  xmin: 3669.148 ymin: 25408.41 xmax: 47034.83 ymax: 50148.54\nProjected CRS: SVY21 / Singapore TM\n\n\n\nhex_grid_sf$business_count &lt;- lengths(st_intersects(hex_grid_sf, business))\n\n\n\n8.2School Distribution Integration\n\nurl&lt;-\"https://www.onemap.gov.sg/api/common/elastic/search\"\n\ncsv&lt;-read_csv(\"data/aspatial/Generalinformationofschools.csv\")\npostcodes&lt;-csv$`postal_code`\n\nfound&lt;-data.frame()\nnot_found&lt;-data.frame()\n\nfor(postcode in postcodes){\n  query&lt;-list('searchVal'=postcode,'returnGeom'='Y','getAddrDetails'='Y','pageNum'='1')\n  res&lt;- GET(url,query=query)\n  \n  if((content(res)$found)!=0){\n    found&lt;-rbind(found,data.frame(content(res))[4:13])\n  } else{\n    not_found = data.frame(postcode)\n  }\n}\n\n\nmerged = merge(csv, found, by.x = 'postal_code', by.y = 'results.POSTAL', all = TRUE)\nwrite.csv(merged, file = \"data/aspatial/schools.csv\")\nwrite.csv(not_found, file = \"data/aspatial/not_found.csv\")\n\n\nschools &lt;- read_csv(\"data/aspatial/schools.csv\") %&gt;%\n  rename(latitude = \"results.LATITUDE\",\n         longitude = \"results.LONGITUDE\")%&gt;%\n  select(postal_code, school_name, latitude, longitude)\n\n\nschools &lt;- schools %&gt;%\n  filter(!is.na(longitude) & !is.na(latitude)) %&gt;%\n  st_as_sf(coords = c(\"longitude\", \"latitude\"), crs = 4326) %&gt;%\n  st_transform(crs = 3414)\n\n\nhex_grid_sf$school_count &lt;- lengths(st_intersects(hex_grid_sf, schools))\n\n\nrm(csv, found, merged, not_found, query, res,\n   postcode, postcodes, url)\n\n\n\n8.3Financial Service Distribution Integration\n\nfinserv &lt;- st_read(dsn = \"data/geospatial\",\n                      layer = \"FinServ\")\n\nReading layer `FinServ' from data source \n  `D:\\KathyChiu77\\ISSS624\\Take-home Ex\\Take-home Ex 2\\data\\geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 3320 features and 3 fields\nGeometry type: POINT\nDimension:     XY\nBounding box:  xmin: 4881.527 ymin: 25171.88 xmax: 46526.16 ymax: 49338.02\nProjected CRS: SVY21 / Singapore TM\n\n\n\nhex_grid_sf$finserv_count &lt;- lengths(st_intersects(hex_grid_sf, finserv))\n\n\n\n8.4Final Check of Integrated Data\n\ndatatable(hex_grid_sf)"
  },
  {
    "objectID": "Take-home Ex/Take-home Ex 2/Take-home_Ex_2.html#computing-distance-matrix",
    "href": "Take-home Ex/Take-home Ex 2/Take-home_Ex_2.html#computing-distance-matrix",
    "title": "Take-home Exercise 2: Analyzing the Dynamics of Bus Commute Flow and Spatial Interaction in Singapore",
    "section": "9.Computing Distance Matrix",
    "text": "9.Computing Distance Matrix\n\n9.1Converting from sf data.table to SpatialPolygonsDataFrame\n\nhex_grid_sp &lt;- as(hex_grid_sf, \"Spatial\")\nhex_grid_sp\n\nclass       : SpatialPolygonsDataFrame \nfeatures    : 1853 \nextent      : 3966.576, 48566.88, 26373.72, 50123.72  (xmin, xmax, ymin, ymax)\ncrs         : +proj=tmerc +lat_0=1.36666666666667 +lon_0=103.833333333333 +k=1 +x_0=28001.642 +y_0=38744.572 +ellps=WGS84 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs \nvariables   : 11\nnames       : hex_id, bus_stop_count, entertn_count, FB_count, lere_count, retail_count, trainexits_count, residential_count, business_count, school_count, finserv_count \nmin values  :    393,              1,             0,        0,          0,            0,                0,                 0,              0,            0,             0 \nmax values  :   9988,             13,             8,       71,         26,          986,                9,              3531,             60,            4,            91 \n\n\n\n\n9.2 Computing the Distance Matrix\n\ndist &lt;- spDists(hex_grid_sp, \n                longlat = FALSE)\nhead(dist, n=c(10, 10))\n\n           [,1]      [,2]      [,3]      [,4]      [,5]      [,6]      [,7]\n [1,]    0.0000 2633.9134  866.0254 2291.2878 3031.0889  750.0000 1984.3135\n [2,] 2633.9134    0.0000 1887.4586  433.0127  433.0127 2291.2878  866.0254\n [3,]  866.0254 1887.4586    0.0000 1500.0000 2250.0000  433.0127 1145.6439\n [4,] 2291.2878  433.0127 1500.0000    0.0000  750.0000 1887.4586  433.0127\n [5,] 3031.0889  433.0127 2250.0000  750.0000    0.0000 2633.9134 1145.6439\n [6,]  750.0000 2291.2878  433.0127 1887.4586 2633.9134    0.0000 1500.0000\n [7,] 1984.3135  866.0254 1145.6439  433.0127 1145.6439 1500.0000    0.0000\n [8,] 4175.8233 1561.2495 3381.9373 1887.4586 1145.6439 3750.0000 2250.0000\n [9,] 1732.0508 1299.0381  866.0254  866.0254 1561.2495 1145.6439  433.0127\n[10,] 2410.9127  750.0000 1561.2495  433.0127  866.0254 1887.4586  433.0127\n          [,8]      [,9]     [,10]\n [1,] 4175.823 1732.0508 2410.9127\n [2,] 1561.249 1299.0381  750.0000\n [3,] 3381.937  866.0254 1561.2495\n [4,] 1887.459  866.0254  433.0127\n [5,] 1145.644 1561.2495  866.0254\n [6,] 3750.000 1145.6439 1887.4586\n [7,] 2250.000  433.0127  433.0127\n [8,]    0.000 2633.9134 1887.4586\n [9,] 2633.913    0.0000  750.0000\n[10,] 1887.459  750.0000    0.0000\n\n\n\n\n9.3Labeling Column and Row Headers of a Distance Matrix\n\nhex_names &lt;- hex_grid_sf$hex_id\n\n\ncolnames(dist) &lt;- paste0(hex_names)\nrownames(dist) &lt;- paste0(hex_names)\n\n\n\n9.4Pivoting Distance Value by HEX_ID\n\ndistPair &lt;- melt(dist) %&gt;%\n  rename(dist = value)\nhead(distPair, 10)\n\n   Var1 Var2      dist\n1   393  393    0.0000\n2   444  393 2633.9134\n3   488  393  866.0254\n4   490  393 2291.2878\n5   491  393 3031.0889\n6   535  393  750.0000\n7   537  393 1984.3135\n8   540  393 4175.8233\n9   583  393 1732.0508\n10  584  393 2410.9127\n\n\n\n\n9.5Updating Intra-zonal Distances\n\ndistPair %&gt;%\n  filter(dist &gt; 0) %&gt;%\n  summary()\n\n      Var1           Var2           dist      \n Min.   : 393   Min.   : 393   Min.   :  433  \n 1st Qu.:3694   1st Qu.:3694   1st Qu.: 7949  \n Median :5474   Median :5474   Median :12933  \n Mean   :5236   Mean   :5236   Mean   :13705  \n 3rd Qu.:6837   3rd Qu.:6837   3rd Qu.:18407  \n Max.   :9988   Max.   :9988   Max.   :44478  \n\n\n\ndistPair$dist &lt;- ifelse(distPair$dist == 0,\n                        200, distPair$dist)\n\n\ndistPair %&gt;%\n  summary()\n\n      Var1           Var2           dist      \n Min.   : 393   Min.   : 393   Min.   :  200  \n 1st Qu.:3694   1st Qu.:3694   1st Qu.: 7949  \n Median :5474   Median :5474   Median :12933  \n Mean   :5236   Mean   :5236   Mean   :13698  \n 3rd Qu.:6837   3rd Qu.:6837   3rd Qu.:18407  \n Max.   :9988   Max.   :9988   Max.   :44478  \n\n\n\ndistPair &lt;- distPair %&gt;%\n  rename(orig = Var1,\n         dest = Var2)\n\n\nwrite_rds(distPair, \"data/rds/distPair.rds\")"
  },
  {
    "objectID": "Take-home Ex/Take-home Ex 2/Take-home_Ex_2.html#combining-passenger-volume-data-with-distance-value",
    "href": "Take-home Ex/Take-home Ex 2/Take-home_Ex_2.html#combining-passenger-volume-data-with-distance-value",
    "title": "Take-home Exercise 2: Analyzing the Dynamics of Bus Commute Flow and Spatial Interaction in Singapore",
    "section": "10.Combining Passenger Volume Data with Distance Value",
    "text": "10.Combining Passenger Volume Data with Distance Value\n\nweekday_afternoon_od1$ORIGIN_HEX &lt;- as.factor(weekday_afternoon_od1$ORIGIN_HEX)\nweekday_afternoon_od1$DESTIN_HEX &lt;- as.factor(weekday_afternoon_od1$DESTIN_HEX)\ndistPair$orig &lt;- as.factor(distPair$orig)\ndistPair$dest &lt;- as.factor(distPair$dest)\n\n\nweekday_afternoon_od2 &lt;- weekday_afternoon_od1 %&gt;%\n  left_join (distPair,\n             by = c(\"ORIGIN_HEX\" = \"orig\",\n                    \"DESTIN_HEX\" = \"dest\"))\n\n\nhex_grid_df &lt;- as.data.frame(hex_grid_sf) %&gt;%\n  select(hex_id, bus_stop_count, business_count, school_count, finserv_count, \n         entertn_count, FB_count, lere_count, retail_count, trainexits_count, residential_count) %&gt;%\n  mutate(hex_id = as.character(hex_id))\n\n\norigin_factors &lt;- hex_grid_df %&gt;%\n  select(hex_id, bus_stop_count, business_count, school_count, finserv_count)\nweekday_afternoon_od2 &lt;- weekday_afternoon_od2 %&gt;%\n  mutate(ORIGIN_HEX = as.character(ORIGIN_HEX),\n         DESTIN_HEX = as.character(DESTIN_HEX))\n\n\nweekday_afternoon_od2_with_origin &lt;- weekday_afternoon_od2 %&gt;%\n  left_join(origin_factors, by = c(\"ORIGIN_HEX\" = \"hex_id\"))\n\n\ndestin_factors &lt;- hex_grid_df %&gt;%\n  select(hex_id, entertn_count, FB_count, lere_count, retail_count, trainexits_count, residential_count)\n\n\nweekday_afternoon_od2_complete &lt;- weekday_afternoon_od2_with_origin %&gt;%\n  left_join(destin_factors, by = c(\"DESTIN_HEX\" = \"hex_id\"))\n\n\nglimpse(weekday_afternoon_od2_complete)\n\nRows: 161,671\nColumns: 14\nGroups: ORIGIN_HEX [1,808]\n$ ORIGIN_HEX             &lt;chr&gt; \"393\", \"393\", \"393\", \"393\", \"393\", \"393\", \"393\"…\n$ DESTIN_HEX             &lt;chr&gt; \"535\", \"585\", \"723\", \"770\", \"779\", \"824\", \"827\"…\n$ WEEKDAY_AFTERNOON_PEAK &lt;dbl&gt; 3, 34, 182, 1, 1, 18, 6, 145, 2, 16, 250, 23, 2…\n$ dist                   &lt;dbl&gt; 750.000, 3122.499, 1561.249, 1887.459, 7697.402…\n$ bus_stop_count         &lt;int&gt; 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,…\n$ business_count         &lt;int&gt; 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 0, 0, 0, 0,…\n$ school_count           &lt;int&gt; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,…\n$ finserv_count          &lt;int&gt; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,…\n$ entertn_count          &lt;int&gt; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,…\n$ FB_count               &lt;int&gt; 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0,…\n$ lere_count             &lt;int&gt; 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0,…\n$ retail_count           &lt;int&gt; 0, 1, 0, 0, 0, 0, 3, 0, 2, 0, 3, 9, 2, 1, 0, 0,…\n$ trainexits_count       &lt;int&gt; 0, 0, 0, 0, 0, 0, 2, 2, 0, 0, 2, 2, 0, 0, 0, 0,…\n$ residential_count      &lt;dbl&gt; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,…\n\n\n\nwrite_rds(weekday_afternoon_od2_complete, \"data/rds/SIM_data.rds\")\n\n\nrm(business, busstop, busstop_hex, busstop_mpsz, destin_factors, dist, distPair, entertn, FB, finserv, hdb, hex_grid_df, hex_grid_sf, hex_grid_sp, lere, mpsz, origin_factors, residential, retail, schools, trainexits, weekday_afternoon_flowLine, weekday_afternoon_od, weekday_afternoon_od1, weekday_afternoon_od2, weekday_afternoon_od2_complete, weekday_afternoon_od2_with_origin, hex_names)"
  },
  {
    "objectID": "Take-home Ex/Take-home Ex 2/Take-home_Ex_2.html#calibrating-spatial-interaction-models",
    "href": "Take-home Ex/Take-home Ex 2/Take-home_Ex_2.html#calibrating-spatial-interaction-models",
    "title": "Take-home Exercise 2: Analyzing the Dynamics of Bus Commute Flow and Spatial Interaction in Singapore",
    "section": "11.Calibrating Spatial Interaction Models",
    "text": "11.Calibrating Spatial Interaction Models\n\n11.1Importing the modelling data\n\nSIM_data &lt;- read_rds(\"data/rds/SIM_data.rds\")\n\n\n\n11.2Visualising the dependent variable\n\nggplot(data = SIM_data,\n       aes(x = WEEKDAY_AFTERNOON_PEAK)) +\n  geom_histogram()\n\n\n\n\n\nggplot(data = SIM_data,\n       aes(x = dist,\n           y = WEEKDAY_AFTERNOON_PEAK)) +\n  geom_point() +\n  geom_smooth(method = lm)\n\n\n\n\n\nggplot(data = SIM_data,\n       aes(x = log(dist),\n           y = log(WEEKDAY_AFTERNOON_PEAK))) +\n  geom_point() +\n  geom_smooth(method = lm)\n\n\n\n\n\n\n11.3Checking and Replacing Variables with Zero Values\n\nsummary(SIM_data)\n\n  ORIGIN_HEX         DESTIN_HEX        WEEKDAY_AFTERNOON_PEAK      dist      \n Length:161671      Length:161671      Min.   :    1.0        Min.   :  433  \n Class :character   Class :character   1st Qu.:    4.0        1st Qu.: 2411  \n Mode  :character   Mode  :character   Median :   18.0        Median : 4684  \n                                       Mean   :  148.4        Mean   : 5658  \n                                       3rd Qu.:   73.0        3rd Qu.: 8020  \n                                       Max.   :59391.0        Max.   :25159  \n bus_stop_count   business_count    school_count    finserv_count   \n Min.   : 1.000   Min.   : 0.000   Min.   :0.0000   Min.   : 0.000  \n 1st Qu.: 2.000   1st Qu.: 0.000   1st Qu.:0.0000   1st Qu.: 0.000  \n Median : 3.000   Median : 0.000   Median :0.0000   Median : 1.000  \n Mean   : 3.401   Mean   : 2.556   Mean   :0.1795   Mean   : 3.944  \n 3rd Qu.: 4.000   3rd Qu.: 2.000   3rd Qu.:0.0000   3rd Qu.: 4.000  \n Max.   :13.000   Max.   :60.000   Max.   :4.0000   Max.   :91.000  \n entertn_count       FB_count        lere_count       retail_count   \n Min.   :0.0000   Min.   : 0.000   Min.   : 0.0000   Min.   :  0.00  \n 1st Qu.:0.0000   1st Qu.: 0.000   1st Qu.: 0.0000   1st Qu.:  2.00  \n Median :0.0000   Median : 0.000   Median : 0.0000   Median :  7.00  \n Mean   :0.1352   Mean   : 2.135   Mean   : 0.8934   Mean   : 38.84  \n 3rd Qu.:0.0000   3rd Qu.: 1.000   3rd Qu.: 1.0000   3rd Qu.: 31.00  \n Max.   :8.0000   Max.   :71.000   Max.   :26.0000   Max.   :986.00  \n trainexits_count residential_count\n Min.   :0.0000   Min.   :   0.0   \n 1st Qu.:0.0000   1st Qu.:   0.0   \n Median :0.0000   Median : 219.0   \n Mean   :0.6436   Mean   : 674.6   \n 3rd Qu.:0.0000   3rd Qu.:1264.0   \n Max.   :9.0000   Max.   :3531.0   \n\n\n\nSIM_data$business_count &lt;- ifelse(\n  SIM_data$business_count == 0,\n  0.99, SIM_data$business_count)\nSIM_data$school_count &lt;- ifelse(\n  SIM_data$school_count == 0,\n  0.99, SIM_data$school_count)\nSIM_data$finserv_count &lt;- ifelse(\n  SIM_data$finserv_count == 0,\n  0.99, SIM_data$finserv_count)\nSIM_data$entertn_count &lt;- ifelse(\n  SIM_data$entertn_count == 0,\n  0.99, SIM_data$entertn_count)\nSIM_data$FB_count &lt;- ifelse(\n  SIM_data$FB_count == 0,\n  0.99, SIM_data$FB_count)\nSIM_data$lere_count &lt;- ifelse(\n  SIM_data$lere_count == 0,\n  0.99, SIM_data$lere_count)\nSIM_data$retail_count &lt;- ifelse(\n  SIM_data$retail_count == 0,\n  0.99, SIM_data$retail_count)\nSIM_data$trainexits_count &lt;- ifelse(\n  SIM_data$trainexits_count == 0,\n  0.99, SIM_data$trainexits_count)\nSIM_data$residential_count &lt;- ifelse(\n  SIM_data$residential_count == 0,\n  0.99, SIM_data$residential_count)\n\n\nsummary(SIM_data)\n\n  ORIGIN_HEX         DESTIN_HEX        WEEKDAY_AFTERNOON_PEAK      dist      \n Length:161671      Length:161671      Min.   :    1.0        Min.   :  433  \n Class :character   Class :character   1st Qu.:    4.0        1st Qu.: 2411  \n Mode  :character   Mode  :character   Median :   18.0        Median : 4684  \n                                       Mean   :  148.4        Mean   : 5658  \n                                       3rd Qu.:   73.0        3rd Qu.: 8020  \n                                       Max.   :59391.0        Max.   :25159  \n bus_stop_count   business_count    school_count   finserv_count   \n Min.   : 1.000   Min.   : 0.990   Min.   :0.990   Min.   : 0.990  \n 1st Qu.: 2.000   1st Qu.: 0.990   1st Qu.:0.990   1st Qu.: 0.990  \n Median : 3.000   Median : 0.990   Median :0.990   Median : 1.000  \n Mean   : 3.401   Mean   : 3.138   Mean   :1.018   Mean   : 4.391  \n 3rd Qu.: 4.000   3rd Qu.: 2.000   3rd Qu.:0.990   3rd Qu.: 4.000  \n Max.   :13.000   Max.   :60.000   Max.   :4.000   Max.   :91.000  \n entertn_count      FB_count        lere_count      retail_count   \n Min.   :0.990   Min.   : 0.990   Min.   : 0.990   Min.   :  0.99  \n 1st Qu.:0.990   1st Qu.: 0.990   1st Qu.: 0.990   1st Qu.:  2.00  \n Median :0.990   Median : 0.990   Median : 0.990   Median :  7.00  \n Mean   :1.045   Mean   : 2.862   Mean   : 1.539   Mean   : 38.99  \n 3rd Qu.:0.990   3rd Qu.: 1.000   3rd Qu.: 1.000   3rd Qu.: 31.00  \n Max.   :8.000   Max.   :71.000   Max.   :26.000   Max.   :986.00  \n trainexits_count residential_count\n Min.   :0.990    Min.   :   0.99  \n 1st Qu.:0.990    1st Qu.:   0.99  \n Median :0.990    Median : 219.00  \n Mean   :1.399    Mean   : 675.02  \n 3rd Qu.:0.990    3rd Qu.:1264.00  \n Max.   :9.000    Max.   :3531.00  \n\n\n\n\n11.4Unconstrained Spatial Interaction Model\n\nuncSIM &lt;- glm(formula = WEEKDAY_AFTERNOON_PEAK ~ \n                log(bus_stop_count) + \n                log(business_count) +\n                log(school_count) +\n                log(finserv_count) +\n                log(entertn_count) +\n                log(FB_count) +\n                log(lere_count) +\n                log(retail_count) +\n                log(trainexits_count) +\n                log(residential_count) +\n                log(dist),\n              family = poisson(link = \"log\"),\n              data = SIM_data,\n              na.action = na.exclude)\nwrite_rds(uncSIM, \"data/rds/uncSIM.rds\")\n\n\nuncSIM &lt;- read_rds(\"data/rds/uncSIM.rds\")\nuncSIM\n\n\nCall:  glm(formula = WEEKDAY_AFTERNOON_PEAK ~ log(bus_stop_count) + \n    log(business_count) + log(school_count) + log(finserv_count) + \n    log(entertn_count) + log(FB_count) + log(lere_count) + log(retail_count) + \n    log(trainexits_count) + log(residential_count) + log(dist), \n    family = poisson(link = \"log\"), data = SIM_data, na.action = na.exclude)\n\nCoefficients:\n           (Intercept)     log(bus_stop_count)     log(business_count)  \n              11.67689                 0.40019                -0.06794  \n     log(school_count)      log(finserv_count)      log(entertn_count)  \n              -0.31202                 0.42704                 0.05788  \n         log(FB_count)         log(lere_count)       log(retail_count)  \n              -0.17995                -0.10079                 0.05820  \n log(trainexits_count)  log(residential_count)               log(dist)  \n               0.69347                 0.12209                -1.04916  \n\nDegrees of Freedom: 161670 Total (i.e. Null);  161659 Residual\nNull Deviance:      96290000 \nResidual Deviance: 59350000     AIC: 60130000\n\n\n\n\n11.5R-squared Function\n\nCalcRSquared &lt;- function(observed,estimated){\n  r &lt;- cor(observed,estimated)\n  R2 &lt;- r^2\n  R2\n}\n\n\nCalcRSquared(uncSIM$data$WEEKDAY_AFTERNOON_PEAK, uncSIM$fitted.values)\n\n[1] 0.1063576\n\n\n\nr2_mcfadden(uncSIM)\n\n# R2 for Generalized Linear Regression\n       R2: 0.381\n  adj. R2: 0.381\n\n\n\n\n11.6Origin Constrained Spatial Interaction Model\n\norcSIM &lt;- glm(formula = WEEKDAY_AFTERNOON_PEAK ~\n                ORIGIN_HEX +\n                log(entertn_count) +\n                log(FB_count) +\n                log(lere_count) +\n                log(retail_count) +\n                log(trainexits_count) +\n                log(residential_count) +\n                log(dist),\n              family = poisson(link = \"log\"),\n              data = SIM_data,\n              na.action = na.exclude)\nwrite_rds(orcSIM, \"data/rds/orcSIM.rds\")\n\n\norcSIM &lt;- read_rds(\"data/rds/orcSIM.rds\")\norcSIM\n\n\nCall:  glm(formula = WEEKDAY_AFTERNOON_PEAK ~ ORIGIN_HEX + log(entertn_count) + \n    log(FB_count) + log(lere_count) + log(retail_count) + log(trainexits_count) + \n    log(residential_count) + log(dist), family = poisson(link = \"log\"), \n    data = SIM_data, na.action = na.exclude)\n\nCoefficients:\n           (Intercept)          ORIGIN_HEX1012          ORIGIN_HEX1013  \n            12.2146119              -1.1232728               0.0834191  \n        ORIGIN_HEX1014          ORIGIN_HEX1058          ORIGIN_HEX1059  \n             0.6124842              -3.6957314              -0.6714203  \n        ORIGIN_HEX1060          ORIGIN_HEX1061          ORIGIN_HEX1104  \n            -0.5027015              -0.2213456               1.3164351  \n        ORIGIN_HEX1106          ORIGIN_HEX1107          ORIGIN_HEX1108  \n             0.4673144               1.2099413               0.1395859  \n        ORIGIN_HEX1152          ORIGIN_HEX1153          ORIGIN_HEX1154  \n            -1.0968668              -0.5082854               0.8594057  \n        ORIGIN_HEX1199          ORIGIN_HEX1200          ORIGIN_HEX1201  \n            -0.6125329               0.1508162               0.5123503  \n        ORIGIN_HEX1202          ORIGIN_HEX1244          ORIGIN_HEX1245  \n             0.3357323               1.3788573               0.6675282  \n        ORIGIN_HEX1246          ORIGIN_HEX1247          ORIGIN_HEX1291  \n            -0.3714249              -0.4101895               1.6401911  \n        ORIGIN_HEX1292          ORIGIN_HEX1293          ORIGIN_HEX1295  \n             1.2503401               1.5477108               0.2113326  \n        ORIGIN_HEX1338          ORIGIN_HEX1339          ORIGIN_HEX1340  \n             1.6483118              -0.2701012              -0.0671674  \n        ORIGIN_HEX1341          ORIGIN_HEX1385          ORIGIN_HEX1386  \n             0.6648272               0.3461467              -1.3002130  \n        ORIGIN_HEX1387          ORIGIN_HEX1388          ORIGIN_HEX1433  \n             0.5593144              -1.5967428               1.3470366  \n        ORIGIN_HEX1434          ORIGIN_HEX1479          ORIGIN_HEX1480  \n            -1.1888456              -0.0513426               1.5276145  \n        ORIGIN_HEX1481          ORIGIN_HEX1525          ORIGIN_HEX1526  \n             0.6237632               1.5438707              -0.9104852  \n        ORIGIN_HEX1527          ORIGIN_HEX1528          ORIGIN_HEX1529  \n             1.2066114               0.8178755               1.1631925  \n        ORIGIN_HEX1573          ORIGIN_HEX1574          ORIGIN_HEX1575  \n             0.1021890              -1.6188279               1.4591288  \n        ORIGIN_HEX1619          ORIGIN_HEX1621          ORIGIN_HEX1622  \n             0.9872447               2.6350589               0.1417837  \n        ORIGIN_HEX1623          ORIGIN_HEX1666          ORIGIN_HEX1668  \n             1.9846656               1.1502891               0.4249987  \n        ORIGIN_HEX1669          ORIGIN_HEX1670          ORIGIN_HEX1671  \n             1.0466328               0.8519089              -1.3363757  \n        ORIGIN_HEX1715          ORIGIN_HEX1717          ORIGIN_HEX1718  \n             1.0875148              -0.4159235               2.0813279  \n        ORIGIN_HEX1761          ORIGIN_HEX1762          ORIGIN_HEX1763  \n             0.7785746               1.2993884               2.3826871  \n        ORIGIN_HEX1764          ORIGIN_HEX1765          ORIGIN_HEX1768  \n            -3.3052426              -2.4649452              -0.5687006  \n        ORIGIN_HEX1808          ORIGIN_HEX1809          ORIGIN_HEX1810  \n             0.8247703               0.5879864               1.6827475  \n        ORIGIN_HEX1811          ORIGIN_HEX1812          ORIGIN_HEX1814  \n            -1.2049275              -1.2436807               1.2992878  \n        ORIGIN_HEX1815          ORIGIN_HEX1855          ORIGIN_HEX1856  \n            -0.6022784               1.2201632              -0.6488613  \n        ORIGIN_HEX1857          ORIGIN_HEX1858          ORIGIN_HEX1859  \n             1.3868157               1.6168154               1.5906235  \n        ORIGIN_HEX1861          ORIGIN_HEX1862          ORIGIN_HEX1903  \n             1.6875438               2.5260569              -0.9773752  \n        ORIGIN_HEX1904          ORIGIN_HEX1905          ORIGIN_HEX1906  \n             1.1607129              -1.6120253              -1.2186386  \n        ORIGIN_HEX1907          ORIGIN_HEX1909          ORIGIN_HEX1950  \n            -0.1349058               0.2826431              -2.3107875  \n        ORIGIN_HEX1952          ORIGIN_HEX1953          ORIGIN_HEX1955  \n             1.7654787              -0.6232722               2.0091364  \n        ORIGIN_HEX1956          ORIGIN_HEX1957          ORIGIN_HEX1996  \n             0.2970540              -0.3343039               0.3600461  \n        ORIGIN_HEX1997          ORIGIN_HEX1998          ORIGIN_HEX1999  \n            -0.0442811               1.7923203               0.2805291  \n        ORIGIN_HEX2000          ORIGIN_HEX2003          ORIGIN_HEX2046  \n            -0.7633798              -0.0990055              -0.3938473  \n        ORIGIN_HEX2047          ORIGIN_HEX2049          ORIGIN_HEX2050  \n             1.1862402               0.8174522              -0.1415366  \n        ORIGIN_HEX2051          ORIGIN_HEX2090          ORIGIN_HEX2092  \n             1.2559151              -0.2674990               1.8823655  \n        ORIGIN_HEX2093          ORIGIN_HEX2094          ORIGIN_HEX2095  \n             0.1352920              -0.4729770              -0.0751354  \n        ORIGIN_HEX2096          ORIGIN_HEX2139          ORIGIN_HEX2140  \n            -1.1432896              -2.4592280               1.6702654  \n        ORIGIN_HEX2141          ORIGIN_HEX2142          ORIGIN_HEX2143  \n            -0.0843711              -0.1356914               0.7089135  \n        ORIGIN_HEX2145          ORIGIN_HEX2146          ORIGIN_HEX2184  \n             1.3588908              -1.3799040               0.0931636  \n        ORIGIN_HEX2187          ORIGIN_HEX2189          ORIGIN_HEX2190  \n            -0.6736008              -1.6585222               0.1304956  \n        ORIGIN_HEX2192          ORIGIN_HEX2193          ORIGIN_HEX2194  \n            -1.1777504               0.9474195               0.0004905  \n        ORIGIN_HEX2232          ORIGIN_HEX2233          ORIGIN_HEX2234  \n             0.2344905               1.5635186               1.0494823  \n        ORIGIN_HEX2235          ORIGIN_HEX2236          ORIGIN_HEX2237  \n             0.4438395              -0.3809052               0.2469121  \n        ORIGIN_HEX2238          ORIGIN_HEX2239          ORIGIN_HEX2241  \n             0.6055828               0.4171301              -1.8325487  \n        ORIGIN_HEX2242          ORIGIN_HEX2278          ORIGIN_HEX2279  \n            -0.4236908              -0.2278623               0.6966419  \n        ORIGIN_HEX2280          ORIGIN_HEX2281          ORIGIN_HEX2282  \n             1.4514008               0.5754270               0.3590999  \n        ORIGIN_HEX2283          ORIGIN_HEX2284          ORIGIN_HEX2288  \n             1.5845045              -0.0734321               0.1675462  \n        ORIGIN_HEX2289          ORIGIN_HEX2290          ORIGIN_HEX2326  \n            -1.9426846              -3.6744967              -0.8393572  \n        ORIGIN_HEX2327          ORIGIN_HEX2328          ORIGIN_HEX2329  \n             1.1992830              -1.1457234               0.5989836  \n        ORIGIN_HEX2330          ORIGIN_HEX2331          ORIGIN_HEX2332  \n            -0.1568768               0.6016083               0.7699250  \n        ORIGIN_HEX2337          ORIGIN_HEX2340          ORIGIN_HEX2341  \n            -1.2387776              -1.0026606              -3.1148913  \n        ORIGIN_HEX2342          ORIGIN_HEX2372          ORIGIN_HEX2376  \n            -1.2525360               0.4220926              -2.1631551  \n        ORIGIN_HEX2377          ORIGIN_HEX2378          ORIGIN_HEX2379  \n             0.2903871              -0.0614725               0.6377149  \n        ORIGIN_HEX2382          ORIGIN_HEX2386          ORIGIN_HEX2387  \n            -3.1910650              -1.4074848              -5.2715931  \n        ORIGIN_HEX2389          ORIGIN_HEX2421          ORIGIN_HEX2422  \n            -0.1426100               0.5355638               1.6328897  \n        ORIGIN_HEX2423          ORIGIN_HEX2424          ORIGIN_HEX2425  \n             0.4999534              -2.2434270              -0.4138955  \n        ORIGIN_HEX2426          ORIGIN_HEX2436          ORIGIN_HEX2437  \n            -0.0189230               1.0224484              -1.7137900  \n        ORIGIN_HEX2466          ORIGIN_HEX2470          ORIGIN_HEX2471  \n            -0.3324475               0.7160412               3.1010085  \n        ORIGIN_HEX2472          ORIGIN_HEX2473          ORIGIN_HEX2476  \n             0.2559324               1.0153091              -3.1315670  \n        ORIGIN_HEX2484          ORIGIN_HEX2515          ORIGIN_HEX2516  \n            -0.9226008               0.0830500               0.4198018  \n        ORIGIN_HEX2518          ORIGIN_HEX2519          ORIGIN_HEX2520  \n            -2.6558177              -0.4908226              -1.1617722  \n        ORIGIN_HEX2532          ORIGIN_HEX2533          ORIGIN_HEX2534  \n            -2.4978366              -0.6334217              -0.1609490  \n        ORIGIN_HEX2562          ORIGIN_HEX2563          ORIGIN_HEX2564  \n            -0.0182499               0.8234200               1.3195002  \n        ORIGIN_HEX2565          ORIGIN_HEX2566          ORIGIN_HEX2567  \n            -1.8830530              -0.5882415              -0.4802982  \n        ORIGIN_HEX2570          ORIGIN_HEX2579          ORIGIN_HEX2609  \n            -4.2327829              -3.8214580              -0.0907136  \n        ORIGIN_HEX2611          ORIGIN_HEX2612          ORIGIN_HEX2613  \n             0.3898628               0.3640899              -0.5721390  \n        ORIGIN_HEX2614          ORIGIN_HEX2655          ORIGIN_HEX2657  \n             0.7980937              -0.5860837              -0.3887114  \n        ORIGIN_HEX2658          ORIGIN_HEX2660          ORIGIN_HEX2661  \n             1.3442512               0.7700844              -0.7084062  \n        ORIGIN_HEX2664          ORIGIN_HEX2703          ORIGIN_HEX2705  \n            -0.5157909              -2.3180451              -0.4601412  \n        ORIGIN_HEX2706          ORIGIN_HEX2707          ORIGIN_HEX2708  \n             0.5500602              -0.4117198              -0.8756490  \n        ORIGIN_HEX2712          ORIGIN_HEX2752          ORIGIN_HEX2753  \n             0.4656846              -0.1345038              -0.0942630  \n        ORIGIN_HEX2754          ORIGIN_HEX2755          ORIGIN_HEX2758  \n            -0.7419777               0.1006397              -0.0216992  \n        ORIGIN_HEX2797          ORIGIN_HEX2798          ORIGIN_HEX2799  \n             0.7094211              -1.0773740              -0.2653153  \n        ORIGIN_HEX2800          ORIGIN_HEX2802          ORIGIN_HEX2806  \n            -0.7333003               0.8382372               0.8390265  \n        ORIGIN_HEX2843          ORIGIN_HEX2844          ORIGIN_HEX2845  \n             0.9410683              -0.1103087               0.6087839  \n        ORIGIN_HEX2846          ORIGIN_HEX2847          ORIGIN_HEX2848  \n            -0.5875411               0.1872471               2.4708727  \n        ORIGIN_HEX2849          ORIGIN_HEX2891          ORIGIN_HEX2893  \n            -0.3609997               0.9092353               0.3249502  \n        ORIGIN_HEX2894          ORIGIN_HEX2895          ORIGIN_HEX2896  \n             0.6591408              -0.7842087              -1.0554792  \n        ORIGIN_HEX2897          ORIGIN_HEX2900          ORIGIN_HEX2937  \n            -0.6836332               0.9182720               0.3773590  \n        ORIGIN_HEX2939          ORIGIN_HEX2940          ORIGIN_HEX2941  \n             0.4129201               0.2143413              -0.7182327  \n        ORIGIN_HEX2942          ORIGIN_HEX2943          ORIGIN_HEX2987  \n            -1.0721704               0.7460494              -0.8310831  \n        ORIGIN_HEX2988          ORIGIN_HEX2990          ORIGIN_HEX2994  \n            -0.6971969              -0.1935696              -2.3405647  \n        ORIGIN_HEX3031          ORIGIN_HEX3033          ORIGIN_HEX3036  \n             0.6062849              -0.3812143              -0.9961095  \n        ORIGIN_HEX3084          ORIGIN_HEX3125          ORIGIN_HEX3129  \n             0.2732330              -0.2696515              -2.7185448  \n        ORIGIN_HEX3130          ORIGIN_HEX3135          ORIGIN_HEX3172  \n             0.3905817              -1.2462760               1.2958032  \n        ORIGIN_HEX3173          ORIGIN_HEX3176          ORIGIN_HEX3177  \n             0.9492186              -2.9362429               0.6116500  \n        ORIGIN_HEX3182          ORIGIN_HEX3218          ORIGIN_HEX3220  \n            -1.0390481               0.2216831               0.4569443  \n        ORIGIN_HEX3221          ORIGIN_HEX3223          ORIGIN_HEX3224  \n            -3.9730883              -0.9420276               0.4114902  \n        ORIGIN_HEX3225          ORIGIN_HEX3229          ORIGIN_HEX3238  \n            -1.3968761               0.5142262              -0.9948517  \n        ORIGIN_HEX3266          ORIGIN_HEX3268          ORIGIN_HEX3269  \n            -0.0214121               0.8779738              -1.5961636  \n        ORIGIN_HEX3270          ORIGIN_HEX3271          ORIGIN_HEX3272  \n             0.3971190               0.1776396              -1.3151783  \n        ORIGIN_HEX3273          ORIGIN_HEX3276          ORIGIN_HEX3277  \n             0.6430561               0.2161216              -0.0136848  \n        ORIGIN_HEX3312          ORIGIN_HEX3314          ORIGIN_HEX3316  \n             0.2882789              -2.6345576               0.0599729  \n        ORIGIN_HEX3317          ORIGIN_HEX3318          ORIGIN_HEX3319  \n            -0.6876372              -0.8603021              -0.1459794  \n        ORIGIN_HEX3320          ORIGIN_HEX3322          ORIGIN_HEX3323  \n             0.4940919              -1.6540433               0.3697562  \n        ORIGIN_HEX3325          ORIGIN_HEX3362          ORIGIN_HEX3363  \n            -1.7356942              -0.1762301              -1.5297922  \n        ORIGIN_HEX3364          ORIGIN_HEX3365          ORIGIN_HEX3366  \n             1.9158610               0.2627902               0.3058646  \n        ORIGIN_HEX3367          ORIGIN_HEX3368          ORIGIN_HEX3370  \n             0.1188548              -0.2288376               0.0830823  \n        ORIGIN_HEX3371          ORIGIN_HEX3372          ORIGIN_HEX3406  \n            -0.2711702              -1.4751295              -1.1132599  \n        ORIGIN_HEX3408          ORIGIN_HEX3409          ORIGIN_HEX3410  \n            -1.2127302               0.2939776              -0.1290954  \n        ORIGIN_HEX3411          ORIGIN_HEX3412          ORIGIN_HEX3413  \n            -0.3270765              -0.2095660              -0.0454839  \n        ORIGIN_HEX3414          ORIGIN_HEX3415          ORIGIN_HEX3416  \n            -0.5022096              -0.6678825              -0.6082427  \n        ORIGIN_HEX3417          ORIGIN_HEX3418          ORIGIN_HEX3419  \n             0.1264543               2.6952521               0.5780081  \n        ORIGIN_HEX3426          ORIGIN_HEX3453          ORIGIN_HEX3456  \n            -0.4380904              -0.6501199               0.1226379  \n        ORIGIN_HEX3457          ORIGIN_HEX3458          ORIGIN_HEX3459  \n            -1.2418845               0.8096226              -0.5891016  \n        ORIGIN_HEX3460          ORIGIN_HEX3461          ORIGIN_HEX3462  \n             0.2411234              -2.6615380              -0.3067930  \n        ORIGIN_HEX3463          ORIGIN_HEX3464          ORIGIN_HEX3465  \n            -1.9692455               0.5448568              -2.4696135  \n        ORIGIN_HEX3466          ORIGIN_HEX3467          ORIGIN_HEX3468  \n            -1.3892184              -0.5422293              -0.2770123  \n        ORIGIN_HEX3472          ORIGIN_HEX3473          ORIGIN_HEX3499  \n            -0.8606317              -0.3139224               0.1108829  \n        ORIGIN_HEX3502          ORIGIN_HEX3503          ORIGIN_HEX3504  \n            -0.2826157               0.0642999               0.7549507  \n        ORIGIN_HEX3505          ORIGIN_HEX3506          ORIGIN_HEX3507  \n             0.0318715               0.0744326              -0.7701441  \n        ORIGIN_HEX3508          ORIGIN_HEX3509          ORIGIN_HEX3511  \n            -0.3879061              -0.4118409              -0.8794052  \n        ORIGIN_HEX3512          ORIGIN_HEX3513          ORIGIN_HEX3514  \n            -2.6736844              -0.1655829               2.2431147  \n        ORIGIN_HEX3518          ORIGIN_HEX3519          ORIGIN_HEX3547  \n            -0.4201076              -0.6117609               1.0466494  \n        ORIGIN_HEX3549          ORIGIN_HEX3551          ORIGIN_HEX3552  \n             1.3705956               0.9941496               0.4869899  \n        ORIGIN_HEX3554          ORIGIN_HEX3555          ORIGIN_HEX3556  \n             0.0806395              -1.1141682              -0.3676071  \n        ORIGIN_HEX3557          ORIGIN_HEX3558          ORIGIN_HEX3559  \n             0.0156517              -0.7604519               0.4635064  \n        ORIGIN_HEX3561          ORIGIN_HEX3562          ORIGIN_HEX3564  \n            -1.5767347               0.9065921              -0.7034696  \n        ORIGIN_HEX3565          ORIGIN_HEX3593          ORIGIN_HEX3594  \n            -0.4715006               0.5277139               0.4037082  \n        ORIGIN_HEX3595          ORIGIN_HEX3599          ORIGIN_HEX3600  \n             1.7788213               0.9491316              -1.0398979  \n        ORIGIN_HEX3601          ORIGIN_HEX3602          ORIGIN_HEX3603  \n             1.8794969               2.0793321              -0.3982916  \n        ORIGIN_HEX3604          ORIGIN_HEX3605          ORIGIN_HEX3607  \n            -0.0480712              -0.2266805              -0.1882790  \n        ORIGIN_HEX3608          ORIGIN_HEX3610          ORIGIN_HEX3611  \n             0.1387400               0.0013620              -1.4523176  \n        ORIGIN_HEX3613          ORIGIN_HEX3641          ORIGIN_HEX3643  \n            -0.6376790              -0.1783165               0.2462642  \n        ORIGIN_HEX3644          ORIGIN_HEX3645          ORIGIN_HEX3647  \n             0.1202794               0.7335480               0.8453207  \n        ORIGIN_HEX3648          ORIGIN_HEX3649          ORIGIN_HEX3652  \n            -0.4848099              -0.5811055              -0.8134454  \n        ORIGIN_HEX3653          ORIGIN_HEX3654          ORIGIN_HEX3655  \n             0.5942657              -1.5104633              -1.2307880  \n        ORIGIN_HEX3656          ORIGIN_HEX3657          ORIGIN_HEX3658  \n            -2.6634418              -1.0766408              -3.6929401  \n        ORIGIN_HEX3661          ORIGIN_HEX3689          ORIGIN_HEX3691  \n             0.6251063               0.2899308              -0.2528351  \n        ORIGIN_HEX3692          ORIGIN_HEX3693          ORIGIN_HEX3694  \n             0.0243562               1.7159539               0.7469658  \n        ORIGIN_HEX3695          ORIGIN_HEX3699          ORIGIN_HEX3700  \n             0.5407181              -0.5386721              -1.2935408  \n        ORIGIN_HEX3701          ORIGIN_HEX3702          ORIGIN_HEX3703  \n            -0.8630636              -0.7835742               1.0917171  \n        ORIGIN_HEX3704          ORIGIN_HEX3705          ORIGIN_HEX3706  \n            -1.7432516              -1.8526563              -1.7414090  \n        ORIGIN_HEX3707          ORIGIN_HEX3736          ORIGIN_HEX3739  \n             0.4085324               0.2667198              -0.2219285  \n        ORIGIN_HEX3740          ORIGIN_HEX3741          ORIGIN_HEX3742  \n             0.6286191              -1.1961332               0.3792087  \n        ORIGIN_HEX3748          ORIGIN_HEX3750          ORIGIN_HEX3751  \n            -2.0413223               0.3364379               0.8119677  \n        ORIGIN_HEX3753          ORIGIN_HEX3754          ORIGIN_HEX3782  \n            -0.5612480              -1.7883868               0.4098725  \n        ORIGIN_HEX3783          ORIGIN_HEX3784          ORIGIN_HEX3785  \n             0.5539454               0.0951283              -1.4018614  \n        ORIGIN_HEX3786          ORIGIN_HEX3787          ORIGIN_HEX3788  \n             0.1528408               1.4451281              -0.3731559  \n        ORIGIN_HEX3789          ORIGIN_HEX3793          ORIGIN_HEX3794  \n            -0.4007743               0.1987353               0.2177661  \n        ORIGIN_HEX3798          ORIGIN_HEX3829          ORIGIN_HEX3830  \n            -2.2894655               0.2572865               0.4055852  \n        ORIGIN_HEX3831          ORIGIN_HEX3832          ORIGIN_HEX3836  \n            -0.2110119               0.3401272              -1.3656452  \n        ORIGIN_HEX3837          ORIGIN_HEX3839          ORIGIN_HEX3840  \n            -0.1389450               0.1276391              -2.9407318  \n        ORIGIN_HEX3841          ORIGIN_HEX3845          ORIGIN_HEX3847  \n             0.1898643              -0.2901790               2.4623759  \n        ORIGIN_HEX3848          ORIGIN_HEX3875          ORIGIN_HEX3876  \n            -2.4690645              -0.7137543               1.4556358  \n        ORIGIN_HEX3877          ORIGIN_HEX3878          ORIGIN_HEX3879  \n            -0.0691601               1.5759185               1.0589654  \n        ORIGIN_HEX3881          ORIGIN_HEX3882          ORIGIN_HEX3884  \n            -1.6543990              -1.7953596               0.3577007  \n        ORIGIN_HEX3886          ORIGIN_HEX3887          ORIGIN_HEX3888  \n            -1.0413490               2.4440777              -1.1230682  \n        ORIGIN_HEX3895          ORIGIN_HEX3922          ORIGIN_HEX3923  \n            -0.5977376              -0.8445088               0.0710703  \n        ORIGIN_HEX3924          ORIGIN_HEX3925          ORIGIN_HEX3926  \n            -1.0483151               2.4867736              -0.7386350  \n         ORIGIN_HEX393          ORIGIN_HEX3930          ORIGIN_HEX3932  \n             0.0748725              -1.7744801               1.1018208  \n        ORIGIN_HEX3933          ORIGIN_HEX3935          ORIGIN_HEX3936  \n            -0.9648284              -0.0893677              -3.0244609  \n        ORIGIN_HEX3939          ORIGIN_HEX3942          ORIGIN_HEX3943  \n             0.1022912               0.1401115              -0.1844777  \n        ORIGIN_HEX3968          ORIGIN_HEX3969          ORIGIN_HEX3971  \n            -0.4696466               0.0833382               0.7844217  \n        ORIGIN_HEX3972          ORIGIN_HEX3975          ORIGIN_HEX3976  \n            -0.0416777               0.3218407              -1.0409843  \n        ORIGIN_HEX3978          ORIGIN_HEX3979          ORIGIN_HEX3980  \n            -0.6891089              -1.0035714              -1.1680470  \n        ORIGIN_HEX3981          ORIGIN_HEX3982          ORIGIN_HEX3990  \n            -0.7701033              -0.4207720               0.5927693  \n        ORIGIN_HEX4016          ORIGIN_HEX4017          ORIGIN_HEX4018  \n             0.4915454               0.9270405               0.0028628  \n        ORIGIN_HEX4019          ORIGIN_HEX4020          ORIGIN_HEX4023  \n            -0.9490341               0.8315889              -0.2382569  \n        ORIGIN_HEX4024          ORIGIN_HEX4025          ORIGIN_HEX4026  \n            -2.0325295              -0.8575712               0.5677617  \n        ORIGIN_HEX4028          ORIGIN_HEX4029          ORIGIN_HEX4030  \n             0.3419513              -0.6681086               0.1104157  \n        ORIGIN_HEX4033          ORIGIN_HEX4038          ORIGIN_HEX4062  \n            -1.1301590               1.2437649              -0.4575949  \n        ORIGIN_HEX4063          ORIGIN_HEX4064          ORIGIN_HEX4065  \n             1.5298839               0.9035267               0.2585552  \n        ORIGIN_HEX4066          ORIGIN_HEX4067          ORIGIN_HEX4070  \n            -1.0115249              -1.2693475              -0.6069382  \n        ORIGIN_HEX4071          ORIGIN_HEX4073          ORIGIN_HEX4074  \n            -1.4124999              -0.7113560              -1.7292197  \n        ORIGIN_HEX4075          ORIGIN_HEX4076          ORIGIN_HEX4083  \n            -0.1366129               0.1278359              -0.6594922  \n        ORIGIN_HEX4084          ORIGIN_HEX4085          ORIGIN_HEX4109  \n             0.7138679               2.7469544              -1.1726588  \n        ORIGIN_HEX4111          ORIGIN_HEX4112          ORIGIN_HEX4113  \n             1.0044166               0.6727876              -0.8966347  \n        ORIGIN_HEX4114          ORIGIN_HEX4117          ORIGIN_HEX4118  \n            -1.0568778              -0.3188047              -0.6173458  \n        ORIGIN_HEX4122          ORIGIN_HEX4123          ORIGIN_HEX4124  \n             1.1066930              -4.2334140               0.0766450  \n        ORIGIN_HEX4127          ORIGIN_HEX4130          ORIGIN_HEX4131  \n            -0.6515512               0.2748054               0.2327975  \n        ORIGIN_HEX4132          ORIGIN_HEX4156          ORIGIN_HEX4157  \n             0.0717452               0.8670919               0.7067986  \n        ORIGIN_HEX4159          ORIGIN_HEX4161          ORIGIN_HEX4163  \n            -0.8523118              -0.6667618               1.5347373  \n        ORIGIN_HEX4167          ORIGIN_HEX4168          ORIGIN_HEX4169  \n            -0.4026023              -0.7169239               0.7924499  \n        ORIGIN_HEX4176          ORIGIN_HEX4177          ORIGIN_HEX4178  \n             0.2175129               1.9535237              -0.4356635  \n        ORIGIN_HEX4179          ORIGIN_HEX4203          ORIGIN_HEX4205  \n             1.1336441               0.8448089               1.1427649  \n        ORIGIN_HEX4206          ORIGIN_HEX4207          ORIGIN_HEX4208  \n            -0.9641100              -0.5306770              -1.4764445  \n        ORIGIN_HEX4209          ORIGIN_HEX4210          ORIGIN_HEX4211  \n             1.9392917              -1.2146626               1.0985189  \n        ORIGIN_HEX4215          ORIGIN_HEX4221          ORIGIN_HEX4224  \n            -0.2230598               0.0427077              -0.5883114  \n        ORIGIN_HEX4225          ORIGIN_HEX4226          ORIGIN_HEX4227  \n            -0.1098440               0.4189462              -1.5981051  \n        ORIGIN_HEX4250          ORIGIN_HEX4251          ORIGIN_HEX4253  \n             0.2938777               1.3626196               1.4360010  \n        ORIGIN_HEX4254          ORIGIN_HEX4256          ORIGIN_HEX4257  \n            -1.7719632               1.1344056               0.5489833  \n        ORIGIN_HEX4271          ORIGIN_HEX4272          ORIGIN_HEX4273  \n            -0.2701127               0.4437224              -1.8319950  \n        ORIGIN_HEX4297          ORIGIN_HEX4300          ORIGIN_HEX4301  \n            -0.2428270              -0.3035801              -2.0092310  \n        ORIGIN_HEX4302          ORIGIN_HEX4304          ORIGIN_HEX4315  \n            -0.7302497               1.3496999               1.0804958  \n        ORIGIN_HEX4318          ORIGIN_HEX4319          ORIGIN_HEX4320  \n            -0.0786315              -0.6787471               0.1423980  \n        ORIGIN_HEX4321          ORIGIN_HEX4343          ORIGIN_HEX4345  \n            -1.1970252               1.0384419               0.1231324  \n        ORIGIN_HEX4346          ORIGIN_HEX4347          ORIGIN_HEX4348  \n             0.6527212              -2.5097038              -1.2240404  \n        ORIGIN_HEX4351          ORIGIN_HEX4362          ORIGIN_HEX4365  \n             0.1735633              -0.6331248               0.3002720  \n        ORIGIN_HEX4390          ORIGIN_HEX4391          ORIGIN_HEX4392  \n            -0.2491534               0.8302184               1.5276421  \n        ORIGIN_HEX4393          ORIGIN_HEX4394          ORIGIN_HEX4395  \n             0.2512644               0.4052076              -0.9134584  \n        ORIGIN_HEX4398          ORIGIN_HEX4409          ORIGIN_HEX4412  \n            -2.2807713              -1.9069375              -0.8290563  \n        ORIGIN_HEX4413          ORIGIN_HEX4414          ORIGIN_HEX4415  \n             2.2581956               0.4021137               1.5116376  \n        ORIGIN_HEX4436          ORIGIN_HEX4437          ORIGIN_HEX4438  \n            -1.6569120              -0.9332247               0.9998659  \n        ORIGIN_HEX4439           ORIGIN_HEX444          ORIGIN_HEX4440  \n            -0.0583607               0.9179085              -0.5903698  \n        ORIGIN_HEX4441          ORIGIN_HEX4442          ORIGIN_HEX4459  \n            -0.0431278              -0.7177773               0.6599907  \n        ORIGIN_HEX4460          ORIGIN_HEX4484          ORIGIN_HEX4485  \n            -0.2456783              -0.2552666               0.4626794  \n        ORIGIN_HEX4486          ORIGIN_HEX4487          ORIGIN_HEX4488  \n             0.6766800              -0.7499221              -0.3204420  \n        ORIGIN_HEX4489          ORIGIN_HEX4490          ORIGIN_HEX4492  \n            -1.9359725              -2.0670347              -0.3110848  \n        ORIGIN_HEX4502          ORIGIN_HEX4506          ORIGIN_HEX4507  \n             2.0761617              -0.1316404               3.0154802  \n        ORIGIN_HEX4508          ORIGIN_HEX4509          ORIGIN_HEX4530  \n             0.5863438              -0.1950519              -1.4991072  \n        ORIGIN_HEX4532          ORIGIN_HEX4533          ORIGIN_HEX4534  \n             0.8289788              -1.1164316               1.0187465  \n        ORIGIN_HEX4535          ORIGIN_HEX4537          ORIGIN_HEX4538  \n            -0.1396801              -1.8492945               0.1293437  \n        ORIGIN_HEX4550          ORIGIN_HEX4552          ORIGIN_HEX4553  \n            -3.1829062              -2.0568928              -0.0958945  \n        ORIGIN_HEX4554          ORIGIN_HEX4556          ORIGIN_HEX4577  \n            -0.4516703               0.9834023               1.1277522  \n        ORIGIN_HEX4579          ORIGIN_HEX4580          ORIGIN_HEX4581  \n            -0.1170111               0.4154702              -2.5388944  \n        ORIGIN_HEX4582          ORIGIN_HEX4583          ORIGIN_HEX4584  \n             0.1163012              -1.5678387              -2.0850725  \n        ORIGIN_HEX4585          ORIGIN_HEX4586          ORIGIN_HEX4600  \n            -2.4053577              -1.0163783               0.4404403  \n        ORIGIN_HEX4601          ORIGIN_HEX4602          ORIGIN_HEX4603  \n            -0.9158359               0.4964090               2.1993648  \n        ORIGIN_HEX4624          ORIGIN_HEX4626          ORIGIN_HEX4627  \n            -0.3276126              -0.6611859              -1.1667122  \n        ORIGIN_HEX4628          ORIGIN_HEX4629          ORIGIN_HEX4631  \n            -0.7056159               0.5782561              -1.0763714  \n        ORIGIN_HEX4632          ORIGIN_HEX4646          ORIGIN_HEX4647  \n             0.0309164               1.1384320              -0.4921844  \n        ORIGIN_HEX4648          ORIGIN_HEX4649          ORIGIN_HEX4650  \n             0.1375093               0.1844555               1.4054619  \n        ORIGIN_HEX4671          ORIGIN_HEX4674          ORIGIN_HEX4675  \n             1.1977782              -2.0231394              -1.8809919  \n        ORIGIN_HEX4676          ORIGIN_HEX4679          ORIGIN_HEX4692  \n            -0.4390560              -2.9193280              -0.0885256  \n        ORIGIN_HEX4694          ORIGIN_HEX4695          ORIGIN_HEX4696  \n             0.1493175               0.7173633               0.3607789  \n        ORIGIN_HEX4698          ORIGIN_HEX4720          ORIGIN_HEX4721  \n             0.2586793              -1.4997179              -1.5711952  \n        ORIGIN_HEX4722          ORIGIN_HEX4726          ORIGIN_HEX4741  \n            -1.8487937               0.4611392               0.2887125  \n        ORIGIN_HEX4742          ORIGIN_HEX4743          ORIGIN_HEX4765  \n            -0.6013605               0.9185906               1.3542253  \n        ORIGIN_HEX4766          ORIGIN_HEX4768          ORIGIN_HEX4769  \n            -0.4856415              -1.5085362               0.9774344  \n        ORIGIN_HEX4770          ORIGIN_HEX4786          ORIGIN_HEX4788  \n            -0.6323359               0.3229718               0.2485777  \n        ORIGIN_HEX4789          ORIGIN_HEX4790          ORIGIN_HEX4791  \n             0.1163901              -0.6037766               0.3374511  \n        ORIGIN_HEX4792          ORIGIN_HEX4812          ORIGIN_HEX4813  \n             1.3033238               0.7036884               0.4800434  \n        ORIGIN_HEX4814          ORIGIN_HEX4815          ORIGIN_HEX4816  \n             0.0482784              -0.4000774              -0.8305560  \n        ORIGIN_HEX4817          ORIGIN_HEX4835          ORIGIN_HEX4836  \n            -0.2564361               1.0646989               2.2852515  \n        ORIGIN_HEX4837          ORIGIN_HEX4838          ORIGIN_HEX4839  \n             0.1305504               1.2876663               0.4648260  \n        ORIGIN_HEX4840          ORIGIN_HEX4859          ORIGIN_HEX4860  \n             0.2958932              -0.8336096              -0.2435336  \n        ORIGIN_HEX4861          ORIGIN_HEX4862          ORIGIN_HEX4863  \n             0.7180845               0.3834421              -1.3360081  \n        ORIGIN_HEX4864          ORIGIN_HEX4865          ORIGIN_HEX4867  \n            -1.9461561              -0.6803788               0.3487888  \n         ORIGIN_HEX488          ORIGIN_HEX4880          ORIGIN_HEX4883  \n            -1.0073823              -3.2005963              -0.2027019  \n        ORIGIN_HEX4884          ORIGIN_HEX4885          ORIGIN_HEX4886  \n            -0.5311199               0.7480661               0.9519922  \n        ORIGIN_HEX4887           ORIGIN_HEX490          ORIGIN_HEX4905  \n             1.5657841              -0.1224911              -1.8594452  \n        ORIGIN_HEX4906          ORIGIN_HEX4908          ORIGIN_HEX4909  \n            -0.8082809              -0.4988047               0.1923000  \n         ORIGIN_HEX491          ORIGIN_HEX4911          ORIGIN_HEX4912  \n            -0.8754766              -1.1078365               0.6290147  \n        ORIGIN_HEX4913          ORIGIN_HEX4925          ORIGIN_HEX4926  \n             0.3432310              -2.3286146              -0.8330541  \n        ORIGIN_HEX4930          ORIGIN_HEX4931          ORIGIN_HEX4932  \n             0.9547572              -0.3198599               1.5563164  \n        ORIGIN_HEX4933          ORIGIN_HEX4953          ORIGIN_HEX4954  \n             1.0755858              -0.7300129               0.4288967  \n        ORIGIN_HEX4955          ORIGIN_HEX4956          ORIGIN_HEX4958  \n             0.5826706              -1.2629860              -1.8398635  \n        ORIGIN_HEX4961          ORIGIN_HEX4974          ORIGIN_HEX4978  \n            -0.4322568              -0.0674658               0.5014030  \n        ORIGIN_HEX4981          ORIGIN_HEX4999          ORIGIN_HEX5000  \n            -0.1026535               0.3156693              -0.1287390  \n        ORIGIN_HEX5001          ORIGIN_HEX5002          ORIGIN_HEX5003  \n             0.9625275              -0.1574627              -0.8459910  \n        ORIGIN_HEX5006          ORIGIN_HEX5007          ORIGIN_HEX5019  \n            -1.7485440              -0.0690165              -1.6600508  \n        ORIGIN_HEX5025          ORIGIN_HEX5026          ORIGIN_HEX5027  \n             0.1385077               1.9578184               0.6832036  \n        ORIGIN_HEX5028          ORIGIN_HEX5047          ORIGIN_HEX5048  \n             1.8870353              -0.6986773              -0.0225716  \n        ORIGIN_HEX5049          ORIGIN_HEX5050          ORIGIN_HEX5052  \n             0.1496031               0.1685063              -0.8473715  \n        ORIGIN_HEX5054          ORIGIN_HEX5066          ORIGIN_HEX5072  \n            -0.9016582              -1.9133421               0.4429268  \n        ORIGIN_HEX5073          ORIGIN_HEX5075          ORIGIN_HEX5093  \n             1.2231762               1.0300311              -0.9411685  \n        ORIGIN_HEX5094          ORIGIN_HEX5095          ORIGIN_HEX5096  \n            -1.6109128               0.2441028              -0.7828318  \n        ORIGIN_HEX5097          ORIGIN_HEX5098          ORIGIN_HEX5101  \n            -0.2391850              -1.3306288              -0.8116033  \n        ORIGIN_HEX5102          ORIGIN_HEX5119          ORIGIN_HEX5121  \n            -0.9830329               0.0270452               1.6374151  \n        ORIGIN_HEX5140          ORIGIN_HEX5141          ORIGIN_HEX5142  \n            -0.4929024              -1.0207084               0.5569119  \n        ORIGIN_HEX5143          ORIGIN_HEX5144          ORIGIN_HEX5148  \n             0.4101904              -0.2255175               0.4885398  \n        ORIGIN_HEX5149          ORIGIN_HEX5160          ORIGIN_HEX5166  \n            -0.6774419              -1.4673302              -0.2408940  \n        ORIGIN_HEX5167          ORIGIN_HEX5168          ORIGIN_HEX5169  \n            -0.9073670               0.3939647               0.2912148  \n        ORIGIN_HEX5188          ORIGIN_HEX5189          ORIGIN_HEX5190  \n             0.5010433               0.9029071               0.2164814  \n        ORIGIN_HEX5191          ORIGIN_HEX5197          ORIGIN_HEX5205  \n            -0.6998036              -2.0302916              -3.3355981  \n        ORIGIN_HEX5206          ORIGIN_HEX5212          ORIGIN_HEX5213  \n             0.9264520              -0.0649778               1.2438928  \n        ORIGIN_HEX5214          ORIGIN_HEX5215          ORIGIN_HEX5234  \n             0.3644288               0.0521071               1.2290275  \n        ORIGIN_HEX5235          ORIGIN_HEX5236          ORIGIN_HEX5237  \n             0.2980136              -0.2571337              -0.1026410  \n        ORIGIN_HEX5239          ORIGIN_HEX5240          ORIGIN_HEX5242  \n            -1.6918202               0.2910467              -0.6843586  \n        ORIGIN_HEX5244          ORIGIN_HEX5252          ORIGIN_HEX5253  \n            -1.7875716              -3.8202894               0.2880744  \n        ORIGIN_HEX5254          ORIGIN_HEX5260          ORIGIN_HEX5261  \n             0.9575132              -0.6237707               1.5867084  \n        ORIGIN_HEX5262          ORIGIN_HEX5280          ORIGIN_HEX5281  \n            -0.0447503               1.8570910              -0.8596261  \n        ORIGIN_HEX5282          ORIGIN_HEX5283          ORIGIN_HEX5284  \n            -0.1557818               0.5398201              -0.8173944  \n        ORIGIN_HEX5286          ORIGIN_HEX5298          ORIGIN_HEX5301  \n            -0.1707000              -1.3867430              -1.2307665  \n        ORIGIN_HEX5307          ORIGIN_HEX5308          ORIGIN_HEX5309  \n             0.8692931               0.2370042              -0.3377003  \n        ORIGIN_HEX5328          ORIGIN_HEX5329          ORIGIN_HEX5330  \n             0.9407734               0.1904828               0.6970446  \n        ORIGIN_HEX5331          ORIGIN_HEX5333          ORIGIN_HEX5336  \n            -0.4576693              -1.9472801              -1.4356335  \n        ORIGIN_HEX5339          ORIGIN_HEX5349           ORIGIN_HEX535  \n            -3.8073863              -1.7316262               1.3549044  \n        ORIGIN_HEX5350          ORIGIN_HEX5354          ORIGIN_HEX5355  \n            -0.7828862              -1.2828356              -0.4076706  \n        ORIGIN_HEX5356           ORIGIN_HEX537          ORIGIN_HEX5375  \n            -0.0120964               1.4463488               0.0536230  \n        ORIGIN_HEX5377          ORIGIN_HEX5378          ORIGIN_HEX5379  \n            -0.6481881              -0.8161785              -1.1400280  \n        ORIGIN_HEX5380          ORIGIN_HEX5382          ORIGIN_HEX5383  \n            -0.3146420               0.6543729              -2.6288930  \n        ORIGIN_HEX5397          ORIGIN_HEX5398          ORIGIN_HEX5399  \n            -1.4534270              -0.2191807              -0.2146468  \n         ORIGIN_HEX540          ORIGIN_HEX5400          ORIGIN_HEX5401  \n            -2.3375959               0.5581740              -2.4266339  \n        ORIGIN_HEX5402          ORIGIN_HEX5403          ORIGIN_HEX5422  \n            -1.2525717              -2.6564290              -1.5593023  \n        ORIGIN_HEX5423          ORIGIN_HEX5424          ORIGIN_HEX5425  \n            -0.9818015               0.0642190               1.6548557  \n        ORIGIN_HEX5426          ORIGIN_HEX5428          ORIGIN_HEX5429  \n             0.3031354               0.6435684               0.3305847  \n        ORIGIN_HEX5430          ORIGIN_HEX5433          ORIGIN_HEX5436  \n             0.8395716              -3.3540679              -1.0922930  \n        ORIGIN_HEX5437          ORIGIN_HEX5438          ORIGIN_HEX5439  \n            -1.3267418              -0.9805023               1.4109138  \n        ORIGIN_HEX5442          ORIGIN_HEX5443          ORIGIN_HEX5445  \n            -0.8312514              -2.8605339               0.2194472  \n        ORIGIN_HEX5446          ORIGIN_HEX5447          ORIGIN_HEX5449  \n             1.1071293              -0.8231035              -0.0329592  \n        ORIGIN_HEX5450          ORIGIN_HEX5469          ORIGIN_HEX5470  \n            -1.9591527              -2.7643099              -0.2542780  \n        ORIGIN_HEX5471          ORIGIN_HEX5472          ORIGIN_HEX5473  \n            -0.9613130              -0.4771297              -0.8888937  \n        ORIGIN_HEX5474          ORIGIN_HEX5475          ORIGIN_HEX5476  \n             0.3920626              -0.4929833              -1.1681704  \n        ORIGIN_HEX5482          ORIGIN_HEX5483          ORIGIN_HEX5484  \n            -0.4694974              -1.4188775              -0.3118044  \n        ORIGIN_HEX5485          ORIGIN_HEX5488          ORIGIN_HEX5489  \n            -0.6969409              -2.9261002              -1.7431946  \n        ORIGIN_HEX5490          ORIGIN_HEX5492          ORIGIN_HEX5493  \n            -0.7177683              -0.4264061               0.7115298  \n        ORIGIN_HEX5495          ORIGIN_HEX5496          ORIGIN_HEX5497  \n            -1.0773564              -1.0168778              -1.0829540  \n        ORIGIN_HEX5520          ORIGIN_HEX5521          ORIGIN_HEX5522  \n             0.0380762               0.7940469               1.2406898  \n        ORIGIN_HEX5527          ORIGIN_HEX5529          ORIGIN_HEX5530  \n            -2.3494295               0.2558052               0.1726738  \n        ORIGIN_HEX5531          ORIGIN_HEX5538          ORIGIN_HEX5539  \n            -1.2433260               1.6476136              -0.8130718  \n        ORIGIN_HEX5540          ORIGIN_HEX5541          ORIGIN_HEX5542  \n            -0.2815205              -0.6465132               1.6463328  \n        ORIGIN_HEX5543          ORIGIN_HEX5544          ORIGIN_HEX5563  \n            -0.1505164              -1.8153919              -1.1663302  \n        ORIGIN_HEX5564          ORIGIN_HEX5565          ORIGIN_HEX5566  \n            -0.0442691               0.1482384              -0.7365122  \n        ORIGIN_HEX5567          ORIGIN_HEX5568          ORIGIN_HEX5569  \n            -0.8598051               1.2630795              -0.6229266  \n        ORIGIN_HEX5570          ORIGIN_HEX5571          ORIGIN_HEX5573  \n             0.2802604              -0.0999153              -2.1205372  \n        ORIGIN_HEX5575          ORIGIN_HEX5577          ORIGIN_HEX5578  \n             0.2736761              -1.1072941              -1.6153154  \n        ORIGIN_HEX5579          ORIGIN_HEX5584          ORIGIN_HEX5585  \n            -1.1564041              -0.7795858               1.6394427  \n        ORIGIN_HEX5586          ORIGIN_HEX5587          ORIGIN_HEX5588  \n            -0.1456032              -1.1742838              -0.7779648  \n        ORIGIN_HEX5589          ORIGIN_HEX5590          ORIGIN_HEX5611  \n             0.5016269              -3.6544579               0.6831734  \n        ORIGIN_HEX5613          ORIGIN_HEX5614          ORIGIN_HEX5615  \n            -1.0020271              -0.9473934               0.7494890  \n        ORIGIN_HEX5617          ORIGIN_HEX5621          ORIGIN_HEX5622  \n             0.3023030               0.2282206              -0.9885682  \n        ORIGIN_HEX5623          ORIGIN_HEX5624          ORIGIN_HEX5625  \n            -0.6446696              -0.6602358              -0.9060497  \n        ORIGIN_HEX5626          ORIGIN_HEX5627          ORIGIN_HEX5628  \n            -1.4612923              -0.7817208              -1.3273902  \n        ORIGIN_HEX5632          ORIGIN_HEX5633          ORIGIN_HEX5634  \n             1.0573462               0.2262086               2.0575653  \n        ORIGIN_HEX5635          ORIGIN_HEX5638          ORIGIN_HEX5657  \n             0.1931638              -1.3595012              -1.3258261  \n        ORIGIN_HEX5658          ORIGIN_HEX5660          ORIGIN_HEX5663  \n            -0.1527893              -0.2266825               0.9849220  \n        ORIGIN_HEX5664          ORIGIN_HEX5666          ORIGIN_HEX5667  \n            -1.0028461              -1.6282954              -0.9854641  \n        ORIGIN_HEX5668          ORIGIN_HEX5669          ORIGIN_HEX5670  \n            -1.4465595              -0.6262391               0.7759086  \n        ORIGIN_HEX5671          ORIGIN_HEX5672          ORIGIN_HEX5673  \n            -1.0525838               1.0276497              -0.9731904  \n        ORIGIN_HEX5674          ORIGIN_HEX5675          ORIGIN_HEX5678  \n            -0.2216771              -0.4979590              -2.0947300  \n        ORIGIN_HEX5679          ORIGIN_HEX5680          ORIGIN_HEX5681  \n            -1.3866272              -0.1290233              -0.5819145  \n        ORIGIN_HEX5682          ORIGIN_HEX5685          ORIGIN_HEX5705  \n             0.0808806               0.6487318              -0.6455518  \n        ORIGIN_HEX5706          ORIGIN_HEX5707          ORIGIN_HEX5708  \n             0.5441422              -0.0491161              -0.2540728  \n        ORIGIN_HEX5709          ORIGIN_HEX5711          ORIGIN_HEX5713  \n             0.9868373               0.1348625              -0.6926935  \n        ORIGIN_HEX5714          ORIGIN_HEX5715          ORIGIN_HEX5716  \n             0.5396633              -1.2465215               0.1978731  \n        ORIGIN_HEX5717          ORIGIN_HEX5718          ORIGIN_HEX5719  \n            -0.1893434               0.1462149              -0.5813267  \n        ORIGIN_HEX5720          ORIGIN_HEX5721          ORIGIN_HEX5722  \n            -0.4681444              -0.3321292              -1.1201299  \n        ORIGIN_HEX5726          ORIGIN_HEX5727          ORIGIN_HEX5728  \n             0.2052950              -0.3762289               0.6001054  \n        ORIGIN_HEX5751          ORIGIN_HEX5752          ORIGIN_HEX5753  \n             0.0272253              -0.5282349               1.1315278  \n        ORIGIN_HEX5754          ORIGIN_HEX5755          ORIGIN_HEX5757  \n            -0.4209042              -0.3168892               0.3930407  \n        ORIGIN_HEX5758          ORIGIN_HEX5759          ORIGIN_HEX5760  \n            -0.1854522               0.1713545              -1.7100281  \n        ORIGIN_HEX5761          ORIGIN_HEX5762          ORIGIN_HEX5763  \n            -0.9802018              -0.9737448              -0.9505549  \n        ORIGIN_HEX5764          ORIGIN_HEX5765          ORIGIN_HEX5767  \n            -1.0279273              -1.1495412              -0.0342375  \n        ORIGIN_HEX5768          ORIGIN_HEX5772          ORIGIN_HEX5773  \n            -1.1270074              -1.4699311              -0.6061262  \n        ORIGIN_HEX5774          ORIGIN_HEX5775          ORIGIN_HEX5776  \n            -0.6874347               1.1347105               0.6873111  \n        ORIGIN_HEX5799          ORIGIN_HEX5800          ORIGIN_HEX5801  \n             0.5439006              -0.5121465              -0.1046385  \n        ORIGIN_HEX5802          ORIGIN_HEX5803          ORIGIN_HEX5806  \n             0.0967054              -0.0029818               1.0689477  \n        ORIGIN_HEX5807          ORIGIN_HEX5808          ORIGIN_HEX5811  \n             0.6554543              -1.0690224              -1.4435802  \n        ORIGIN_HEX5812          ORIGIN_HEX5813          ORIGIN_HEX5814  \n            -0.1914812              -0.4270655              -1.4384578  \n        ORIGIN_HEX5815          ORIGIN_HEX5816          ORIGIN_HEX5820  \n             0.2826996               0.9967417               0.1583744  \n        ORIGIN_HEX5821          ORIGIN_HEX5823           ORIGIN_HEX583  \n            -0.5808005               1.2255800               0.2871082  \n         ORIGIN_HEX584          ORIGIN_HEX5846          ORIGIN_HEX5847  \n             0.8259515              -1.0128277               1.0658346  \n        ORIGIN_HEX5848          ORIGIN_HEX5849           ORIGIN_HEX585  \n            -1.1113046               0.8505807               2.4437006  \n        ORIGIN_HEX5851          ORIGIN_HEX5852          ORIGIN_HEX5853  \n             0.6530804               0.1741208              -0.5138822  \n        ORIGIN_HEX5854          ORIGIN_HEX5855          ORIGIN_HEX5856  \n            -0.1368899              -0.1566597              -0.5076596  \n        ORIGIN_HEX5858          ORIGIN_HEX5859           ORIGIN_HEX586  \n             0.9094299              -0.0194861              -0.5122746  \n        ORIGIN_HEX5860          ORIGIN_HEX5861          ORIGIN_HEX5862  \n            -0.3890952              -0.7427205              -0.5582039  \n        ORIGIN_HEX5863          ORIGIN_HEX5867          ORIGIN_HEX5868  \n             0.8181204               0.2174879               0.7566517  \n        ORIGIN_HEX5869           ORIGIN_HEX587          ORIGIN_HEX5893  \n            -0.1038339              -2.1460258               0.2752773  \n        ORIGIN_HEX5894          ORIGIN_HEX5895          ORIGIN_HEX5898  \n            -0.0360651               0.5662190              -0.1404494  \n        ORIGIN_HEX5899          ORIGIN_HEX5901          ORIGIN_HEX5902  \n            -2.0832404               0.1362231               0.1895410  \n        ORIGIN_HEX5903          ORIGIN_HEX5904          ORIGIN_HEX5905  \n             0.6640765              -0.9114506              -0.7402285  \n        ORIGIN_HEX5906          ORIGIN_HEX5907          ORIGIN_HEX5908  \n            -0.3944711               1.9855239              -1.4269662  \n        ORIGIN_HEX5909          ORIGIN_HEX5910          ORIGIN_HEX5914  \n             1.1099836               0.2169475              -1.1491888  \n        ORIGIN_HEX5915          ORIGIN_HEX5916          ORIGIN_HEX5940  \n             0.3067570               0.5899316               1.0255553  \n        ORIGIN_HEX5941          ORIGIN_HEX5942          ORIGIN_HEX5943  \n            -1.6065179               0.1887025               0.6105764  \n        ORIGIN_HEX5944          ORIGIN_HEX5945          ORIGIN_HEX5946  \n             0.5579058               0.3356713               0.0417620  \n        ORIGIN_HEX5947          ORIGIN_HEX5948          ORIGIN_HEX5949  \n             0.0213854               2.0518799              -0.2239416  \n        ORIGIN_HEX5950          ORIGIN_HEX5951          ORIGIN_HEX5954  \n            -0.4569172               1.8837048               0.3524076  \n        ORIGIN_HEX5955          ORIGIN_HEX5956          ORIGIN_HEX5957  \n            -0.2417187               0.1507734               1.0992163  \n        ORIGIN_HEX5961          ORIGIN_HEX5962          ORIGIN_HEX5963  \n            -0.6167344              -0.1212927              -4.3479124  \n        ORIGIN_HEX5987          ORIGIN_HEX5988          ORIGIN_HEX5989  \n            -2.1855454               1.1014697              -0.7659000  \n        ORIGIN_HEX5990          ORIGIN_HEX5991          ORIGIN_HEX5993  \n             0.6425456               0.3865946              -0.3122216  \n        ORIGIN_HEX5995          ORIGIN_HEX5996          ORIGIN_HEX5997  \n            -1.4979519              -0.4233639              -0.3586433  \n        ORIGIN_HEX5998          ORIGIN_HEX5999          ORIGIN_HEX6000  \n             0.0572837              -1.1773020              -0.3790790  \n        ORIGIN_HEX6001          ORIGIN_HEX6002          ORIGIN_HEX6009  \n             1.5536559               0.3538255              -0.9923440  \n        ORIGIN_HEX6010          ORIGIN_HEX6034          ORIGIN_HEX6035  \n             0.2675244               0.5900414               0.7401635  \n        ORIGIN_HEX6036          ORIGIN_HEX6037          ORIGIN_HEX6038  \n            -0.6461798               0.1417524               0.9076416  \n        ORIGIN_HEX6039          ORIGIN_HEX6040          ORIGIN_HEX6041  \n            -1.0142358              -2.4077722               0.4296643  \n        ORIGIN_HEX6042          ORIGIN_HEX6043          ORIGIN_HEX6044  \n            -0.1560303               0.1646210              -1.0111125  \n        ORIGIN_HEX6045          ORIGIN_HEX6046          ORIGIN_HEX6047  \n            -1.0948405              -1.6341009              -0.7795259  \n        ORIGIN_HEX6048          ORIGIN_HEX6051          ORIGIN_HEX6056  \n            -0.6050161              -0.9530365               0.0528653  \n        ORIGIN_HEX6082          ORIGIN_HEX6083          ORIGIN_HEX6084  \n            -0.1385269              -2.0645854              -0.1734429  \n        ORIGIN_HEX6085          ORIGIN_HEX6086          ORIGIN_HEX6088  \n             1.4500657               0.6496268               0.1505019  \n        ORIGIN_HEX6089          ORIGIN_HEX6090          ORIGIN_HEX6091  \n            -0.5862323              -0.2092453              -0.1001772  \n        ORIGIN_HEX6092          ORIGIN_HEX6093          ORIGIN_HEX6094  \n             0.7818151              -0.4534410               0.4410446  \n        ORIGIN_HEX6095          ORIGIN_HEX6096          ORIGIN_HEX6128  \n             0.0243602               1.4294148              -0.8977705  \n        ORIGIN_HEX6130          ORIGIN_HEX6131          ORIGIN_HEX6132  \n            -0.4899669              -0.0579925              -0.3179689  \n        ORIGIN_HEX6133          ORIGIN_HEX6134          ORIGIN_HEX6135  \n             0.9841262              -0.7437515              -0.3599585  \n        ORIGIN_HEX6136          ORIGIN_HEX6137          ORIGIN_HEX6140  \n             0.2081928              -0.1862782               0.6367521  \n        ORIGIN_HEX6141          ORIGIN_HEX6142          ORIGIN_HEX6145  \n             0.1079803              -0.0219315              -0.4662418  \n        ORIGIN_HEX6150          ORIGIN_HEX6174          ORIGIN_HEX6176  \n            -1.9662821               0.1977450               0.0547003  \n        ORIGIN_HEX6177          ORIGIN_HEX6178          ORIGIN_HEX6179  \n            -1.2695662               0.7183843               0.1589416  \n        ORIGIN_HEX6180          ORIGIN_HEX6181          ORIGIN_HEX6183  \n            -1.0349561              -0.3736985              -0.0409213  \n        ORIGIN_HEX6184          ORIGIN_HEX6185          ORIGIN_HEX6186  \n             1.3028056               0.0865264              -1.5763661  \n        ORIGIN_HEX6188          ORIGIN_HEX6189          ORIGIN_HEX6192  \n            -1.1138103              -0.2373100              -1.2877024  \n        ORIGIN_HEX6195          ORIGIN_HEX6222          ORIGIN_HEX6223  \n            -2.0986189              -3.0164261               0.3283539  \n        ORIGIN_HEX6224          ORIGIN_HEX6226          ORIGIN_HEX6227  \n             0.0270716               0.4391868               0.2659340  \n        ORIGIN_HEX6228          ORIGIN_HEX6229          ORIGIN_HEX6230  \n            -0.1422570              -0.8830131               0.2107325  \n        ORIGIN_HEX6231          ORIGIN_HEX6232          ORIGIN_HEX6233  \n             0.2669648              -2.4241241              -0.4222393  \n        ORIGIN_HEX6234          ORIGIN_HEX6235          ORIGIN_HEX6237  \n            -2.8955719              -0.6400780              -1.2323824  \n        ORIGIN_HEX6239          ORIGIN_HEX6241          ORIGIN_HEX6242  \n            -1.7621339              -0.1499578              -2.3264581  \n        ORIGIN_HEX6271          ORIGIN_HEX6272          ORIGIN_HEX6273  \n            -1.9490083              -3.5839582               0.0080714  \n        ORIGIN_HEX6274          ORIGIN_HEX6275          ORIGIN_HEX6276  \n             0.7054066              -0.2517873               1.2492145  \n        ORIGIN_HEX6278          ORIGIN_HEX6279          ORIGIN_HEX6280  \n             1.0707233              -1.9432328              -0.2719232  \n        ORIGIN_HEX6281          ORIGIN_HEX6283          ORIGIN_HEX6284  \n            -1.2279561              -0.3958379              -0.0025226  \n        ORIGIN_HEX6286          ORIGIN_HEX6289          ORIGIN_HEX6290  \n            -1.3160260              -1.2714766               0.3028406  \n         ORIGIN_HEX630          ORIGIN_HEX6315          ORIGIN_HEX6316  \n            -0.2587662              -0.5866989              -2.0659559  \n         ORIGIN_HEX632          ORIGIN_HEX6320          ORIGIN_HEX6321  \n            -0.4478459              -0.1813139               0.2998336  \n        ORIGIN_HEX6322          ORIGIN_HEX6323          ORIGIN_HEX6324  \n             0.3079827               0.1981469              -1.1004220  \n        ORIGIN_HEX6326          ORIGIN_HEX6327          ORIGIN_HEX6328  \n            -1.4597564              -1.1473694              -2.0895670  \n         ORIGIN_HEX633          ORIGIN_HEX6330          ORIGIN_HEX6331  \n             1.5812560               1.0927919               0.1046662  \n        ORIGIN_HEX6337           ORIGIN_HEX635          ORIGIN_HEX6364  \n             0.2543224               0.7336126              -3.7996685  \n        ORIGIN_HEX6368          ORIGIN_HEX6369          ORIGIN_HEX6370  \n            -1.7284763               0.3493131              -0.5057331  \n        ORIGIN_HEX6371          ORIGIN_HEX6372          ORIGIN_HEX6373  \n             0.6009538              -0.9976198              -1.3360897  \n        ORIGIN_HEX6374          ORIGIN_HEX6375          ORIGIN_HEX6376  \n            -1.8520398              -0.7953623               0.6113716  \n        ORIGIN_HEX6377          ORIGIN_HEX6378          ORIGIN_HEX6380  \n             0.0119078               0.6973846              -1.0430760  \n        ORIGIN_HEX6382          ORIGIN_HEX6385          ORIGIN_HEX6413  \n            -0.9044954              -0.6476429               0.3293375  \n        ORIGIN_HEX6415          ORIGIN_HEX6416          ORIGIN_HEX6417  \n             0.0392525              -0.3206789               0.1533025  \n        ORIGIN_HEX6418          ORIGIN_HEX6420          ORIGIN_HEX6421  \n             1.2373761              -1.8698662              -0.7744632  \n        ORIGIN_HEX6422          ORIGIN_HEX6423          ORIGIN_HEX6424  \n            -1.5707700              -1.4827298               0.2704992  \n        ORIGIN_HEX6425          ORIGIN_HEX6427          ORIGIN_HEX6429  \n             0.8615812              -1.8994317              -1.1460117  \n        ORIGIN_HEX6458          ORIGIN_HEX6463          ORIGIN_HEX6464  \n            -3.0278687              -0.6257623               0.4977695  \n        ORIGIN_HEX6465          ORIGIN_HEX6466          ORIGIN_HEX6467  \n             0.9961247              -0.4039317              -1.4603219  \n        ORIGIN_HEX6468          ORIGIN_HEX6469          ORIGIN_HEX6470  \n             0.4354859              -0.2279991              -1.7007400  \n        ORIGIN_HEX6471          ORIGIN_HEX6472          ORIGIN_HEX6474  \n            -0.1209508               0.3992777               0.3912682  \n        ORIGIN_HEX6475          ORIGIN_HEX6476          ORIGIN_HEX6477  \n            -2.1437375               0.7096876              -0.9171061  \n        ORIGIN_HEX6507          ORIGIN_HEX6509          ORIGIN_HEX6510  \n             0.0499104               1.0035034              -1.6428339  \n        ORIGIN_HEX6511          ORIGIN_HEX6513          ORIGIN_HEX6514  \n             0.5199096               0.9678214              -0.8084180  \n        ORIGIN_HEX6515          ORIGIN_HEX6516          ORIGIN_HEX6517  \n             2.2658860              -0.9175018              -1.3691826  \n        ORIGIN_HEX6518          ORIGIN_HEX6519          ORIGIN_HEX6520  \n             1.4014887               0.5820236              -0.5582660  \n        ORIGIN_HEX6521          ORIGIN_HEX6522          ORIGIN_HEX6523  \n            -0.1604309              -1.5900064              -1.4208871  \n        ORIGIN_HEX6524          ORIGIN_HEX6555          ORIGIN_HEX6556  \n            -0.7707978               1.4412170              -1.3919328  \n        ORIGIN_HEX6557          ORIGIN_HEX6558          ORIGIN_HEX6559  \n            -1.2855000               1.8637400               0.5713391  \n        ORIGIN_HEX6561          ORIGIN_HEX6562          ORIGIN_HEX6563  \n            -1.6314520               0.6639811              -0.9635785  \n        ORIGIN_HEX6564          ORIGIN_HEX6565          ORIGIN_HEX6566  \n            -0.7464832              -0.0968801              -0.0397922  \n        ORIGIN_HEX6568          ORIGIN_HEX6569          ORIGIN_HEX6570  \n            -0.2690186              -0.3951577               0.9021386  \n        ORIGIN_HEX6571          ORIGIN_HEX6601          ORIGIN_HEX6603  \n            -0.8135985              -1.4417970               0.0040709  \n        ORIGIN_HEX6605          ORIGIN_HEX6606          ORIGIN_HEX6607  \n             0.6535995               0.1652942              -1.1207233  \n        ORIGIN_HEX6608          ORIGIN_HEX6609          ORIGIN_HEX6610  \n            -1.8934853              -0.5328390              -1.3086442  \n        ORIGIN_HEX6611          ORIGIN_HEX6612          ORIGIN_HEX6613  \n            -1.0077524               0.2427469               0.0923649  \n        ORIGIN_HEX6614          ORIGIN_HEX6615          ORIGIN_HEX6616  \n            -2.9417505               0.0480988              -1.9209663  \n        ORIGIN_HEX6649          ORIGIN_HEX6650          ORIGIN_HEX6651  \n            -3.2714657               0.4674977              -0.0839109  \n        ORIGIN_HEX6652          ORIGIN_HEX6653          ORIGIN_HEX6654  \n            -0.2773112               0.3736114               0.6726179  \n        ORIGIN_HEX6655          ORIGIN_HEX6656          ORIGIN_HEX6657  \n             0.5966210              -2.9821057               0.2004340  \n        ORIGIN_HEX6659          ORIGIN_HEX6660          ORIGIN_HEX6661  \n            -0.1573457               0.9327663              -0.8035449  \n        ORIGIN_HEX6663          ORIGIN_HEX6695          ORIGIN_HEX6696  \n            -0.5347190              -1.2483888              -2.1078789  \n        ORIGIN_HEX6697          ORIGIN_HEX6698          ORIGIN_HEX6699  \n             0.1201364              -0.1999024              -0.2182285  \n        ORIGIN_HEX6700          ORIGIN_HEX6702          ORIGIN_HEX6703  \n            -0.2424624              -1.3413030              -0.1369476  \n        ORIGIN_HEX6706          ORIGIN_HEX6707          ORIGIN_HEX6708  \n            -0.6974241              -0.1045728               0.3495698  \n        ORIGIN_HEX6709          ORIGIN_HEX6744          ORIGIN_HEX6745  \n            -0.5040707              -0.6096301               1.1386901  \n        ORIGIN_HEX6746          ORIGIN_HEX6747          ORIGIN_HEX6749  \n             0.1379768              -0.9646785               0.1661283  \n        ORIGIN_HEX6750          ORIGIN_HEX6751          ORIGIN_HEX6753  \n            -1.0749059              -1.0267762              -0.2364082  \n        ORIGIN_HEX6754          ORIGIN_HEX6755          ORIGIN_HEX6757  \n             0.1173215              -0.6475629              -0.2264966  \n         ORIGIN_HEX678          ORIGIN_HEX6789           ORIGIN_HEX679  \n             0.2328261              -0.0002091               0.7882337  \n        ORIGIN_HEX6790          ORIGIN_HEX6791          ORIGIN_HEX6792  \n             0.4341107              -0.4179370              -1.1793881  \n        ORIGIN_HEX6793          ORIGIN_HEX6794          ORIGIN_HEX6796  \n             0.0480923               0.2745401              -1.1473945  \n        ORIGIN_HEX6797          ORIGIN_HEX6798           ORIGIN_HEX680  \n            -0.0092437               0.4995478              -0.9177391  \n        ORIGIN_HEX6800          ORIGIN_HEX6801          ORIGIN_HEX6802  \n             0.5344418               0.5373275               0.1273188  \n         ORIGIN_HEX681           ORIGIN_HEX682          ORIGIN_HEX6837  \n             1.1758588               1.0021759              -0.3721716  \n        ORIGIN_HEX6838          ORIGIN_HEX6839          ORIGIN_HEX6841  \n             0.1940493               0.0850179              -0.1553992  \n        ORIGIN_HEX6843          ORIGIN_HEX6846          ORIGIN_HEX6847  \n            -0.1255135               1.3544111              -0.7291788  \n        ORIGIN_HEX6848          ORIGIN_HEX6850          ORIGIN_HEX6851  \n            -0.6217942              -0.6655761              -0.3213378  \n        ORIGIN_HEX6885          ORIGIN_HEX6886          ORIGIN_HEX6887  \n            -0.5461493               0.0057104              -0.3034212  \n        ORIGIN_HEX6888          ORIGIN_HEX6889          ORIGIN_HEX6891  \n             0.5830466               0.1911924               0.1493488  \n        ORIGIN_HEX6892          ORIGIN_HEX6893          ORIGIN_HEX6894  \n            -0.5189147               0.0986816              -0.0809533  \n        ORIGIN_HEX6895          ORIGIN_HEX6896          ORIGIN_HEX6897  \n             0.0147535              -0.7754706               0.2897843  \n        ORIGIN_HEX6898          ORIGIN_HEX6931          ORIGIN_HEX6932  \n             0.5749063              -0.2258581               0.9280051  \n        ORIGIN_HEX6933          ORIGIN_HEX6934          ORIGIN_HEX6935  \n            -0.1688101              -0.9316917              -0.4219210  \n        ORIGIN_HEX6936          ORIGIN_HEX6938          ORIGIN_HEX6939  \n             0.6737266              -0.4464847              -0.0176982  \n        ORIGIN_HEX6940          ORIGIN_HEX6941          ORIGIN_HEX6942  \n            -0.3119374              -0.2987888              -0.3168859  \n        ORIGIN_HEX6943          ORIGIN_HEX6944          ORIGIN_HEX6945  \n            -0.5313103              -1.1015134              -0.4515020  \n        ORIGIN_HEX6946          ORIGIN_HEX6979          ORIGIN_HEX6980  \n            -0.2184247              -1.2526311               1.6032194  \n        ORIGIN_HEX6981          ORIGIN_HEX6982          ORIGIN_HEX6984  \n            -0.0297372              -0.3561358              -0.9569438  \n        ORIGIN_HEX6985          ORIGIN_HEX6986          ORIGIN_HEX6987  \n             0.9602491              -0.0914650               0.4609674  \n        ORIGIN_HEX6988          ORIGIN_HEX6989          ORIGIN_HEX6990  \n             1.8559742              -0.5822480              -1.0632809  \n        ORIGIN_HEX6991          ORIGIN_HEX6992          ORIGIN_HEX7025  \n             0.3335154              -1.3023588              -0.5965878  \n        ORIGIN_HEX7026          ORIGIN_HEX7027          ORIGIN_HEX7029  \n            -0.1828897               0.6120573               0.3242918  \n        ORIGIN_HEX7030          ORIGIN_HEX7031          ORIGIN_HEX7033  \n             0.2049098              -0.3907918              -0.7287495  \n        ORIGIN_HEX7034          ORIGIN_HEX7035          ORIGIN_HEX7036  \n             0.1753640              -1.0096509              -0.3063887  \n        ORIGIN_HEX7037          ORIGIN_HEX7038          ORIGIN_HEX7039  \n             1.9556492              -0.6288862               0.1372494  \n        ORIGIN_HEX7040          ORIGIN_HEX7072          ORIGIN_HEX7073  \n             0.4280566              -0.2173284              -0.6190421  \n        ORIGIN_HEX7074          ORIGIN_HEX7075          ORIGIN_HEX7076  \n             1.3047694               0.0318808               1.6537960  \n        ORIGIN_HEX7077          ORIGIN_HEX7081          ORIGIN_HEX7082  \n            -0.0669522              -0.4238296              -0.0531993  \n        ORIGIN_HEX7083          ORIGIN_HEX7084          ORIGIN_HEX7085  \n            -0.9269217              -0.4190955               2.1126326  \n        ORIGIN_HEX7086          ORIGIN_HEX7087          ORIGIN_HEX7119  \n            -0.6558202              -0.4153937              -0.1862825  \n        ORIGIN_HEX7120          ORIGIN_HEX7123          ORIGIN_HEX7124  \n            -0.4379731              -0.1443795               0.8361619  \n        ORIGIN_HEX7125          ORIGIN_HEX7128          ORIGIN_HEX7129  \n            -1.8130950              -2.3908638              -0.3247731  \n        ORIGIN_HEX7130          ORIGIN_HEX7131          ORIGIN_HEX7132  \n            -0.4892996              -0.0199277               0.2849787  \n        ORIGIN_HEX7133          ORIGIN_HEX7134          ORIGIN_HEX7135  \n            -2.6062006               0.3539787              -0.1928088  \n        ORIGIN_HEX7166          ORIGIN_HEX7167          ORIGIN_HEX7168  \n             0.5757953              -0.3066504               0.4161705  \n        ORIGIN_HEX7169          ORIGIN_HEX7170          ORIGIN_HEX7172  \n             0.1107785               0.6203726               1.8398979  \n        ORIGIN_HEX7173          ORIGIN_HEX7175          ORIGIN_HEX7176  \n             2.4214389              -1.7964458              -0.3219986  \n        ORIGIN_HEX7177          ORIGIN_HEX7178          ORIGIN_HEX7179  \n            -1.6553022              -0.4105455              -0.4491819  \n        ORIGIN_HEX7181          ORIGIN_HEX7182          ORIGIN_HEX7213  \n            -1.2037440              -1.0628976               0.2348137  \n        ORIGIN_HEX7214          ORIGIN_HEX7215          ORIGIN_HEX7217  \n             0.4959156              -0.4311625              -0.1172947  \n        ORIGIN_HEX7218          ORIGIN_HEX7222          ORIGIN_HEX7223  \n             0.2435782              -1.4766816              -1.1197872  \n        ORIGIN_HEX7224          ORIGIN_HEX7225          ORIGIN_HEX7226  \n             0.0107776              -1.5058850              -0.1058206  \n        ORIGIN_HEX7227          ORIGIN_HEX7228          ORIGIN_HEX7229  \n             0.7838593               1.8034479              -1.6887132  \n         ORIGIN_HEX723          ORIGIN_HEX7230           ORIGIN_HEX725  \n             1.0852253              -0.7791157               0.0919991  \n         ORIGIN_HEX726          ORIGIN_HEX7260          ORIGIN_HEX7261  \n            -0.4065617               1.0598418              -0.0494953  \n        ORIGIN_HEX7262          ORIGIN_HEX7264          ORIGIN_HEX7265  \n             1.2230029               0.9159733               0.0373724  \n         ORIGIN_HEX727          ORIGIN_HEX7271          ORIGIN_HEX7272  \n             1.1836077              -0.0281868              -0.7093912  \n        ORIGIN_HEX7273          ORIGIN_HEX7274          ORIGIN_HEX7275  \n            -0.5003433              -0.4764360               0.8291770  \n        ORIGIN_HEX7277           ORIGIN_HEX728          ORIGIN_HEX7307  \n             0.1070323               1.4510122               1.7308449  \n        ORIGIN_HEX7308          ORIGIN_HEX7309           ORIGIN_HEX731  \n             0.3579977              -0.3769523               0.1819044  \n        ORIGIN_HEX7310          ORIGIN_HEX7311          ORIGIN_HEX7312  \n             1.1619960               0.0421492               0.9201430  \n        ORIGIN_HEX7316          ORIGIN_HEX7319          ORIGIN_HEX7320  \n            -1.2530311              -2.0186699              -0.7869755  \n        ORIGIN_HEX7321          ORIGIN_HEX7322          ORIGIN_HEX7323  \n             2.0281550              -0.7009741              -0.5310195  \n        ORIGIN_HEX7324          ORIGIN_HEX7354          ORIGIN_HEX7355  \n            -2.7267655              -0.2215294              -0.5384721  \n        ORIGIN_HEX7356          ORIGIN_HEX7358          ORIGIN_HEX7359  \n            -0.7539896              -0.9435706              -1.7291950  \n        ORIGIN_HEX7363          ORIGIN_HEX7366          ORIGIN_HEX7367  \n             0.7994475              -0.6686776              -0.6961608  \n        ORIGIN_HEX7368          ORIGIN_HEX7369          ORIGIN_HEX7371  \n            -0.7043237              -1.5237760              -3.3933048  \n        ORIGIN_HEX7402          ORIGIN_HEX7403          ORIGIN_HEX7404  \n            -0.0918158              -0.3878563              -0.9980713  \n        ORIGIN_HEX7406          ORIGIN_HEX7411          ORIGIN_HEX7414  \n             1.1911120               1.0389003               0.0869185  \n        ORIGIN_HEX7415          ORIGIN_HEX7416          ORIGIN_HEX7418  \n            -0.6996361              -0.3342751              -2.2131131  \n        ORIGIN_HEX7448          ORIGIN_HEX7449          ORIGIN_HEX7450  \n             0.1684596              -0.2935745              -0.1038257  \n        ORIGIN_HEX7451          ORIGIN_HEX7452          ORIGIN_HEX7453  \n            -1.1901804               0.5252559              -1.1632728  \n        ORIGIN_HEX7458          ORIGIN_HEX7461          ORIGIN_HEX7462  \n             0.7507511              -0.2854394              -0.3478347  \n        ORIGIN_HEX7463          ORIGIN_HEX7465          ORIGIN_HEX7496  \n            -0.0013636               0.1108216              -0.3884646  \n        ORIGIN_HEX7498          ORIGIN_HEX7499          ORIGIN_HEX7500  \n             1.8143963               0.4551627               0.2033350  \n        ORIGIN_HEX7501          ORIGIN_HEX7506          ORIGIN_HEX7509  \n            -0.2206504              -2.5574910              -0.0907273  \n        ORIGIN_HEX7510          ORIGIN_HEX7542          ORIGIN_HEX7543  \n            -0.3076071               0.1597786              -0.9755278  \n        ORIGIN_HEX7544          ORIGIN_HEX7545          ORIGIN_HEX7546  \n            -1.5666799              -1.1429411              -0.1480710  \n        ORIGIN_HEX7547          ORIGIN_HEX7553          ORIGIN_HEX7555  \n             0.2361290              -3.6928012              -0.7320927  \n        ORIGIN_HEX7556          ORIGIN_HEX7590          ORIGIN_HEX7591  \n            -0.9926280              -0.2937250              -1.3367075  \n        ORIGIN_HEX7592          ORIGIN_HEX7594          ORIGIN_HEX7595  \n            -0.7282577               1.0844705              -1.1917117  \n        ORIGIN_HEX7603          ORIGIN_HEX7604          ORIGIN_HEX7637  \n            -1.8395074              -0.3838613              -1.2028512  \n        ORIGIN_HEX7638          ORIGIN_HEX7639          ORIGIN_HEX7641  \n            -2.7908455               0.5483088              -0.9900580  \n        ORIGIN_HEX7647          ORIGIN_HEX7650          ORIGIN_HEX7684  \n             0.2265507              -0.1421807              -0.2198241  \n        ORIGIN_HEX7685          ORIGIN_HEX7686          ORIGIN_HEX7687  \n            -0.4245327               1.2109593               0.5110082  \n        ORIGIN_HEX7694           ORIGIN_HEX770           ORIGIN_HEX771  \n             1.0926813               1.2062894               0.2712084  \n         ORIGIN_HEX773          ORIGIN_HEX7731          ORIGIN_HEX7732  \n             1.8458553              -0.0407189              -0.8929198  \n        ORIGIN_HEX7733          ORIGIN_HEX7734          ORIGIN_HEX7735  \n            -0.3590890               0.4536808               0.4912278  \n        ORIGIN_HEX7740           ORIGIN_HEX775           ORIGIN_HEX777  \n            -0.4368592               0.1869157               0.0902784  \n        ORIGIN_HEX7778          ORIGIN_HEX7779           ORIGIN_HEX778  \n            -0.2491674              -1.8008499               0.0772794  \n        ORIGIN_HEX7780          ORIGIN_HEX7781          ORIGIN_HEX7787  \n             0.2594624               0.1976078              -0.6937104  \n         ORIGIN_HEX779          ORIGIN_HEX7825          ORIGIN_HEX7826  \n            -2.2525543              -0.4137566              -0.3862058  \n        ORIGIN_HEX7828          ORIGIN_HEX7829          ORIGIN_HEX7831  \n             0.0817001              -0.3509552              -1.2473942  \n        ORIGIN_HEX7833          ORIGIN_HEX7834          ORIGIN_HEX7872  \n            -0.8671051               0.6231563              -0.2272530  \n        ORIGIN_HEX7873          ORIGIN_HEX7874          ORIGIN_HEX7875  \n            -0.4777802               0.8186305              -0.4837522  \n        ORIGIN_HEX7876          ORIGIN_HEX7878          ORIGIN_HEX7879  \n            -0.3868623               0.4730541              -1.1891829  \n        ORIGIN_HEX7881          ORIGIN_HEX7919          ORIGIN_HEX7920  \n            -2.3689041              -0.2419391              -0.1805710  \n        ORIGIN_HEX7921          ORIGIN_HEX7922          ORIGIN_HEX7923  \n             2.4629885               0.0293314              -0.7153594  \n        ORIGIN_HEX7925          ORIGIN_HEX7926          ORIGIN_HEX7927  \n             0.0950991              -0.0049583               0.1861349  \n        ORIGIN_HEX7928          ORIGIN_HEX7967          ORIGIN_HEX7968  \n             1.5353544              -1.1121005              -2.0586349  \n        ORIGIN_HEX7969          ORIGIN_HEX7970          ORIGIN_HEX7972  \n            -0.1129135               0.5697368               1.2199448  \n        ORIGIN_HEX7973          ORIGIN_HEX7974          ORIGIN_HEX7976  \n             0.5320125               0.2431154               1.0369980  \n        ORIGIN_HEX8013          ORIGIN_HEX8014          ORIGIN_HEX8015  \n            -0.2866538               0.3802984               0.0967910  \n        ORIGIN_HEX8016          ORIGIN_HEX8017          ORIGIN_HEX8018  \n             0.4830874               0.9348986              -0.4788981  \n        ORIGIN_HEX8019          ORIGIN_HEX8020          ORIGIN_HEX8021  \n             0.2108282              -0.1053991              -0.6433935  \n        ORIGIN_HEX8023          ORIGIN_HEX8061          ORIGIN_HEX8062  \n             1.5264307              -0.6102569              -0.1392338  \n        ORIGIN_HEX8063          ORIGIN_HEX8065          ORIGIN_HEX8066  \n            -0.1591577              -1.4883894              -0.2876854  \n        ORIGIN_HEX8067          ORIGIN_HEX8068          ORIGIN_HEX8070  \n            -0.1750988               0.2665212              -0.2400799  \n        ORIGIN_HEX8071          ORIGIN_HEX8108          ORIGIN_HEX8109  \n            -1.4946598              -1.1593907              -0.8985429  \n        ORIGIN_HEX8110          ORIGIN_HEX8112          ORIGIN_HEX8113  \n             0.4609203               1.2611992              -0.3335546  \n        ORIGIN_HEX8114          ORIGIN_HEX8115          ORIGIN_HEX8116  \n            -0.7193355              -0.7132643              -1.4482160  \n        ORIGIN_HEX8117          ORIGIN_HEX8155          ORIGIN_HEX8156  \n            -0.2268583              -0.3328154              -0.8759897  \n        ORIGIN_HEX8157          ORIGIN_HEX8158          ORIGIN_HEX8160  \n             0.0241561              -0.4503147               0.3107647  \n        ORIGIN_HEX8161          ORIGIN_HEX8162          ORIGIN_HEX8163  \n            -0.0389856              -0.8871568              -1.4739588  \n        ORIGIN_HEX8164          ORIGIN_HEX8165           ORIGIN_HEX818  \n            -0.3143066              -0.4791083               1.1369908  \n         ORIGIN_HEX819           ORIGIN_HEX820          ORIGIN_HEX8203  \n             0.2824713              -0.5611867               0.1838596  \n        ORIGIN_HEX8207          ORIGIN_HEX8208          ORIGIN_HEX8209  \n             1.0399887              -2.5092773               0.0270227  \n        ORIGIN_HEX8210          ORIGIN_HEX8211           ORIGIN_HEX823  \n            -0.1307716               0.3937173               1.0363137  \n         ORIGIN_HEX824          ORIGIN_HEX8249           ORIGIN_HEX825  \n             1.3835257              -1.0848553              -1.8938836  \n        ORIGIN_HEX8250          ORIGIN_HEX8252          ORIGIN_HEX8254  \n             0.3904125               0.1012029              -0.3222262  \n        ORIGIN_HEX8255          ORIGIN_HEX8256          ORIGIN_HEX8258  \n             2.6171486              -0.7698408              -0.9525040  \n        ORIGIN_HEX8259           ORIGIN_HEX826           ORIGIN_HEX827  \n            -0.8939885              -1.0787833               0.9945789  \n         ORIGIN_HEX828          ORIGIN_HEX8296          ORIGIN_HEX8297  \n             0.7874725              -0.0814198               1.6032205  \n        ORIGIN_HEX8298          ORIGIN_HEX8299          ORIGIN_HEX8300  \n             0.1025655               0.5370791               0.1554585  \n        ORIGIN_HEX8301          ORIGIN_HEX8302          ORIGIN_HEX8304  \n             0.9991954              -0.9319055              -0.1929707  \n        ORIGIN_HEX8305          ORIGIN_HEX8344          ORIGIN_HEX8345  \n            -2.2067185              -1.5294690               1.1632939  \n        ORIGIN_HEX8346          ORIGIN_HEX8347          ORIGIN_HEX8348  \n            -0.5696555               0.2353310              -0.4319985  \n        ORIGIN_HEX8349          ORIGIN_HEX8351          ORIGIN_HEX8352  \n            -0.9459308              -0.9957529              -1.3952910  \n        ORIGIN_HEX8353          ORIGIN_HEX8389          ORIGIN_HEX8390  \n            -0.8871489              -0.6860503              -1.2296830  \n        ORIGIN_HEX8391          ORIGIN_HEX8392          ORIGIN_HEX8393  \n            -0.8430484               0.3938930               0.9200548  \n        ORIGIN_HEX8394          ORIGIN_HEX8395          ORIGIN_HEX8396  \n            -0.8390818              -1.8525277              -0.5302077  \n        ORIGIN_HEX8398          ORIGIN_HEX8439          ORIGIN_HEX8440  \n             2.4127134              -0.1853154               1.2037616  \n        ORIGIN_HEX8441          ORIGIN_HEX8442          ORIGIN_HEX8443  \n             1.4971431              -0.1668903              -0.1034493  \n        ORIGIN_HEX8444          ORIGIN_HEX8445          ORIGIN_HEX8484  \n             0.1196136              -0.5320207              -0.6898594  \n        ORIGIN_HEX8485          ORIGIN_HEX8486          ORIGIN_HEX8488  \n            -1.5478549               0.3215129              -0.4892414  \n        ORIGIN_HEX8489          ORIGIN_HEX8490          ORIGIN_HEX8532  \n             0.6304819              -0.8349642               0.4104595  \n        ORIGIN_HEX8534          ORIGIN_HEX8535          ORIGIN_HEX8536  \n            -1.4487432              -0.9159027              -0.9674001  \n        ORIGIN_HEX8537          ORIGIN_HEX8538          ORIGIN_HEX8539  \n             1.4224652               0.1146611               0.0860293  \n        ORIGIN_HEX8540          ORIGIN_HEX8580          ORIGIN_HEX8581  \n             0.6784089               0.0914039              -2.7720896  \n        ORIGIN_HEX8582          ORIGIN_HEX8583          ORIGIN_HEX8584  \n             0.2450316              -0.9308679               0.4307525  \n        ORIGIN_HEX8585          ORIGIN_HEX8586          ORIGIN_HEX8587  \n            -0.6915903              -0.9368247               0.3063461  \n        ORIGIN_HEX8628          ORIGIN_HEX8629          ORIGIN_HEX8631  \n            -0.7479388               0.5065877               0.1038980  \n        ORIGIN_HEX8633          ORIGIN_HEX8634           ORIGIN_HEX866  \n             0.2287688              -0.1996324              -0.5056586  \n         ORIGIN_HEX867          ORIGIN_HEX8674          ORIGIN_HEX8675  \n             0.6689957               0.3497376              -1.2009111  \n        ORIGIN_HEX8676          ORIGIN_HEX8677          ORIGIN_HEX8679  \n             0.1395859              -0.2095949              -0.0583122  \n        ORIGIN_HEX8680          ORIGIN_HEX8681           ORIGIN_HEX870  \n             0.2849556               0.6207966               0.5650486  \n         ORIGIN_HEX872          ORIGIN_HEX8721          ORIGIN_HEX8722  \n            -0.4675838               0.4077646               1.0533095  \n        ORIGIN_HEX8723          ORIGIN_HEX8724          ORIGIN_HEX8725  \n            -2.5082639               1.0631694               0.1969713  \n        ORIGIN_HEX8726          ORIGIN_HEX8727          ORIGIN_HEX8728  \n            -0.1822067               0.2171370              -0.7912455  \n         ORIGIN_HEX873           ORIGIN_HEX874          ORIGIN_HEX8768  \n            -1.8528557              -0.5934425              -0.3409253  \n        ORIGIN_HEX8769          ORIGIN_HEX8771          ORIGIN_HEX8772  \n            -1.0295736               0.8567672               0.5125111  \n        ORIGIN_HEX8773          ORIGIN_HEX8774          ORIGIN_HEX8775  \n             0.1540031               0.1376678              -0.5707086  \n        ORIGIN_HEX8815          ORIGIN_HEX8816          ORIGIN_HEX8817  \n             1.6638593               1.0866118              -1.1818219  \n        ORIGIN_HEX8818          ORIGIN_HEX8819          ORIGIN_HEX8820  \n             1.0935691              -0.0931318              -2.2924554  \n        ORIGIN_HEX8862          ORIGIN_HEX8864          ORIGIN_HEX8865  \n            -0.2508749               1.0403730               0.9547658  \n        ORIGIN_HEX8866          ORIGIN_HEX8867          ORIGIN_HEX8868  \n             0.4939943              -2.4029941               0.4070722  \n        ORIGIN_HEX8910          ORIGIN_HEX8912          ORIGIN_HEX8914  \n             0.2833308               0.6469146              -0.2841290  \n        ORIGIN_HEX8915          ORIGIN_HEX8916          ORIGIN_HEX8917  \n            -1.2813029              -1.8777404               0.9378051  \n        ORIGIN_HEX8959          ORIGIN_HEX8961          ORIGIN_HEX8962  \n             0.7248720              -1.7139033               1.0501780  \n        ORIGIN_HEX8963          ORIGIN_HEX8964          ORIGIN_HEX9007  \n            -0.2406197               0.8702391               0.3041815  \n        ORIGIN_HEX9008          ORIGIN_HEX9010          ORIGIN_HEX9011  \n            -0.3427615               0.0381626               0.1652927  \n        ORIGIN_HEX9055          ORIGIN_HEX9056          ORIGIN_HEX9057  \n            -2.6198357              -0.3842371              -0.2883586  \n        ORIGIN_HEX9103          ORIGIN_HEX9105          ORIGIN_HEX9106  \n            -0.4685461              -3.2553658              -0.9640589  \n         ORIGIN_HEX914          ORIGIN_HEX9145          ORIGIN_HEX9150  \n             0.4845335               0.9431767              -0.4778007  \n        ORIGIN_HEX9152          ORIGIN_HEX9153           ORIGIN_HEX917  \n            -0.0148354              -0.7258198               1.1378494  \n         ORIGIN_HEX919          ORIGIN_HEX9193           ORIGIN_HEX920  \n             0.6412568               1.1885996              -0.0375516  \n        ORIGIN_HEX9200          ORIGIN_HEX9240          ORIGIN_HEX9246  \n            -2.6953807               0.2474209              -0.2473385  \n        ORIGIN_HEX9247          ORIGIN_HEX9283          ORIGIN_HEX9289  \n            -1.5711944               1.9639678               1.7137229  \n        ORIGIN_HEX9294          ORIGIN_HEX9340          ORIGIN_HEX9383  \n             0.9764877              -0.1679859               1.4978247  \n        ORIGIN_HEX9384          ORIGIN_HEX9388          ORIGIN_HEX9432  \n             2.2841954              -0.8250644               0.9103273  \n        ORIGIN_HEX9471          ORIGIN_HEX9480          ORIGIN_HEX9482  \n             1.5664694               0.7871702              -2.7152770  \n        ORIGIN_HEX9526          ORIGIN_HEX9527          ORIGIN_HEX9575  \n             0.3921877               1.9647531               0.9330241  \n        ORIGIN_HEX9576          ORIGIN_HEX9621          ORIGIN_HEX9622  \n             0.5329091               1.0448569               1.6385604  \n         ORIGIN_HEX965           ORIGIN_HEX966          ORIGIN_HEX9668  \n             1.3768148              -1.3392508               0.9939970  \n        ORIGIN_HEX9714          ORIGIN_HEX9988      log(entertn_count)  \n             1.1319527               1.5855659               0.1242313  \n         log(FB_count)         log(lere_count)       log(retail_count)  \n            -0.1023757              -0.0643380               0.0907983  \n log(trainexits_count)  log(residential_count)               log(dist)  \n             0.7528727               0.1249424              -1.0917845  \n\nDegrees of Freedom: 161670 Total (i.e. Null);  159856 Residual\nNull Deviance:      96290000 \nResidual Deviance: 41900000     AIC: 42690000\n\n\n\nCalcRSquared(orcSIM$data$WEEKDAY_AFTERNOON_PEAK, orcSIM$fitted.values)\n\n[1] 0.2306263\n\n\n\nr2_mcfadden(orcSIM)\n\n# R2 for Generalized Linear Regression\n       R2: 0.560\n  adj. R2: 0.560\n\n\n\n\n11.7Destination Constrained Spatial Interaction Model\n\ndecSIM &lt;- glm(formula = WEEKDAY_AFTERNOON_PEAK ~\n                DESTIN_HEX +\n                log(bus_stop_count) + \n                log(business_count) +\n                log(school_count) +\n                log(finserv_count) +\n                log(dist),\n              family = poisson(link = \"log\"),\n              data = SIM_data,\n              na.action = na.exclude)\nwrite_rds(decSIM, \"data/rds/decSIM.rds\")\n\n\ndecSIM &lt;- read_rds(\"data/rds/decSIM.rds\")\ndecSIM\n\n\nCall:  glm(formula = WEEKDAY_AFTERNOON_PEAK ~ DESTIN_HEX + log(bus_stop_count) + \n    log(business_count) + log(school_count) + log(finserv_count) + \n    log(dist), family = poisson(link = \"log\"), data = SIM_data, \n    na.action = na.exclude)\n\nCoefficients:\n        (Intercept)       DESTIN_HEX1012       DESTIN_HEX1013  \n           8.447842            -0.620665             1.552959  \n     DESTIN_HEX1014       DESTIN_HEX1058       DESTIN_HEX1059  \n           2.390755             1.632665             1.336681  \n     DESTIN_HEX1060       DESTIN_HEX1061       DESTIN_HEX1104  \n           2.318986             2.457471             2.632307  \n     DESTIN_HEX1106       DESTIN_HEX1107       DESTIN_HEX1108  \n           5.498398             3.840852             2.517246  \n     DESTIN_HEX1152       DESTIN_HEX1153       DESTIN_HEX1154  \n           3.831611             1.413679             2.608004  \n     DESTIN_HEX1199       DESTIN_HEX1200       DESTIN_HEX1201  \n          -0.825045             3.481625             2.737735  \n     DESTIN_HEX1202       DESTIN_HEX1244       DESTIN_HEX1245  \n           4.202204             0.917208             2.388941  \n     DESTIN_HEX1246       DESTIN_HEX1247       DESTIN_HEX1291  \n           1.152274             0.070541             3.214181  \n     DESTIN_HEX1292       DESTIN_HEX1293       DESTIN_HEX1295  \n           2.734613            -0.283585             1.604892  \n     DESTIN_HEX1338       DESTIN_HEX1339       DESTIN_HEX1340  \n           2.826374             2.018304             4.924653  \n     DESTIN_HEX1341       DESTIN_HEX1385       DESTIN_HEX1386  \n           2.385585             2.455026             2.678016  \n     DESTIN_HEX1387       DESTIN_HEX1388       DESTIN_HEX1433  \n           1.955599             0.561984             2.198688  \n     DESTIN_HEX1434       DESTIN_HEX1479       DESTIN_HEX1480  \n           3.879328             1.390610             2.575423  \n     DESTIN_HEX1481       DESTIN_HEX1525       DESTIN_HEX1526  \n           2.701184             3.350146             1.252878  \n     DESTIN_HEX1527       DESTIN_HEX1528       DESTIN_HEX1529  \n           3.437638             3.094626             3.580964  \n     DESTIN_HEX1573       DESTIN_HEX1574       DESTIN_HEX1575  \n           3.590325             1.432800             2.448803  \n     DESTIN_HEX1619       DESTIN_HEX1621       DESTIN_HEX1622  \n           3.753948             2.967183             4.021489  \n     DESTIN_HEX1623       DESTIN_HEX1666       DESTIN_HEX1668  \n           3.936538             3.175880             2.541494  \n     DESTIN_HEX1669       DESTIN_HEX1670       DESTIN_HEX1671  \n           2.382142             2.186917             2.216756  \n     DESTIN_HEX1715       DESTIN_HEX1717       DESTIN_HEX1718  \n           2.172002             0.146129             3.143800  \n     DESTIN_HEX1761       DESTIN_HEX1762       DESTIN_HEX1763  \n           3.413622             2.405183             1.449493  \n     DESTIN_HEX1764       DESTIN_HEX1765       DESTIN_HEX1768  \n           2.081198             1.733104             1.064033  \n     DESTIN_HEX1808       DESTIN_HEX1809       DESTIN_HEX1810  \n           2.970521             1.520056             0.247839  \n     DESTIN_HEX1811       DESTIN_HEX1812       DESTIN_HEX1814  \n           3.891577             1.520545             2.515835  \n     DESTIN_HEX1815       DESTIN_HEX1855       DESTIN_HEX1856  \n           1.815298             2.880625             2.336006  \n     DESTIN_HEX1857       DESTIN_HEX1858       DESTIN_HEX1859  \n           2.304166             2.001847             6.049929  \n     DESTIN_HEX1861       DESTIN_HEX1862       DESTIN_HEX1903  \n           4.170026             4.675106            -1.621048  \n     DESTIN_HEX1904       DESTIN_HEX1905       DESTIN_HEX1906  \n           2.698382             0.502234             2.169203  \n     DESTIN_HEX1907       DESTIN_HEX1909       DESTIN_HEX1950  \n           2.734840             4.165344             1.137720  \n     DESTIN_HEX1952       DESTIN_HEX1953       DESTIN_HEX1955  \n           1.145970             2.659216             3.390037  \n     DESTIN_HEX1956       DESTIN_HEX1957       DESTIN_HEX1996  \n           3.152196             4.454993             3.006570  \n     DESTIN_HEX1997       DESTIN_HEX1998       DESTIN_HEX1999  \n           2.417170             3.568262             2.484697  \n     DESTIN_HEX2000       DESTIN_HEX2003       DESTIN_HEX2046  \n           1.806949             1.797842             0.282109  \n     DESTIN_HEX2047       DESTIN_HEX2049       DESTIN_HEX2050  \n           2.087621             5.407134             4.766394  \n     DESTIN_HEX2051       DESTIN_HEX2090       DESTIN_HEX2092  \n           4.705234             1.567164             3.584444  \n     DESTIN_HEX2093       DESTIN_HEX2094       DESTIN_HEX2095  \n           1.734036             2.643815             3.880151  \n     DESTIN_HEX2096       DESTIN_HEX2139       DESTIN_HEX2140  \n           4.562976             2.948328             2.988491  \n     DESTIN_HEX2141       DESTIN_HEX2142       DESTIN_HEX2143  \n           2.357160             3.076807             5.310905  \n     DESTIN_HEX2145       DESTIN_HEX2146       DESTIN_HEX2184  \n           1.883199            -0.237729             2.817487  \n     DESTIN_HEX2187       DESTIN_HEX2189       DESTIN_HEX2190  \n           1.584625             3.706179             5.492825  \n     DESTIN_HEX2192       DESTIN_HEX2193       DESTIN_HEX2194  \n           0.509126             2.561649             2.168302  \n     DESTIN_HEX2232       DESTIN_HEX2233       DESTIN_HEX2234  \n           0.977301             2.948816             2.418126  \n     DESTIN_HEX2235       DESTIN_HEX2236       DESTIN_HEX2237  \n           3.894553             3.402209             4.872929  \n     DESTIN_HEX2238       DESTIN_HEX2239       DESTIN_HEX2241  \n           6.063297             2.616972             0.688119  \n     DESTIN_HEX2242       DESTIN_HEX2278       DESTIN_HEX2279  \n           1.871787             2.287898             2.575728  \n     DESTIN_HEX2280       DESTIN_HEX2281       DESTIN_HEX2282  \n           3.306797             2.658118             3.631304  \n     DESTIN_HEX2283       DESTIN_HEX2284       DESTIN_HEX2288  \n           5.708689             4.968754             3.007444  \n     DESTIN_HEX2289       DESTIN_HEX2290       DESTIN_HEX2326  \n           0.855073             0.805451             1.603713  \n     DESTIN_HEX2327       DESTIN_HEX2328       DESTIN_HEX2329  \n           2.018416            -0.465983             2.383474  \n     DESTIN_HEX2330       DESTIN_HEX2331       DESTIN_HEX2332  \n           4.205845             5.377881             5.013962  \n     DESTIN_HEX2337       DESTIN_HEX2340       DESTIN_HEX2341  \n           0.209256             2.205254             0.233564  \n     DESTIN_HEX2342       DESTIN_HEX2372       DESTIN_HEX2376  \n           1.117153             3.151315             2.523252  \n     DESTIN_HEX2377       DESTIN_HEX2378       DESTIN_HEX2379  \n           5.241305             4.757247             4.702609  \n     DESTIN_HEX2382       DESTIN_HEX2386       DESTIN_HEX2388  \n           1.488752             1.513186            -1.080587  \n     DESTIN_HEX2389       DESTIN_HEX2421       DESTIN_HEX2422  \n           0.968985             2.810029             3.248019  \n     DESTIN_HEX2423       DESTIN_HEX2424       DESTIN_HEX2425  \n           3.339791             2.542957             4.462264  \n     DESTIN_HEX2426       DESTIN_HEX2434       DESTIN_HEX2436  \n           5.288650            -1.135514             4.112664  \n     DESTIN_HEX2437       DESTIN_HEX2466       DESTIN_HEX2470  \n           1.349461             0.934981             0.873129  \n     DESTIN_HEX2471       DESTIN_HEX2472       DESTIN_HEX2473  \n           6.454892             4.978991             5.432120  \n     DESTIN_HEX2476       DESTIN_HEX2484       DESTIN_HEX2515  \n           0.909877             2.177659             1.230001  \n     DESTIN_HEX2516       DESTIN_HEX2518       DESTIN_HEX2519  \n           3.994263             1.575899             3.717326  \n     DESTIN_HEX2520       DESTIN_HEX2532       DESTIN_HEX2533  \n           3.804414             0.885108             0.684698  \n     DESTIN_HEX2534       DESTIN_HEX2562       DESTIN_HEX2563  \n           2.969696             2.185070             3.196816  \n     DESTIN_HEX2564       DESTIN_HEX2565       DESTIN_HEX2566  \n           2.257874             2.438077             4.210747  \n     DESTIN_HEX2567       DESTIN_HEX2570       DESTIN_HEX2579  \n           1.725308             0.253391             0.721019  \n     DESTIN_HEX2580       DESTIN_HEX2609       DESTIN_HEX2611  \n           1.022457             2.126733             1.209451  \n     DESTIN_HEX2612       DESTIN_HEX2613       DESTIN_HEX2614  \n           2.007285             3.505131             5.488127  \n     DESTIN_HEX2655       DESTIN_HEX2657       DESTIN_HEX2658  \n           1.545115             1.167779             0.706862  \n     DESTIN_HEX2660       DESTIN_HEX2661       DESTIN_HEX2664  \n           5.500010             3.108345             0.966191  \n     DESTIN_HEX2703       DESTIN_HEX2705       DESTIN_HEX2706  \n           1.396923             3.690679             2.205695  \n     DESTIN_HEX2707       DESTIN_HEX2708       DESTIN_HEX2712  \n           4.053102             4.199327             1.724996  \n     DESTIN_HEX2752       DESTIN_HEX2753       DESTIN_HEX2754  \n           1.997464             3.643355             3.969292  \n     DESTIN_HEX2755       DESTIN_HEX2758       DESTIN_HEX2797  \n           4.837883             2.968320             2.719942  \n     DESTIN_HEX2798       DESTIN_HEX2799       DESTIN_HEX2800  \n           1.540112             1.674086             2.733026  \n     DESTIN_HEX2802       DESTIN_HEX2806       DESTIN_HEX2843  \n           5.283707             5.810746             3.030579  \n     DESTIN_HEX2844       DESTIN_HEX2845       DESTIN_HEX2846  \n           1.664971             4.101713             3.863574  \n     DESTIN_HEX2847       DESTIN_HEX2848       DESTIN_HEX2849  \n           4.735946             5.631341             4.360118  \n     DESTIN_HEX2891       DESTIN_HEX2893       DESTIN_HEX2894  \n           3.002074             4.783761             5.236481  \n     DESTIN_HEX2895       DESTIN_HEX2896       DESTIN_HEX2897  \n           2.669898             1.957193             4.000589  \n     DESTIN_HEX2900       DESTIN_HEX2937       DESTIN_HEX2939  \n           2.861517             3.044066             3.777241  \n     DESTIN_HEX2940       DESTIN_HEX2941       DESTIN_HEX2942  \n           4.352992             4.042478             3.324288  \n     DESTIN_HEX2943       DESTIN_HEX2987       DESTIN_HEX2988  \n           5.300723             3.122124             3.674106  \n     DESTIN_HEX2990       DESTIN_HEX2994       DESTIN_HEX3031  \n           4.319282             1.446816             0.852789  \n     DESTIN_HEX3033       DESTIN_HEX3036       DESTIN_HEX3084  \n           3.683530             2.269423             4.653299  \n     DESTIN_HEX3125       DESTIN_HEX3129       DESTIN_HEX3130  \n           1.766229             2.960943             4.240937  \n     DESTIN_HEX3135       DESTIN_HEX3172       DESTIN_HEX3173  \n           1.979939             2.672998             4.344790  \n     DESTIN_HEX3176       DESTIN_HEX3177       DESTIN_HEX3182  \n           1.425372             4.370646             2.627459  \n     DESTIN_HEX3218       DESTIN_HEX3220       DESTIN_HEX3221  \n           1.225336             3.927419             3.778431  \n     DESTIN_HEX3223       DESTIN_HEX3224       DESTIN_HEX3225  \n           3.444825             4.557027             2.014493  \n     DESTIN_HEX3229       DESTIN_HEX3238       DESTIN_HEX3266  \n           5.721336             1.841204             0.714789  \n     DESTIN_HEX3268       DESTIN_HEX3269       DESTIN_HEX3270  \n           5.422613             2.424189             3.696705  \n     DESTIN_HEX3271       DESTIN_HEX3272       DESTIN_HEX3273  \n           4.533798             2.302287             4.775928  \n     DESTIN_HEX3276       DESTIN_HEX3277       DESTIN_HEX3312  \n           5.293831             5.094658             1.544389  \n     DESTIN_HEX3314       DESTIN_HEX3316       DESTIN_HEX3317  \n           2.638783             3.270632             3.887267  \n     DESTIN_HEX3318       DESTIN_HEX3319       DESTIN_HEX3320  \n           4.604636             4.423664             4.924394  \n     DESTIN_HEX3322       DESTIN_HEX3323       DESTIN_HEX3325  \n           1.428101             5.131531             2.645686  \n     DESTIN_HEX3362       DESTIN_HEX3363       DESTIN_HEX3364  \n           4.202522             2.979127             5.395207  \n     DESTIN_HEX3365       DESTIN_HEX3366       DESTIN_HEX3367  \n           4.516293             4.234259             4.762120  \n     DESTIN_HEX3368       DESTIN_HEX3370       DESTIN_HEX3371  \n           4.177985             5.261554             4.135468  \n     DESTIN_HEX3372       DESTIN_HEX3406       DESTIN_HEX3408  \n           3.683111             1.059662             3.249847  \n     DESTIN_HEX3409       DESTIN_HEX3410       DESTIN_HEX3411  \n           3.198207             3.660947             4.266618  \n     DESTIN_HEX3412       DESTIN_HEX3413       DESTIN_HEX3414  \n           3.974093             4.801650             4.508249  \n     DESTIN_HEX3415       DESTIN_HEX3416       DESTIN_HEX3417  \n           3.741618             4.603984             4.525420  \n     DESTIN_HEX3418       DESTIN_HEX3419       DESTIN_HEX3426  \n           5.990477             5.270843             3.776841  \n     DESTIN_HEX3453       DESTIN_HEX3456       DESTIN_HEX3457  \n           1.938024             3.882387             1.904852  \n     DESTIN_HEX3458       DESTIN_HEX3459       DESTIN_HEX3460  \n           3.785362             4.208821             4.713139  \n     DESTIN_HEX3461       DESTIN_HEX3462       DESTIN_HEX3463  \n           2.041003             5.054143             2.353868  \n     DESTIN_HEX3464       DESTIN_HEX3465       DESTIN_HEX3466  \n           5.065786             2.143616             4.196084  \n     DESTIN_HEX3467       DESTIN_HEX3468       DESTIN_HEX3472  \n           3.377782             5.082183             2.036989  \n     DESTIN_HEX3473       DESTIN_HEX3499       DESTIN_HEX3502  \n           3.882782             0.314049             4.191043  \n     DESTIN_HEX3503       DESTIN_HEX3504       DESTIN_HEX3505  \n           2.392260             3.102355             4.574123  \n     DESTIN_HEX3506       DESTIN_HEX3507       DESTIN_HEX3508  \n           4.690099             3.538613             4.395800  \n     DESTIN_HEX3509       DESTIN_HEX3511       DESTIN_HEX3512  \n           4.626721             4.233381             2.785058  \n     DESTIN_HEX3513       DESTIN_HEX3514       DESTIN_HEX3518  \n           4.473639             5.364359             2.062519  \n     DESTIN_HEX3519       DESTIN_HEX3547       DESTIN_HEX3549  \n           2.256932            -0.588927             3.190541  \n     DESTIN_HEX3551       DESTIN_HEX3552       DESTIN_HEX3554  \n           3.184825             3.410875             2.372164  \n     DESTIN_HEX3555       DESTIN_HEX3556       DESTIN_HEX3557  \n           2.909866             3.952206             4.106838  \n     DESTIN_HEX3558       DESTIN_HEX3559       DESTIN_HEX3561  \n           4.121985             5.201857             2.844325  \n     DESTIN_HEX3562       DESTIN_HEX3564       DESTIN_HEX3565  \n           6.183081             2.128999             2.068832  \n     DESTIN_HEX3593       DESTIN_HEX3594       DESTIN_HEX3595  \n           2.644163             2.646033             2.972990  \n     DESTIN_HEX3599       DESTIN_HEX3600       DESTIN_HEX3601  \n           4.673766             2.555646             5.469504  \n     DESTIN_HEX3602       DESTIN_HEX3603       DESTIN_HEX3604  \n           5.612545             3.889180             2.892271  \n     DESTIN_HEX3605       DESTIN_HEX3607       DESTIN_HEX3608  \n           4.219223             4.518516             4.890859  \n     DESTIN_HEX3610       DESTIN_HEX3611       DESTIN_HEX3613  \n           2.899820             2.877771             1.948205  \n     DESTIN_HEX3641       DESTIN_HEX3643       DESTIN_HEX3644  \n           1.856389             2.735178             4.640040  \n     DESTIN_HEX3645       DESTIN_HEX3647       DESTIN_HEX3648  \n           2.225981             4.262718             4.366474  \n     DESTIN_HEX3649       DESTIN_HEX3652       DESTIN_HEX3653  \n           4.575829             3.253540             4.887019  \n     DESTIN_HEX3654       DESTIN_HEX3655       DESTIN_HEX3656  \n           2.384477             2.772032             0.211265  \n     DESTIN_HEX3657       DESTIN_HEX3658       DESTIN_HEX3661  \n           1.217880             1.490865             2.695541  \n     DESTIN_HEX3689       DESTIN_HEX3691       DESTIN_HEX3692  \n           2.584309             2.539249             0.969681  \n     DESTIN_HEX3693       DESTIN_HEX3694       DESTIN_HEX3695  \n           4.730480             4.761478             4.967091  \n     DESTIN_HEX3699       DESTIN_HEX3700       DESTIN_HEX3701  \n           4.556505             3.061179             3.001428  \n     DESTIN_HEX3702       DESTIN_HEX3703       DESTIN_HEX3704  \n           2.665565             4.520086             2.719439  \n     DESTIN_HEX3705       DESTIN_HEX3706       DESTIN_HEX3707  \n           1.033996            -0.020424             2.127847  \n     DESTIN_HEX3736       DESTIN_HEX3739       DESTIN_HEX3740  \n           2.521215             2.756794             1.935204  \n     DESTIN_HEX3741       DESTIN_HEX3742       DESTIN_HEX3748  \n           3.299038             4.955273             1.801780  \n     DESTIN_HEX3750       DESTIN_HEX3751       DESTIN_HEX3753  \n           2.619829             4.007699             2.736490  \n     DESTIN_HEX3754       DESTIN_HEX3782       DESTIN_HEX3783  \n           2.503822             3.423152             3.897923  \n     DESTIN_HEX3784       DESTIN_HEX3785       DESTIN_HEX3786  \n           4.226073             1.847092             2.668256  \n     DESTIN_HEX3787       DESTIN_HEX3788       DESTIN_HEX3789  \n           3.957274             4.595184             4.394702  \n     DESTIN_HEX3793       DESTIN_HEX3794       DESTIN_HEX3798  \n           4.378080             4.983946             0.045522  \n     DESTIN_HEX3829       DESTIN_HEX3830       DESTIN_HEX3831  \n           2.976373             4.904621             3.849441  \n     DESTIN_HEX3832       DESTIN_HEX3836       DESTIN_HEX3837  \n           4.532987             3.540246             3.997772  \n     DESTIN_HEX3839       DESTIN_HEX3840       DESTIN_HEX3841  \n          -0.349927             1.423101             3.907210  \n     DESTIN_HEX3845       DESTIN_HEX3847       DESTIN_HEX3848  \n           0.113038             6.070485             3.319203  \n     DESTIN_HEX3875       DESTIN_HEX3876       DESTIN_HEX3877  \n           3.644200             5.350782             4.229097  \n     DESTIN_HEX3878       DESTIN_HEX3879       DESTIN_HEX3881  \n           4.728757             3.344040             2.823280  \n     DESTIN_HEX3882       DESTIN_HEX3884       DESTIN_HEX3886  \n           1.847722             4.488243             2.799369  \n     DESTIN_HEX3887       DESTIN_HEX3888       DESTIN_HEX3895  \n           5.870410             4.458706             3.511497  \n     DESTIN_HEX3922       DESTIN_HEX3923       DESTIN_HEX3924  \n           3.018733             3.197557             2.840168  \n     DESTIN_HEX3925       DESTIN_HEX3926        DESTIN_HEX393  \n           6.184454             5.088933             3.809691  \n     DESTIN_HEX3930       DESTIN_HEX3932       DESTIN_HEX3933  \n           2.221035             4.057281             2.020176  \n     DESTIN_HEX3935       DESTIN_HEX3936       DESTIN_HEX3939  \n           4.482468             2.474309             3.520825  \n     DESTIN_HEX3942       DESTIN_HEX3943       DESTIN_HEX3968  \n           3.224804             2.248099             3.153490  \n     DESTIN_HEX3969       DESTIN_HEX3971       DESTIN_HEX3972  \n           4.036529             4.463803             4.674567  \n     DESTIN_HEX3975       DESTIN_HEX3976       DESTIN_HEX3978  \n           4.143586             2.605968             3.411550  \n     DESTIN_HEX3979       DESTIN_HEX3980       DESTIN_HEX3981  \n           2.489582             2.900230             4.256868  \n     DESTIN_HEX3982       DESTIN_HEX3990       DESTIN_HEX4016  \n           4.454808             3.004012             3.300625  \n     DESTIN_HEX4017       DESTIN_HEX4018       DESTIN_HEX4019  \n           3.855196             3.188342             3.281791  \n     DESTIN_HEX4020       DESTIN_HEX4023       DESTIN_HEX4024  \n           4.665579             4.247295             0.947158  \n     DESTIN_HEX4025       DESTIN_HEX4026       DESTIN_HEX4028  \n           3.510665             3.652514             4.902326  \n     DESTIN_HEX4029       DESTIN_HEX4030       DESTIN_HEX4033  \n           4.170820             5.168612             1.487394  \n     DESTIN_HEX4038       DESTIN_HEX4062       DESTIN_HEX4063  \n           6.930422             3.305623             3.411306  \n     DESTIN_HEX4064       DESTIN_HEX4065       DESTIN_HEX4066  \n           4.648635             4.773608             3.347602  \n     DESTIN_HEX4067       DESTIN_HEX4070       DESTIN_HEX4071  \n           3.279382             3.497766             2.791105  \n     DESTIN_HEX4073       DESTIN_HEX4074       DESTIN_HEX4075  \n           2.763784             3.401687             4.647219  \n     DESTIN_HEX4076       DESTIN_HEX4083       DESTIN_HEX4084  \n           4.728681             3.570519             4.973742  \n     DESTIN_HEX4109       DESTIN_HEX4111       DESTIN_HEX4112  \n           1.243334             2.839220             4.038552  \n     DESTIN_HEX4113       DESTIN_HEX4114       DESTIN_HEX4117  \n           3.553736             3.302827             3.767897  \n     DESTIN_HEX4118       DESTIN_HEX4122       DESTIN_HEX4123  \n           3.600754             5.695732             0.538301  \n     DESTIN_HEX4124       DESTIN_HEX4127       DESTIN_HEX4130  \n           5.394092             2.073870             3.962087  \n     DESTIN_HEX4131       DESTIN_HEX4132       DESTIN_HEX4156  \n           3.755035             5.694141             3.797628  \n     DESTIN_HEX4157       DESTIN_HEX4159       DESTIN_HEX4161  \n           3.111443             2.058611             1.818345  \n     DESTIN_HEX4163       DESTIN_HEX4167       DESTIN_HEX4168  \n           4.425441             3.143189             4.459431  \n     DESTIN_HEX4169       DESTIN_HEX4176       DESTIN_HEX4177  \n           3.827199             4.766638             5.559710  \n     DESTIN_HEX4178       DESTIN_HEX4179       DESTIN_HEX4203  \n           4.246510             3.805261             3.495210  \n     DESTIN_HEX4205       DESTIN_HEX4206       DESTIN_HEX4207  \n           3.701550             1.421378             3.853090  \n     DESTIN_HEX4208       DESTIN_HEX4209       DESTIN_HEX4210  \n           2.756508             4.249594             2.687726  \n     DESTIN_HEX4211       DESTIN_HEX4215       DESTIN_HEX4221  \n           4.351603             4.310704             3.351856  \n     DESTIN_HEX4224       DESTIN_HEX4225       DESTIN_HEX4226  \n           3.218992             4.642922             4.698329  \n     DESTIN_HEX4227       DESTIN_HEX4250       DESTIN_HEX4251  \n           2.420662             2.290197             3.265051  \n     DESTIN_HEX4253       DESTIN_HEX4254       DESTIN_HEX4256  \n           4.544457             3.871021             3.465096  \n     DESTIN_HEX4257       DESTIN_HEX4271       DESTIN_HEX4272  \n           4.035037             4.691758             5.255240  \n     DESTIN_HEX4273       DESTIN_HEX4297       DESTIN_HEX4300  \n           1.435306             2.219386             3.210498  \n     DESTIN_HEX4301       DESTIN_HEX4302       DESTIN_HEX4304  \n           2.694181             3.237063             4.067560  \n     DESTIN_HEX4315       DESTIN_HEX4318       DESTIN_HEX4319  \n           3.108098             4.646033             4.206262  \n     DESTIN_HEX4320       DESTIN_HEX4321       DESTIN_HEX4343  \n           2.103335             2.854768             4.888409  \n     DESTIN_HEX4345       DESTIN_HEX4346       DESTIN_HEX4347  \n           3.517981             4.651278             2.560196  \n     DESTIN_HEX4348       DESTIN_HEX4351       DESTIN_HEX4362  \n           2.611148             5.260595            -0.478306  \n     DESTIN_HEX4365       DESTIN_HEX4390       DESTIN_HEX4391  \n           4.433831             3.996748             1.760863  \n     DESTIN_HEX4392       DESTIN_HEX4393       DESTIN_HEX4394  \n           4.431233             1.657175             4.773529  \n     DESTIN_HEX4395       DESTIN_HEX4398       DESTIN_HEX4409  \n           2.584281             1.509296             0.548937  \n     DESTIN_HEX4412       DESTIN_HEX4413       DESTIN_HEX4414  \n           3.219775             5.167854             3.915005  \n     DESTIN_HEX4415       DESTIN_HEX4436       DESTIN_HEX4437  \n           5.641222             3.024858             2.474315  \n     DESTIN_HEX4438       DESTIN_HEX4439        DESTIN_HEX444  \n           2.269218             2.519123             3.116529  \n     DESTIN_HEX4440       DESTIN_HEX4441       DESTIN_HEX4442  \n           2.416263             3.614024             2.668791  \n     DESTIN_HEX4459       DESTIN_HEX4460       DESTIN_HEX4484  \n           4.716002             3.364491             3.694502  \n     DESTIN_HEX4485       DESTIN_HEX4486       DESTIN_HEX4487  \n           2.235068             2.482589             2.282621  \n     DESTIN_HEX4488       DESTIN_HEX4489       DESTIN_HEX4490  \n           3.554514             2.020932             2.115312  \n     DESTIN_HEX4492       DESTIN_HEX4502       DESTIN_HEX4506  \n           3.604427             4.073446             4.233824  \n     DESTIN_HEX4507       DESTIN_HEX4508       DESTIN_HEX4509  \n           6.449157             4.803394             4.672851  \n     DESTIN_HEX4530       DESTIN_HEX4532       DESTIN_HEX4533  \n           2.431729             2.245805             1.428083  \n     DESTIN_HEX4534       DESTIN_HEX4535       DESTIN_HEX4537  \n           5.006169             1.303426             2.126491  \n     DESTIN_HEX4538       DESTIN_HEX4550       DESTIN_HEX4552  \n           3.442216             0.430379             1.036547  \n     DESTIN_HEX4553       DESTIN_HEX4554       DESTIN_HEX4556  \n           4.710206             3.975098             5.227108  \n     DESTIN_HEX4577       DESTIN_HEX4579       DESTIN_HEX4580  \n           4.246295             2.583425             2.182392  \n     DESTIN_HEX4581       DESTIN_HEX4582       DESTIN_HEX4583  \n           1.045230             3.997703             1.904119  \n     DESTIN_HEX4584       DESTIN_HEX4585       DESTIN_HEX4586  \n           2.595300             1.936405             2.619475  \n     DESTIN_HEX4600       DESTIN_HEX4601       DESTIN_HEX4602  \n           4.348082             3.943494             5.350583  \n     DESTIN_HEX4603       DESTIN_HEX4624       DESTIN_HEX4626  \n           4.052413             2.729475             1.996209  \n     DESTIN_HEX4627       DESTIN_HEX4628       DESTIN_HEX4629  \n           1.804859             3.392534             3.891329  \n     DESTIN_HEX4631       DESTIN_HEX4632       DESTIN_HEX4646  \n           3.038648             2.957749             3.781316  \n     DESTIN_HEX4647       DESTIN_HEX4648       DESTIN_HEX4649  \n           4.869238             5.183281             4.170189  \n     DESTIN_HEX4650       DESTIN_HEX4671       DESTIN_HEX4674  \n           3.560475             2.568701             2.145922  \n     DESTIN_HEX4675       DESTIN_HEX4676       DESTIN_HEX4679  \n           2.280116             3.804580             1.069792  \n     DESTIN_HEX4692       DESTIN_HEX4694       DESTIN_HEX4695  \n           1.813324             5.405949             5.687178  \n     DESTIN_HEX4696       DESTIN_HEX4698       DESTIN_HEX4720  \n           5.299465             3.059185             2.778709  \n     DESTIN_HEX4721       DESTIN_HEX4722       DESTIN_HEX4726  \n           2.349793             2.447277             3.808450  \n     DESTIN_HEX4741       DESTIN_HEX4742       DESTIN_HEX4743  \n           5.676668             4.715266             5.627956  \n     DESTIN_HEX4765       DESTIN_HEX4766       DESTIN_HEX4768  \n           3.501066             2.728934             2.746308  \n     DESTIN_HEX4769       DESTIN_HEX4770       DESTIN_HEX4786  \n           4.861320             3.862730             3.401279  \n     DESTIN_HEX4788       DESTIN_HEX4789       DESTIN_HEX4790  \n           4.544712             5.086180             3.938236  \n     DESTIN_HEX4791       DESTIN_HEX4792       DESTIN_HEX4812  \n           4.738217             1.879059             2.072472  \n     DESTIN_HEX4813       DESTIN_HEX4814       DESTIN_HEX4815  \n           3.964786             4.099977             3.594020  \n     DESTIN_HEX4816       DESTIN_HEX4817       DESTIN_HEX4835  \n           3.882943             2.634425             4.664268  \n     DESTIN_HEX4836       DESTIN_HEX4837       DESTIN_HEX4838  \n           6.160277             5.074440             3.687907  \n     DESTIN_HEX4839       DESTIN_HEX4840       DESTIN_HEX4859  \n          -0.717715             1.067448             1.780924  \n     DESTIN_HEX4860       DESTIN_HEX4861       DESTIN_HEX4862  \n           3.176625             3.923630             4.466307  \n     DESTIN_HEX4863       DESTIN_HEX4864       DESTIN_HEX4865  \n           2.301057             2.228237             3.651160  \n     DESTIN_HEX4867        DESTIN_HEX488       DESTIN_HEX4880  \n           3.100248             3.314139             1.158111  \n     DESTIN_HEX4883       DESTIN_HEX4884       DESTIN_HEX4885  \n           4.040555             4.349542             4.054181  \n     DESTIN_HEX4886       DESTIN_HEX4887        DESTIN_HEX490  \n           3.738444             3.310921             3.700297  \n     DESTIN_HEX4905       DESTIN_HEX4906       DESTIN_HEX4908  \n           2.148489             3.865845             3.717881  \n     DESTIN_HEX4909        DESTIN_HEX491       DESTIN_HEX4911  \n           3.863783             3.757092             2.979391  \n     DESTIN_HEX4912       DESTIN_HEX4913       DESTIN_HEX4925  \n           4.214934             3.310576             1.709739  \n     DESTIN_HEX4926       DESTIN_HEX4930       DESTIN_HEX4931  \n           1.526642             4.929783             4.048701  \n     DESTIN_HEX4932       DESTIN_HEX4933       DESTIN_HEX4953  \n           1.928966             2.840411             3.636269  \n     DESTIN_HEX4954       DESTIN_HEX4955       DESTIN_HEX4956  \n           4.086778             4.131495             2.784385  \n     DESTIN_HEX4958       DESTIN_HEX4961       DESTIN_HEX4974  \n           2.216649             4.018523             1.001046  \n     DESTIN_HEX4978       DESTIN_HEX4981       DESTIN_HEX4999  \n           5.397204             4.510445             4.185432  \n     DESTIN_HEX5000       DESTIN_HEX5001       DESTIN_HEX5002  \n           4.474208             3.900919             4.023700  \n     DESTIN_HEX5003       DESTIN_HEX5006       DESTIN_HEX5007  \n           3.821256             1.498621             3.355062  \n     DESTIN_HEX5019       DESTIN_HEX5025       DESTIN_HEX5026  \n           1.199619             3.008615             3.393501  \n     DESTIN_HEX5027       DESTIN_HEX5028       DESTIN_HEX5047  \n           4.231313             3.598252             3.670209  \n     DESTIN_HEX5048       DESTIN_HEX5049       DESTIN_HEX5050  \n           3.485147             3.106590             4.098080  \n     DESTIN_HEX5052       DESTIN_HEX5054       DESTIN_HEX5066  \n           2.467508             2.663368             0.673767  \n     DESTIN_HEX5072       DESTIN_HEX5073       DESTIN_HEX5075  \n           4.523490             2.304531             3.289293  \n     DESTIN_HEX5093       DESTIN_HEX5094       DESTIN_HEX5095  \n           2.895133             3.148255             2.601340  \n     DESTIN_HEX5096       DESTIN_HEX5097       DESTIN_HEX5098  \n           2.700771             3.675596             1.429839  \n     DESTIN_HEX5101       DESTIN_HEX5102       DESTIN_HEX5119  \n           2.846437             2.511822             4.629699  \n     DESTIN_HEX5121       DESTIN_HEX5140       DESTIN_HEX5141  \n           4.025052             3.620810             2.791051  \n     DESTIN_HEX5142       DESTIN_HEX5143       DESTIN_HEX5144  \n           3.227155             4.266749             2.697774  \n     DESTIN_HEX5148       DESTIN_HEX5149       DESTIN_HEX5160  \n           3.737584             2.043963             2.777688  \n     DESTIN_HEX5166       DESTIN_HEX5167       DESTIN_HEX5168  \n           4.024462             3.347256             5.515369  \n     DESTIN_HEX5169       DESTIN_HEX5188       DESTIN_HEX5189  \n           2.559073             3.892308             4.038892  \n     DESTIN_HEX5190       DESTIN_HEX5191       DESTIN_HEX5197  \n           4.297242             2.616665             1.022349  \n     DESTIN_HEX5205       DESTIN_HEX5206       DESTIN_HEX5212  \n           0.087023             4.218288             2.572195  \n     DESTIN_HEX5213       DESTIN_HEX5214       DESTIN_HEX5215  \n           4.989191             5.657051             3.806951  \n     DESTIN_HEX5234       DESTIN_HEX5235       DESTIN_HEX5236  \n           4.946170             4.564196             2.148450  \n     DESTIN_HEX5237       DESTIN_HEX5239       DESTIN_HEX5240  \n           3.754294             0.855808             3.058254  \n     DESTIN_HEX5242       DESTIN_HEX5244       DESTIN_HEX5252  \n           2.494885             1.070008            -0.277712  \n     DESTIN_HEX5253       DESTIN_HEX5254       DESTIN_HEX5260  \n           5.132323             3.718915             3.933877  \n     DESTIN_HEX5261       DESTIN_HEX5262       DESTIN_HEX5280  \n           5.525643             2.579046             4.897783  \n     DESTIN_HEX5281       DESTIN_HEX5282       DESTIN_HEX5283  \n           4.246654             4.123063             4.004356  \n     DESTIN_HEX5284       DESTIN_HEX5286       DESTIN_HEX5298  \n           3.046689             2.546268             1.142450  \n     DESTIN_HEX5301       DESTIN_HEX5307       DESTIN_HEX5308  \n           2.915387             3.784163             3.939650  \n     DESTIN_HEX5309       DESTIN_HEX5328       DESTIN_HEX5329  \n           4.139405             3.146533             4.472768  \n     DESTIN_HEX5330       DESTIN_HEX5331       DESTIN_HEX5333  \n           3.592275             3.556631             1.271270  \n     DESTIN_HEX5336       DESTIN_HEX5339       DESTIN_HEX5349  \n           2.139638            -0.138178             0.263987  \n      DESTIN_HEX535       DESTIN_HEX5350       DESTIN_HEX5354  \n           3.037074             1.697241             3.355492  \n     DESTIN_HEX5355       DESTIN_HEX5356        DESTIN_HEX537  \n           3.754750             2.362868             3.755651  \n     DESTIN_HEX5373       DESTIN_HEX5375       DESTIN_HEX5377  \n           3.921715             3.653290             3.689955  \n     DESTIN_HEX5378       DESTIN_HEX5379       DESTIN_HEX5380  \n           3.010781             2.800046             2.531822  \n     DESTIN_HEX5382       DESTIN_HEX5383       DESTIN_HEX5397  \n           3.894686             1.991309             0.600434  \n     DESTIN_HEX5398       DESTIN_HEX5399        DESTIN_HEX540  \n           4.371448             3.981493             3.392694  \n     DESTIN_HEX5400       DESTIN_HEX5401       DESTIN_HEX5402  \n           4.627665             3.545623             3.363413  \n     DESTIN_HEX5403       DESTIN_HEX5422       DESTIN_HEX5423  \n           1.084486             1.532989             3.038634  \n     DESTIN_HEX5424       DESTIN_HEX5425       DESTIN_HEX5426  \n           4.380157             5.156722             4.022003  \n     DESTIN_HEX5428       DESTIN_HEX5429       DESTIN_HEX5430  \n           3.224136             3.172389             4.157640  \n     DESTIN_HEX5433       DESTIN_HEX5436       DESTIN_HEX5437  \n          -0.292961             2.666085             1.847373  \n     DESTIN_HEX5438       DESTIN_HEX5439       DESTIN_HEX5442  \n           3.001709             3.066573             2.902358  \n     DESTIN_HEX5443       DESTIN_HEX5445       DESTIN_HEX5446  \n           2.192600             3.243541             5.378654  \n     DESTIN_HEX5447       DESTIN_HEX5449       DESTIN_HEX5450  \n           3.397744             4.648090             1.936989  \n     DESTIN_HEX5469       DESTIN_HEX5470       DESTIN_HEX5471  \n           0.022950             3.777203             3.818032  \n     DESTIN_HEX5472       DESTIN_HEX5473       DESTIN_HEX5474  \n           3.793982             2.112994             3.783370  \n     DESTIN_HEX5475       DESTIN_HEX5476       DESTIN_HEX5482  \n           2.912908             2.621579             3.713105  \n     DESTIN_HEX5483       DESTIN_HEX5484       DESTIN_HEX5485  \n           1.790259             3.274210             3.038846  \n     DESTIN_HEX5488       DESTIN_HEX5489       DESTIN_HEX5490  \n           1.696808             1.534099             3.722560  \n     DESTIN_HEX5492       DESTIN_HEX5493       DESTIN_HEX5495  \n           3.682773             4.290370             4.038770  \n     DESTIN_HEX5496       DESTIN_HEX5497       DESTIN_HEX5520  \n           3.648105             0.694355             3.439858  \n     DESTIN_HEX5521       DESTIN_HEX5522       DESTIN_HEX5527  \n           3.076448             3.734009             2.114949  \n     DESTIN_HEX5529       DESTIN_HEX5530       DESTIN_HEX5531  \n           4.099934             3.124213             2.609532  \n     DESTIN_HEX5538       DESTIN_HEX5539       DESTIN_HEX5540  \n           5.759860             3.839370             3.613285  \n     DESTIN_HEX5541       DESTIN_HEX5542       DESTIN_HEX5543  \n           4.343106             5.029387             5.080387  \n     DESTIN_HEX5544       DESTIN_HEX5563       DESTIN_HEX5564  \n           1.730769            -0.237045             3.395719  \n     DESTIN_HEX5565       DESTIN_HEX5566       DESTIN_HEX5567  \n           3.790486             2.813668             2.638678  \n     DESTIN_HEX5568       DESTIN_HEX5569       DESTIN_HEX5570  \n           4.266399             1.730859             3.365169  \n     DESTIN_HEX5571       DESTIN_HEX5573       DESTIN_HEX5575  \n           2.486760             1.069787             3.782030  \n     DESTIN_HEX5577       DESTIN_HEX5578       DESTIN_HEX5579  \n           2.802618             2.592165             3.482309  \n     DESTIN_HEX5584       DESTIN_HEX5585       DESTIN_HEX5586  \n           3.983844             4.871490             3.895396  \n     DESTIN_HEX5587       DESTIN_HEX5588       DESTIN_HEX5589  \n           3.219396             3.622734             5.858233  \n     DESTIN_HEX5590       DESTIN_HEX5611       DESTIN_HEX5613  \n           1.377477             3.819072             2.756982  \n     DESTIN_HEX5614       DESTIN_HEX5615       DESTIN_HEX5617  \n           2.946618             3.325539             3.214104  \n     DESTIN_HEX5621       DESTIN_HEX5622       DESTIN_HEX5623  \n           3.409203             2.884866             3.385276  \n     DESTIN_HEX5624       DESTIN_HEX5625       DESTIN_HEX5626  \n           4.434896             4.013580             3.845242  \n     DESTIN_HEX5627       DESTIN_HEX5628       DESTIN_HEX5632  \n           3.726040             4.287980             4.676719  \n     DESTIN_HEX5633       DESTIN_HEX5634       DESTIN_HEX5635  \n           4.338418             6.161057             4.930915  \n     DESTIN_HEX5638       DESTIN_HEX5657       DESTIN_HEX5658  \n           4.035543             2.153936             3.016662  \n     DESTIN_HEX5660       DESTIN_HEX5663       DESTIN_HEX5664  \n           2.407783             3.951987             2.172470  \n     DESTIN_HEX5666       DESTIN_HEX5667       DESTIN_HEX5668  \n           0.592599             2.137045             2.092545  \n     DESTIN_HEX5669       DESTIN_HEX5670       DESTIN_HEX5671  \n           3.706927             2.611228             3.691294  \n     DESTIN_HEX5672       DESTIN_HEX5673       DESTIN_HEX5674  \n           5.100766             3.106708             3.763978  \n     DESTIN_HEX5675       DESTIN_HEX5678       DESTIN_HEX5679  \n           3.353470             2.912673             1.661247  \n     DESTIN_HEX5680       DESTIN_HEX5681       DESTIN_HEX5682  \n           3.718051             3.195623             3.795092  \n     DESTIN_HEX5685       DESTIN_HEX5705       DESTIN_HEX5706  \n           4.644107             2.491829             4.228879  \n     DESTIN_HEX5707       DESTIN_HEX5708       DESTIN_HEX5709  \n           3.431774             3.168990             3.927401  \n     DESTIN_HEX5711       DESTIN_HEX5713       DESTIN_HEX5714  \n           3.421377             2.821117             3.328035  \n     DESTIN_HEX5715       DESTIN_HEX5716       DESTIN_HEX5717  \n           3.004294             3.694331             3.470043  \n     DESTIN_HEX5718       DESTIN_HEX5719       DESTIN_HEX5720  \n           2.772507             3.916627             4.333165  \n     DESTIN_HEX5721       DESTIN_HEX5722       DESTIN_HEX5726  \n           3.936125             2.067777             5.029702  \n     DESTIN_HEX5727       DESTIN_HEX5728       DESTIN_HEX5751  \n           3.110611             2.883835             2.722494  \n     DESTIN_HEX5752       DESTIN_HEX5753       DESTIN_HEX5754  \n           3.223856             4.061843             3.424926  \n     DESTIN_HEX5755       DESTIN_HEX5757       DESTIN_HEX5758  \n           2.864734             3.502580             2.932514  \n     DESTIN_HEX5759       DESTIN_HEX5760       DESTIN_HEX5761  \n           3.304607             1.447239             2.608752  \n     DESTIN_HEX5762       DESTIN_HEX5763       DESTIN_HEX5764  \n           2.168456             3.123823             2.903045  \n     DESTIN_HEX5765       DESTIN_HEX5767       DESTIN_HEX5768  \n           3.326197             4.951577             3.078826  \n     DESTIN_HEX5772       DESTIN_HEX5773       DESTIN_HEX5774  \n           3.391122             2.916365             3.156414  \n     DESTIN_HEX5775       DESTIN_HEX5776       DESTIN_HEX5799  \n           5.277472             3.987092             3.504078  \n     DESTIN_HEX5800       DESTIN_HEX5801       DESTIN_HEX5802  \n           3.282190             2.342160             2.987553  \n     DESTIN_HEX5803       DESTIN_HEX5806       DESTIN_HEX5807  \n           3.038595             3.997340             4.335173  \n     DESTIN_HEX5808       DESTIN_HEX5811       DESTIN_HEX5812  \n           3.221126             2.921747             2.996718  \n     DESTIN_HEX5813       DESTIN_HEX5814       DESTIN_HEX5815  \n           4.276257             2.562420             4.087412  \n     DESTIN_HEX5816       DESTIN_HEX5820       DESTIN_HEX5821  \n           2.191815             5.072292             4.279570  \n     DESTIN_HEX5823        DESTIN_HEX583        DESTIN_HEX584  \n           3.738261             1.540535             3.218529  \n     DESTIN_HEX5846       DESTIN_HEX5847       DESTIN_HEX5848  \n           2.837619             4.107401             3.360938  \n     DESTIN_HEX5849        DESTIN_HEX585       DESTIN_HEX5851  \n           4.461579             3.106238             2.560510  \n     DESTIN_HEX5852       DESTIN_HEX5853       DESTIN_HEX5854  \n           3.386126             2.745198             4.193705  \n     DESTIN_HEX5855       DESTIN_HEX5856       DESTIN_HEX5858  \n           4.182036             1.899521             5.432996  \n     DESTIN_HEX5859        DESTIN_HEX586       DESTIN_HEX5860  \n           4.501398             4.392823             3.323494  \n     DESTIN_HEX5861       DESTIN_HEX5862       DESTIN_HEX5863  \n           3.312542             3.315738             2.366274  \n     DESTIN_HEX5867       DESTIN_HEX5868       DESTIN_HEX5869  \n           5.287660             5.163154             2.262415  \n      DESTIN_HEX587       DESTIN_HEX5893       DESTIN_HEX5894  \n           2.287568             2.795961             2.872491  \n     DESTIN_HEX5895       DESTIN_HEX5898       DESTIN_HEX5899  \n           3.842322             1.185498             2.447878  \n     DESTIN_HEX5901       DESTIN_HEX5902       DESTIN_HEX5903  \n           3.695782             3.922784             4.706021  \n     DESTIN_HEX5904       DESTIN_HEX5905       DESTIN_HEX5906  \n           3.424965             3.118850             3.989783  \n     DESTIN_HEX5907       DESTIN_HEX5908       DESTIN_HEX5909  \n           5.562808             3.020636             5.334362  \n     DESTIN_HEX5910       DESTIN_HEX5914       DESTIN_HEX5915  \n           1.757461             4.214271             4.284544  \n     DESTIN_HEX5916       DESTIN_HEX5940       DESTIN_HEX5941  \n           4.811016             2.996918             2.000096  \n     DESTIN_HEX5942       DESTIN_HEX5943       DESTIN_HEX5944  \n           2.731500             3.882329             4.284322  \n     DESTIN_HEX5945       DESTIN_HEX5946       DESTIN_HEX5947  \n           3.028685             2.410775             3.669853  \n     DESTIN_HEX5948       DESTIN_HEX5949       DESTIN_HEX5950  \n           5.447624             3.942750             4.114671  \n     DESTIN_HEX5951       DESTIN_HEX5954       DESTIN_HEX5955  \n           5.167774             4.672978             2.495076  \n     DESTIN_HEX5956       DESTIN_HEX5957       DESTIN_HEX5961  \n           1.768883             2.663354             4.152152  \n     DESTIN_HEX5962       DESTIN_HEX5963       DESTIN_HEX5987  \n           3.989320             1.712785            -1.412276  \n     DESTIN_HEX5988       DESTIN_HEX5989       DESTIN_HEX5990  \n           3.091919             2.022408             3.479868  \n     DESTIN_HEX5991       DESTIN_HEX5993       DESTIN_HEX5995  \n           3.539290             4.086350             3.132192  \n     DESTIN_HEX5996       DESTIN_HEX5997       DESTIN_HEX5998  \n           3.461867             3.391244             3.163911  \n     DESTIN_HEX5999       DESTIN_HEX6000       DESTIN_HEX6001  \n           3.521403             3.869137             5.060772  \n     DESTIN_HEX6002       DESTIN_HEX6009       DESTIN_HEX6010  \n           3.596317             3.276524             3.863115  \n     DESTIN_HEX6034       DESTIN_HEX6035       DESTIN_HEX6036  \n           2.166309             2.838256             2.973296  \n     DESTIN_HEX6037       DESTIN_HEX6038       DESTIN_HEX6039  \n           3.013316             3.951109             3.832221  \n     DESTIN_HEX6040       DESTIN_HEX6041       DESTIN_HEX6042  \n           3.172213             4.281318             3.765882  \n     DESTIN_HEX6043       DESTIN_HEX6044       DESTIN_HEX6045  \n           4.593982             3.500906             2.494644  \n     DESTIN_HEX6046       DESTIN_HEX6047       DESTIN_HEX6048  \n           1.683082             4.087004             4.565646  \n     DESTIN_HEX6051       DESTIN_HEX6056       DESTIN_HEX6082  \n           2.820708             4.055764             2.330997  \n     DESTIN_HEX6083       DESTIN_HEX6084       DESTIN_HEX6085  \n           2.428023             2.692379             4.085448  \n     DESTIN_HEX6086       DESTIN_HEX6088       DESTIN_HEX6089  \n           4.218188             4.404831             3.510937  \n     DESTIN_HEX6090       DESTIN_HEX6091       DESTIN_HEX6092  \n           4.584209             4.314071             5.054086  \n     DESTIN_HEX6093       DESTIN_HEX6094       DESTIN_HEX6095  \n           2.531629             5.122627             4.896176  \n     DESTIN_HEX6096       DESTIN_HEX6128       DESTIN_HEX6130  \n           4.816254             0.744247             2.190619  \n     DESTIN_HEX6131       DESTIN_HEX6132       DESTIN_HEX6133  \n           3.409432             3.555066             4.326136  \n     DESTIN_HEX6134       DESTIN_HEX6135       DESTIN_HEX6136  \n           3.229366             4.490723             4.865899  \n     DESTIN_HEX6137       DESTIN_HEX6140       DESTIN_HEX6141  \n           4.397471             3.171083             5.187910  \n     DESTIN_HEX6142       DESTIN_HEX6145       DESTIN_HEX6150  \n           4.508990             3.766156             2.550405  \n     DESTIN_HEX6174       DESTIN_HEX6175       DESTIN_HEX6176  \n           2.697556            -0.909153             2.898547  \n     DESTIN_HEX6177       DESTIN_HEX6178       DESTIN_HEX6179  \n           1.553518             3.453140             2.793137  \n     DESTIN_HEX6180       DESTIN_HEX6181       DESTIN_HEX6183  \n           2.223929             3.336830             4.201434  \n     DESTIN_HEX6184       DESTIN_HEX6185       DESTIN_HEX6186  \n           5.460446             3.211330             0.514967  \n     DESTIN_HEX6188       DESTIN_HEX6189       DESTIN_HEX6192  \n           2.945283             4.425916             2.237349  \n     DESTIN_HEX6195       DESTIN_HEX6222       DESTIN_HEX6223  \n          -0.059246            -2.060256             3.615378  \n     DESTIN_HEX6224       DESTIN_HEX6226       DESTIN_HEX6227  \n           2.558221             3.729503             3.530134  \n     DESTIN_HEX6228       DESTIN_HEX6229       DESTIN_HEX6230  \n           3.886513             3.717838             4.662308  \n     DESTIN_HEX6231       DESTIN_HEX6232       DESTIN_HEX6233  \n           4.919777             0.542472             3.012210  \n     DESTIN_HEX6234       DESTIN_HEX6235       DESTIN_HEX6237  \n           2.464058             3.327820             1.245534  \n     DESTIN_HEX6239       DESTIN_HEX6241       DESTIN_HEX6242  \n           3.207538             1.345306            -0.409595  \n     DESTIN_HEX6272       DESTIN_HEX6273       DESTIN_HEX6274  \n           2.502352             3.481679             3.899745  \n     DESTIN_HEX6275       DESTIN_HEX6276       DESTIN_HEX6278  \n           3.184952             5.012575             5.414231  \n     DESTIN_HEX6279       DESTIN_HEX6280       DESTIN_HEX6281  \n           2.294613             2.501641             3.099980  \n     DESTIN_HEX6283       DESTIN_HEX6284       DESTIN_HEX6286  \n           2.303566             2.755704             2.127995  \n     DESTIN_HEX6289       DESTIN_HEX6290        DESTIN_HEX630  \n           0.870030             1.485893             2.971071  \n     DESTIN_HEX6315       DESTIN_HEX6316        DESTIN_HEX632  \n           3.045581             0.735120             5.470972  \n     DESTIN_HEX6320       DESTIN_HEX6321       DESTIN_HEX6322  \n           3.547056             3.771247             4.681096  \n     DESTIN_HEX6323       DESTIN_HEX6324       DESTIN_HEX6326  \n           4.233062             1.936290             2.394633  \n     DESTIN_HEX6327       DESTIN_HEX6328        DESTIN_HEX633  \n           2.676746             3.449234             2.281978  \n     DESTIN_HEX6330       DESTIN_HEX6331       DESTIN_HEX6337  \n           3.050042             3.263806             0.752342  \n      DESTIN_HEX635       DESTIN_HEX6364       DESTIN_HEX6368  \n           5.132679             1.802608             2.494077  \n     DESTIN_HEX6369       DESTIN_HEX6370       DESTIN_HEX6371  \n           2.074903             4.195587             4.401902  \n     DESTIN_HEX6372       DESTIN_HEX6373       DESTIN_HEX6374  \n           4.420986             2.266870             2.844077  \n     DESTIN_HEX6375       DESTIN_HEX6376       DESTIN_HEX6377  \n           3.326354             4.640381             2.549630  \n     DESTIN_HEX6378       DESTIN_HEX6380       DESTIN_HEX6382  \n           3.219081             2.702846             0.981103  \n     DESTIN_HEX6385       DESTIN_HEX6413       DESTIN_HEX6415  \n           1.289847             4.249192             2.589603  \n     DESTIN_HEX6416       DESTIN_HEX6417       DESTIN_HEX6418  \n           1.979914             4.052719             4.909290  \n     DESTIN_HEX6420       DESTIN_HEX6421       DESTIN_HEX6422  \n           2.845769             3.418703             2.789567  \n     DESTIN_HEX6423       DESTIN_HEX6424       DESTIN_HEX6425  \n           0.570630             1.557036             2.965132  \n     DESTIN_HEX6427       DESTIN_HEX6429       DESTIN_HEX6458  \n           2.538698             1.037522             0.849737  \n     DESTIN_HEX6463       DESTIN_HEX6464       DESTIN_HEX6465  \n           4.351718             4.508156             3.874245  \n     DESTIN_HEX6466       DESTIN_HEX6467       DESTIN_HEX6468  \n           4.067760             2.748545             3.507894  \n     DESTIN_HEX6469       DESTIN_HEX6470       DESTIN_HEX6471  \n           4.181964             2.549344             4.811854  \n     DESTIN_HEX6472       DESTIN_HEX6474       DESTIN_HEX6475  \n           3.002076             4.780504             2.950544  \n     DESTIN_HEX6476       DESTIN_HEX6477       DESTIN_HEX6507  \n           4.320466             2.128696             4.395623  \n     DESTIN_HEX6509       DESTIN_HEX6510       DESTIN_HEX6511  \n           4.307596             2.118605             4.271903  \n     DESTIN_HEX6513       DESTIN_HEX6514       DESTIN_HEX6515  \n           4.741392             3.551122             5.463166  \n     DESTIN_HEX6516       DESTIN_HEX6517       DESTIN_HEX6518  \n           3.929950             3.844054             5.331585  \n     DESTIN_HEX6519       DESTIN_HEX6520       DESTIN_HEX6521  \n           2.651107             4.370696             4.447581  \n     DESTIN_HEX6522       DESTIN_HEX6523       DESTIN_HEX6524  \n           2.874517             1.052047             1.706155  \n     DESTIN_HEX6555       DESTIN_HEX6556       DESTIN_HEX6557  \n           4.460451             2.650678             3.278037  \n     DESTIN_HEX6558       DESTIN_HEX6559       DESTIN_HEX6561  \n           2.630158             3.146452             2.613584  \n     DESTIN_HEX6562       DESTIN_HEX6563       DESTIN_HEX6564  \n           4.482598             3.141982             3.554157  \n     DESTIN_HEX6565       DESTIN_HEX6566       DESTIN_HEX6568  \n           4.579219             3.285032             4.319691  \n     DESTIN_HEX6569       DESTIN_HEX6570       DESTIN_HEX6571  \n           3.791898             4.961816             0.987501  \n     DESTIN_HEX6601       DESTIN_HEX6603       DESTIN_HEX6605  \n           2.567104             4.111548             2.449455  \n     DESTIN_HEX6606       DESTIN_HEX6607       DESTIN_HEX6608  \n           3.388558             3.048087             3.014247  \n     DESTIN_HEX6609       DESTIN_HEX6610       DESTIN_HEX6611  \n           3.549871             2.179857             3.233196  \n     DESTIN_HEX6612       DESTIN_HEX6613       DESTIN_HEX6614  \n           4.557946             3.412644             1.581882  \n     DESTIN_HEX6615       DESTIN_HEX6616       DESTIN_HEX6649  \n           4.801198             4.877795             0.208886  \n     DESTIN_HEX6650       DESTIN_HEX6651       DESTIN_HEX6652  \n           3.456567             4.085431             1.389010  \n     DESTIN_HEX6653       DESTIN_HEX6654       DESTIN_HEX6655  \n           2.933487             4.954892             3.886382  \n     DESTIN_HEX6656       DESTIN_HEX6657       DESTIN_HEX6659  \n           2.469074             4.077895             3.915815  \n     DESTIN_HEX6660       DESTIN_HEX6661       DESTIN_HEX6663  \n           4.892278             3.690813             4.496568  \n     DESTIN_HEX6695       DESTIN_HEX6696       DESTIN_HEX6697  \n           1.682457             1.227489             4.501212  \n     DESTIN_HEX6698       DESTIN_HEX6699       DESTIN_HEX6700  \n           3.850539             1.919145             3.898456  \n     DESTIN_HEX6702       DESTIN_HEX6703       DESTIN_HEX6706  \n           3.124179             4.199270             4.164365  \n     DESTIN_HEX6707       DESTIN_HEX6708       DESTIN_HEX6709  \n           4.737276             5.140361             4.167301  \n     DESTIN_HEX6744       DESTIN_HEX6745       DESTIN_HEX6746  \n           2.933979             4.823423             3.820948  \n     DESTIN_HEX6747       DESTIN_HEX6749       DESTIN_HEX6750  \n           3.244469             3.060398             3.069361  \n     DESTIN_HEX6751       DESTIN_HEX6753       DESTIN_HEX6754  \n           3.068613             4.411683             4.860266  \n     DESTIN_HEX6755       DESTIN_HEX6757        DESTIN_HEX678  \n           4.774918             4.714177             1.116856  \n     DESTIN_HEX6789        DESTIN_HEX679       DESTIN_HEX6790  \n           3.350293             2.131223             4.114785  \n     DESTIN_HEX6791       DESTIN_HEX6792       DESTIN_HEX6793  \n           3.938149             2.900804             3.541162  \n     DESTIN_HEX6794       DESTIN_HEX6796       DESTIN_HEX6797  \n           3.263110             2.666353             4.288651  \n     DESTIN_HEX6798        DESTIN_HEX680       DESTIN_HEX6800  \n           2.869259            -0.047604             4.752760  \n     DESTIN_HEX6801       DESTIN_HEX6802        DESTIN_HEX681  \n           4.358814             4.718417             1.696395  \n      DESTIN_HEX682       DESTIN_HEX6837       DESTIN_HEX6838  \n           3.252382             3.544971             4.160045  \n     DESTIN_HEX6839       DESTIN_HEX6841       DESTIN_HEX6843  \n           4.367769             4.207336             2.796294  \n     DESTIN_HEX6846       DESTIN_HEX6847       DESTIN_HEX6848  \n           4.772724             3.863658             3.666921  \n     DESTIN_HEX6850       DESTIN_HEX6851       DESTIN_HEX6885  \n           4.328784             4.310878             3.736440  \n     DESTIN_HEX6886       DESTIN_HEX6887       DESTIN_HEX6888  \n           3.862276             3.666466             3.500949  \n     DESTIN_HEX6889       DESTIN_HEX6891       DESTIN_HEX6892  \n           3.127904             5.042587             3.450400  \n     DESTIN_HEX6893       DESTIN_HEX6894       DESTIN_HEX6895  \n           4.851118             4.363632             4.946476  \n     DESTIN_HEX6896       DESTIN_HEX6897       DESTIN_HEX6898  \n           1.829313             5.430966             2.593809  \n     DESTIN_HEX6931       DESTIN_HEX6932       DESTIN_HEX6933  \n           3.275579             4.530725             2.656719  \n     DESTIN_HEX6934       DESTIN_HEX6935       DESTIN_HEX6936  \n           1.894406             3.354669             4.200157  \n     DESTIN_HEX6938       DESTIN_HEX6939       DESTIN_HEX6940  \n           1.479022             4.487533             3.500669  \n     DESTIN_HEX6941       DESTIN_HEX6942       DESTIN_HEX6943  \n           3.648603             4.209821             3.668199  \n     DESTIN_HEX6944       DESTIN_HEX6945       DESTIN_HEX6946  \n           3.432091             3.686582             5.306487  \n     DESTIN_HEX6979       DESTIN_HEX6980       DESTIN_HEX6981  \n           3.177733             5.159727             3.413935  \n     DESTIN_HEX6982       DESTIN_HEX6984       DESTIN_HEX6985  \n           1.439172             1.712966             4.655276  \n     DESTIN_HEX6986       DESTIN_HEX6987       DESTIN_HEX6988  \n           3.808234             4.743712             5.402220  \n     DESTIN_HEX6989       DESTIN_HEX6990       DESTIN_HEX6991  \n           5.110252             3.199704             4.595012  \n     DESTIN_HEX6992       DESTIN_HEX7025       DESTIN_HEX7026  \n           5.188817             3.070830             3.538897  \n     DESTIN_HEX7027       DESTIN_HEX7029       DESTIN_HEX7030  \n           4.156221             3.812198             2.938219  \n     DESTIN_HEX7031       DESTIN_HEX7033       DESTIN_HEX7034  \n           1.558390             3.227114             4.155727  \n     DESTIN_HEX7035       DESTIN_HEX7036       DESTIN_HEX7037  \n           3.362618             3.872495             5.165650  \n     DESTIN_HEX7038       DESTIN_HEX7039       DESTIN_HEX7040  \n           4.190070             4.295476             5.744356  \n     DESTIN_HEX7072       DESTIN_HEX7073       DESTIN_HEX7074  \n           3.179494             3.473587             4.046274  \n     DESTIN_HEX7075       DESTIN_HEX7076       DESTIN_HEX7077  \n           2.169745             2.359161             2.637294  \n     DESTIN_HEX7081       DESTIN_HEX7082       DESTIN_HEX7083  \n           4.342963             2.917042             3.630027  \n     DESTIN_HEX7084       DESTIN_HEX7085       DESTIN_HEX7086  \n           4.562461             5.312009             4.755701  \n     DESTIN_HEX7087       DESTIN_HEX7119       DESTIN_HEX7120  \n           4.992759             3.556804             3.503517  \n     DESTIN_HEX7123       DESTIN_HEX7124       DESTIN_HEX7125  \n           1.718489             3.632890             2.894625  \n     DESTIN_HEX7128       DESTIN_HEX7129       DESTIN_HEX7130  \n           1.720396             3.938325             3.786226  \n     DESTIN_HEX7131       DESTIN_HEX7132       DESTIN_HEX7133  \n           4.353008             4.334132             3.045996  \n     DESTIN_HEX7134       DESTIN_HEX7135       DESTIN_HEX7166  \n           5.043491             4.887392             3.571828  \n     DESTIN_HEX7167       DESTIN_HEX7168       DESTIN_HEX7169  \n           3.917807             3.623274             1.803171  \n     DESTIN_HEX7170       DESTIN_HEX7172       DESTIN_HEX7173  \n           3.942481             2.395805             3.104703  \n     DESTIN_HEX7175       DESTIN_HEX7176       DESTIN_HEX7177  \n           3.659462             4.288562             4.326463  \n     DESTIN_HEX7178       DESTIN_HEX7179       DESTIN_HEX7181  \n           4.718874             4.429119             3.512504  \n     DESTIN_HEX7182       DESTIN_HEX7213       DESTIN_HEX7214  \n           2.777079             4.056257             3.559326  \n     DESTIN_HEX7215       DESTIN_HEX7217       DESTIN_HEX7218  \n           3.673376             4.720132             3.465954  \n     DESTIN_HEX7222       DESTIN_HEX7223       DESTIN_HEX7224  \n           1.703596             3.493678             4.908233  \n     DESTIN_HEX7225       DESTIN_HEX7226       DESTIN_HEX7227  \n           2.847793             4.370361             5.118873  \n     DESTIN_HEX7228       DESTIN_HEX7229        DESTIN_HEX723  \n           5.378461             3.001434             5.643181  \n     DESTIN_HEX7230        DESTIN_HEX725        DESTIN_HEX726  \n           4.266665             2.660921             2.278061  \n     DESTIN_HEX7260       DESTIN_HEX7261       DESTIN_HEX7262  \n           4.000188             3.477563             4.425708  \n     DESTIN_HEX7264       DESTIN_HEX7265        DESTIN_HEX727  \n           4.499389             3.152992             3.311477  \n     DESTIN_HEX7271       DESTIN_HEX7272       DESTIN_HEX7273  \n           4.677017             4.509064             4.611996  \n     DESTIN_HEX7274       DESTIN_HEX7275       DESTIN_HEX7277  \n           4.420724             4.396126             5.534651  \n      DESTIN_HEX728       DESTIN_HEX7307       DESTIN_HEX7308  \n           1.462661             5.039592             3.887137  \n     DESTIN_HEX7309        DESTIN_HEX731       DESTIN_HEX7310  \n           3.615217             1.290530             4.991248  \n     DESTIN_HEX7311       DESTIN_HEX7312       DESTIN_HEX7316  \n           4.297197             2.943226             0.709071  \n     DESTIN_HEX7319       DESTIN_HEX7320       DESTIN_HEX7321  \n           2.946397             3.767922             6.334334  \n     DESTIN_HEX7322       DESTIN_HEX7323       DESTIN_HEX7324  \n           3.947402             3.068809             2.200935  \n     DESTIN_HEX7354       DESTIN_HEX7355       DESTIN_HEX7356  \n           3.473453             3.930117             3.235233  \n     DESTIN_HEX7358       DESTIN_HEX7359       DESTIN_HEX7363  \n           4.097268             2.222180             2.131695  \n     DESTIN_HEX7366       DESTIN_HEX7367       DESTIN_HEX7368  \n           4.263979             4.374363             4.042753  \n     DESTIN_HEX7369       DESTIN_HEX7371       DESTIN_HEX7402  \n           2.899032             2.029499             3.345280  \n     DESTIN_HEX7403       DESTIN_HEX7404       DESTIN_HEX7406  \n           3.317015             2.723656             4.876100  \n     DESTIN_HEX7411       DESTIN_HEX7414       DESTIN_HEX7415  \n           2.287844             5.238970             3.828234  \n     DESTIN_HEX7416       DESTIN_HEX7418       DESTIN_HEX7448  \n           4.196048            -0.249919             4.320075  \n     DESTIN_HEX7449       DESTIN_HEX7450       DESTIN_HEX7451  \n           4.018957             4.295648             3.414997  \n     DESTIN_HEX7452       DESTIN_HEX7453       DESTIN_HEX7458  \n           5.265288             1.988716             1.929544  \n     DESTIN_HEX7461       DESTIN_HEX7462       DESTIN_HEX7463  \n           4.059574             4.797977             5.513973  \n     DESTIN_HEX7465       DESTIN_HEX7496       DESTIN_HEX7498  \n           4.270713             3.824271             4.324409  \n     DESTIN_HEX7499       DESTIN_HEX7500       DESTIN_HEX7501  \n           5.275641             4.258167             2.034017  \n     DESTIN_HEX7506       DESTIN_HEX7509       DESTIN_HEX7510  \n           0.685718             5.168585             3.972661  \n     DESTIN_HEX7542       DESTIN_HEX7543       DESTIN_HEX7544  \n           4.646184             2.886156             2.507924  \n     DESTIN_HEX7545       DESTIN_HEX7546       DESTIN_HEX7547  \n           2.894553             4.920285             4.051167  \n     DESTIN_HEX7553       DESTIN_HEX7555       DESTIN_HEX7556  \n          -0.194925             3.797735             3.803344  \n     DESTIN_HEX7590       DESTIN_HEX7591       DESTIN_HEX7592  \n           2.936958             0.161755             3.198596  \n     DESTIN_HEX7594       DESTIN_HEX7595       DESTIN_HEX7603  \n           4.489857             0.879255             3.002148  \n     DESTIN_HEX7604       DESTIN_HEX7637       DESTIN_HEX7638  \n           5.314773             2.519203             1.639462  \n     DESTIN_HEX7639       DESTIN_HEX7641       DESTIN_HEX7647  \n           4.251150             3.584329             0.979978  \n     DESTIN_HEX7650       DESTIN_HEX7684       DESTIN_HEX7685  \n           5.263694             3.297677             2.725447  \n     DESTIN_HEX7686       DESTIN_HEX7687       DESTIN_HEX7694  \n           4.136191             4.459324             3.126119  \n      DESTIN_HEX770        DESTIN_HEX771        DESTIN_HEX773  \n           4.262195            -0.550527             2.346175  \n     DESTIN_HEX7731       DESTIN_HEX7732       DESTIN_HEX7733  \n           3.475218             3.539671             4.577166  \n     DESTIN_HEX7734       DESTIN_HEX7735       DESTIN_HEX7740  \n           5.571465             4.680107             0.960854  \n      DESTIN_HEX775        DESTIN_HEX777       DESTIN_HEX7778  \n           3.005493             0.926771             3.771064  \n     DESTIN_HEX7779        DESTIN_HEX778       DESTIN_HEX7780  \n           2.801780             1.805080             4.158760  \n     DESTIN_HEX7781       DESTIN_HEX7787        DESTIN_HEX779  \n           5.079275             1.896746             2.425890  \n     DESTIN_HEX7825       DESTIN_HEX7826       DESTIN_HEX7828  \n           3.430439             4.254651             5.331552  \n     DESTIN_HEX7829       DESTIN_HEX7831       DESTIN_HEX7833  \n           4.028028             3.329300             1.674015  \n     DESTIN_HEX7834       DESTIN_HEX7872       DESTIN_HEX7873  \n           1.881086             3.782676             2.928203  \n     DESTIN_HEX7874       DESTIN_HEX7875       DESTIN_HEX7876  \n           4.570602             3.751502             4.513224  \n     DESTIN_HEX7878       DESTIN_HEX7879       DESTIN_HEX7881  \n           5.026533             2.514670             2.459191  \n     DESTIN_HEX7919       DESTIN_HEX7920       DESTIN_HEX7921  \n           3.159697             2.030988             5.855011  \n     DESTIN_HEX7922       DESTIN_HEX7923       DESTIN_HEX7925  \n           4.750972             3.858075             4.504450  \n     DESTIN_HEX7926       DESTIN_HEX7927       DESTIN_HEX7928  \n           3.247137             3.977551             4.064549  \n     DESTIN_HEX7967       DESTIN_HEX7968       DESTIN_HEX7969  \n           2.726575             1.737312             3.701111  \n     DESTIN_HEX7970       DESTIN_HEX7972       DESTIN_HEX7973  \n           4.806094             4.765098             5.279707  \n     DESTIN_HEX7974       DESTIN_HEX7976       DESTIN_HEX8013  \n           3.919916             4.709924             4.043408  \n     DESTIN_HEX8014       DESTIN_HEX8015       DESTIN_HEX8016  \n           3.923450             4.465267             4.780293  \n     DESTIN_HEX8017       DESTIN_HEX8018       DESTIN_HEX8019  \n           4.202639             3.645675             4.862858  \n     DESTIN_HEX8020       DESTIN_HEX8021       DESTIN_HEX8023  \n           4.643608             3.435187             5.529111  \n     DESTIN_HEX8061       DESTIN_HEX8062       DESTIN_HEX8063  \n           3.359563             3.617550             3.925736  \n     DESTIN_HEX8065       DESTIN_HEX8066       DESTIN_HEX8067  \n           1.492068             3.577083             4.305582  \n     DESTIN_HEX8068       DESTIN_HEX8070       DESTIN_HEX8071  \n           5.049595             4.137568             3.277774  \n     DESTIN_HEX8108       DESTIN_HEX8109       DESTIN_HEX8110  \n           3.028855             4.568088             5.251864  \n     DESTIN_HEX8112       DESTIN_HEX8113       DESTIN_HEX8114  \n           4.666181             3.866658             4.269615  \n     DESTIN_HEX8115       DESTIN_HEX8116       DESTIN_HEX8117  \n           4.524722             3.499233             4.165884  \n     DESTIN_HEX8155       DESTIN_HEX8156       DESTIN_HEX8157  \n           3.956453             3.877814             4.878435  \n     DESTIN_HEX8158       DESTIN_HEX8160       DESTIN_HEX8161  \n           3.806453             4.278471             3.748676  \n     DESTIN_HEX8162       DESTIN_HEX8163       DESTIN_HEX8164  \n           4.533055             4.089768             4.142505  \n     DESTIN_HEX8165        DESTIN_HEX818        DESTIN_HEX819  \n           3.983319             3.172195             2.871507  \n      DESTIN_HEX820       DESTIN_HEX8203       DESTIN_HEX8207  \n           2.388386             4.548906             4.526246  \n     DESTIN_HEX8208       DESTIN_HEX8209       DESTIN_HEX8210  \n           2.689552             4.853052             4.523534  \n     DESTIN_HEX8211        DESTIN_HEX823        DESTIN_HEX824  \n           5.104189             2.673253             3.492647  \n     DESTIN_HEX8249        DESTIN_HEX825       DESTIN_HEX8250  \n           2.645354             0.836546             4.832411  \n     DESTIN_HEX8252       DESTIN_HEX8254       DESTIN_HEX8255  \n           2.394940             3.993045             5.946852  \n     DESTIN_HEX8256       DESTIN_HEX8258       DESTIN_HEX8259  \n           3.866743             3.522489             2.132961  \n      DESTIN_HEX826        DESTIN_HEX827        DESTIN_HEX828  \n           0.812886             5.279107             3.145135  \n     DESTIN_HEX8296       DESTIN_HEX8297       DESTIN_HEX8298  \n           3.935007             5.245973             3.901539  \n     DESTIN_HEX8299       DESTIN_HEX8300       DESTIN_HEX8301  \n           1.975025             2.959926             4.423813  \n     DESTIN_HEX8302       DESTIN_HEX8304       DESTIN_HEX8305  \n           3.525896             4.084234             2.466527  \n     DESTIN_HEX8344       DESTIN_HEX8345       DESTIN_HEX8346  \n           2.869580             4.489238             2.128779  \n     DESTIN_HEX8347       DESTIN_HEX8348       DESTIN_HEX8349  \n           4.371697             4.246721             3.226941  \n     DESTIN_HEX8351       DESTIN_HEX8352       DESTIN_HEX8353  \n           3.752957             2.939601             2.524785  \n     DESTIN_HEX8389       DESTIN_HEX8390       DESTIN_HEX8391  \n           3.368545             2.177593             2.062215  \n     DESTIN_HEX8392       DESTIN_HEX8393       DESTIN_HEX8394  \n           2.335908             3.148335             3.441021  \n     DESTIN_HEX8395       DESTIN_HEX8396       DESTIN_HEX8398  \n           3.077094             4.224444             5.607132  \n     DESTIN_HEX8439       DESTIN_HEX8440       DESTIN_HEX8441  \n           2.936098             3.375563             5.076888  \n     DESTIN_HEX8442       DESTIN_HEX8443       DESTIN_HEX8444  \n           4.187927             4.577425             4.914531  \n     DESTIN_HEX8445       DESTIN_HEX8484       DESTIN_HEX8485  \n           4.022784             2.676235             2.639026  \n     DESTIN_HEX8486       DESTIN_HEX8488       DESTIN_HEX8489  \n           2.420409             3.310384             4.981806  \n     DESTIN_HEX8490       DESTIN_HEX8532       DESTIN_HEX8534  \n           3.516090             4.103957             1.974126  \n     DESTIN_HEX8535       DESTIN_HEX8536       DESTIN_HEX8537  \n           3.893380             3.450181             4.823229  \n     DESTIN_HEX8538       DESTIN_HEX8539       DESTIN_HEX8540  \n           5.192026             4.845422             4.616494  \n     DESTIN_HEX8580       DESTIN_HEX8581       DESTIN_HEX8582  \n           3.014003             1.006853             4.883081  \n     DESTIN_HEX8583       DESTIN_HEX8584       DESTIN_HEX8585  \n           4.161150             4.682032             4.044679  \n     DESTIN_HEX8586       DESTIN_HEX8587       DESTIN_HEX8628  \n           4.429718             5.031460             2.057552  \n     DESTIN_HEX8629       DESTIN_HEX8631       DESTIN_HEX8633  \n           4.165277             5.030084             4.645113  \n     DESTIN_HEX8634        DESTIN_HEX866        DESTIN_HEX867  \n           4.386412             1.212021             2.738903  \n     DESTIN_HEX8674       DESTIN_HEX8675       DESTIN_HEX8676  \n           2.630184             1.909263             3.548578  \n     DESTIN_HEX8677       DESTIN_HEX8679       DESTIN_HEX8680  \n           4.837473             4.241349             5.280697  \n     DESTIN_HEX8681        DESTIN_HEX870        DESTIN_HEX872  \n           5.319091             2.956168             5.000253  \n     DESTIN_HEX8721       DESTIN_HEX8722       DESTIN_HEX8723  \n          -0.899206             4.613156             1.482555  \n     DESTIN_HEX8724       DESTIN_HEX8725       DESTIN_HEX8726  \n           4.009962             5.498311             4.055204  \n     DESTIN_HEX8727       DESTIN_HEX8728        DESTIN_HEX873  \n           4.119307             3.518273            -0.310447  \n      DESTIN_HEX874       DESTIN_HEX8768       DESTIN_HEX8769  \n           1.256921             0.305644             1.708929  \n     DESTIN_HEX8771       DESTIN_HEX8772       DESTIN_HEX8773  \n           3.421797             5.182754             4.466746  \n     DESTIN_HEX8774       DESTIN_HEX8775       DESTIN_HEX8815  \n           2.993404             2.705393             2.758938  \n     DESTIN_HEX8816       DESTIN_HEX8817       DESTIN_HEX8818  \n           2.633945             1.418880             2.727873  \n     DESTIN_HEX8819       DESTIN_HEX8820       DESTIN_HEX8862  \n           3.731896             2.680923             1.556724  \n     DESTIN_HEX8864       DESTIN_HEX8865       DESTIN_HEX8866  \n           3.447902             2.789398             4.300739  \n     DESTIN_HEX8867       DESTIN_HEX8868       DESTIN_HEX8910  \n           2.231333             2.856633             2.367386  \n     DESTIN_HEX8912       DESTIN_HEX8914       DESTIN_HEX8915  \n           2.165090             2.930028             3.005237  \n     DESTIN_HEX8916       DESTIN_HEX8917       DESTIN_HEX8959  \n           1.994902             2.000103             2.670687  \n     DESTIN_HEX8961       DESTIN_HEX8962       DESTIN_HEX8963  \n           1.090554             4.434702             0.860711  \n     DESTIN_HEX8964       DESTIN_HEX9007       DESTIN_HEX9008  \n           2.110800             3.130017             3.296397  \n     DESTIN_HEX9010       DESTIN_HEX9011       DESTIN_HEX9055  \n           2.183768             1.266038             2.239909  \n     DESTIN_HEX9056       DESTIN_HEX9057       DESTIN_HEX9103  \n           1.147209             1.958921             4.112103  \n     DESTIN_HEX9105       DESTIN_HEX9106        DESTIN_HEX914  \n           0.237506             1.935979             2.482588  \n     DESTIN_HEX9145       DESTIN_HEX9150       DESTIN_HEX9152  \n           3.036572             1.537170             2.510228  \n     DESTIN_HEX9153        DESTIN_HEX917        DESTIN_HEX919  \n           1.995798             1.386993             2.611186  \n     DESTIN_HEX9193        DESTIN_HEX920       DESTIN_HEX9200  \n           4.409097             2.475983             2.251822  \n     DESTIN_HEX9240       DESTIN_HEX9246       DESTIN_HEX9247  \n           2.876733             3.454556             1.498770  \n     DESTIN_HEX9283       DESTIN_HEX9289       DESTIN_HEX9294  \n           5.995056             5.246427             4.282646  \n     DESTIN_HEX9340       DESTIN_HEX9383       DESTIN_HEX9384  \n           3.314723             3.773648             5.357045  \n     DESTIN_HEX9388       DESTIN_HEX9432       DESTIN_HEX9471  \n           3.547093             3.073919             5.317497  \n     DESTIN_HEX9480       DESTIN_HEX9482       DESTIN_HEX9526  \n           2.930234             1.407781             2.661234  \n     DESTIN_HEX9527       DESTIN_HEX9575       DESTIN_HEX9576  \n           2.573861             3.287680             1.593254  \n     DESTIN_HEX9621       DESTIN_HEX9622        DESTIN_HEX965  \n           2.204027             4.332383             2.271311  \n      DESTIN_HEX966       DESTIN_HEX9668       DESTIN_HEX9714  \n           1.185902             3.104254             3.150867  \n     DESTIN_HEX9988  log(bus_stop_count)  log(business_count)  \n           3.501863             0.366795             0.002257  \n  log(school_count)   log(finserv_count)            log(dist)  \n          -0.273443             0.493462            -1.081710  \n\nDegrees of Freedom: 161670 Total (i.e. Null);  159856 Residual\nNull Deviance:      96290000 \nResidual Deviance: 45520000     AIC: 46310000\n\n\n\nCalcRSquared(decSIM$data$WEEKDAY_AFTERNOON_PEAK, decSIM$fitted.values)\n\n[1] 0.1856562\n\n\n\nr2_mcfadden(decSIM)\n\n# R2 for Generalized Linear Regression\n       R2: 0.523\n  adj. R2: 0.523\n\n\n\n\n11.8Doubly Constrained Spatial Interaction Model\n\ndbcSIM &lt;- glm(formula = WEEKDAY_AFTERNOON_PEAK ~ \n                ORIGIN_HEX + \n                DESTIN_HEX + \n                log(dist),\n              family = poisson(link = \"log\"),\n              data = SIM_data,\n              na.action = na.exclude)\nwrite_rds(dbcSIM, \"data/rds/dbcSIM.rds\")\n\n\ndbcSIM &lt;- read_rds(\"data/rds/dbcSIM.rds\")\ndbcSIM\n\n\nCall:  glm(formula = WEEKDAY_AFTERNOON_PEAK ~ ORIGIN_HEX + DESTIN_HEX + \n    log(dist), family = poisson(link = \"log\"), data = SIM_data, \n    na.action = na.exclude)\n\nCoefficients:\n   (Intercept)  ORIGIN_HEX1012  ORIGIN_HEX1013  ORIGIN_HEX1014  ORIGIN_HEX1058  \n     8.7209518      -0.8816039       0.3264009       0.5528511      -4.2027183  \nORIGIN_HEX1059  ORIGIN_HEX1060  ORIGIN_HEX1061  ORIGIN_HEX1104  ORIGIN_HEX1106  \n    -0.8834993      -0.8184197      -0.2517575       1.3068727       1.7232583  \nORIGIN_HEX1107  ORIGIN_HEX1108  ORIGIN_HEX1152  ORIGIN_HEX1153  ORIGIN_HEX1154  \n     1.2963036       0.3314767      -0.8945535      -0.3790338       1.2225328  \nORIGIN_HEX1199  ORIGIN_HEX1200  ORIGIN_HEX1201  ORIGIN_HEX1202  ORIGIN_HEX1244  \n     0.3866662       0.0170405       0.7711185      -0.2608678       1.8840289  \nORIGIN_HEX1245  ORIGIN_HEX1246  ORIGIN_HEX1247  ORIGIN_HEX1291  ORIGIN_HEX1292  \n     0.8351036      -0.9986651      -0.4453742       3.1736232       2.0354568  \nORIGIN_HEX1293  ORIGIN_HEX1295  ORIGIN_HEX1338  ORIGIN_HEX1339  ORIGIN_HEX1340  \n     1.2543444       0.2428771       0.8689960       0.1273712       0.6762757  \nORIGIN_HEX1341  ORIGIN_HEX1385  ORIGIN_HEX1386  ORIGIN_HEX1387  ORIGIN_HEX1388  \n     0.7287095      -0.4290908      -0.8039356       1.1763782      -2.0404032  \nORIGIN_HEX1433  ORIGIN_HEX1434  ORIGIN_HEX1479  ORIGIN_HEX1480  ORIGIN_HEX1481  \n     2.0143888      -1.1991310      -0.8311869       2.7097656       0.9206473  \nORIGIN_HEX1525  ORIGIN_HEX1526  ORIGIN_HEX1527  ORIGIN_HEX1528  ORIGIN_HEX1529  \n     2.3123863      -1.6994128       1.5654513       0.7268888       1.1298185  \nORIGIN_HEX1573  ORIGIN_HEX1574  ORIGIN_HEX1575  ORIGIN_HEX1619  ORIGIN_HEX1621  \n     0.7993031      -0.7847872       1.4151693       1.7549700       1.8292167  \nORIGIN_HEX1622  ORIGIN_HEX1623  ORIGIN_HEX1666  ORIGIN_HEX1668  ORIGIN_HEX1669  \n     0.3499279       1.6995988       1.7824566       1.2305950       1.0853798  \nORIGIN_HEX1670  ORIGIN_HEX1671  ORIGIN_HEX1715  ORIGIN_HEX1717  ORIGIN_HEX1718  \n     0.9224901      -2.1351114       1.5177545      -0.9589130       1.4066727  \nORIGIN_HEX1761  ORIGIN_HEX1762  ORIGIN_HEX1763  ORIGIN_HEX1764  ORIGIN_HEX1765  \n     1.2548218       2.3727262       1.5678580      -3.6796509      -3.2678852  \nORIGIN_HEX1768  ORIGIN_HEX1808  ORIGIN_HEX1809  ORIGIN_HEX1810  ORIGIN_HEX1811  \n    -0.8536974       1.3012034       0.3168670       1.7610793      -1.0515278  \nORIGIN_HEX1812  ORIGIN_HEX1814  ORIGIN_HEX1815  ORIGIN_HEX1855  ORIGIN_HEX1856  \n    -2.1731163       1.3461223      -0.9429442       1.5090292      -0.6870438  \nORIGIN_HEX1857  ORIGIN_HEX1858  ORIGIN_HEX1859  ORIGIN_HEX1861  ORIGIN_HEX1862  \n     1.5554958       1.5752233       2.2672564       1.7770815       2.7393801  \nORIGIN_HEX1903  ORIGIN_HEX1904  ORIGIN_HEX1905  ORIGIN_HEX1906  ORIGIN_HEX1907  \n    -0.8666852       0.5686612      -1.7696492      -1.1169968      -0.1870391  \nORIGIN_HEX1909  ORIGIN_HEX1950  ORIGIN_HEX1952  ORIGIN_HEX1953  ORIGIN_HEX1955  \n     0.2393178      -2.0166730       0.8261774      -0.7521944       1.6902852  \nORIGIN_HEX1956  ORIGIN_HEX1957  ORIGIN_HEX1996  ORIGIN_HEX1997  ORIGIN_HEX1998  \n     0.2549116      -0.2832654       1.0440956       0.6111979       1.5839139  \nORIGIN_HEX1999  ORIGIN_HEX2000  ORIGIN_HEX2003  ORIGIN_HEX2046  ORIGIN_HEX2047  \n     0.2076824      -0.6934657      -0.2563373      -0.6966721       0.9169338  \nORIGIN_HEX2049  ORIGIN_HEX2050  ORIGIN_HEX2051  ORIGIN_HEX2090  ORIGIN_HEX2092  \n     0.7094799      -0.2517045       1.4592222       0.1226080       1.8144774  \nORIGIN_HEX2093  ORIGIN_HEX2094  ORIGIN_HEX2095  ORIGIN_HEX2096  ORIGIN_HEX2139  \n     0.0372445      -0.4725215      -0.2123296      -1.3966118      -2.3919066  \nORIGIN_HEX2140  ORIGIN_HEX2141  ORIGIN_HEX2142  ORIGIN_HEX2143  ORIGIN_HEX2145  \n     1.0444239      -0.2526084      -0.0832155       0.6220164       1.3049622  \nORIGIN_HEX2146  ORIGIN_HEX2184  ORIGIN_HEX2187  ORIGIN_HEX2189  ORIGIN_HEX2190  \n    -1.7568878       0.5988182      -0.7166690      -1.7363302      -0.2273390  \nORIGIN_HEX2192  ORIGIN_HEX2193  ORIGIN_HEX2194  ORIGIN_HEX2232  ORIGIN_HEX2233  \n    -1.5841831       1.0147982      -0.2035817       1.1035831       2.5207924  \nORIGIN_HEX2234  ORIGIN_HEX2235  ORIGIN_HEX2236  ORIGIN_HEX2237  ORIGIN_HEX2238  \n     1.3341444       0.5223731      -0.4189055       0.1195772       0.4505333  \nORIGIN_HEX2239  ORIGIN_HEX2241  ORIGIN_HEX2242  ORIGIN_HEX2278  ORIGIN_HEX2279  \n     0.3477525      -1.9837702      -0.4601046       0.6558735       1.6491755  \nORIGIN_HEX2280  ORIGIN_HEX2281  ORIGIN_HEX2282  ORIGIN_HEX2283  ORIGIN_HEX2284  \n     1.9534411       0.7201561       0.5121989       1.5435672      -0.3015997  \nORIGIN_HEX2288  ORIGIN_HEX2289  ORIGIN_HEX2290  ORIGIN_HEX2326  ORIGIN_HEX2327  \n     0.3484395      -1.9297210      -3.6112072      -0.0893153       1.9577353  \nORIGIN_HEX2328  ORIGIN_HEX2329  ORIGIN_HEX2330  ORIGIN_HEX2331  ORIGIN_HEX2332  \n    -1.2331475       0.5444172      -0.2233437       0.3653188       0.4255270  \nORIGIN_HEX2337  ORIGIN_HEX2340  ORIGIN_HEX2341  ORIGIN_HEX2342  ORIGIN_HEX2372  \n    -1.2782380      -0.9907065      -2.6433477      -1.1216913       0.9814529  \nORIGIN_HEX2376  ORIGIN_HEX2377  ORIGIN_HEX2378  ORIGIN_HEX2379  ORIGIN_HEX2382  \n    -2.4525076      -0.0109155      -0.1469967       0.5088682      -3.4260833  \nORIGIN_HEX2386  ORIGIN_HEX2387  ORIGIN_HEX2389  ORIGIN_HEX2421  ORIGIN_HEX2422  \n    -1.1410522      -4.8345490       0.1675346       1.3454745       1.6912665  \nORIGIN_HEX2423  ORIGIN_HEX2424  ORIGIN_HEX2425  ORIGIN_HEX2426  ORIGIN_HEX2436  \n     0.5081695      -2.5287283      -0.7703610      -0.2444896       1.3520239  \nORIGIN_HEX2437  ORIGIN_HEX2466  ORIGIN_HEX2470  ORIGIN_HEX2471  ORIGIN_HEX2472  \n    -1.7656911       0.2967384       0.2476739       3.4823617       0.1996774  \nORIGIN_HEX2473  ORIGIN_HEX2476  ORIGIN_HEX2484  ORIGIN_HEX2515  ORIGIN_HEX2516  \n     1.0290881      -3.5923183      -0.8634462       0.5394410       0.3384981  \nORIGIN_HEX2518  ORIGIN_HEX2519  ORIGIN_HEX2520  ORIGIN_HEX2532  ORIGIN_HEX2533  \n    -2.0661108      -0.6500691      -0.8567963      -2.6514585      -0.5907515  \nORIGIN_HEX2534  ORIGIN_HEX2562  ORIGIN_HEX2563  ORIGIN_HEX2564  ORIGIN_HEX2565  \n     0.1715767       0.4660586       1.0249855       1.1624594      -2.1579728  \nORIGIN_HEX2566  ORIGIN_HEX2567  ORIGIN_HEX2570  ORIGIN_HEX2579  ORIGIN_HEX2609  \n    -0.6670936      -0.5841393      -4.4460599      -3.8475879       0.2679958  \nORIGIN_HEX2611  ORIGIN_HEX2612  ORIGIN_HEX2613  ORIGIN_HEX2614  ORIGIN_HEX2655  \n     0.4089780       0.3413385      -0.5755350       0.9325439      -0.1399051  \nORIGIN_HEX2657  ORIGIN_HEX2658  ORIGIN_HEX2660  ORIGIN_HEX2661  ORIGIN_HEX2664  \n    -0.4819804       1.1086072       0.7749561      -0.7999729      -0.3145292  \nORIGIN_HEX2703  ORIGIN_HEX2705  ORIGIN_HEX2706  ORIGIN_HEX2707  ORIGIN_HEX2708  \n    -2.2780829      -0.4296331       0.5679058      -0.2947252      -0.6028177  \nORIGIN_HEX2712  ORIGIN_HEX2752  ORIGIN_HEX2753  ORIGIN_HEX2754  ORIGIN_HEX2755  \n    -0.4181695       0.0203860       0.0638822      -0.8243076       0.2394822  \nORIGIN_HEX2758  ORIGIN_HEX2797  ORIGIN_HEX2798  ORIGIN_HEX2799  ORIGIN_HEX2800  \n     0.2540154       1.1142654      -0.9927076      -0.3765509      -0.6046303  \nORIGIN_HEX2802  ORIGIN_HEX2806  ORIGIN_HEX2843  ORIGIN_HEX2844  ORIGIN_HEX2845  \n     0.9293346       1.0851819       1.5257652       0.1052974       0.9540372  \nORIGIN_HEX2846  ORIGIN_HEX2847  ORIGIN_HEX2848  ORIGIN_HEX2849  ORIGIN_HEX2891  \n    -0.3274482       0.3154330       2.7527591      -0.2272054       1.1842863  \nORIGIN_HEX2893  ORIGIN_HEX2894  ORIGIN_HEX2895  ORIGIN_HEX2896  ORIGIN_HEX2897  \n     0.5810225       0.8485734      -0.8489711      -0.9345695      -0.5784588  \nORIGIN_HEX2900  ORIGIN_HEX2937  ORIGIN_HEX2939  ORIGIN_HEX2940  ORIGIN_HEX2941  \n     0.3397455       0.7216735       0.5879175       0.4106737      -0.5842351  \nORIGIN_HEX2942  ORIGIN_HEX2943  ORIGIN_HEX2987  ORIGIN_HEX2988  ORIGIN_HEX2990  \n    -0.9741574       1.0208945      -0.7575184      -0.4785841       0.0113910  \nORIGIN_HEX2994  ORIGIN_HEX3031  ORIGIN_HEX3033  ORIGIN_HEX3036  ORIGIN_HEX3084  \n    -2.4137782       1.0174921      -0.1211878      -0.8470012       0.4815712  \nORIGIN_HEX3125  ORIGIN_HEX3129  ORIGIN_HEX3130  ORIGIN_HEX3135  ORIGIN_HEX3172  \n    -0.3085989      -2.4442679       0.6247321      -1.4995622       1.7409262  \nORIGIN_HEX3173  ORIGIN_HEX3176  ORIGIN_HEX3177  ORIGIN_HEX3182  ORIGIN_HEX3218  \n     1.3913663      -2.6659083       0.8802114      -1.2447531       0.8356201  \nORIGIN_HEX3220  ORIGIN_HEX3221  ORIGIN_HEX3223  ORIGIN_HEX3224  ORIGIN_HEX3225  \n     0.6537292      -4.1854492      -0.6891787       0.6795017      -1.3306286  \nORIGIN_HEX3229  ORIGIN_HEX3238  ORIGIN_HEX3266  ORIGIN_HEX3268  ORIGIN_HEX3269  \n     0.1414268      -0.7972355       0.9544145       1.3730309      -1.3615251  \nORIGIN_HEX3270  ORIGIN_HEX3271  ORIGIN_HEX3272  ORIGIN_HEX3273  ORIGIN_HEX3276  \n     0.7478919       0.2939316      -1.1594053       0.6653300      -0.0961609  \nORIGIN_HEX3277  ORIGIN_HEX3312  ORIGIN_HEX3314  ORIGIN_HEX3316  ORIGIN_HEX3317  \n    -0.4367587       0.7183238      -2.6794722       0.3785430      -0.4384030  \nORIGIN_HEX3318  ORIGIN_HEX3319  ORIGIN_HEX3320  ORIGIN_HEX3322  ORIGIN_HEX3323  \n    -0.6956684      -0.1440839       0.4724008      -1.9131871       0.0218642  \nORIGIN_HEX3325  ORIGIN_HEX3362  ORIGIN_HEX3363  ORIGIN_HEX3364  ORIGIN_HEX3365  \n    -1.8649591       0.0058607      -1.3408512       2.3562344       0.4286837  \nORIGIN_HEX3366  ORIGIN_HEX3367  ORIGIN_HEX3368  ORIGIN_HEX3370  ORIGIN_HEX3371  \n     0.4693077       0.0129693      -0.2238115      -0.1973189      -0.4306852  \nORIGIN_HEX3372  ORIGIN_HEX3406  ORIGIN_HEX3408  ORIGIN_HEX3409  ORIGIN_HEX3410  \n    -1.6938269      -0.7176414      -0.8730909       0.5361971       0.1814415  \nORIGIN_HEX3411  ORIGIN_HEX3412  ORIGIN_HEX3413  ORIGIN_HEX3414  ORIGIN_HEX3415  \n    -0.2071179      -0.0993232       0.0677710      -0.5684382      -0.6706409  \nORIGIN_HEX3416  ORIGIN_HEX3417  ORIGIN_HEX3418  ORIGIN_HEX3419  ORIGIN_HEX3426  \n    -0.8160657      -0.0630633       2.7766541       0.6761946      -0.0969424  \nORIGIN_HEX3453  ORIGIN_HEX3456  ORIGIN_HEX3457  ORIGIN_HEX3458  ORIGIN_HEX3459  \n    -0.0365791       0.5363015      -0.9684986       0.9718577      -0.2965659  \nORIGIN_HEX3460  ORIGIN_HEX3461  ORIGIN_HEX3462  ORIGIN_HEX3463  ORIGIN_HEX3464  \n     0.4579203      -2.4683010      -0.1638913      -1.9579557       0.2406248  \nORIGIN_HEX3465  ORIGIN_HEX3466  ORIGIN_HEX3467  ORIGIN_HEX3468  ORIGIN_HEX3472  \n    -2.5930413      -1.3201206      -0.7539187      -0.7162125      -0.8130167  \nORIGIN_HEX3473  ORIGIN_HEX3499  ORIGIN_HEX3502  ORIGIN_HEX3503  ORIGIN_HEX3504  \n     0.1199408       0.7530506       0.1019086       0.4713848       1.1631673  \nORIGIN_HEX3505  ORIGIN_HEX3506  ORIGIN_HEX3507  ORIGIN_HEX3508  ORIGIN_HEX3509  \n     0.3263227       0.3477469      -0.5203538      -0.1862345      -0.1951363  \nORIGIN_HEX3511  ORIGIN_HEX3512  ORIGIN_HEX3513  ORIGIN_HEX3514  ORIGIN_HEX3518  \n    -0.8958420      -2.6761935      -0.1893791       2.1303161      -0.1751028  \nORIGIN_HEX3519  ORIGIN_HEX3547  ORIGIN_HEX3549  ORIGIN_HEX3551  ORIGIN_HEX3552  \n    -0.3643295       1.6332862       2.0034542       1.4438605       0.8287141  \nORIGIN_HEX3554  ORIGIN_HEX3555  ORIGIN_HEX3556  ORIGIN_HEX3557  ORIGIN_HEX3558  \n     0.0695989      -1.2684973      -0.3890615       0.1463862      -0.9398779  \nORIGIN_HEX3559  ORIGIN_HEX3561  ORIGIN_HEX3562  ORIGIN_HEX3564  ORIGIN_HEX3565  \n     0.5719355      -1.6694150       0.7702119      -0.8115395      -0.4085120  \nORIGIN_HEX3593  ORIGIN_HEX3594  ORIGIN_HEX3595  ORIGIN_HEX3599  ORIGIN_HEX3600  \n     0.9574945       0.9344616       2.4077450       1.1931658      -0.9112157  \nORIGIN_HEX3601  ORIGIN_HEX3602  ORIGIN_HEX3603  ORIGIN_HEX3604  ORIGIN_HEX3605  \n     2.3014514       2.1543064      -0.2075913       0.0761971      -0.1630476  \nORIGIN_HEX3607  ORIGIN_HEX3608  ORIGIN_HEX3610  ORIGIN_HEX3611  ORIGIN_HEX3613  \n    -0.1655579       0.0573479       0.1677468      -1.7020156      -0.4747906  \nORIGIN_HEX3641  ORIGIN_HEX3643  ORIGIN_HEX3644  ORIGIN_HEX3645  ORIGIN_HEX3647  \n     0.4119849       0.7496293       0.5382484       1.3045425       1.0056136  \nORIGIN_HEX3648  ORIGIN_HEX3649  ORIGIN_HEX3652  ORIGIN_HEX3653  ORIGIN_HEX3654  \n    -0.1725154      -0.8039295      -0.7419048       0.4875773      -1.7619425  \nORIGIN_HEX3655  ORIGIN_HEX3656  ORIGIN_HEX3657  ORIGIN_HEX3658  ORIGIN_HEX3661  \n    -1.2684308      -2.2892537      -1.1406926      -3.5147613       0.6721203  \nORIGIN_HEX3689  ORIGIN_HEX3691  ORIGIN_HEX3692  ORIGIN_HEX3693  ORIGIN_HEX3694  \n     0.8395750       0.0960656       0.2887665       2.0158846       0.9166411  \nORIGIN_HEX3695  ORIGIN_HEX3699  ORIGIN_HEX3700  ORIGIN_HEX3701  ORIGIN_HEX3702  \n     0.6265470      -0.5221391      -1.2681053      -0.8447972      -0.7087879  \nORIGIN_HEX3703  ORIGIN_HEX3704  ORIGIN_HEX3705  ORIGIN_HEX3706  ORIGIN_HEX3707  \n     1.3121259      -2.2011961      -2.4722927      -2.5386913       0.4252072  \nORIGIN_HEX3736  ORIGIN_HEX3739  ORIGIN_HEX3740  ORIGIN_HEX3741  ORIGIN_HEX3742  \n     1.0531439       0.1686938       0.9008338      -1.0792838       0.6400304  \nORIGIN_HEX3748  ORIGIN_HEX3750  ORIGIN_HEX3751  ORIGIN_HEX3753  ORIGIN_HEX3754  \n    -1.9487963       0.2976277       0.8582962      -1.0879711      -1.8316653  \nORIGIN_HEX3782  ORIGIN_HEX3783  ORIGIN_HEX3784  ORIGIN_HEX3785  ORIGIN_HEX3786  \n     1.2993859       0.9758243       0.4497771      -0.9926220       0.5096589  \nORIGIN_HEX3787  ORIGIN_HEX3788  ORIGIN_HEX3789  ORIGIN_HEX3793  ORIGIN_HEX3794  \n     1.8873928      -0.0619263      -0.1840853       0.2272687       0.2918407  \nORIGIN_HEX3798  ORIGIN_HEX3829  ORIGIN_HEX3830  ORIGIN_HEX3831  ORIGIN_HEX3832  \n    -1.9513166       1.0087180       0.8300210       0.2195242       0.7604713  \nORIGIN_HEX3836  ORIGIN_HEX3837  ORIGIN_HEX3839  ORIGIN_HEX3840  ORIGIN_HEX3841  \n    -1.2119676       0.0060357       0.2362505      -2.8380836       0.2185966  \nORIGIN_HEX3845  ORIGIN_HEX3847  ORIGIN_HEX3848  ORIGIN_HEX3875  ORIGIN_HEX3876  \n    -0.2784621       2.7243241      -3.4421051       0.1694671       2.0077671  \nORIGIN_HEX3877  ORIGIN_HEX3878  ORIGIN_HEX3879  ORIGIN_HEX3881  ORIGIN_HEX3882  \n     0.4216759       2.0569029       1.3484133      -1.5000963      -1.4273320  \nORIGIN_HEX3884  ORIGIN_HEX3886  ORIGIN_HEX3887  ORIGIN_HEX3888  ORIGIN_HEX3895  \n     0.5660548      -0.8878040       2.5773595      -1.2461163      -1.7070901  \nORIGIN_HEX3922  ORIGIN_HEX3923  ORIGIN_HEX3924  ORIGIN_HEX3925  ORIGIN_HEX3926  \n    -0.3590367       0.4184097      -0.6274617       3.0435493      -0.5223018  \n ORIGIN_HEX393  ORIGIN_HEX3930  ORIGIN_HEX3932  ORIGIN_HEX3933  ORIGIN_HEX3935  \n    -0.4662111      -1.5840318       1.2549984      -0.7504857      -0.1606878  \nORIGIN_HEX3936  ORIGIN_HEX3939  ORIGIN_HEX3942  ORIGIN_HEX3943  ORIGIN_HEX3968  \n    -3.2812378       0.5495970      -0.3206241      -1.4292193       0.0272025  \nORIGIN_HEX3969  ORIGIN_HEX3971  ORIGIN_HEX3972  ORIGIN_HEX3975  ORIGIN_HEX3976  \n     0.5987144       1.2993903       0.3123674       0.5828444      -0.7599562  \nORIGIN_HEX3978  ORIGIN_HEX3979  ORIGIN_HEX3980  ORIGIN_HEX3981  ORIGIN_HEX3982  \n    -0.5765038      -0.8791201      -0.9975592      -0.7107979      -0.7176645  \nORIGIN_HEX3990  ORIGIN_HEX4016  ORIGIN_HEX4017  ORIGIN_HEX4018  ORIGIN_HEX4019  \n    -0.9961806       1.0523287       1.4396868       0.2177704      -0.7075688  \nORIGIN_HEX4020  ORIGIN_HEX4023  ORIGIN_HEX4024  ORIGIN_HEX4025  ORIGIN_HEX4026  \n     1.2630674       0.1771058      -1.9396584      -0.6474830       0.7337175  \nORIGIN_HEX4028  ORIGIN_HEX4029  ORIGIN_HEX4030  ORIGIN_HEX4033  ORIGIN_HEX4038  \n     0.3663608      -0.8977324      -0.0063699      -0.7308323       1.1107579  \nORIGIN_HEX4062  ORIGIN_HEX4063  ORIGIN_HEX4064  ORIGIN_HEX4065  ORIGIN_HEX4066  \n     0.1403471       2.1608742       1.4449175       0.8611693      -0.5153123  \nORIGIN_HEX4067  ORIGIN_HEX4070  ORIGIN_HEX4071  ORIGIN_HEX4073  ORIGIN_HEX4074  \n    -0.8368907      -0.3090018      -1.1885133      -0.7422554      -1.6066398  \nORIGIN_HEX4075  ORIGIN_HEX4076  ORIGIN_HEX4083  ORIGIN_HEX4084  ORIGIN_HEX4085  \n    -0.1455265       0.0612035      -0.7937945       0.1061781       1.5110138  \nORIGIN_HEX4109  ORIGIN_HEX4111  ORIGIN_HEX4112  ORIGIN_HEX4113  ORIGIN_HEX4114  \n    -0.6873756       1.5026350       1.2350744      -0.4573313      -0.5107837  \nORIGIN_HEX4117  ORIGIN_HEX4118  ORIGIN_HEX4122  ORIGIN_HEX4123  ORIGIN_HEX4124  \n     0.0469267      -0.1430088       1.2184742      -4.5332096      -0.1567816  \nORIGIN_HEX4127  ORIGIN_HEX4130  ORIGIN_HEX4131  ORIGIN_HEX4132  ORIGIN_HEX4156  \n    -0.1098477      -0.0535808      -0.0258480      -1.1240965       1.5563541  \nORIGIN_HEX4157  ORIGIN_HEX4159  ORIGIN_HEX4161  ORIGIN_HEX4163  ORIGIN_HEX4167  \n     1.3782152      -0.3979280      -0.1302881       1.9728520      -0.5950783  \nORIGIN_HEX4168  ORIGIN_HEX4169  ORIGIN_HEX4176  ORIGIN_HEX4177  ORIGIN_HEX4178  \n    -1.0778551       0.7102478       0.0638024       1.8164466      -0.8292221  \nORIGIN_HEX4179  ORIGIN_HEX4203  ORIGIN_HEX4205  ORIGIN_HEX4206  ORIGIN_HEX4207  \n     0.0006596       1.5161250       2.0897285      -0.3645639       0.5191798  \nORIGIN_HEX4208  ORIGIN_HEX4209  ORIGIN_HEX4210  ORIGIN_HEX4211  ORIGIN_HEX4215  \n    -0.8359060       2.5335488      -0.8626401       1.5172191      -0.3605282  \nORIGIN_HEX4221  ORIGIN_HEX4224  ORIGIN_HEX4225  ORIGIN_HEX4226  ORIGIN_HEX4227  \n     0.3585984      -0.8468305      -0.0721468      -0.1748214      -1.5903074  \nORIGIN_HEX4250  ORIGIN_HEX4251  ORIGIN_HEX4253  ORIGIN_HEX4254  ORIGIN_HEX4256  \n     0.9045901       1.9680481       2.0850755      -1.2133983       1.6363424  \nORIGIN_HEX4257  ORIGIN_HEX4271  ORIGIN_HEX4272  ORIGIN_HEX4273  ORIGIN_HEX4297  \n     0.9667774      -0.3332169       0.2246859      -1.9710505       0.3182408  \nORIGIN_HEX4300  ORIGIN_HEX4301  ORIGIN_HEX4302  ORIGIN_HEX4304  ORIGIN_HEX4315  \n     0.1418879      -1.5313203      -0.0541479       1.6454820       1.5755957  \nORIGIN_HEX4318  ORIGIN_HEX4319  ORIGIN_HEX4320  ORIGIN_HEX4321  ORIGIN_HEX4343  \n    -0.2661520      -0.9718012      -0.6200287      -1.6324950       1.8495237  \nORIGIN_HEX4345  ORIGIN_HEX4346  ORIGIN_HEX4347  ORIGIN_HEX4348  ORIGIN_HEX4351  \n     1.0758050       1.3690798      -1.8522003      -0.4903174       1.2331858  \nORIGIN_HEX4362  ORIGIN_HEX4365  ORIGIN_HEX4390  ORIGIN_HEX4391  ORIGIN_HEX4392  \n    -0.3482324       0.1440818       0.4303678       1.2449634       2.3013655  \nORIGIN_HEX4393  ORIGIN_HEX4394  ORIGIN_HEX4395  ORIGIN_HEX4398  ORIGIN_HEX4409  \n     0.6575960       1.0903520      -0.1658256      -1.4875024      -1.8245267  \nORIGIN_HEX4412  ORIGIN_HEX4413  ORIGIN_HEX4414  ORIGIN_HEX4415  ORIGIN_HEX4436  \n    -1.2265221       1.9473474       0.0106783       1.5064418      -0.8117361  \nORIGIN_HEX4437  ORIGIN_HEX4438  ORIGIN_HEX4439   ORIGIN_HEX444  ORIGIN_HEX4440  \n    -0.8016442       1.6672493       0.7386107       0.1323437      -0.0662479  \nORIGIN_HEX4441  ORIGIN_HEX4442  ORIGIN_HEX4459  ORIGIN_HEX4460  ORIGIN_HEX4484  \n     0.8189719       0.0412522       0.3239717      -0.6677089      -0.0341139  \nORIGIN_HEX4485  ORIGIN_HEX4486  ORIGIN_HEX4487  ORIGIN_HEX4488  ORIGIN_HEX4489  \n     1.5254766       1.6409109      -0.0046780       0.3695098      -1.1543570  \nORIGIN_HEX4490  ORIGIN_HEX4492  ORIGIN_HEX4502  ORIGIN_HEX4506  ORIGIN_HEX4507  \n    -1.3781195       0.2900634       2.8327753      -0.3605899       3.1774478  \nORIGIN_HEX4508  ORIGIN_HEX4509  ORIGIN_HEX4530  ORIGIN_HEX4532  ORIGIN_HEX4533  \n     0.3228870      -0.4912882      -0.7453543       1.6298650      -0.4112167  \nORIGIN_HEX4534  ORIGIN_HEX4535  ORIGIN_HEX4537  ORIGIN_HEX4538  ORIGIN_HEX4550  \n     1.9558892       0.8095877      -1.1525493       0.4098119      -3.1218256  \nORIGIN_HEX4552  ORIGIN_HEX4553  ORIGIN_HEX4554  ORIGIN_HEX4556  ORIGIN_HEX4577  \n    -2.3394875      -0.5290283      -0.7380339       1.6916329       1.6187785  \nORIGIN_HEX4579  ORIGIN_HEX4580  ORIGIN_HEX4581  ORIGIN_HEX4582  ORIGIN_HEX4583  \n     0.5286935       1.4514326      -2.1029248       0.9640727      -0.5400876  \nORIGIN_HEX4584  ORIGIN_HEX4585  ORIGIN_HEX4586  ORIGIN_HEX4600  ORIGIN_HEX4601  \n    -1.0611209      -2.0994883      -0.1311959       0.1952898      -1.5418352  \nORIGIN_HEX4602  ORIGIN_HEX4603  ORIGIN_HEX4624  ORIGIN_HEX4626  ORIGIN_HEX4627  \n     0.3023738       1.7821522       0.6519340       0.2428157      -0.2353818  \nORIGIN_HEX4628  ORIGIN_HEX4629  ORIGIN_HEX4631  ORIGIN_HEX4632  ORIGIN_HEX4646  \n     0.1175514       1.4168572      -0.2926204       0.5627026       0.9041586  \nORIGIN_HEX4647  ORIGIN_HEX4648  ORIGIN_HEX4649  ORIGIN_HEX4650  ORIGIN_HEX4671  \n    -0.7499660      -0.0056888       0.0739773       1.4593125       1.9281425  \nORIGIN_HEX4674  ORIGIN_HEX4675  ORIGIN_HEX4676  ORIGIN_HEX4679  ORIGIN_HEX4692  \n    -0.9769702      -0.7778582       0.4667362      -2.0062788       0.3170426  \nORIGIN_HEX4694  ORIGIN_HEX4695  ORIGIN_HEX4696  ORIGIN_HEX4698  ORIGIN_HEX4720  \n     0.1135807       0.4775663       0.1267107       0.8685090      -0.6750668  \nORIGIN_HEX4721  ORIGIN_HEX4722  ORIGIN_HEX4726  ORIGIN_HEX4741  ORIGIN_HEX4742  \n    -0.8515002      -1.1699133       1.0970898       0.2775132      -0.7365988  \nORIGIN_HEX4743  ORIGIN_HEX4765  ORIGIN_HEX4766  ORIGIN_HEX4768  ORIGIN_HEX4769  \n     1.0388722       2.2294066       0.3699257      -0.7313059       1.9776731  \nORIGIN_HEX4770  ORIGIN_HEX4786  ORIGIN_HEX4788  ORIGIN_HEX4789  ORIGIN_HEX4790  \n     0.4568361       0.4079674      -0.0544375      -0.3281035      -0.8472713  \nORIGIN_HEX4791  ORIGIN_HEX4792  ORIGIN_HEX4812  ORIGIN_HEX4813  ORIGIN_HEX4814  \n     0.4373472       1.5135941       1.5801770       1.4827910       0.9118861  \nORIGIN_HEX4815  ORIGIN_HEX4816  ORIGIN_HEX4817  ORIGIN_HEX4835  ORIGIN_HEX4836  \n     0.5307759      -0.0483922       0.5244830       0.8730310       2.2833433  \nORIGIN_HEX4837  ORIGIN_HEX4838  ORIGIN_HEX4839  ORIGIN_HEX4840  ORIGIN_HEX4859  \n    -0.0180438       1.3793643       1.2758413       1.1221953       0.0584622  \nORIGIN_HEX4860  ORIGIN_HEX4861  ORIGIN_HEX4862  ORIGIN_HEX4863  ORIGIN_HEX4864  \n     0.6358935       1.6018620       1.3658522      -0.5155384      -1.1357539  \nORIGIN_HEX4865  ORIGIN_HEX4867   ORIGIN_HEX488  ORIGIN_HEX4880  ORIGIN_HEX4883  \n     0.3635681       0.9618895      -1.8482562      -2.6503923      -0.4395882  \nORIGIN_HEX4884  ORIGIN_HEX4885  ORIGIN_HEX4886  ORIGIN_HEX4887   ORIGIN_HEX490  \n    -0.7095240       0.8598992       1.2720122       2.0528960       0.1655470  \nORIGIN_HEX4905  ORIGIN_HEX4906  ORIGIN_HEX4908  ORIGIN_HEX4909   ORIGIN_HEX491  \n    -1.0787583      -0.0285947       0.4513283       1.0887482      -0.7045675  \nORIGIN_HEX4911  ORIGIN_HEX4912  ORIGIN_HEX4913  ORIGIN_HEX4925  ORIGIN_HEX4926  \n    -0.2399788       1.4541954       0.7345186      -2.0479490      -0.5307229  \nORIGIN_HEX4930  ORIGIN_HEX4931  ORIGIN_HEX4932  ORIGIN_HEX4933  ORIGIN_HEX4953  \n     0.7212203      -0.2081248       1.3570181       1.2927902      -0.0592221  \nORIGIN_HEX4954  ORIGIN_HEX4955  ORIGIN_HEX4956  ORIGIN_HEX4958  ORIGIN_HEX4961  \n     1.3277431       1.4394069      -0.3424995      -1.0892789       0.4615217  \nORIGIN_HEX4974  ORIGIN_HEX4978  ORIGIN_HEX4981  ORIGIN_HEX4999  ORIGIN_HEX5000  \n     0.1264010       0.4823401       0.4514464       1.1303053       0.7090824  \nORIGIN_HEX5001  ORIGIN_HEX5002  ORIGIN_HEX5003  ORIGIN_HEX5006  ORIGIN_HEX5007  \n     1.6807353       0.7893482       0.0031079      -0.9770603       0.6184305  \nORIGIN_HEX5019  ORIGIN_HEX5025  ORIGIN_HEX5026  ORIGIN_HEX5027  ORIGIN_HEX5028  \n    -1.5656736       0.1339425       1.9290212       0.8215917       2.2444140  \nORIGIN_HEX5047  ORIGIN_HEX5048  ORIGIN_HEX5049  ORIGIN_HEX5050  ORIGIN_HEX5052  \n     0.0679750       0.8337323       1.0527806       1.2142734       0.0402196  \nORIGIN_HEX5054  ORIGIN_HEX5066  ORIGIN_HEX5072  ORIGIN_HEX5073  ORIGIN_HEX5075  \n    -0.1575829      -1.6513726       0.3010853       1.2268506       1.3936678  \nORIGIN_HEX5093  ORIGIN_HEX5094  ORIGIN_HEX5095  ORIGIN_HEX5096  ORIGIN_HEX5097  \n    -0.1742004      -0.9074341       1.0162498       0.1087993       0.7077075  \nORIGIN_HEX5098  ORIGIN_HEX5101  ORIGIN_HEX5102  ORIGIN_HEX5119  ORIGIN_HEX5121  \n    -0.4711372      -0.0544300      -0.1486679       0.0742758       1.3686465  \nORIGIN_HEX5140  ORIGIN_HEX5141  ORIGIN_HEX5142  ORIGIN_HEX5143  ORIGIN_HEX5144  \n     0.2378105      -0.2356043       1.4800829       1.3405065       0.6851922  \nORIGIN_HEX5148  ORIGIN_HEX5149  ORIGIN_HEX5160  ORIGIN_HEX5166  ORIGIN_HEX5167  \n     1.2882671       0.0059946      -1.1856129      -0.2185164      -0.9193905  \nORIGIN_HEX5168  ORIGIN_HEX5169  ORIGIN_HEX5188  ORIGIN_HEX5189  ORIGIN_HEX5190  \n     0.1972392       0.7008636       1.3270252       1.7526368       1.2068491  \nORIGIN_HEX5191  ORIGIN_HEX5197  ORIGIN_HEX5205  ORIGIN_HEX5206  ORIGIN_HEX5212  \n     0.2811287      -1.4087287      -3.0073657       1.1096431      -0.0628124  \nORIGIN_HEX5213  ORIGIN_HEX5214  ORIGIN_HEX5215  ORIGIN_HEX5234  ORIGIN_HEX5235  \n     1.3678139       0.4888371       0.2453882       2.0356930       1.1375845  \nORIGIN_HEX5236  ORIGIN_HEX5237  ORIGIN_HEX5239  ORIGIN_HEX5240  ORIGIN_HEX5242  \n     0.5702900       0.7460424      -0.8166819       1.1798668       0.0521509  \nORIGIN_HEX5244  ORIGIN_HEX5252  ORIGIN_HEX5253  ORIGIN_HEX5254  ORIGIN_HEX5260  \n    -1.1530523      -3.4958181       1.2528182       1.2049169      -0.5515344  \nORIGIN_HEX5261  ORIGIN_HEX5262  ORIGIN_HEX5280  ORIGIN_HEX5281  ORIGIN_HEX5282  \n     1.6304244       0.1418097       2.4205573      -0.2331155       0.6241406  \nORIGIN_HEX5283  ORIGIN_HEX5284  ORIGIN_HEX5286  ORIGIN_HEX5298  ORIGIN_HEX5301  \n     1.4372083       0.0435505       0.7113433      -0.8828009      -1.0173189  \nORIGIN_HEX5307  ORIGIN_HEX5308  ORIGIN_HEX5309  ORIGIN_HEX5328  ORIGIN_HEX5329  \n     0.9956080       0.4015849       0.0283317       1.8064303       0.9959228  \nORIGIN_HEX5330  ORIGIN_HEX5331  ORIGIN_HEX5333  ORIGIN_HEX5336  ORIGIN_HEX5339  \n     1.4932041       0.4472980      -0.9516738      -0.7839905      -3.0511655  \nORIGIN_HEX5349   ORIGIN_HEX535  ORIGIN_HEX5350  ORIGIN_HEX5354  ORIGIN_HEX5355  \n    -1.5616865       0.5902618      -0.6353278      -1.1500512      -0.2785943  \nORIGIN_HEX5356   ORIGIN_HEX537  ORIGIN_HEX5375  ORIGIN_HEX5377  ORIGIN_HEX5378  \n     0.2424989       1.4658552       0.7949343       0.1497270       0.0329678  \nORIGIN_HEX5379  ORIGIN_HEX5380  ORIGIN_HEX5382  ORIGIN_HEX5383  ORIGIN_HEX5397  \n     0.2051962       0.5662071       1.2808573      -2.0017267      -1.3032700  \nORIGIN_HEX5398  ORIGIN_HEX5399   ORIGIN_HEX540  ORIGIN_HEX5400  ORIGIN_HEX5401  \n    -0.0190620      -0.0505125      -2.1046246       0.8134046      -2.3004893  \nORIGIN_HEX5402  ORIGIN_HEX5403  ORIGIN_HEX5422  ORIGIN_HEX5423  ORIGIN_HEX5424  \n    -1.6740322      -2.6390033      -0.7575095      -0.3170480       0.9547756  \nORIGIN_HEX5425  ORIGIN_HEX5426  ORIGIN_HEX5428  ORIGIN_HEX5429  ORIGIN_HEX5430  \n     2.6293452       1.2499171       1.4352940       1.0215246       1.6074843  \nORIGIN_HEX5433  ORIGIN_HEX5436  ORIGIN_HEX5437  ORIGIN_HEX5438  ORIGIN_HEX5439  \n    -2.9504885      -0.4010957      -0.6562499      -0.3858020       1.9439391  \nORIGIN_HEX5442  ORIGIN_HEX5443  ORIGIN_HEX5445  ORIGIN_HEX5446  ORIGIN_HEX5447  \n    -0.4930776      -2.8610790       0.9475300       1.3910929      -0.6022700  \nORIGIN_HEX5449  ORIGIN_HEX5450  ORIGIN_HEX5469  ORIGIN_HEX5470  ORIGIN_HEX5471  \n     0.0383467      -2.0610997      -1.9778811       0.5897262      -0.1707127  \nORIGIN_HEX5472  ORIGIN_HEX5473  ORIGIN_HEX5474  ORIGIN_HEX5475  ORIGIN_HEX5476  \n     0.3775145      -0.0138531       1.2318093       0.0027803      -0.6277285  \nORIGIN_HEX5482  ORIGIN_HEX5483  ORIGIN_HEX5484  ORIGIN_HEX5485  ORIGIN_HEX5488  \n     0.2282249      -0.7211854       0.3560940      -0.1705253      -2.8751608  \nORIGIN_HEX5489  ORIGIN_HEX5490  ORIGIN_HEX5492  ORIGIN_HEX5493  ORIGIN_HEX5495  \n    -1.1270812      -0.7208743      -0.1947793       1.1266288      -0.9625786  \nORIGIN_HEX5496  ORIGIN_HEX5497  ORIGIN_HEX5520  ORIGIN_HEX5521  ORIGIN_HEX5522  \n    -0.8220644      -0.7047619       0.9448342       1.7296665       2.0416324  \nORIGIN_HEX5527  ORIGIN_HEX5529  ORIGIN_HEX5530  ORIGIN_HEX5531  ORIGIN_HEX5538  \n    -1.7185436       0.9632329       0.7314348      -0.6079231       2.0085567  \nORIGIN_HEX5539  ORIGIN_HEX5540  ORIGIN_HEX5541  ORIGIN_HEX5542  ORIGIN_HEX5543  \n    -0.6412602      -0.1186709      -0.3899014       1.6344700      -0.1886723  \nORIGIN_HEX5544  ORIGIN_HEX5563  ORIGIN_HEX5564  ORIGIN_HEX5565  ORIGIN_HEX5566  \n    -1.6046422      -0.6185533       0.8139259       1.0845273       0.1635264  \nORIGIN_HEX5567  ORIGIN_HEX5568  ORIGIN_HEX5569  ORIGIN_HEX5570  ORIGIN_HEX5571  \n     0.0242824       2.0177806       0.1193044       0.9006443       0.6274731  \nORIGIN_HEX5573  ORIGIN_HEX5575  ORIGIN_HEX5577  ORIGIN_HEX5578  ORIGIN_HEX5579  \n    -1.4609253       1.0244910      -0.4465930      -0.8963926      -0.6256575  \nORIGIN_HEX5584  ORIGIN_HEX5585  ORIGIN_HEX5586  ORIGIN_HEX5587  ORIGIN_HEX5588  \n    -0.5356725       1.9549762      -0.0184801      -0.9651939      -0.5905737  \nORIGIN_HEX5589  ORIGIN_HEX5590  ORIGIN_HEX5611  ORIGIN_HEX5613  ORIGIN_HEX5614  \n     0.6262300      -4.0463589       1.4374054      -0.0701589      -0.0103748  \nORIGIN_HEX5615  ORIGIN_HEX5617  ORIGIN_HEX5621  ORIGIN_HEX5622  ORIGIN_HEX5623  \n     1.5965890       0.7023993       1.0378284      -0.4389214       0.2470912  \nORIGIN_HEX5624  ORIGIN_HEX5625  ORIGIN_HEX5626  ORIGIN_HEX5627  ORIGIN_HEX5628  \n    -0.0661372      -0.1880693      -0.7986541      -0.1153630      -0.8011252  \nORIGIN_HEX5632  ORIGIN_HEX5633  ORIGIN_HEX5634  ORIGIN_HEX5635  ORIGIN_HEX5638  \n     1.1799224       0.5913179       2.4608140       0.4594246      -1.8124263  \nORIGIN_HEX5657  ORIGIN_HEX5658  ORIGIN_HEX5660  ORIGIN_HEX5663  ORIGIN_HEX5664  \n    -0.1778883       0.6890690       0.6690703       1.7306471      -0.3018017  \nORIGIN_HEX5666  ORIGIN_HEX5667  ORIGIN_HEX5668  ORIGIN_HEX5669  ORIGIN_HEX5670  \n    -0.8827749      -0.1643838      -0.6996989       0.0965870       1.1221834  \nORIGIN_HEX5671  ORIGIN_HEX5672  ORIGIN_HEX5673  ORIGIN_HEX5674  ORIGIN_HEX5675  \n    -0.3898911       1.6791695      -0.4138379       0.3323815       0.2443621  \nORIGIN_HEX5678  ORIGIN_HEX5679  ORIGIN_HEX5680  ORIGIN_HEX5681  ORIGIN_HEX5682  \n    -2.0639540      -0.9034536       0.1308683      -0.5564769       0.2877340  \nORIGIN_HEX5685  ORIGIN_HEX5705  ORIGIN_HEX5706  ORIGIN_HEX5707  ORIGIN_HEX5708  \n     0.7047464       0.2653127       1.4520585       0.8689793       0.6442626  \nORIGIN_HEX5709  ORIGIN_HEX5711  ORIGIN_HEX5713  ORIGIN_HEX5714  ORIGIN_HEX5715  \n     1.8012354       0.8174056       0.0759158       1.4376369      -0.4501717  \nORIGIN_HEX5716  ORIGIN_HEX5717  ORIGIN_HEX5718  ORIGIN_HEX5719  ORIGIN_HEX5720  \n     0.9509629       0.6892102       0.6795747       0.0999981       0.2073078  \nORIGIN_HEX5721  ORIGIN_HEX5722  ORIGIN_HEX5726  ORIGIN_HEX5727  ORIGIN_HEX5728  \n     0.2894450      -0.6255519       0.3944752      -0.1229495       0.8548995  \nORIGIN_HEX5751  ORIGIN_HEX5752  ORIGIN_HEX5753  ORIGIN_HEX5754  ORIGIN_HEX5755  \n     1.0761208       0.3881737       2.0750466       0.5124920       0.4229141  \nORIGIN_HEX5757  ORIGIN_HEX5758  ORIGIN_HEX5759  ORIGIN_HEX5760  ORIGIN_HEX5761  \n     1.0878867       0.5160850       0.9213999      -0.9631359      -0.1722241  \nORIGIN_HEX5762  ORIGIN_HEX5763  ORIGIN_HEX5764  ORIGIN_HEX5765  ORIGIN_HEX5767  \n    -0.2823172      -0.3343035      -0.5779231      -0.6441976       0.6361780  \nORIGIN_HEX5768  ORIGIN_HEX5772  ORIGIN_HEX5773  ORIGIN_HEX5774  ORIGIN_HEX5775  \n    -0.5597664      -1.4474449      -0.7150631      -0.3575250       1.5272022  \nORIGIN_HEX5776  ORIGIN_HEX5799  ORIGIN_HEX5800  ORIGIN_HEX5801  ORIGIN_HEX5802  \n     0.9678161       1.6126715       0.5123935       0.8216366       0.9381762  \nORIGIN_HEX5803  ORIGIN_HEX5806  ORIGIN_HEX5807  ORIGIN_HEX5808  ORIGIN_HEX5811  \n     0.8143548       1.8612049       1.3733557      -0.3047093      -0.9927455  \nORIGIN_HEX5812  ORIGIN_HEX5813  ORIGIN_HEX5814  ORIGIN_HEX5815  ORIGIN_HEX5816  \n     0.2139686       0.1300102      -0.9396359       0.6843857       1.6928353  \nORIGIN_HEX5820  ORIGIN_HEX5821  ORIGIN_HEX5823   ORIGIN_HEX583   ORIGIN_HEX584  \n     0.2397063      -0.6810367       1.3884030       1.0866400       0.7794091  \nORIGIN_HEX5846  ORIGIN_HEX5847  ORIGIN_HEX5848  ORIGIN_HEX5849   ORIGIN_HEX585  \n     0.0864275       1.9677581      -0.1043177       1.7055234       2.6745234  \nORIGIN_HEX5851  ORIGIN_HEX5852  ORIGIN_HEX5853  ORIGIN_HEX5854  ORIGIN_HEX5855  \n     1.5229454       0.9806833       0.1787645       0.5958560       0.6508511  \nORIGIN_HEX5856  ORIGIN_HEX5858  ORIGIN_HEX5859   ORIGIN_HEX586  ORIGIN_HEX5860  \n     0.0208502       1.6478802       0.4970541       0.1282800       0.0490154  \nORIGIN_HEX5861  ORIGIN_HEX5862  ORIGIN_HEX5863  ORIGIN_HEX5867  ORIGIN_HEX5868  \n    -0.2285719      -0.0612046       1.4968936       0.3370240       0.9676662  \nORIGIN_HEX5869   ORIGIN_HEX587  ORIGIN_HEX5893  ORIGIN_HEX5894  ORIGIN_HEX5895  \n    -0.1824691      -2.5403035       1.2142517       1.0635786       1.5393373  \nORIGIN_HEX5898  ORIGIN_HEX5899  ORIGIN_HEX5901  ORIGIN_HEX5902  ORIGIN_HEX5903  \n     0.6963974      -1.2883478       0.8065914       0.7174321       1.3061864  \nORIGIN_HEX5904  ORIGIN_HEX5905  ORIGIN_HEX5906  ORIGIN_HEX5907  ORIGIN_HEX5908  \n    -0.2410273      -0.2716849       0.1496929       2.6691683      -0.8448489  \nORIGIN_HEX5909  ORIGIN_HEX5910  ORIGIN_HEX5914  ORIGIN_HEX5915  ORIGIN_HEX5916  \n     1.8155623       0.7876468      -1.1823903       0.5481049       0.7185487  \nORIGIN_HEX5940  ORIGIN_HEX5941  ORIGIN_HEX5942  ORIGIN_HEX5943  ORIGIN_HEX5944  \n     1.9358400       0.0514065       1.0714295       1.4596171       1.3882571  \nORIGIN_HEX5945  ORIGIN_HEX5946  ORIGIN_HEX5947  ORIGIN_HEX5948  ORIGIN_HEX5949  \n     1.2285015       0.7061889       0.7004191       2.7956525       0.4436900  \nORIGIN_HEX5950  ORIGIN_HEX5951  ORIGIN_HEX5954  ORIGIN_HEX5955  ORIGIN_HEX5956  \n     0.2703921       2.6326350       0.8169964      -0.3484836       0.5728720  \nORIGIN_HEX5957  ORIGIN_HEX5961  ORIGIN_HEX5962  ORIGIN_HEX5963  ORIGIN_HEX5987  \n     1.6922454      -0.5344975      -0.2370792      -4.0090557      -1.0557632  \nORIGIN_HEX5988  ORIGIN_HEX5989  ORIGIN_HEX5990  ORIGIN_HEX5991  ORIGIN_HEX5993  \n     2.0593102       0.8203089       1.4761605       1.2531781       0.6384418  \nORIGIN_HEX5995  ORIGIN_HEX5996  ORIGIN_HEX5997  ORIGIN_HEX5998  ORIGIN_HEX5999  \n    -1.0055901       0.0306195       0.1664513      -0.2979582      -0.5836475  \nORIGIN_HEX6000  ORIGIN_HEX6001  ORIGIN_HEX6002  ORIGIN_HEX6009  ORIGIN_HEX6010  \n     0.2102564       2.0682467       0.8419754      -0.7353977       0.3147957  \nORIGIN_HEX6034  ORIGIN_HEX6035  ORIGIN_HEX6036  ORIGIN_HEX6037  ORIGIN_HEX6038  \n     1.4643951       1.6388687       0.2958222       1.0590220       1.7357150  \nORIGIN_HEX6039  ORIGIN_HEX6040  ORIGIN_HEX6041  ORIGIN_HEX6042  ORIGIN_HEX6043  \n    -0.2895536      -1.9270743       1.1351684       0.3657199       0.7906779  \nORIGIN_HEX6044  ORIGIN_HEX6045  ORIGIN_HEX6046  ORIGIN_HEX6047  ORIGIN_HEX6048  \n    -0.5844752      -0.8957362      -1.1165877      -0.2339351      -0.0687888  \nORIGIN_HEX6051  ORIGIN_HEX6056  ORIGIN_HEX6082  ORIGIN_HEX6083  ORIGIN_HEX6084  \n    -0.4310944       0.4210798       0.8714037      -0.7788303       0.6679543  \nORIGIN_HEX6085  ORIGIN_HEX6086  ORIGIN_HEX6088  ORIGIN_HEX6089  ORIGIN_HEX6090  \n     2.3237463       1.5132827       0.8923697       0.0505821       0.1425837  \nORIGIN_HEX6091  ORIGIN_HEX6092  ORIGIN_HEX6093  ORIGIN_HEX6094  ORIGIN_HEX6095  \n     0.5587758       1.4745774       0.2787977       1.0084101       0.4721477  \nORIGIN_HEX6096  ORIGIN_HEX6128  ORIGIN_HEX6130  ORIGIN_HEX6131  ORIGIN_HEX6132  \n     1.9281043       0.0398051       0.4439678       0.9817383       0.5054487  \nORIGIN_HEX6133  ORIGIN_HEX6134  ORIGIN_HEX6135  ORIGIN_HEX6136  ORIGIN_HEX6137  \n     1.8356227       0.0014706       0.3141366       0.5396180       0.0199252  \nORIGIN_HEX6140  ORIGIN_HEX6141  ORIGIN_HEX6142  ORIGIN_HEX6145  ORIGIN_HEX6150  \n     1.0508756       0.5243958       0.3860558       0.0976497      -1.5838382  \nORIGIN_HEX6174  ORIGIN_HEX6176  ORIGIN_HEX6177  ORIGIN_HEX6178  ORIGIN_HEX6179  \n     1.5776727       1.0230998      -0.3094610       1.5602331       1.1338775  \nORIGIN_HEX6180  ORIGIN_HEX6181  ORIGIN_HEX6183  ORIGIN_HEX6184  ORIGIN_HEX6185  \n    -0.5288758       0.3977497       0.5305703       1.7091906       0.6803610  \nORIGIN_HEX6186  ORIGIN_HEX6188  ORIGIN_HEX6189  ORIGIN_HEX6192  ORIGIN_HEX6195  \n    -0.8612598      -0.4405822       0.2336832      -0.9326156      -1.7430345  \nORIGIN_HEX6222  ORIGIN_HEX6223  ORIGIN_HEX6224  ORIGIN_HEX6226  ORIGIN_HEX6227  \n    -1.7290591       1.3167293       0.8293066       1.3770924       1.0632299  \nORIGIN_HEX6228  ORIGIN_HEX6229  ORIGIN_HEX6230  ORIGIN_HEX6231  ORIGIN_HEX6232  \n     0.5634519      -0.2653270       0.7576299       0.3148012      -1.7729239  \nORIGIN_HEX6233  ORIGIN_HEX6234  ORIGIN_HEX6235  ORIGIN_HEX6237  ORIGIN_HEX6239  \n     0.2726505      -2.2038893      -0.0079288      -0.8372345      -1.3080344  \nORIGIN_HEX6241  ORIGIN_HEX6242  ORIGIN_HEX6271  ORIGIN_HEX6272  ORIGIN_HEX6273  \n     0.2150089      -2.2019926      -0.9180519      -2.7464377       0.8942244  \nORIGIN_HEX6274  ORIGIN_HEX6275  ORIGIN_HEX6276  ORIGIN_HEX6278  ORIGIN_HEX6279  \n     1.5607251       0.5790867       1.8871823       1.4883480      -1.3368546  \nORIGIN_HEX6280  ORIGIN_HEX6281  ORIGIN_HEX6283  ORIGIN_HEX6284  ORIGIN_HEX6286  \n     0.4827698      -0.4889506       0.1202486       0.5068805      -0.8801381  \nORIGIN_HEX6289  ORIGIN_HEX6290   ORIGIN_HEX630  ORIGIN_HEX6315  ORIGIN_HEX6316  \n    -1.0917767       0.7470321      -1.2260330       1.0019114      -0.5327881  \n ORIGIN_HEX632  ORIGIN_HEX6320  ORIGIN_HEX6321  ORIGIN_HEX6322  ORIGIN_HEX6323  \n    -0.1818468       0.8101886       1.2769175       1.1010661       0.8589332  \nORIGIN_HEX6324  ORIGIN_HEX6326  ORIGIN_HEX6327  ORIGIN_HEX6328   ORIGIN_HEX633  \n    -0.9005504      -0.6877315      -0.3203935      -1.5712424       1.9136533  \nORIGIN_HEX6330  ORIGIN_HEX6331  ORIGIN_HEX6337   ORIGIN_HEX635  ORIGIN_HEX6364  \n     1.6098372       0.5352587       0.5835230       1.7779010      -2.2132098  \nORIGIN_HEX6368  ORIGIN_HEX6369  ORIGIN_HEX6370  ORIGIN_HEX6371  ORIGIN_HEX6372  \n    -0.8244851       1.0827283       0.2001058       1.2535016      -0.7492329  \nORIGIN_HEX6373  ORIGIN_HEX6374  ORIGIN_HEX6375  ORIGIN_HEX6376  ORIGIN_HEX6377  \n    -0.6974526      -0.9526891      -0.1927362       1.2251660       0.5912581  \nORIGIN_HEX6378  ORIGIN_HEX6380  ORIGIN_HEX6382  ORIGIN_HEX6385  ORIGIN_HEX6413  \n     1.3842996      -0.6782195      -0.7430933      -0.2951382       0.8476956  \nORIGIN_HEX6415  ORIGIN_HEX6416  ORIGIN_HEX6417  ORIGIN_HEX6418  ORIGIN_HEX6420  \n     0.6343541       0.3965218       0.8556552       1.9157342      -1.0991269  \nORIGIN_HEX6421  ORIGIN_HEX6422  ORIGIN_HEX6423  ORIGIN_HEX6424  ORIGIN_HEX6425  \n    -0.1694216      -1.2360252      -1.1748341       0.1756502       1.3642366  \nORIGIN_HEX6427  ORIGIN_HEX6429  ORIGIN_HEX6458  ORIGIN_HEX6463  ORIGIN_HEX6464  \n    -1.7983266      -1.0008933      -2.1595150      -0.0685612       1.2300996  \nORIGIN_HEX6465  ORIGIN_HEX6466  ORIGIN_HEX6467  ORIGIN_HEX6468  ORIGIN_HEX6469  \n     1.8140350       0.2644554      -0.7569599       1.2172705       0.3953260  \nORIGIN_HEX6470  ORIGIN_HEX6471  ORIGIN_HEX6472  ORIGIN_HEX6474  ORIGIN_HEX6475  \n    -1.2732583       0.1113033       0.6695377       0.8725992      -1.9374429  \nORIGIN_HEX6476  ORIGIN_HEX6477  ORIGIN_HEX6507  ORIGIN_HEX6509  ORIGIN_HEX6510  \n     1.0098718      -0.6027589       0.4846857       1.7712376      -0.8255777  \nORIGIN_HEX6511  ORIGIN_HEX6513  ORIGIN_HEX6514  ORIGIN_HEX6515  ORIGIN_HEX6516  \n     1.0519965       1.6879270      -0.0533922       3.0547104      -0.3841967  \nORIGIN_HEX6517  ORIGIN_HEX6518  ORIGIN_HEX6519  ORIGIN_HEX6520  ORIGIN_HEX6521  \n    -1.2187413       1.9623217       0.9208302      -0.1249081       0.2594877  \nORIGIN_HEX6522  ORIGIN_HEX6523  ORIGIN_HEX6524  ORIGIN_HEX6555  ORIGIN_HEX6556  \n    -1.4119543      -1.5190326      -0.5280073       2.1504301      -0.8232800  \nORIGIN_HEX6557  ORIGIN_HEX6558  ORIGIN_HEX6559  ORIGIN_HEX6561  ORIGIN_HEX6562  \n    -0.4895522       2.3070203       1.4543902      -0.9214899       1.3344581  \nORIGIN_HEX6563  ORIGIN_HEX6564  ORIGIN_HEX6565  ORIGIN_HEX6566  ORIGIN_HEX6568  \n    -0.4470706      -0.2085534       0.2414866       0.2591987       0.0412886  \nORIGIN_HEX6569  ORIGIN_HEX6570  ORIGIN_HEX6571  ORIGIN_HEX6601  ORIGIN_HEX6603  \n    -0.1205714       1.2391197      -0.7646173      -1.1027277       0.6827017  \nORIGIN_HEX6605  ORIGIN_HEX6606  ORIGIN_HEX6607  ORIGIN_HEX6608  ORIGIN_HEX6609  \n     1.5314434       1.0940750      -0.5586919      -1.1164612       0.0960218  \nORIGIN_HEX6610  ORIGIN_HEX6611  ORIGIN_HEX6612  ORIGIN_HEX6613  ORIGIN_HEX6614  \n    -1.1285539      -0.5508325       0.6190104       0.4574304      -2.6280838  \nORIGIN_HEX6615  ORIGIN_HEX6616  ORIGIN_HEX6649  ORIGIN_HEX6650  ORIGIN_HEX6651  \n     0.4338117      -1.6228158      -3.3004668       0.8726942       0.6513110  \nORIGIN_HEX6652  ORIGIN_HEX6653  ORIGIN_HEX6654  ORIGIN_HEX6655  ORIGIN_HEX6656  \n     0.5492128       1.1749964       1.4880024       1.4367972      -1.8628726  \nORIGIN_HEX6657  ORIGIN_HEX6659  ORIGIN_HEX6660  ORIGIN_HEX6661  ORIGIN_HEX6663  \n     0.8455960       0.3099137       1.3634151      -0.5278818      -0.2989612  \nORIGIN_HEX6695  ORIGIN_HEX6696  ORIGIN_HEX6697  ORIGIN_HEX6698  ORIGIN_HEX6699  \n    -0.7270177      -1.4626863       0.7882934       0.4826493       0.5164807  \nORIGIN_HEX6700  ORIGIN_HEX6702  ORIGIN_HEX6703  ORIGIN_HEX6706  ORIGIN_HEX6707  \n     0.6137363      -0.6537533       0.5321838      -0.5193921       0.1529161  \nORIGIN_HEX6708  ORIGIN_HEX6709  ORIGIN_HEX6744  ORIGIN_HEX6745  ORIGIN_HEX6746  \n     0.3388306      -0.1285543       0.1761100       1.9032299       0.9770487  \nORIGIN_HEX6747  ORIGIN_HEX6749  ORIGIN_HEX6750  ORIGIN_HEX6751  ORIGIN_HEX6753  \n    -0.1909693       0.8806081      -0.4410213      -0.4862142       0.1927022  \nORIGIN_HEX6754  ORIGIN_HEX6755  ORIGIN_HEX6757   ORIGIN_HEX678  ORIGIN_HEX6789  \n     0.4260729      -0.6283065      -0.0243323      -0.3852372       0.7758427  \n ORIGIN_HEX679  ORIGIN_HEX6790  ORIGIN_HEX6791  ORIGIN_HEX6792  ORIGIN_HEX6793  \n     1.2147296       1.1279437       0.1831401      -0.5073611       0.8717798  \nORIGIN_HEX6794  ORIGIN_HEX6796  ORIGIN_HEX6797  ORIGIN_HEX6798   ORIGIN_HEX680  \n     1.0188398      -0.3260444       0.5616611       0.8189396      -1.2305437  \nORIGIN_HEX6800  ORIGIN_HEX6801  ORIGIN_HEX6802   ORIGIN_HEX681   ORIGIN_HEX682  \n     0.8777755       0.8649527       0.3700446       0.5390617       0.6377800  \nORIGIN_HEX6837  ORIGIN_HEX6838  ORIGIN_HEX6839  ORIGIN_HEX6841  ORIGIN_HEX6843  \n     0.2555674       0.8394604       0.7430568       0.7144130       0.4812902  \nORIGIN_HEX6846  ORIGIN_HEX6847  ORIGIN_HEX6848  ORIGIN_HEX6850  ORIGIN_HEX6851  \n     1.9654925      -0.2997193      -0.3213768      -0.3062726      -0.2558409  \nORIGIN_HEX6885  ORIGIN_HEX6886  ORIGIN_HEX6887  ORIGIN_HEX6888  ORIGIN_HEX6889  \n     0.0894885       0.7246255       0.5101232       1.3975318       0.9533305  \nORIGIN_HEX6891  ORIGIN_HEX6892  ORIGIN_HEX6893  ORIGIN_HEX6894  ORIGIN_HEX6895  \n     0.7749147      -0.0455776       0.3776106       0.2323224       0.3710915  \nORIGIN_HEX6896  ORIGIN_HEX6897  ORIGIN_HEX6898  ORIGIN_HEX6931  ORIGIN_HEX6932  \n    -0.2611145       0.6247153       0.9347579       0.3908438       1.5538938  \nORIGIN_HEX6933  ORIGIN_HEX6934  ORIGIN_HEX6935  ORIGIN_HEX6936  ORIGIN_HEX6938  \n     0.5021609      -0.1964636       0.3726531       1.5198361       0.1003507  \nORIGIN_HEX6939  ORIGIN_HEX6940  ORIGIN_HEX6941  ORIGIN_HEX6942  ORIGIN_HEX6943  \n     0.4847068       0.1344369       0.0732412       0.0165570      -0.2425526  \nORIGIN_HEX6944  ORIGIN_HEX6945  ORIGIN_HEX6946  ORIGIN_HEX6979  ORIGIN_HEX6980  \n    -0.9377938      -0.4329004      -0.8231431      -0.6792648       2.3314776  \nORIGIN_HEX6981  ORIGIN_HEX6982  ORIGIN_HEX6984  ORIGIN_HEX6985  ORIGIN_HEX6986  \n     0.7309835       0.6177983      -0.2588606       1.6230774       0.4594975  \nORIGIN_HEX6987  ORIGIN_HEX6988  ORIGIN_HEX6989  ORIGIN_HEX6990  ORIGIN_HEX6991  \n     0.9849699       2.3744467      -0.5028943      -0.7216055       0.6483818  \nORIGIN_HEX6992  ORIGIN_HEX7025  ORIGIN_HEX7026  ORIGIN_HEX7027  ORIGIN_HEX7029  \n    -0.9652081      -0.0883241       0.4193721       1.2916240       1.2584024  \nORIGIN_HEX7030  ORIGIN_HEX7031  ORIGIN_HEX7033  ORIGIN_HEX7034  ORIGIN_HEX7035  \n     1.0568413       0.3188758      -0.2115838       0.7123763      -0.5764439  \nORIGIN_HEX7036  ORIGIN_HEX7037  ORIGIN_HEX7038  ORIGIN_HEX7039  ORIGIN_HEX7040  \n     0.0566386       2.1081501      -0.3849605       0.3878062       0.0326018  \nORIGIN_HEX7072  ORIGIN_HEX7073  ORIGIN_HEX7074  ORIGIN_HEX7075  ORIGIN_HEX7076  \n     0.3487314      -0.0339502       1.9787283       0.9966287       2.7041874  \nORIGIN_HEX7077  ORIGIN_HEX7081  ORIGIN_HEX7082  ORIGIN_HEX7083  ORIGIN_HEX7084  \n     0.6557789       0.1214956       0.2486064      -0.6585599      -0.0935526  \nORIGIN_HEX7085  ORIGIN_HEX7086  ORIGIN_HEX7087  ORIGIN_HEX7119  ORIGIN_HEX7120  \n     2.5058855      -0.1611838      -0.7045969       0.3019046       0.1640131  \nORIGIN_HEX7123  ORIGIN_HEX7124  ORIGIN_HEX7125  ORIGIN_HEX7128  ORIGIN_HEX7129  \n     0.6161648       1.6679603      -0.8932291      -2.0300292       0.1418538  \nORIGIN_HEX7130  ORIGIN_HEX7131  ORIGIN_HEX7132  ORIGIN_HEX7133  ORIGIN_HEX7134  \n    -0.0516554       0.3961847       0.4730313      -2.3228178       0.3248238  \nORIGIN_HEX7135  ORIGIN_HEX7166  ORIGIN_HEX7167  ORIGIN_HEX7168  ORIGIN_HEX7169  \n    -0.3237626       0.9823812       0.2451522       1.1923197       1.0861046  \nORIGIN_HEX7170  ORIGIN_HEX7172  ORIGIN_HEX7173  ORIGIN_HEX7175  ORIGIN_HEX7176  \n     1.4691242       2.6998958       3.3292377      -1.4721312       0.0108058  \nORIGIN_HEX7177  ORIGIN_HEX7178  ORIGIN_HEX7179  ORIGIN_HEX7181  ORIGIN_HEX7182  \n    -1.6793216      -0.1029140      -0.2216170      -1.3106760      -1.0863817  \nORIGIN_HEX7213  ORIGIN_HEX7214  ORIGIN_HEX7215  ORIGIN_HEX7217  ORIGIN_HEX7218  \n     0.7186236       1.0660409       0.1377600       0.7608086       1.0101910  \nORIGIN_HEX7222  ORIGIN_HEX7223  ORIGIN_HEX7224  ORIGIN_HEX7225  ORIGIN_HEX7226  \n    -1.0755657      -0.7904112       0.2994864      -1.2528346       0.0858778  \nORIGIN_HEX7227  ORIGIN_HEX7228  ORIGIN_HEX7229   ORIGIN_HEX723  ORIGIN_HEX7230  \n     0.8735153       1.9299704      -1.6805269       2.5424610      -0.9348379  \n ORIGIN_HEX725   ORIGIN_HEX726  ORIGIN_HEX7260  ORIGIN_HEX7261  ORIGIN_HEX7262  \n     0.4281322      -0.4663528       1.6844360       0.4962219       1.9389985  \nORIGIN_HEX7264  ORIGIN_HEX7265   ORIGIN_HEX727  ORIGIN_HEX7271  ORIGIN_HEX7272  \n     1.6861334       0.8943133       1.6268964       0.2437000      -0.3112068  \nORIGIN_HEX7273  ORIGIN_HEX7274  ORIGIN_HEX7275  ORIGIN_HEX7277   ORIGIN_HEX728  \n    -0.1424828      -0.5149514       0.8597273       0.4223324       0.7951242  \nORIGIN_HEX7307  ORIGIN_HEX7308  ORIGIN_HEX7309   ORIGIN_HEX731  ORIGIN_HEX7310  \n     2.3306548       1.0168298       0.1570442       0.6325394       1.8891094  \nORIGIN_HEX7311  ORIGIN_HEX7312  ORIGIN_HEX7316  ORIGIN_HEX7319  ORIGIN_HEX7320  \n     0.7438876       1.5551297      -0.9118344      -1.9222199      -0.4496427  \nORIGIN_HEX7321  ORIGIN_HEX7322  ORIGIN_HEX7323  ORIGIN_HEX7324  ORIGIN_HEX7354  \n     2.4016292      -0.6668262      -0.3245755      -2.3537789       0.1928125  \nORIGIN_HEX7355  ORIGIN_HEX7356  ORIGIN_HEX7358  ORIGIN_HEX7359  ORIGIN_HEX7363  \n    -0.0799932      -0.0283419      -0.3746279      -0.7654873       1.4437639  \nORIGIN_HEX7366  ORIGIN_HEX7367  ORIGIN_HEX7368  ORIGIN_HEX7369  ORIGIN_HEX7371  \n    -0.2800616      -0.6576296      -0.8378296      -1.6025119      -3.1643788  \nORIGIN_HEX7402  ORIGIN_HEX7403  ORIGIN_HEX7404  ORIGIN_HEX7406  ORIGIN_HEX7411  \n     0.3909909       0.2199418      -0.5295963       1.9029214       1.6321264  \nORIGIN_HEX7414  ORIGIN_HEX7415  ORIGIN_HEX7416  ORIGIN_HEX7418  ORIGIN_HEX7448  \n     0.4269483      -0.9011818      -0.3935760      -1.3304106       0.7307522  \nORIGIN_HEX7449  ORIGIN_HEX7450  ORIGIN_HEX7451  ORIGIN_HEX7452  ORIGIN_HEX7453  \n     0.2832954       0.6147409      -1.0462753       1.2327933      -0.3339834  \nORIGIN_HEX7458  ORIGIN_HEX7461  ORIGIN_HEX7462  ORIGIN_HEX7463  ORIGIN_HEX7465  \n     1.3864778      -0.1697855      -0.2544186      -0.0253653       1.0821641  \nORIGIN_HEX7496  ORIGIN_HEX7498  ORIGIN_HEX7499  ORIGIN_HEX7500  ORIGIN_HEX7501  \n     0.1987072       2.3803411       1.3737169       0.8153663       0.6694248  \nORIGIN_HEX7506  ORIGIN_HEX7509  ORIGIN_HEX7510  ORIGIN_HEX7542  ORIGIN_HEX7543  \n    -2.1789812      -0.0418443      -0.5814565       0.7357619      -0.3391416  \nORIGIN_HEX7544  ORIGIN_HEX7545  ORIGIN_HEX7546  ORIGIN_HEX7547  ORIGIN_HEX7553  \n    -1.0160937      -1.1042930       0.3036434       0.9440293      -3.0839792  \nORIGIN_HEX7555  ORIGIN_HEX7556  ORIGIN_HEX7590  ORIGIN_HEX7591  ORIGIN_HEX7592  \n    -0.7118935      -1.1484405       0.2436595      -0.9801617      -0.1716781  \nORIGIN_HEX7594  ORIGIN_HEX7595  ORIGIN_HEX7603  ORIGIN_HEX7604  ORIGIN_HEX7637  \n     1.6369806      -0.5014807      -1.8315909      -0.3364917      -0.5751817  \nORIGIN_HEX7638  ORIGIN_HEX7639  ORIGIN_HEX7641  ORIGIN_HEX7647  ORIGIN_HEX7650  \n    -2.1744693       0.8624360      -0.3904032       0.6185768       0.5986575  \nORIGIN_HEX7684  ORIGIN_HEX7685  ORIGIN_HEX7686  ORIGIN_HEX7687  ORIGIN_HEX7694  \n     0.3384768       0.1223162       1.8118271       0.7937513       1.8203753  \n ORIGIN_HEX770   ORIGIN_HEX771   ORIGIN_HEX773  ORIGIN_HEX7731  ORIGIN_HEX7732  \n     2.5744564       0.4297754       2.1235174       0.5895371      -0.5695290  \nORIGIN_HEX7733  ORIGIN_HEX7734  ORIGIN_HEX7735  ORIGIN_HEX7740   ORIGIN_HEX775  \n    -0.1757594       0.4777320       1.1861447       0.1303685       0.8440643  \n ORIGIN_HEX777  ORIGIN_HEX7778  ORIGIN_HEX7779   ORIGIN_HEX778  ORIGIN_HEX7780  \n    -0.1438791       0.2813616      -1.3829254       0.5925656       0.7723722  \nORIGIN_HEX7781  ORIGIN_HEX7787   ORIGIN_HEX779  ORIGIN_HEX7825  ORIGIN_HEX7826  \n     0.5789990      -0.1732477      -1.9699218       0.1088265       0.3600227  \nORIGIN_HEX7828  ORIGIN_HEX7829  ORIGIN_HEX7831  ORIGIN_HEX7833  ORIGIN_HEX7834  \n     0.3550449       0.2699562      -0.9242299      -0.1281991       1.4730067  \nORIGIN_HEX7872  ORIGIN_HEX7873  ORIGIN_HEX7874  ORIGIN_HEX7875  ORIGIN_HEX7876  \n     0.3943419       0.0290616       1.2508086      -0.5050187      -0.0570509  \nORIGIN_HEX7878  ORIGIN_HEX7879  ORIGIN_HEX7881  ORIGIN_HEX7919  ORIGIN_HEX7920  \n     1.0224658      -0.7275769      -2.0538276       0.1423612       0.2099509  \nORIGIN_HEX7921  ORIGIN_HEX7922  ORIGIN_HEX7923  ORIGIN_HEX7925  ORIGIN_HEX7926  \n     3.0587474       0.4010363      -0.1110583       0.4934746       0.3967650  \nORIGIN_HEX7927  ORIGIN_HEX7928  ORIGIN_HEX7967  ORIGIN_HEX7968  ORIGIN_HEX7969  \n     0.6685447       1.9686901      -0.6340767      -1.8617968       0.2175755  \nORIGIN_HEX7970  ORIGIN_HEX7972  ORIGIN_HEX7973  ORIGIN_HEX7974  ORIGIN_HEX7976  \n     0.9638044       1.7428717       1.0323936       0.6489037       1.2470281  \nORIGIN_HEX8013  ORIGIN_HEX8014  ORIGIN_HEX8015  ORIGIN_HEX8016  ORIGIN_HEX8017  \n     0.3112768       0.9741252       0.5503511       0.9573438       1.5075113  \nORIGIN_HEX8018  ORIGIN_HEX8019  ORIGIN_HEX8020  ORIGIN_HEX8021  ORIGIN_HEX8023  \n     0.2112506       0.6845765       0.2351622      -0.3610899       2.0471692  \nORIGIN_HEX8061  ORIGIN_HEX8062  ORIGIN_HEX8063  ORIGIN_HEX8065  ORIGIN_HEX8066  \n    -0.2039199       0.2471151       0.1754444      -0.9698946       0.1556114  \nORIGIN_HEX8067  ORIGIN_HEX8068  ORIGIN_HEX8070  ORIGIN_HEX8071  ORIGIN_HEX8108  \n     0.1330662       0.7154516       0.0284202      -1.3489424      -0.7465329  \nORIGIN_HEX8109  ORIGIN_HEX8110  ORIGIN_HEX8112  ORIGIN_HEX8113  ORIGIN_HEX8114  \n    -0.5625541       0.9318283       1.8703218       0.2115707      -0.3464467  \nORIGIN_HEX8115  ORIGIN_HEX8116  ORIGIN_HEX8117  ORIGIN_HEX8155  ORIGIN_HEX8156  \n    -0.4145094      -1.2766161       0.0904077       0.1272125      -0.3955111  \nORIGIN_HEX8157  ORIGIN_HEX8158  ORIGIN_HEX8160  ORIGIN_HEX8161  ORIGIN_HEX8162  \n     0.3589832      -0.0903616       0.8748815       0.2645436      -0.5755619  \nORIGIN_HEX8163  ORIGIN_HEX8164  ORIGIN_HEX8165   ORIGIN_HEX818   ORIGIN_HEX819  \n    -1.2610592       0.0412427      -0.1608271       1.7950953       0.1866172  \n ORIGIN_HEX820  ORIGIN_HEX8203  ORIGIN_HEX8207  ORIGIN_HEX8208  ORIGIN_HEX8209  \n    -0.7907823       0.5358492       1.6407714      -2.0970838       0.4694480  \nORIGIN_HEX8210  ORIGIN_HEX8211   ORIGIN_HEX823   ORIGIN_HEX824  ORIGIN_HEX8249  \n     0.2954653       0.8778318       1.9544552       1.1969571      -0.6852000  \n ORIGIN_HEX825  ORIGIN_HEX8250  ORIGIN_HEX8252  ORIGIN_HEX8254  ORIGIN_HEX8255  \n    -1.9977078       0.9661028       0.5899937       0.2708787       3.3245845  \nORIGIN_HEX8256  ORIGIN_HEX8258  ORIGIN_HEX8259   ORIGIN_HEX826   ORIGIN_HEX827  \n    -0.4436426      -0.6765412      -0.7890955      -1.2816307       1.7538043  \n ORIGIN_HEX828  ORIGIN_HEX8296  ORIGIN_HEX8297  ORIGIN_HEX8298  ORIGIN_HEX8299  \n     0.6528839       0.3659244       2.1077819       0.5298197       1.1037798  \nORIGIN_HEX8300  ORIGIN_HEX8301  ORIGIN_HEX8302  ORIGIN_HEX8304  ORIGIN_HEX8305  \n     0.4681682       1.4186632      -0.5361136       0.2264550      -1.9545282  \nORIGIN_HEX8344  ORIGIN_HEX8345  ORIGIN_HEX8346  ORIGIN_HEX8347  ORIGIN_HEX8348  \n    -1.2945642       1.5547384      -0.1362174       0.7871452       0.1946161  \nORIGIN_HEX8349  ORIGIN_HEX8351  ORIGIN_HEX8352  ORIGIN_HEX8353  ORIGIN_HEX8389  \n    -0.4136628      -0.7083865      -1.1463836      -0.5345461      -0.2332291  \nORIGIN_HEX8390  ORIGIN_HEX8391  ORIGIN_HEX8392  ORIGIN_HEX8393  ORIGIN_HEX8394  \n    -0.8440541      -0.7923994       0.6396596       1.4640283      -0.1505939  \nORIGIN_HEX8395  ORIGIN_HEX8396  ORIGIN_HEX8398  ORIGIN_HEX8439  ORIGIN_HEX8440  \n    -1.3438321      -0.0375942       2.9797922       0.3656828       1.7187234  \nORIGIN_HEX8441  ORIGIN_HEX8442  ORIGIN_HEX8443  ORIGIN_HEX8444  ORIGIN_HEX8445  \n     2.2811252       0.4628195       0.4993896       0.6393996      -0.2242880  \nORIGIN_HEX8484  ORIGIN_HEX8485  ORIGIN_HEX8486  ORIGIN_HEX8488  ORIGIN_HEX8489  \n    -0.2447957      -1.2749664       0.9593034       0.1172318       1.2514758  \nORIGIN_HEX8490  ORIGIN_HEX8532  ORIGIN_HEX8534  ORIGIN_HEX8535  ORIGIN_HEX8536  \n    -0.4319792       0.9078684      -0.8028268      -0.1850040      -0.0051239  \nORIGIN_HEX8537  ORIGIN_HEX8538  ORIGIN_HEX8539  ORIGIN_HEX8540  ORIGIN_HEX8580  \n     2.0045249       0.6793416       0.5261391       1.0278281       0.5989198  \nORIGIN_HEX8581  ORIGIN_HEX8582  ORIGIN_HEX8583  ORIGIN_HEX8584  ORIGIN_HEX8585  \n    -1.7807932       1.0782828      -0.5060398       0.9477311      -0.2670232  \nORIGIN_HEX8586  ORIGIN_HEX8587  ORIGIN_HEX8628  ORIGIN_HEX8629  ORIGIN_HEX8631  \n    -0.6784271      -0.1061946      -0.0524666       1.2129272       0.6101873  \nORIGIN_HEX8633  ORIGIN_HEX8634   ORIGIN_HEX866   ORIGIN_HEX867  ORIGIN_HEX8674  \n     0.6238527       0.2118418      -0.6247956       0.7454150       1.1058222  \nORIGIN_HEX8675  ORIGIN_HEX8676  ORIGIN_HEX8677  ORIGIN_HEX8679  ORIGIN_HEX8680  \n    -0.4641858       0.8792643       0.3260969       0.4103882       0.7044589  \nORIGIN_HEX8681   ORIGIN_HEX870   ORIGIN_HEX872  ORIGIN_HEX8721  ORIGIN_HEX8722  \n     0.4472865       1.2296474      -0.0509449       0.4840985       2.0582208  \nORIGIN_HEX8723  ORIGIN_HEX8724  ORIGIN_HEX8725  ORIGIN_HEX8726  ORIGIN_HEX8727  \n    -0.9940266       1.3099837       0.6188996       0.3877432       0.6667344  \nORIGIN_HEX8728   ORIGIN_HEX873   ORIGIN_HEX874  ORIGIN_HEX8768  ORIGIN_HEX8769  \n    -0.2560640      -2.2007787      -0.7531591       0.8053722       0.0689228  \nORIGIN_HEX8771  ORIGIN_HEX8772  ORIGIN_HEX8773  ORIGIN_HEX8774  ORIGIN_HEX8775  \n     1.4892570       1.1994358       0.7032103       0.6722999      -1.3199871  \nORIGIN_HEX8815  ORIGIN_HEX8816  ORIGIN_HEX8817  ORIGIN_HEX8818  ORIGIN_HEX8819  \n     1.7016797       1.9392257      -0.5556514       2.0644924       0.4342662  \nORIGIN_HEX8820  ORIGIN_HEX8862  ORIGIN_HEX8864  ORIGIN_HEX8865  ORIGIN_HEX8866  \n    -1.5971351       0.9378360       2.0747333       1.6063922       1.0853750  \nORIGIN_HEX8867  ORIGIN_HEX8868  ORIGIN_HEX8910  ORIGIN_HEX8912  ORIGIN_HEX8914  \n    -1.9890076       1.0701208       1.3715751       1.6519857       0.3095338  \nORIGIN_HEX8915  ORIGIN_HEX8916  ORIGIN_HEX8917  ORIGIN_HEX8959  ORIGIN_HEX8961  \n    -0.6331327      -0.9461086       1.7249325       1.0592643      -1.0034517  \nORIGIN_HEX8962  ORIGIN_HEX8963  ORIGIN_HEX8964  ORIGIN_HEX9007  ORIGIN_HEX9008  \n     1.6357613       0.3893247       1.7743906       0.6607801      -0.0113230  \nORIGIN_HEX9010  ORIGIN_HEX9011  ORIGIN_HEX9055  ORIGIN_HEX9056  ORIGIN_HEX9057  \n     0.7907916       0.9676180      -2.3877952       0.4321227       0.4649450  \nORIGIN_HEX9103  ORIGIN_HEX9105  ORIGIN_HEX9106   ORIGIN_HEX914  ORIGIN_HEX9145  \n     0.5640655      -2.6834770      -0.0640812       0.3433471       1.5253919  \nORIGIN_HEX9150  ORIGIN_HEX9152  ORIGIN_HEX9153   ORIGIN_HEX917   ORIGIN_HEX919  \n     0.1678774       0.7682297       0.2270638       1.2434658       1.0019165  \nORIGIN_HEX9193   ORIGIN_HEX920  ORIGIN_HEX9200  ORIGIN_HEX9240  ORIGIN_HEX9246  \n     1.7043871       0.0199281      -2.2644307       0.5877529       0.4200882  \nORIGIN_HEX9247  ORIGIN_HEX9283  ORIGIN_HEX9289  ORIGIN_HEX9294  ORIGIN_HEX9340  \n    -0.9793704       2.1352132       2.1693668       1.8096022       0.8157563  \nORIGIN_HEX9383  ORIGIN_HEX9384  ORIGIN_HEX9388  ORIGIN_HEX9432  ORIGIN_HEX9471  \n     1.9167501       2.8750572      -0.1122899       1.5531745       0.8443567  \nORIGIN_HEX9480  ORIGIN_HEX9482  ORIGIN_HEX9526  ORIGIN_HEX9527  ORIGIN_HEX9575  \n     1.5792782      -2.0777160       1.0498590       2.7225846       1.6215270  \nORIGIN_HEX9576  ORIGIN_HEX9621  ORIGIN_HEX9622   ORIGIN_HEX965   ORIGIN_HEX966  \n     1.2226052       1.7851558       2.4904400       0.8635904      -1.5589774  \nORIGIN_HEX9668  ORIGIN_HEX9714  ORIGIN_HEX9988  DESTIN_HEX1012  DESTIN_HEX1013  \n     1.7963972       1.9926670       1.4515646      -0.8505448       2.1371957  \nDESTIN_HEX1014  DESTIN_HEX1058  DESTIN_HEX1059  DESTIN_HEX1060  DESTIN_HEX1061  \n     2.4392918       1.5012611       1.3683686       2.2650609       2.1631184  \nDESTIN_HEX1104  DESTIN_HEX1106  DESTIN_HEX1107  DESTIN_HEX1108  DESTIN_HEX1152  \n     2.6346794       5.8528577       3.7084968       2.6742219       3.6403263  \nDESTIN_HEX1153  DESTIN_HEX1154  DESTIN_HEX1199  DESTIN_HEX1200  DESTIN_HEX1201  \n     1.9202933       3.0496575      -0.6714856       3.9742763       3.0623163  \nDESTIN_HEX1202  DESTIN_HEX1244  DESTIN_HEX1245  DESTIN_HEX1246  DESTIN_HEX1247  \n     4.0892365      -1.1092190       2.6761369       0.4088921       0.8885434  \nDESTIN_HEX1291  DESTIN_HEX1292  DESTIN_HEX1293  DESTIN_HEX1295  DESTIN_HEX1338  \n     2.2670924       1.3231346      -0.3313009       1.6270986       2.6081265  \nDESTIN_HEX1339  DESTIN_HEX1340  DESTIN_HEX1341  DESTIN_HEX1385  DESTIN_HEX1386  \n     2.0820137       5.6840145       2.5575008       2.2422450       1.1097647  \nDESTIN_HEX1387  DESTIN_HEX1388  DESTIN_HEX1433  DESTIN_HEX1434  DESTIN_HEX1479  \n     1.7781377       0.9186043       2.2239704       4.1117571       1.1694435  \nDESTIN_HEX1480  DESTIN_HEX1481  DESTIN_HEX1525  DESTIN_HEX1526  DESTIN_HEX1527  \n     2.2331871       2.7996499       2.2672631       0.2517871       3.5428602  \nDESTIN_HEX1528  DESTIN_HEX1529  DESTIN_HEX1573  DESTIN_HEX1574  DESTIN_HEX1575  \n     2.7960569       3.2272057       3.7176463       0.4184977       1.7467598  \nDESTIN_HEX1619  DESTIN_HEX1621  DESTIN_HEX1622  DESTIN_HEX1623  DESTIN_HEX1666  \n     3.1131494       3.1605457       3.8958264       3.6477143       2.6988697  \nDESTIN_HEX1668  DESTIN_HEX1669  DESTIN_HEX1670  DESTIN_HEX1671  DESTIN_HEX1715  \n     1.8457071       1.9700051       2.6745542       1.6469305       1.8761551  \nDESTIN_HEX1717  DESTIN_HEX1718  DESTIN_HEX1761  DESTIN_HEX1762  DESTIN_HEX1763  \n    -0.4833910       3.2929320       3.2947753       1.7415451       0.7001044  \nDESTIN_HEX1764  DESTIN_HEX1765  DESTIN_HEX1768  DESTIN_HEX1808  DESTIN_HEX1809  \n     2.3935899       1.3777789       1.1091613       3.6482941       0.5460866  \nDESTIN_HEX1810  DESTIN_HEX1811  DESTIN_HEX1812  DESTIN_HEX1814  DESTIN_HEX1815  \n    -0.4520442       3.7621203       1.0940024       1.8419021       1.7792863  \nDESTIN_HEX1855  DESTIN_HEX1856  DESTIN_HEX1857  DESTIN_HEX1858  DESTIN_HEX1859  \n     3.1560643       2.5969805       1.5243063       1.8634648       6.3462385  \nDESTIN_HEX1861  DESTIN_HEX1862  DESTIN_HEX1903  DESTIN_HEX1904  DESTIN_HEX1905  \n     3.6805217       5.1668553      -1.7086968       2.4214460       0.0160016  \nDESTIN_HEX1906  DESTIN_HEX1907  DESTIN_HEX1909  DESTIN_HEX1950  DESTIN_HEX1952  \n     2.0474593       2.1928021       4.1260834       0.2775323       0.8076370  \nDESTIN_HEX1953  DESTIN_HEX1955  DESTIN_HEX1956  DESTIN_HEX1957  DESTIN_HEX1996  \n     3.0603038       2.9846139       2.9353131       4.2154533       2.8108959  \nDESTIN_HEX1997  DESTIN_HEX1998  DESTIN_HEX1999  DESTIN_HEX2000  DESTIN_HEX2003  \n     1.8314389       3.5138675       3.0779434       1.7281527       1.5843170  \nDESTIN_HEX2046  DESTIN_HEX2047  DESTIN_HEX2049  DESTIN_HEX2050  DESTIN_HEX2051  \n     0.5264932       2.6424225       5.7052257       4.9117476       4.6341692  \nDESTIN_HEX2090  DESTIN_HEX2092  DESTIN_HEX2093  DESTIN_HEX2094  DESTIN_HEX2095  \n     1.5051300       3.6377414       2.1759788       3.1204667       4.5033304  \nDESTIN_HEX2096  DESTIN_HEX2139  DESTIN_HEX2140  DESTIN_HEX2141  DESTIN_HEX2142  \n     4.6110041       2.0902743       4.0539418       2.0208120       3.7209923  \nDESTIN_HEX2143  DESTIN_HEX2145  DESTIN_HEX2146  DESTIN_HEX2184  DESTIN_HEX2187  \n     5.8303843       1.7195713      -0.2273955       2.5165152       1.5954667  \nDESTIN_HEX2189  DESTIN_HEX2190  DESTIN_HEX2192  DESTIN_HEX2193  DESTIN_HEX2194  \n     4.7225440       5.7782046      -0.5580899       3.0815453       2.4346444  \nDESTIN_HEX2232  DESTIN_HEX2233  DESTIN_HEX2234  DESTIN_HEX2235  DESTIN_HEX2236  \n     0.6365728       2.5990141       1.7612582       3.9733648       3.9478504  \nDESTIN_HEX2237  DESTIN_HEX2238  DESTIN_HEX2239  DESTIN_HEX2241  DESTIN_HEX2242  \n     5.4942062       6.6090900       2.5251457       0.6970399       2.4652999  \nDESTIN_HEX2278  DESTIN_HEX2279  DESTIN_HEX2280  DESTIN_HEX2281  DESTIN_HEX2282  \n     1.7269907       2.3397630       3.2187162       2.7334945       4.0197035  \nDESTIN_HEX2283  DESTIN_HEX2284  DESTIN_HEX2288  DESTIN_HEX2289  DESTIN_HEX2290  \n     6.2451547       5.6169644       3.9902639       1.6425963       1.6610412  \nDESTIN_HEX2326  DESTIN_HEX2327  DESTIN_HEX2328  DESTIN_HEX2329  DESTIN_HEX2330  \n     0.7455280       1.2551075      -1.3980458       2.3484387       3.6718388  \nDESTIN_HEX2331  DESTIN_HEX2332  DESTIN_HEX2337  DESTIN_HEX2340  DESTIN_HEX2341  \n     5.7535628       5.5929228      -0.1140101       3.4279140       2.1518662  \nDESTIN_HEX2342  DESTIN_HEX2372  DESTIN_HEX2376  DESTIN_HEX2377  DESTIN_HEX2378  \n     1.8472709       2.1097791       1.7397776       5.0054638       5.3221033  \nDESTIN_HEX2379  DESTIN_HEX2382  DESTIN_HEX2386  DESTIN_HEX2388  DESTIN_HEX2389  \n     5.2328966       1.6326696       2.4598818       0.7868804       1.5827087  \nDESTIN_HEX2421  DESTIN_HEX2422  DESTIN_HEX2423  DESTIN_HEX2424  DESTIN_HEX2425  \n     2.1930109       3.0010086       3.0551372       1.5856680       4.5188971  \nDESTIN_HEX2426  DESTIN_HEX2434  DESTIN_HEX2436  DESTIN_HEX2437  DESTIN_HEX2466  \n     5.7522201       0.5502191       4.8790878       1.7610266      -0.1265730  \nDESTIN_HEX2470  DESTIN_HEX2471  DESTIN_HEX2472  DESTIN_HEX2473  DESTIN_HEX2476  \n     1.2696263       7.2870447       5.6227636       5.9320106       1.6388347  \nDESTIN_HEX2484  DESTIN_HEX2515  DESTIN_HEX2516  DESTIN_HEX2518  DESTIN_HEX2519  \n     2.3677715       0.8580778       3.0914904      -0.0184782       3.8141356  \nDESTIN_HEX2520  DESTIN_HEX2532  DESTIN_HEX2533  DESTIN_HEX2534  DESTIN_HEX2562  \n     3.7069278       1.0917542       1.3827510       4.0924280       1.7315435  \nDESTIN_HEX2563  DESTIN_HEX2564  DESTIN_HEX2565  DESTIN_HEX2566  DESTIN_HEX2567  \n     2.6706183       2.2063795       1.9994580       4.7826134       2.4466076  \nDESTIN_HEX2570  DESTIN_HEX2579  DESTIN_HEX2580  DESTIN_HEX2609  DESTIN_HEX2611  \n     0.0479511       1.0808116       1.5553260       1.7806606       1.2149006  \nDESTIN_HEX2612  DESTIN_HEX2613  DESTIN_HEX2614  DESTIN_HEX2655  DESTIN_HEX2657  \n     1.8638383       3.8714205       6.2302085       1.8000049       1.2702492  \nDESTIN_HEX2658  DESTIN_HEX2660  DESTIN_HEX2661  DESTIN_HEX2664  DESTIN_HEX2703  \n     1.1181614       5.9262998       3.6476738       1.3369262       1.4752353  \nDESTIN_HEX2705  DESTIN_HEX2706  DESTIN_HEX2707  DESTIN_HEX2708  DESTIN_HEX2712  \n     3.8576512       1.7268255       4.5138135       4.9049747       2.3185339  \nDESTIN_HEX2752  DESTIN_HEX2753  DESTIN_HEX2754  DESTIN_HEX2755  DESTIN_HEX2758  \n     2.0027417       4.1410190       4.3507764       5.5709600       3.3866644  \nDESTIN_HEX2797  DESTIN_HEX2798  DESTIN_HEX2799  DESTIN_HEX2800  DESTIN_HEX2802  \n     2.9108743       1.8736152       1.9571143       3.2710990       5.6892381  \nDESTIN_HEX2806  DESTIN_HEX2843  DESTIN_HEX2844  DESTIN_HEX2845  DESTIN_HEX2846  \n     6.6455658       3.5518093       1.9571366       4.7656261       4.4642589  \nDESTIN_HEX2847  DESTIN_HEX2848  DESTIN_HEX2849  DESTIN_HEX2891  DESTIN_HEX2893  \n     5.3276882       6.5054422       5.0594175       3.1473767       5.4801660  \nDESTIN_HEX2894  DESTIN_HEX2895  DESTIN_HEX2896  DESTIN_HEX2897  DESTIN_HEX2900  \n     5.8507035       2.8584938       2.4181347       4.6806016       3.2661386  \nDESTIN_HEX2937  DESTIN_HEX2939  DESTIN_HEX2940  DESTIN_HEX2941  DESTIN_HEX2942  \n     3.2927781       4.4196330       4.9732297       4.6237441       3.7356881  \nDESTIN_HEX2943  DESTIN_HEX2987  DESTIN_HEX2988  DESTIN_HEX2990  DESTIN_HEX2994  \n     6.0614487       3.6492993       4.3127927       5.0043242       1.6520956  \nDESTIN_HEX3031  DESTIN_HEX3033  DESTIN_HEX3036  DESTIN_HEX3084  DESTIN_HEX3125  \n     1.0411933       4.3694420       2.8598325       5.4254801       1.6280820  \nDESTIN_HEX3129  DESTIN_HEX3130  DESTIN_HEX3135  DESTIN_HEX3172  DESTIN_HEX3173  \n     3.7416931       5.0231574       2.7085321       3.0331996       4.7387123  \nDESTIN_HEX3176  DESTIN_HEX3177  DESTIN_HEX3182  DESTIN_HEX3218  DESTIN_HEX3220  \n     2.2367836       5.2175287       3.3750694       1.2943788       4.3002902  \nDESTIN_HEX3221  DESTIN_HEX3223  DESTIN_HEX3224  DESTIN_HEX3225  DESTIN_HEX3229  \n     4.1418687       4.2473922       5.4189739       2.5454175       6.6584090  \nDESTIN_HEX3238  DESTIN_HEX3266  DESTIN_HEX3268  DESTIN_HEX3269  DESTIN_HEX3270  \n     2.4259143       1.0360282       6.0673405       3.0983625       4.3873313  \nDESTIN_HEX3271  DESTIN_HEX3272  DESTIN_HEX3273  DESTIN_HEX3276  DESTIN_HEX3277  \n     5.1522535       3.0721414       5.5401171       6.2201076       5.8464030  \nDESTIN_HEX3312  DESTIN_HEX3314  DESTIN_HEX3316  DESTIN_HEX3317  DESTIN_HEX3318  \n     1.5932076       3.3332813       3.9986491       4.5852341       5.2067461  \nDESTIN_HEX3319  DESTIN_HEX3320  DESTIN_HEX3322  DESTIN_HEX3323  DESTIN_HEX3325  \n     5.2106669       5.6377708       2.2113234       5.9166170       3.2075450  \nDESTIN_HEX3362  DESTIN_HEX3363  DESTIN_HEX3364  DESTIN_HEX3365  DESTIN_HEX3366  \n     4.7449049       3.5008886       6.1778120       5.2533868       5.1061139  \nDESTIN_HEX3367  DESTIN_HEX3368  DESTIN_HEX3370  DESTIN_HEX3371  DESTIN_HEX3372  \n     5.5726224       4.8590522       6.1304476       4.9233463       4.0128006  \nDESTIN_HEX3406  DESTIN_HEX3408  DESTIN_HEX3409  DESTIN_HEX3410  DESTIN_HEX3411  \n     1.3291448       3.7592698       3.7612866       4.2719119       4.6235778  \nDESTIN_HEX3412  DESTIN_HEX3413  DESTIN_HEX3414  DESTIN_HEX3415  DESTIN_HEX3416  \n     4.7929580       5.5230993       5.0522706       4.4421448       5.4492086  \nDESTIN_HEX3417  DESTIN_HEX3418  DESTIN_HEX3419  DESTIN_HEX3426  DESTIN_HEX3453  \n     5.3593718       7.0801345       6.0628258       4.5706110       2.1760832  \nDESTIN_HEX3456  DESTIN_HEX3457  DESTIN_HEX3458  DESTIN_HEX3459  DESTIN_HEX3460  \n     4.4931925       2.5481347       4.1874025       5.0027552       5.4529767  \nDESTIN_HEX3461  DESTIN_HEX3462  DESTIN_HEX3463  DESTIN_HEX3464  DESTIN_HEX3465  \n     2.5963728       5.5931875       3.0244485       5.8997799       2.6280303  \nDESTIN_HEX3466  DESTIN_HEX3467  DESTIN_HEX3468  DESTIN_HEX3472  DESTIN_HEX3473  \n     4.4265786       4.0440120       5.6405680       2.5732674       4.4888555  \nDESTIN_HEX3499  DESTIN_HEX3502  DESTIN_HEX3503  DESTIN_HEX3504  DESTIN_HEX3505  \n     0.8504898       4.8073611       3.0966264       3.7254052       5.1002590  \nDESTIN_HEX3506  DESTIN_HEX3507  DESTIN_HEX3508  DESTIN_HEX3509  DESTIN_HEX3511  \n     5.3413914       4.2120080       4.9971151       5.2261916       5.0981715  \nDESTIN_HEX3512  DESTIN_HEX3513  DESTIN_HEX3514  DESTIN_HEX3518  DESTIN_HEX3519  \n     3.0860163       5.3937753       6.5521124       2.5948701       2.7805742  \nDESTIN_HEX3547  DESTIN_HEX3549  DESTIN_HEX3551  DESTIN_HEX3552  DESTIN_HEX3554  \n    -0.3186910       2.4912010       3.6471144       3.9198363       2.4920199  \nDESTIN_HEX3555  DESTIN_HEX3556  DESTIN_HEX3557  DESTIN_HEX3558  DESTIN_HEX3559  \n     3.0423808       4.4924639       4.9302827       4.8531525       6.0663742  \nDESTIN_HEX3561  DESTIN_HEX3562  DESTIN_HEX3564  DESTIN_HEX3565  DESTIN_HEX3593  \n     3.4914263       6.7726902       2.4996930       2.4629960       2.9395557  \nDESTIN_HEX3594  DESTIN_HEX3595  DESTIN_HEX3599  DESTIN_HEX3600  DESTIN_HEX3601  \n     2.6038576       2.6530827       4.7842131       3.0549488       6.3187348  \nDESTIN_HEX3602  DESTIN_HEX3603  DESTIN_HEX3604  DESTIN_HEX3605  DESTIN_HEX3607  \n     6.3477291       4.4642152       3.6414291       5.1540808       5.4754205  \nDESTIN_HEX3608  DESTIN_HEX3610  DESTIN_HEX3611  DESTIN_HEX3613  DESTIN_HEX3641  \n     5.4714740       3.4270335       3.0726696       2.5173890       2.1009070  \nDESTIN_HEX3643  DESTIN_HEX3644  DESTIN_HEX3645  DESTIN_HEX3647  DESTIN_HEX3648  \n     3.3606550       5.1863454       2.7237057       4.1272689       4.9436211  \nDESTIN_HEX3649  DESTIN_HEX3652  DESTIN_HEX3653  DESTIN_HEX3654  DESTIN_HEX3655  \n     4.3492584       3.9797823       5.5682226       3.1690991       3.5163188  \nDESTIN_HEX3656  DESTIN_HEX3657  DESTIN_HEX3658  DESTIN_HEX3661  DESTIN_HEX3689  \n     0.6330852       1.5364947       1.0444043       3.2162538       2.6634628  \nDESTIN_HEX3691  DESTIN_HEX3692  DESTIN_HEX3693  DESTIN_HEX3694  DESTIN_HEX3695  \n     2.6402664       1.2202641       4.7473846       5.4053768       5.4628048  \nDESTIN_HEX3699  DESTIN_HEX3700  DESTIN_HEX3701  DESTIN_HEX3702  DESTIN_HEX3703  \n     5.4050751       3.8688708       3.8290944       3.3547819       5.2466202  \nDESTIN_HEX3704  DESTIN_HEX3705  DESTIN_HEX3706  DESTIN_HEX3707  DESTIN_HEX3736  \n     2.9891602       0.9460665       0.0578857       2.5066005       2.8934570  \nDESTIN_HEX3739  DESTIN_HEX3740  DESTIN_HEX3741  DESTIN_HEX3742  DESTIN_HEX3748  \n     2.8881250       2.0471291       3.7299250       5.5984800       2.4433913  \nDESTIN_HEX3750  DESTIN_HEX3751  DESTIN_HEX3753  DESTIN_HEX3754  DESTIN_HEX3782  \n     3.1026302       4.4703180       3.0341829       2.6522092       3.8214659  \nDESTIN_HEX3783  DESTIN_HEX3784  DESTIN_HEX3785  DESTIN_HEX3786  DESTIN_HEX3787  \n     4.0114296       4.5138463       1.9371701       2.8985948       4.5987952  \nDESTIN_HEX3788  DESTIN_HEX3789  DESTIN_HEX3793  DESTIN_HEX3794  DESTIN_HEX3798  \n     5.2886489       5.1020152       5.2157998       5.9259677       0.1583404  \nDESTIN_HEX3829  DESTIN_HEX3830  DESTIN_HEX3831  DESTIN_HEX3832  DESTIN_HEX3836  \n     3.3867914       5.1181521       4.2445034       4.7919732       4.2292680  \nDESTIN_HEX3837  DESTIN_HEX3839  DESTIN_HEX3840  DESTIN_HEX3841  DESTIN_HEX3845  \n     4.7601093       0.1433449       2.0627332       4.7982304       0.0364221  \nDESTIN_HEX3847  DESTIN_HEX3848  DESTIN_HEX3875  DESTIN_HEX3876  DESTIN_HEX3877  \n     7.0657288       3.2542660       4.0664521       5.9022317       4.6630229  \nDESTIN_HEX3878  DESTIN_HEX3879  DESTIN_HEX3881  DESTIN_HEX3882  DESTIN_HEX3884  \n     5.0862069       3.3501164       3.0266768       2.6886721       5.2891588  \nDESTIN_HEX3886  DESTIN_HEX3887  DESTIN_HEX3888  DESTIN_HEX3895  DESTIN_HEX3922  \n     3.5289754       6.9107022       5.4933486       3.8199117       3.4656169  \nDESTIN_HEX3923  DESTIN_HEX3924  DESTIN_HEX3925  DESTIN_HEX3926   DESTIN_HEX393  \n     3.5695248       3.1523056       6.6361272       4.8106437       3.5624007  \nDESTIN_HEX3930  DESTIN_HEX3932  DESTIN_HEX3933  DESTIN_HEX3935  DESTIN_HEX3936  \n     3.0457573       4.9430279       2.8533113       5.2890827       3.3079723  \nDESTIN_HEX3939  DESTIN_HEX3942  DESTIN_HEX3943  DESTIN_HEX3968  DESTIN_HEX3969  \n     3.6700119       3.3166576       2.5978109       3.6812003       4.5536660  \nDESTIN_HEX3971  DESTIN_HEX3972  DESTIN_HEX3975  DESTIN_HEX3976  DESTIN_HEX3978  \n     4.7773310       5.1316176       4.6712527       3.2934845       4.2050211  \nDESTIN_HEX3979  DESTIN_HEX3980  DESTIN_HEX3981  DESTIN_HEX3982  DESTIN_HEX3990  \n     3.1939159       3.7619148       5.0257939       5.4726044       3.3162730  \nDESTIN_HEX4016  DESTIN_HEX4017  DESTIN_HEX4018  DESTIN_HEX4019  DESTIN_HEX4020  \n     3.5523528       3.9163947       2.8054543       3.3345446       5.0494214  \nDESTIN_HEX4023  DESTIN_HEX4024  DESTIN_HEX4025  DESTIN_HEX4026  DESTIN_HEX4028  \n     4.8871422       1.7999735       4.3623205       4.5027365       5.7928480  \nDESTIN_HEX4029  DESTIN_HEX4030  DESTIN_HEX4033  DESTIN_HEX4038  DESTIN_HEX4062  \n     5.0641090       6.2808507       2.0992767       7.7458687       3.5886629  \nDESTIN_HEX4063  DESTIN_HEX4064  DESTIN_HEX4065  DESTIN_HEX4066  DESTIN_HEX4067  \n     3.5466916       4.9083944       5.1104155       3.7449816       3.6618509  \nDESTIN_HEX4070  DESTIN_HEX4071  DESTIN_HEX4073  DESTIN_HEX4074  DESTIN_HEX4075  \n     4.2087113       3.5267278       3.6736114       4.2509606       5.5150730  \nDESTIN_HEX4076  DESTIN_HEX4083  DESTIN_HEX4084  DESTIN_HEX4109  DESTIN_HEX4111  \n     5.7992435       4.1582929       5.6445956       1.2339192       2.6275953  \nDESTIN_HEX4112  DESTIN_HEX4113  DESTIN_HEX4114  DESTIN_HEX4117  DESTIN_HEX4118  \n     4.3094054       3.7687107       3.9774114       4.3418697       4.6279627  \nDESTIN_HEX4122  DESTIN_HEX4123  DESTIN_HEX4124  DESTIN_HEX4127  DESTIN_HEX4130  \n     6.6170239       1.4550848       6.3475777       2.7155857       4.7638164  \nDESTIN_HEX4131  DESTIN_HEX4132  DESTIN_HEX4156  DESTIN_HEX4157  DESTIN_HEX4159  \n     4.3921004       6.5055537       4.1422960       2.9009483       2.2509105  \nDESTIN_HEX4161  DESTIN_HEX4163  DESTIN_HEX4167  DESTIN_HEX4168  DESTIN_HEX4169  \n     1.8967742       5.0996525       3.9764036       5.2646249       5.0038595  \nDESTIN_HEX4176  DESTIN_HEX4177  DESTIN_HEX4178  DESTIN_HEX4179  DESTIN_HEX4203  \n     5.6993612       6.2023502       4.9994467       4.6165423       3.8530836  \nDESTIN_HEX4205  DESTIN_HEX4206  DESTIN_HEX4207  DESTIN_HEX4208  DESTIN_HEX4209  \n     4.1306172       1.6627947       4.6403921       3.4327333       4.7956984  \nDESTIN_HEX4210  DESTIN_HEX4211  DESTIN_HEX4215  DESTIN_HEX4221  DESTIN_HEX4224  \n     2.9432003       4.9352193       5.2230079       3.0007762       4.1090911  \nDESTIN_HEX4225  DESTIN_HEX4226  DESTIN_HEX4227  DESTIN_HEX4250  DESTIN_HEX4251  \n     5.2396903       5.2861194       3.0029012       2.1253209       3.5838053  \nDESTIN_HEX4253  DESTIN_HEX4254  DESTIN_HEX4256  DESTIN_HEX4257  DESTIN_HEX4271  \n     5.0833525       4.5335372       3.8385713       4.5649949       5.2574970  \nDESTIN_HEX4272  DESTIN_HEX4273  DESTIN_HEX4297  DESTIN_HEX4300  DESTIN_HEX4301  \n     5.9513741       1.9841045       2.3425267       3.6205631       3.1162260  \nDESTIN_HEX4302  DESTIN_HEX4304  DESTIN_HEX4315  DESTIN_HEX4318  DESTIN_HEX4319  \n     4.0023888       4.9699495       3.3548780       5.3236295       4.5934911  \nDESTIN_HEX4320  DESTIN_HEX4321  DESTIN_HEX4343  DESTIN_HEX4345  DESTIN_HEX4346  \n     2.6249710       2.6296299       5.3900641       3.4796406       5.0953693  \nDESTIN_HEX4347  DESTIN_HEX4348  DESTIN_HEX4351  DESTIN_HEX4362  DESTIN_HEX4365  \n     2.5241294       3.4539237       5.7321325      -1.0477865       4.8405450  \nDESTIN_HEX4390  DESTIN_HEX4391  DESTIN_HEX4392  DESTIN_HEX4393  DESTIN_HEX4394  \n     4.4429831       1.6426677       4.6952785       2.2352359       5.3593457  \nDESTIN_HEX4395  DESTIN_HEX4398  DESTIN_HEX4409  DESTIN_HEX4412  DESTIN_HEX4413  \n     3.2195550       1.6974704       1.1292650       3.7198391       5.3219002  \nDESTIN_HEX4414  DESTIN_HEX4415  DESTIN_HEX4436  DESTIN_HEX4437  DESTIN_HEX4438  \n     4.0703119       5.8834909       3.1498998       2.4019966       2.4992408  \nDESTIN_HEX4439   DESTIN_HEX444  DESTIN_HEX4440  DESTIN_HEX4441  DESTIN_HEX4442  \n     2.7028829       3.2257074       2.6942045       4.3646092       3.4864769  \nDESTIN_HEX4459  DESTIN_HEX4460  DESTIN_HEX4484  DESTIN_HEX4485  DESTIN_HEX4486  \n     4.7887306       3.3976404       3.9517244       2.1183820       2.8544903  \nDESTIN_HEX4487  DESTIN_HEX4488  DESTIN_HEX4489  DESTIN_HEX4490  DESTIN_HEX4492  \n     2.8360991       4.0895981       2.8851534       3.0076988       4.2349386  \nDESTIN_HEX4502  DESTIN_HEX4506  DESTIN_HEX4507  DESTIN_HEX4508  DESTIN_HEX4509  \n     4.8047837       4.5708939       7.2554601       5.1311731       4.4355578  \nDESTIN_HEX4530  DESTIN_HEX4532  DESTIN_HEX4533  DESTIN_HEX4534  DESTIN_HEX4535  \n     2.8062159       2.4768078       1.9799170       5.5660293       1.8871444  \nDESTIN_HEX4537  DESTIN_HEX4538  DESTIN_HEX4550  DESTIN_HEX4552  DESTIN_HEX4553  \n     2.9990501       4.3546013       0.1483456       1.1924332       4.8963025  \nDESTIN_HEX4554  DESTIN_HEX4556  DESTIN_HEX4577  DESTIN_HEX4579  DESTIN_HEX4580  \n     4.1635568       5.2527269       4.6765968       2.8911528       2.8648536  \nDESTIN_HEX4581  DESTIN_HEX4582  DESTIN_HEX4583  DESTIN_HEX4584  DESTIN_HEX4585  \n     1.4321228       4.5700989       2.6745368       3.2581350       3.0088778  \nDESTIN_HEX4586  DESTIN_HEX4600  DESTIN_HEX4601  DESTIN_HEX4602  DESTIN_HEX4603  \n     3.0535328       4.8253032       4.0804215       5.7189772       3.9266287  \nDESTIN_HEX4624  DESTIN_HEX4626  DESTIN_HEX4627  DESTIN_HEX4628  DESTIN_HEX4629  \n     3.3456040       2.5824083       2.0328752       4.0651793       4.6572454  \nDESTIN_HEX4631  DESTIN_HEX4632  DESTIN_HEX4646  DESTIN_HEX4647  DESTIN_HEX4648  \n     3.9159873       3.7606933       4.2344249       5.1795628       5.6627985  \nDESTIN_HEX4649  DESTIN_HEX4650  DESTIN_HEX4671  DESTIN_HEX4674  DESTIN_HEX4675  \n     4.5948048       3.3713238       3.0286430       2.7069621       2.8589946  \nDESTIN_HEX4676  DESTIN_HEX4679  DESTIN_HEX4692  DESTIN_HEX4694  DESTIN_HEX4695  \n     4.4093753       1.7359751       1.8580941       5.5142280       6.1382635  \nDESTIN_HEX4696  DESTIN_HEX4698  DESTIN_HEX4720  DESTIN_HEX4721  DESTIN_HEX4722  \n     5.6054445       2.7861226       3.5355472       2.9159931       2.7562578  \nDESTIN_HEX4726  DESTIN_HEX4741  DESTIN_HEX4742  DESTIN_HEX4743  DESTIN_HEX4765  \n     4.4480685       6.0958954       4.9658532       6.0100442       4.0614846  \nDESTIN_HEX4766  DESTIN_HEX4768  DESTIN_HEX4769  DESTIN_HEX4770  DESTIN_HEX4786  \n     3.1673716       3.4438003       5.5924075       4.3704385       4.4246679  \nDESTIN_HEX4788  DESTIN_HEX4789  DESTIN_HEX4790  DESTIN_HEX4791  DESTIN_HEX4792  \n     4.8622078       5.4346170       4.1476607       5.0175930       1.6988692  \nDESTIN_HEX4812  DESTIN_HEX4813  DESTIN_HEX4814  DESTIN_HEX4815  DESTIN_HEX4816  \n     2.5887215       4.3915860       4.7333495       4.2951211       4.5375543  \nDESTIN_HEX4817  DESTIN_HEX4835  DESTIN_HEX4836  DESTIN_HEX4837  DESTIN_HEX4838  \n     3.4273796       5.1329357       6.8384654       5.2648272       3.8240646  \nDESTIN_HEX4839  DESTIN_HEX4840  DESTIN_HEX4859  DESTIN_HEX4860  DESTIN_HEX4861  \n    -1.4482746       0.1777183       1.9134828       3.6554718       4.5232734  \nDESTIN_HEX4862  DESTIN_HEX4863  DESTIN_HEX4864  DESTIN_HEX4865  DESTIN_HEX4867  \n     5.2139428       2.6367587       2.9070278       4.2773554       3.7323557  \n DESTIN_HEX488  DESTIN_HEX4880  DESTIN_HEX4883  DESTIN_HEX4884  DESTIN_HEX4885  \n     3.2116287       0.9093578       4.3223012       4.5110175       4.2873712  \nDESTIN_HEX4886  DESTIN_HEX4887   DESTIN_HEX490  DESTIN_HEX4905  DESTIN_HEX4906  \n     3.7802770       3.1587106       4.2454790       2.6217780       4.3303494  \nDESTIN_HEX4908  DESTIN_HEX4909   DESTIN_HEX491  DESTIN_HEX4911  DESTIN_HEX4912  \n     4.2697399       4.5754075       4.0862329       3.7180729       5.0579158  \nDESTIN_HEX4913  DESTIN_HEX4925  DESTIN_HEX4926  DESTIN_HEX4930  DESTIN_HEX4931  \n     3.9837285       2.6294309       1.7462416       5.0602101       4.4849254  \nDESTIN_HEX4932  DESTIN_HEX4933  DESTIN_HEX4953  DESTIN_HEX4954  DESTIN_HEX4955  \n     1.7608285       2.8315484       4.1171731       4.5050846       4.7116515  \nDESTIN_HEX4956  DESTIN_HEX4958  DESTIN_HEX4961  DESTIN_HEX4974  DESTIN_HEX4978  \n     3.4568935       3.1019602       4.5383025       1.9346804       5.9151112  \nDESTIN_HEX4981  DESTIN_HEX4999  DESTIN_HEX5000  DESTIN_HEX5001  DESTIN_HEX5002  \n     4.4172935       4.8702016       5.0772762       4.6158338       4.7384855  \nDESTIN_HEX5003  DESTIN_HEX5006  DESTIN_HEX5007  DESTIN_HEX5019  DESTIN_HEX5025  \n     4.2243833       2.1770189       3.9710054       0.9993800       3.5855311  \nDESTIN_HEX5026  DESTIN_HEX5027  DESTIN_HEX5028  DESTIN_HEX5047  DESTIN_HEX5048  \n     3.5314795       4.4864867       3.5571964       4.2907163       3.9174493  \nDESTIN_HEX5049  DESTIN_HEX5050  DESTIN_HEX5052  DESTIN_HEX5054  DESTIN_HEX5066  \n     3.7103265       4.7449334       3.1905589       3.3772919       1.1100235  \nDESTIN_HEX5072  DESTIN_HEX5073  DESTIN_HEX5075  DESTIN_HEX5093  DESTIN_HEX5094  \n     4.8744414       2.6263438       3.2877822       3.4711772       3.6780351  \nDESTIN_HEX5095  DESTIN_HEX5096  DESTIN_HEX5097  DESTIN_HEX5098  DESTIN_HEX5101  \n     3.2038848       3.3403507       4.3889486       2.1402436       3.5409522  \nDESTIN_HEX5102  DESTIN_HEX5119  DESTIN_HEX5121  DESTIN_HEX5140  DESTIN_HEX5141  \n     3.0009886       5.2486007       4.6023228       4.1750351       3.3558262  \nDESTIN_HEX5142  DESTIN_HEX5143  DESTIN_HEX5144  DESTIN_HEX5148  DESTIN_HEX5149  \n     3.7741308       4.8459715       3.3415995       4.4703940       2.9086200  \nDESTIN_HEX5160  DESTIN_HEX5166  DESTIN_HEX5167  DESTIN_HEX5168  DESTIN_HEX5169  \n     3.3407747       4.6615996       4.0264554       5.9316912       2.2222362  \nDESTIN_HEX5188  DESTIN_HEX5189  DESTIN_HEX5190  DESTIN_HEX5191  DESTIN_HEX5197  \n     4.4024507       4.6142358       4.9704509       3.3200937       1.7243465  \nDESTIN_HEX5205  DESTIN_HEX5206  DESTIN_HEX5212  DESTIN_HEX5213  DESTIN_HEX5214  \n     0.2268384       5.0119853       2.9702295       5.6565205       6.3271920  \nDESTIN_HEX5215  DESTIN_HEX5234  DESTIN_HEX5235  DESTIN_HEX5236  DESTIN_HEX5237  \n     4.6944917       5.5482134       5.1224156       2.6197363       4.2999695  \nDESTIN_HEX5239  DESTIN_HEX5240  DESTIN_HEX5242  DESTIN_HEX5244  DESTIN_HEX5252  \n     1.5371496       3.8227720       3.1177592       1.8815359      -0.1655530  \nDESTIN_HEX5253  DESTIN_HEX5254  DESTIN_HEX5260  DESTIN_HEX5261  DESTIN_HEX5262  \n     5.7063728       4.5343811       4.5921923       6.1319708       2.9288070  \nDESTIN_HEX5280  DESTIN_HEX5281  DESTIN_HEX5282  DESTIN_HEX5283  DESTIN_HEX5284  \n     5.5013373       4.5756858       4.6093138       4.5796923       3.7029449  \nDESTIN_HEX5286  DESTIN_HEX5298  DESTIN_HEX5301  DESTIN_HEX5307  DESTIN_HEX5308  \n     3.2863421       1.6031125       3.5473537       4.5315004       4.5361009  \nDESTIN_HEX5309  DESTIN_HEX5328  DESTIN_HEX5329  DESTIN_HEX5330  DESTIN_HEX5331  \n     4.5235840       3.3576605       5.0082090       4.2296242       4.1412444  \nDESTIN_HEX5333  DESTIN_HEX5336  DESTIN_HEX5339  DESTIN_HEX5349   DESTIN_HEX535  \n     2.3168331       2.7381649       0.5693847       0.7814832       3.5500159  \nDESTIN_HEX5350  DESTIN_HEX5354  DESTIN_HEX5355  DESTIN_HEX5356   DESTIN_HEX537  \n     2.4099450       4.0617592       4.6115617       2.7831502       3.0842998  \nDESTIN_HEX5373  DESTIN_HEX5375  DESTIN_HEX5377  DESTIN_HEX5378  DESTIN_HEX5379  \n     4.7231677       4.1800455       4.1447967       3.5823810       3.9866788  \nDESTIN_HEX5380  DESTIN_HEX5382  DESTIN_HEX5383  DESTIN_HEX5397  DESTIN_HEX5398  \n     3.1587555       4.4697424       2.6821491       1.0039822       5.2511715  \nDESTIN_HEX5399   DESTIN_HEX540  DESTIN_HEX5400  DESTIN_HEX5401  DESTIN_HEX5402  \n     4.6652796       3.8696080       5.3201190       4.2449718       4.0444347  \nDESTIN_HEX5403  DESTIN_HEX5422  DESTIN_HEX5423  DESTIN_HEX5424  DESTIN_HEX5425  \n     1.3605301       2.0365130       3.6337487       5.0280047       5.8632416  \nDESTIN_HEX5426  DESTIN_HEX5428  DESTIN_HEX5429  DESTIN_HEX5430  DESTIN_HEX5433  \n     4.8298098       3.9969918       3.7813201       4.8869986       0.2339262  \nDESTIN_HEX5436  DESTIN_HEX5437  DESTIN_HEX5438  DESTIN_HEX5439  DESTIN_HEX5442  \n     3.5351852       2.7365087       3.7943822       3.9777806       3.6213443  \nDESTIN_HEX5443  DESTIN_HEX5445  DESTIN_HEX5446  DESTIN_HEX5447  DESTIN_HEX5449  \n     2.9255414       3.8488435       6.0808602       4.0392964       5.4271224  \nDESTIN_HEX5450  DESTIN_HEX5469  DESTIN_HEX5470  DESTIN_HEX5471  DESTIN_HEX5472  \n     2.7560809       0.6710608       4.4737801       4.4205705       4.4491820  \nDESTIN_HEX5473  DESTIN_HEX5474  DESTIN_HEX5475  DESTIN_HEX5476  DESTIN_HEX5482  \n     2.7697089       4.3942752       3.5412599       3.1776293       4.4840495  \nDESTIN_HEX5483  DESTIN_HEX5484  DESTIN_HEX5485  DESTIN_HEX5488  DESTIN_HEX5489  \n     2.6368637       4.0542394       3.6883040       2.2549589       1.9174688  \nDESTIN_HEX5490  DESTIN_HEX5492  DESTIN_HEX5493  DESTIN_HEX5495  DESTIN_HEX5496  \n     4.3662603       4.3094829       5.0189203       4.4962086       4.3395913  \nDESTIN_HEX5497  DESTIN_HEX5520  DESTIN_HEX5521  DESTIN_HEX5522  DESTIN_HEX5527  \n     0.7803383       4.1125117       3.9131216       4.5065732       2.7048306  \nDESTIN_HEX5529  DESTIN_HEX5530  DESTIN_HEX5531  DESTIN_HEX5538  DESTIN_HEX5539  \n     4.9010370       3.7915400       3.3603073       6.4466729       4.4167749  \nDESTIN_HEX5540  DESTIN_HEX5541  DESTIN_HEX5542  DESTIN_HEX5543  DESTIN_HEX5544  \n     4.1391120       4.9220615       5.8124199       5.7550427       2.0258213  \nDESTIN_HEX5563  DESTIN_HEX5564  DESTIN_HEX5565  DESTIN_HEX5566  DESTIN_HEX5567  \n     0.8870594       4.1037408       4.4946583       3.5801613       3.3244521  \nDESTIN_HEX5568  DESTIN_HEX5569  DESTIN_HEX5570  DESTIN_HEX5571  DESTIN_HEX5573  \n     4.8880951       2.4231011       4.0333284       3.0900187       1.7435581  \nDESTIN_HEX5575  DESTIN_HEX5577  DESTIN_HEX5578  DESTIN_HEX5579  DESTIN_HEX5584  \n     4.6003949       3.5680500       3.0322073       4.1760335       4.4295378  \nDESTIN_HEX5585  DESTIN_HEX5586  DESTIN_HEX5587  DESTIN_HEX5588  DESTIN_HEX5589  \n     5.6139247       4.4885352       3.7970201       4.1160354       6.3284346  \nDESTIN_HEX5590  DESTIN_HEX5611  DESTIN_HEX5613  DESTIN_HEX5614  DESTIN_HEX5615  \n     2.4325317       4.6645043       3.5191591       3.6833108       4.0893348  \nDESTIN_HEX5617  DESTIN_HEX5621  DESTIN_HEX5622  DESTIN_HEX5623  DESTIN_HEX5624  \n     3.8545950       4.2434248       3.7946144       4.1178584       4.9010123  \nDESTIN_HEX5625  DESTIN_HEX5626  DESTIN_HEX5627  DESTIN_HEX5628  DESTIN_HEX5632  \n     4.7051846       4.3285499       4.5068090       4.7777107       5.2973386  \nDESTIN_HEX5633  DESTIN_HEX5634  DESTIN_HEX5635  DESTIN_HEX5638  DESTIN_HEX5657  \n     5.0028646       6.9497705       5.4806241       4.8009699       2.5078023  \nDESTIN_HEX5658  DESTIN_HEX5660  DESTIN_HEX5663  DESTIN_HEX5664  DESTIN_HEX5666  \n     3.8076258       2.9957544       4.6950372       2.7464880       1.2508682  \nDESTIN_HEX5667  DESTIN_HEX5668  DESTIN_HEX5669  DESTIN_HEX5670  DESTIN_HEX5671  \n     2.9324406       2.9047222       4.3098637       3.4492698       4.2609890  \nDESTIN_HEX5672  DESTIN_HEX5673  DESTIN_HEX5674  DESTIN_HEX5675  DESTIN_HEX5678  \n     5.9407661       3.7487218       4.5200322       3.9880176       3.4957107  \nDESTIN_HEX5679  DESTIN_HEX5680  DESTIN_HEX5681  DESTIN_HEX5682  DESTIN_HEX5685  \n     1.9996905       4.1256534       3.5224064       4.3537640       5.9950287  \nDESTIN_HEX5705  DESTIN_HEX5706  DESTIN_HEX5707  DESTIN_HEX5708  DESTIN_HEX5709  \n     3.4563984       4.9908147       4.4409422       3.9411864       4.7406967  \nDESTIN_HEX5711  DESTIN_HEX5713  DESTIN_HEX5714  DESTIN_HEX5715  DESTIN_HEX5716  \n     4.1338363       3.5374645       3.9838761       3.7535942       4.4388047  \nDESTIN_HEX5717  DESTIN_HEX5718  DESTIN_HEX5719  DESTIN_HEX5720  DESTIN_HEX5721  \n     4.2008945       3.2805899       4.5948220       4.9519152       4.6627001  \nDESTIN_HEX5722  DESTIN_HEX5726  DESTIN_HEX5727  DESTIN_HEX5728  DESTIN_HEX5751  \n     2.5855922       5.7788085       3.8860842       3.3962845       3.6239854  \nDESTIN_HEX5752  DESTIN_HEX5753  DESTIN_HEX5754  DESTIN_HEX5755  DESTIN_HEX5757  \n     4.2027405       4.9300853       3.9615902       3.7011320       4.2084051  \nDESTIN_HEX5758  DESTIN_HEX5759  DESTIN_HEX5760  DESTIN_HEX5761  DESTIN_HEX5762  \n     3.6074437       4.0735088       1.9098561       3.2039529       2.8514751  \nDESTIN_HEX5763  DESTIN_HEX5764  DESTIN_HEX5765  DESTIN_HEX5767  DESTIN_HEX5768  \n     3.6894124       3.4144563       3.7359485       5.5416664       3.6107527  \nDESTIN_HEX5772  DESTIN_HEX5773  DESTIN_HEX5774  DESTIN_HEX5775  DESTIN_HEX5776  \n     4.1514887       3.8854986       3.8614705       5.8432923       4.4414008  \nDESTIN_HEX5799  DESTIN_HEX5800  DESTIN_HEX5801  DESTIN_HEX5802  DESTIN_HEX5803  \n     4.3726692       4.1797095       3.1277978       3.7327853       3.7369527  \nDESTIN_HEX5806  DESTIN_HEX5807  DESTIN_HEX5808  DESTIN_HEX5811  DESTIN_HEX5812  \n     4.8032526       5.0218340       3.8089757       3.4104425       3.5020715  \nDESTIN_HEX5813  DESTIN_HEX5814  DESTIN_HEX5815  DESTIN_HEX5816  DESTIN_HEX5820  \n     4.8450122       3.1430905       4.7146904       2.8979588       5.9189857  \nDESTIN_HEX5821  DESTIN_HEX5823   DESTIN_HEX583   DESTIN_HEX584  DESTIN_HEX5846  \n     4.8295167       4.2014810      -0.1726946       3.4399059       3.7504824  \nDESTIN_HEX5847  DESTIN_HEX5848  DESTIN_HEX5849   DESTIN_HEX585  DESTIN_HEX5851  \n     4.9859581       4.0420122       5.2933392       2.4922310       3.1765443  \nDESTIN_HEX5852  DESTIN_HEX5853  DESTIN_HEX5854  DESTIN_HEX5855  DESTIN_HEX5856  \n     4.1569909       3.7035843       4.7200318       4.8301901       2.6055044  \nDESTIN_HEX5858  DESTIN_HEX5859   DESTIN_HEX586  DESTIN_HEX5860  DESTIN_HEX5861  \n     6.0933733       5.0833537       4.6574788       3.8246839       3.9029290  \nDESTIN_HEX5862  DESTIN_HEX5863  DESTIN_HEX5867  DESTIN_HEX5868  DESTIN_HEX5869  \n     3.7304581       2.6002550       6.1257656       5.9382495       2.7649508  \n DESTIN_HEX587  DESTIN_HEX5893  DESTIN_HEX5894  DESTIN_HEX5895  DESTIN_HEX5898  \n     1.6100450       3.6533080       3.7896204       4.6777046       1.9080720  \nDESTIN_HEX5899  DESTIN_HEX5901  DESTIN_HEX5902  DESTIN_HEX5903  DESTIN_HEX5904  \n     3.2718163       4.3172723       4.4122457       5.2963253       3.8054588  \nDESTIN_HEX5905  DESTIN_HEX5906  DESTIN_HEX5907  DESTIN_HEX5908  DESTIN_HEX5909  \n     3.5853623       4.5610496       6.2435560       3.5201135       6.0294018  \nDESTIN_HEX5910  DESTIN_HEX5914  DESTIN_HEX5915  DESTIN_HEX5916  DESTIN_HEX5940  \n     2.2182585       5.0423035       5.1120072       5.4779045       3.8789882  \nDESTIN_HEX5941  DESTIN_HEX5942  DESTIN_HEX5943  DESTIN_HEX5944  DESTIN_HEX5945  \n     2.7858789       3.6015242       4.7732260       5.1507049       3.9424092  \nDESTIN_HEX5946  DESTIN_HEX5947  DESTIN_HEX5948  DESTIN_HEX5949  DESTIN_HEX5950  \n     3.1769543       4.3403475       6.2053437       4.6085433       4.6711992  \nDESTIN_HEX5951  DESTIN_HEX5954  DESTIN_HEX5955  DESTIN_HEX5956  DESTIN_HEX5957  \n     5.9613019       5.0081509       2.3883999       2.0489199       3.1850547  \nDESTIN_HEX5961  DESTIN_HEX5962  DESTIN_HEX5963  DESTIN_HEX5987  DESTIN_HEX5988  \n     4.9167809       4.7290437       2.2962046      -0.5244097       4.0529019  \nDESTIN_HEX5989  DESTIN_HEX5990  DESTIN_HEX5991  DESTIN_HEX5993  DESTIN_HEX5995  \n     2.7637617       4.3926937       4.3678076       4.9111816       3.5802058  \nDESTIN_HEX5996  DESTIN_HEX5997  DESTIN_HEX5998  DESTIN_HEX5999  DESTIN_HEX6000  \n     3.9276938       4.0530534       3.6740503       3.9942595       4.4647946  \nDESTIN_HEX6001  DESTIN_HEX6002  DESTIN_HEX6009  DESTIN_HEX6010  DESTIN_HEX6034  \n     5.6514069       4.0378331       4.0328662       4.5680956       3.1349672  \nDESTIN_HEX6035  DESTIN_HEX6036  DESTIN_HEX6037  DESTIN_HEX6038  DESTIN_HEX6039  \n     3.7384972       4.0140936       3.8497783       4.7842413       4.6037142  \nDESTIN_HEX6040  DESTIN_HEX6041  DESTIN_HEX6042  DESTIN_HEX6043  DESTIN_HEX6044  \n     4.0347390       5.0355483       4.1684139       5.2644005       3.9054808  \nDESTIN_HEX6045  DESTIN_HEX6046  DESTIN_HEX6047  DESTIN_HEX6048  DESTIN_HEX6051  \n     2.7608011       2.1774068       4.5695672       5.0273101       3.3148630  \nDESTIN_HEX6056  DESTIN_HEX6082  DESTIN_HEX6083  DESTIN_HEX6084  DESTIN_HEX6085  \n     4.8317461       3.1242450       3.3901963       3.5890589       5.0004738  \nDESTIN_HEX6086  DESTIN_HEX6088  DESTIN_HEX6089  DESTIN_HEX6090  DESTIN_HEX6091  \n     5.0162004       5.1260039       4.1307539       5.1970224       4.8832949  \nDESTIN_HEX6092  DESTIN_HEX6093  DESTIN_HEX6094  DESTIN_HEX6095  DESTIN_HEX6096  \n     5.8783047       3.0773466       5.6186149       5.3605737       5.3798034  \nDESTIN_HEX6128  DESTIN_HEX6130  DESTIN_HEX6131  DESTIN_HEX6132  DESTIN_HEX6133  \n     1.6269948       3.1875608       4.4004321       4.1662241       5.1067512  \nDESTIN_HEX6134  DESTIN_HEX6135  DESTIN_HEX6136  DESTIN_HEX6137  DESTIN_HEX6140  \n     3.9181598       5.1676624       5.3567888       4.8945635       3.6468932  \nDESTIN_HEX6141  DESTIN_HEX6142  DESTIN_HEX6145  DESTIN_HEX6150  DESTIN_HEX6174  \n     5.6340206       4.9165875       4.4423338       3.2924876       3.6961401  \nDESTIN_HEX6175  DESTIN_HEX6176  DESTIN_HEX6177  DESTIN_HEX6178  DESTIN_HEX6179  \n    -0.3883758       3.8182820       2.5848456       4.4189528       3.6843381  \nDESTIN_HEX6180  DESTIN_HEX6181  DESTIN_HEX6183  DESTIN_HEX6184  DESTIN_HEX6185  \n     3.2324151       4.1289390       4.8330789       6.1506253       3.7650882  \nDESTIN_HEX6186  DESTIN_HEX6188  DESTIN_HEX6189  DESTIN_HEX6192  DESTIN_HEX6195  \n     1.0178855       3.6926315       5.0392979       3.1496564       0.3797486  \nDESTIN_HEX6222  DESTIN_HEX6223  DESTIN_HEX6224  DESTIN_HEX6226  DESTIN_HEX6227  \n    -0.6590108       4.5621556       3.5031153       4.6637302       4.2079756  \nDESTIN_HEX6228  DESTIN_HEX6229  DESTIN_HEX6230  DESTIN_HEX6231  DESTIN_HEX6232  \n     4.6585405       4.3604463       4.9287869       5.1225133       0.7940821  \nDESTIN_HEX6233  DESTIN_HEX6234  DESTIN_HEX6235  DESTIN_HEX6237  DESTIN_HEX6239  \n     3.6102099       2.9483460       4.1195504       1.6056854       3.6393690  \nDESTIN_HEX6241  DESTIN_HEX6242  DESTIN_HEX6272  DESTIN_HEX6273  DESTIN_HEX6274  \n     2.0868903       0.3240889       3.5717754       4.4739095       4.7650499  \nDESTIN_HEX6275  DESTIN_HEX6276  DESTIN_HEX6278  DESTIN_HEX6279  DESTIN_HEX6280  \n     3.9288659       5.8126471       5.6794483       2.7782532       2.9598601  \nDESTIN_HEX6281  DESTIN_HEX6283  DESTIN_HEX6284  DESTIN_HEX6286  DESTIN_HEX6289  \n     3.7203909       2.7906850       3.1280743       2.7992922       1.4764234  \nDESTIN_HEX6290   DESTIN_HEX630  DESTIN_HEX6315  DESTIN_HEX6316   DESTIN_HEX632  \n     2.2307170       2.6519748       3.7433661       1.9806640       6.1710473  \nDESTIN_HEX6320  DESTIN_HEX6321  DESTIN_HEX6322  DESTIN_HEX6323  DESTIN_HEX6324  \n     4.3716312       4.3298702       5.0347321       4.9849007       1.9660676  \nDESTIN_HEX6326  DESTIN_HEX6327  DESTIN_HEX6328   DESTIN_HEX633  DESTIN_HEX6330  \n     2.9604093       2.9331220       3.9884079       2.4147355       3.5119978  \nDESTIN_HEX6331  DESTIN_HEX6337   DESTIN_HEX635  DESTIN_HEX6364  DESTIN_HEX6368  \n     3.7032036       1.2490355       5.4975591       3.1481818       3.0966706  \nDESTIN_HEX6369  DESTIN_HEX6370  DESTIN_HEX6371  DESTIN_HEX6372  DESTIN_HEX6373  \n     2.7727966       4.5695769       4.7463924       4.5905580       2.7630652  \nDESTIN_HEX6374  DESTIN_HEX6375  DESTIN_HEX6376  DESTIN_HEX6377  DESTIN_HEX6378  \n     3.0274536       3.9317635       5.3493610       3.3223592       3.5748536  \nDESTIN_HEX6380  DESTIN_HEX6382  DESTIN_HEX6385  DESTIN_HEX6413  DESTIN_HEX6415  \n     3.4742250       1.4561156       1.9850694       4.4828658       3.4513382  \nDESTIN_HEX6416  DESTIN_HEX6417  DESTIN_HEX6418  DESTIN_HEX6420  DESTIN_HEX6421  \n     2.8432366       4.4987779       5.5418511       3.3893213       3.7683763  \nDESTIN_HEX6422  DESTIN_HEX6423  DESTIN_HEX6424  DESTIN_HEX6425  DESTIN_HEX6427  \n     3.4169079       1.2444095       1.7031749       3.4524874       3.2769159  \nDESTIN_HEX6429  DESTIN_HEX6458  DESTIN_HEX6463  DESTIN_HEX6464  DESTIN_HEX6465  \n     1.6672228       2.4578392       5.1139413       5.0888224       4.2440943  \nDESTIN_HEX6466  DESTIN_HEX6467  DESTIN_HEX6468  DESTIN_HEX6469  DESTIN_HEX6470  \n     4.6564616       3.3228095       3.8051986       4.6073903       3.2852103  \nDESTIN_HEX6471  DESTIN_HEX6472  DESTIN_HEX6474  DESTIN_HEX6475  DESTIN_HEX6476  \n     5.2129570       3.2164119       5.6165826       3.6783255       5.2595228  \nDESTIN_HEX6477  DESTIN_HEX6507  DESTIN_HEX6509  DESTIN_HEX6510  DESTIN_HEX6511  \n     2.9948860       4.4952586       5.0633485       2.7731165       4.6020386  \nDESTIN_HEX6513  DESTIN_HEX6514  DESTIN_HEX6515  DESTIN_HEX6516  DESTIN_HEX6517  \n     5.4377767       4.1341526       6.2180162       4.6303022       4.4362467  \nDESTIN_HEX6518  DESTIN_HEX6519  DESTIN_HEX6520  DESTIN_HEX6521  DESTIN_HEX6522  \n     6.0186174       3.2391255       5.0966941       5.2315314       3.6080436  \nDESTIN_HEX6523  DESTIN_HEX6524  DESTIN_HEX6555  DESTIN_HEX6556  DESTIN_HEX6557  \n     1.6593955       2.4556758       5.1419202       3.5398731       3.9032010  \nDESTIN_HEX6558  DESTIN_HEX6559  DESTIN_HEX6561  DESTIN_HEX6562  DESTIN_HEX6563  \n     2.9628851       3.4981703       3.0474097       5.0237816       3.6868384  \nDESTIN_HEX6564  DESTIN_HEX6565  DESTIN_HEX6566  DESTIN_HEX6568  DESTIN_HEX6569  \n     4.3162272       5.2027103       3.6517222       5.1548757       4.6909751  \nDESTIN_HEX6570  DESTIN_HEX6571  DESTIN_HEX6601  DESTIN_HEX6603  DESTIN_HEX6605  \n     5.7442625       1.8184377       2.6279200       4.6845937       2.7144583  \nDESTIN_HEX6606  DESTIN_HEX6607  DESTIN_HEX6608  DESTIN_HEX6609  DESTIN_HEX6610  \n     3.7950082       3.6169424       3.2903615       4.0812339       3.2159316  \nDESTIN_HEX6611  DESTIN_HEX6612  DESTIN_HEX6613  DESTIN_HEX6614  DESTIN_HEX6615  \n     3.9281707       5.1544550       4.0705484       2.2478998       5.6165781  \nDESTIN_HEX6616  DESTIN_HEX6649  DESTIN_HEX6650  DESTIN_HEX6651  DESTIN_HEX6652  \n     5.5125053      -0.0519043       4.2027869       4.7365735       1.5081372  \nDESTIN_HEX6653  DESTIN_HEX6654  DESTIN_HEX6655  DESTIN_HEX6656  DESTIN_HEX6657  \n     3.4897017       5.5492789       4.4310917       2.1512904       4.7461574  \nDESTIN_HEX6659  DESTIN_HEX6660  DESTIN_HEX6661  DESTIN_HEX6663  DESTIN_HEX6695  \n     4.5387998       5.5188021       4.3784236       5.3266245       2.1644065  \nDESTIN_HEX6696  DESTIN_HEX6697  DESTIN_HEX6698  DESTIN_HEX6699  DESTIN_HEX6700  \n     1.1065215       5.1842247       4.2715546       2.3976601       4.0528618  \nDESTIN_HEX6702  DESTIN_HEX6703  DESTIN_HEX6706  DESTIN_HEX6707  DESTIN_HEX6708  \n     3.6598983       4.8272082       4.7508875       5.3725730       6.0163648  \nDESTIN_HEX6709  DESTIN_HEX6744  DESTIN_HEX6745  DESTIN_HEX6746  DESTIN_HEX6747  \n     5.0292209       3.4473233       5.4952437       4.4300439       3.7559614  \nDESTIN_HEX6749  DESTIN_HEX6750  DESTIN_HEX6751  DESTIN_HEX6753  DESTIN_HEX6754  \n     3.5975030       3.6303793       3.7844756       5.0203667       5.5136709  \nDESTIN_HEX6755  DESTIN_HEX6757   DESTIN_HEX678  DESTIN_HEX6789   DESTIN_HEX679  \n     5.2300698       5.4875353       0.7446376       4.0062034       2.1495080  \nDESTIN_HEX6790  DESTIN_HEX6791  DESTIN_HEX6792  DESTIN_HEX6793  DESTIN_HEX6794  \n     4.8526455       4.7802075       3.4750828       4.0340393       3.5596101  \nDESTIN_HEX6796  DESTIN_HEX6797  DESTIN_HEX6798   DESTIN_HEX680  DESTIN_HEX6800  \n     3.2889134       4.8486425       3.4668225      -0.4304163       5.4654543  \nDESTIN_HEX6801  DESTIN_HEX6802   DESTIN_HEX681   DESTIN_HEX682  DESTIN_HEX6837  \n     5.0838959       5.3236800       1.1962535       2.9789649       4.2170880  \nDESTIN_HEX6838  DESTIN_HEX6839  DESTIN_HEX6841  DESTIN_HEX6843  DESTIN_HEX6846  \n     4.8303756       4.9534915       4.7503775       3.2242804       5.6530210  \nDESTIN_HEX6847  DESTIN_HEX6848  DESTIN_HEX6850  DESTIN_HEX6851  DESTIN_HEX6885  \n     4.4946591       4.2829482       5.0956348       4.9204512       4.5711500  \nDESTIN_HEX6886  DESTIN_HEX6887  DESTIN_HEX6888  DESTIN_HEX6889  DESTIN_HEX6891  \n     4.4675034       4.2054458       3.9316895       3.6461931       5.6010384  \nDESTIN_HEX6892  DESTIN_HEX6893  DESTIN_HEX6894  DESTIN_HEX6895  DESTIN_HEX6896  \n     4.0542397       5.4737967       4.9568566       5.4466658       2.6526970  \nDESTIN_HEX6897  DESTIN_HEX6898  DESTIN_HEX6931  DESTIN_HEX6932  DESTIN_HEX6933  \n     6.1395477       3.2906014       4.1566528       5.3097992       3.2339284  \nDESTIN_HEX6934  DESTIN_HEX6935  DESTIN_HEX6936  DESTIN_HEX6938  DESTIN_HEX6939  \n     2.4502664       3.9045538       4.5423044       1.7971732       5.1454490  \nDESTIN_HEX6940  DESTIN_HEX6941  DESTIN_HEX6942  DESTIN_HEX6943  DESTIN_HEX6944  \n     4.1547641       4.2927073       4.8564606       4.1403322       4.0565576  \nDESTIN_HEX6945  DESTIN_HEX6946  DESTIN_HEX6979  DESTIN_HEX6980  DESTIN_HEX6981  \n     4.3289787       6.2667108       3.8621892       5.8457302       3.9404791  \nDESTIN_HEX6982  DESTIN_HEX6984  DESTIN_HEX6985  DESTIN_HEX6986  DESTIN_HEX6987  \n     1.1694082       2.0574821       5.2376739       4.4392902       5.3892707  \nDESTIN_HEX6988  DESTIN_HEX6989  DESTIN_HEX6990  DESTIN_HEX6991  DESTIN_HEX6992  \n     6.1537051       5.2130858       3.9010530       5.2655812       5.4822639  \nDESTIN_HEX7025  DESTIN_HEX7026  DESTIN_HEX7027  DESTIN_HEX7029  DESTIN_HEX7030  \n     3.8994194       4.1965528       4.7699923       4.2299180       2.9474758  \nDESTIN_HEX7031  DESTIN_HEX7033  DESTIN_HEX7034  DESTIN_HEX7035  DESTIN_HEX7036  \n     1.9032327       3.7545679       4.7336382       3.9458944       4.4696814  \nDESTIN_HEX7037  DESTIN_HEX7038  DESTIN_HEX7039  DESTIN_HEX7040  DESTIN_HEX7072  \n     5.9127520       4.7673751       4.9013429       6.6669622       3.8780893  \nDESTIN_HEX7073  DESTIN_HEX7074  DESTIN_HEX7075  DESTIN_HEX7076  DESTIN_HEX7077  \n     4.1405218       4.6990776       2.4469074       2.4253693       2.9267841  \nDESTIN_HEX7081  DESTIN_HEX7082  DESTIN_HEX7083  DESTIN_HEX7084  DESTIN_HEX7085  \n     4.9274433       3.3512857       4.1930610       4.9834311       6.2565326  \nDESTIN_HEX7086  DESTIN_HEX7087  DESTIN_HEX7119  DESTIN_HEX7120  DESTIN_HEX7123  \n     5.0338928       5.6557054       4.3095429       4.1430013       2.0329324  \nDESTIN_HEX7124  DESTIN_HEX7125  DESTIN_HEX7128  DESTIN_HEX7129  DESTIN_HEX7130  \n     3.7331848       3.0374903       2.0524348       4.6966302       4.5664136  \nDESTIN_HEX7131  DESTIN_HEX7132  DESTIN_HEX7133  DESTIN_HEX7134  DESTIN_HEX7135  \n     5.0908935       4.9412602       3.5070585       5.7066947       6.0019797  \nDESTIN_HEX7166  DESTIN_HEX7167  DESTIN_HEX7168  DESTIN_HEX7169  DESTIN_HEX7170  \n     4.2694538       4.5622013       4.0240992       1.9569061       4.3132345  \nDESTIN_HEX7172  DESTIN_HEX7173  DESTIN_HEX7175  DESTIN_HEX7176  DESTIN_HEX7177  \n     1.9492433       2.8321706       4.3149980       5.0991395       4.8277320  \nDESTIN_HEX7178  DESTIN_HEX7179  DESTIN_HEX7181  DESTIN_HEX7182  DESTIN_HEX7213  \n     5.3843179       4.9896455       4.2016947       3.8977871       4.7505233  \nDESTIN_HEX7214  DESTIN_HEX7215  DESTIN_HEX7217  DESTIN_HEX7218  DESTIN_HEX7222  \n     4.1715351       4.2906737       4.9338098       3.4906329       1.9501310  \nDESTIN_HEX7223  DESTIN_HEX7224  DESTIN_HEX7225  DESTIN_HEX7226  DESTIN_HEX7227  \n     4.2948697       5.7692118       3.8144488       5.0842218       5.6496036  \nDESTIN_HEX7228  DESTIN_HEX7229   DESTIN_HEX723  DESTIN_HEX7230   DESTIN_HEX725  \n     6.2776609       4.1052063       6.2006158       5.3748515       2.7347412  \n DESTIN_HEX726  DESTIN_HEX7260  DESTIN_HEX7261  DESTIN_HEX7262  DESTIN_HEX7264  \n     2.2373158       4.6721777       4.1375519       4.9575663       4.8332085  \nDESTIN_HEX7265   DESTIN_HEX727  DESTIN_HEX7271  DESTIN_HEX7272  DESTIN_HEX7273  \n     3.4757049       3.1530280       5.6035783       5.3450187       5.3836914  \nDESTIN_HEX7274  DESTIN_HEX7275  DESTIN_HEX7277   DESTIN_HEX728  DESTIN_HEX7307  \n     4.7822189       5.1692017       6.8253339       1.2324378       5.7371945  \nDESTIN_HEX7308  DESTIN_HEX7309   DESTIN_HEX731  DESTIN_HEX7310  DESTIN_HEX7311  \n     4.6150275       4.0577996       1.7728141       5.3694664       4.6499846  \nDESTIN_HEX7312  DESTIN_HEX7316  DESTIN_HEX7319  DESTIN_HEX7320  DESTIN_HEX7321  \n     3.1355073       1.0123688       3.7074446       4.7886384       7.0975901  \nDESTIN_HEX7322  DESTIN_HEX7323  DESTIN_HEX7324  DESTIN_HEX7354  DESTIN_HEX7355  \n     4.6473424       4.2204204       3.3641779       4.1245615       4.4317381  \nDESTIN_HEX7356  DESTIN_HEX7358  DESTIN_HEX7359  DESTIN_HEX7363  DESTIN_HEX7366  \n     3.6847680       4.4089157       2.8001994       2.2554042       5.2861522  \nDESTIN_HEX7367  DESTIN_HEX7368  DESTIN_HEX7369  DESTIN_HEX7371  DESTIN_HEX7402  \n     5.2223265       4.5848707       3.6027473       3.3592973       3.9626289  \nDESTIN_HEX7403  DESTIN_HEX7404  DESTIN_HEX7406  DESTIN_HEX7411  DESTIN_HEX7414  \n     3.8046733       3.2296518       5.1020842       2.2201491       6.3537756  \nDESTIN_HEX7415  DESTIN_HEX7416  DESTIN_HEX7418  DESTIN_HEX7448  DESTIN_HEX7449  \n     4.3360997       4.9874400      -0.8789174       5.0043342       4.5237854  \nDESTIN_HEX7450  DESTIN_HEX7451  DESTIN_HEX7452  DESTIN_HEX7453  DESTIN_HEX7458  \n     4.6092150       3.1228620       5.6771659       2.2126709       1.7819767  \nDESTIN_HEX7461  DESTIN_HEX7462  DESTIN_HEX7463  DESTIN_HEX7465  DESTIN_HEX7496  \n     5.1286360       5.4982882       6.5429782       5.7042095       4.4973166  \nDESTIN_HEX7498  DESTIN_HEX7499  DESTIN_HEX7500  DESTIN_HEX7501  DESTIN_HEX7506  \n     5.0293399       5.7397585       4.5204823       2.5248145       0.7720127  \nDESTIN_HEX7509  DESTIN_HEX7510  DESTIN_HEX7542  DESTIN_HEX7543  DESTIN_HEX7544  \n     5.8705979       5.0297556       5.2117557       3.6556406       2.7436799  \nDESTIN_HEX7545  DESTIN_HEX7546  DESTIN_HEX7547  DESTIN_HEX7553  DESTIN_HEX7555  \n     2.6555995       5.0216190       4.3726109      -0.4811079       4.6200182  \nDESTIN_HEX7556  DESTIN_HEX7590  DESTIN_HEX7591  DESTIN_HEX7592  DESTIN_HEX7594  \n     4.9123406       3.6236083       0.7862709       3.5258518       4.9335155  \nDESTIN_HEX7595  DESTIN_HEX7603  DESTIN_HEX7604  DESTIN_HEX7637  DESTIN_HEX7638  \n     1.1633482       4.0988377       6.5173820       3.2173280       1.4397094  \nDESTIN_HEX7639  DESTIN_HEX7641  DESTIN_HEX7647  DESTIN_HEX7650  DESTIN_HEX7684  \n     4.5171352       3.9344548       1.4229551       6.7514197       3.9646938  \nDESTIN_HEX7685  DESTIN_HEX7686  DESTIN_HEX7687  DESTIN_HEX7694   DESTIN_HEX770  \n     3.3063597       4.6682541       4.7696321       3.2388673       4.3950148  \n DESTIN_HEX771   DESTIN_HEX773  DESTIN_HEX7731  DESTIN_HEX7732  DESTIN_HEX7733  \n    -2.0240968       2.1174978       4.2260314       3.7698016       4.8088388  \nDESTIN_HEX7734  DESTIN_HEX7735  DESTIN_HEX7740   DESTIN_HEX775   DESTIN_HEX777  \n     6.0212505       5.0748560       0.6188303       2.5768988       0.5250493  \nDESTIN_HEX7778  DESTIN_HEX7779   DESTIN_HEX778  DESTIN_HEX7780  DESTIN_HEX7781  \n     4.4395171       2.8243826       2.0121522       4.6114967       5.5120143  \nDESTIN_HEX7787   DESTIN_HEX779  DESTIN_HEX7825  DESTIN_HEX7826  DESTIN_HEX7828  \n     1.8126539       2.6139176       4.1320940       4.7912887       5.7036823  \nDESTIN_HEX7829  DESTIN_HEX7831  DESTIN_HEX7833  DESTIN_HEX7834  DESTIN_HEX7872  \n     4.3897038       3.5886133       1.8031738       1.6830704       4.3214085  \nDESTIN_HEX7873  DESTIN_HEX7874  DESTIN_HEX7875  DESTIN_HEX7876  DESTIN_HEX7878  \n     3.6097653       4.9733419       4.0195505       5.0577933       5.4400737  \nDESTIN_HEX7879  DESTIN_HEX7881  DESTIN_HEX7919  DESTIN_HEX7920  DESTIN_HEX7921  \n     2.7671400       1.9556745       3.9813443       2.5155164       6.4839269  \nDESTIN_HEX7922  DESTIN_HEX7923  DESTIN_HEX7925  DESTIN_HEX7926  DESTIN_HEX7927  \n     5.1600003       4.1305939       4.8637150       3.5788043       4.2755270  \nDESTIN_HEX7928  DESTIN_HEX7967  DESTIN_HEX7968  DESTIN_HEX7969  DESTIN_HEX7970  \n     4.3583621       3.3555775       1.8641089       4.0897224       5.1689938  \nDESTIN_HEX7972  DESTIN_HEX7973  DESTIN_HEX7974  DESTIN_HEX7976  DESTIN_HEX8013  \n     5.2075444       5.5934478       4.1778395       5.0321342       4.6751396  \nDESTIN_HEX8014  DESTIN_HEX8015  DESTIN_HEX8016  DESTIN_HEX8017  DESTIN_HEX8018  \n     4.5718808       4.8370937       5.3063225       4.6549235       3.9451493  \nDESTIN_HEX8019  DESTIN_HEX8020  DESTIN_HEX8021  DESTIN_HEX8023  DESTIN_HEX8061  \n     5.2960864       4.9524372       3.6326160       6.0499924       3.9858101  \nDESTIN_HEX8062  DESTIN_HEX8063  DESTIN_HEX8065  DESTIN_HEX8066  DESTIN_HEX8067  \n     4.0380146       4.4038675       1.7837311       3.8683683       4.5639929  \nDESTIN_HEX8068  DESTIN_HEX8070  DESTIN_HEX8071  DESTIN_HEX8108  DESTIN_HEX8109  \n     5.4172845       4.5070889       3.5486024       3.2108511       4.9975895  \nDESTIN_HEX8110  DESTIN_HEX8112  DESTIN_HEX8113  DESTIN_HEX8114  DESTIN_HEX8115  \n     5.7421041       5.1143545       4.2581858       4.6037762       4.8237608  \nDESTIN_HEX8116  DESTIN_HEX8117  DESTIN_HEX8155  DESTIN_HEX8156  DESTIN_HEX8157  \n     3.8452265       4.6001105       4.5953703       4.2427643       5.3904178  \nDESTIN_HEX8158  DESTIN_HEX8160  DESTIN_HEX8161  DESTIN_HEX8162  DESTIN_HEX8163  \n     4.1308954       4.6818893       3.9275972       4.7119074       4.4006573  \nDESTIN_HEX8164  DESTIN_HEX8165   DESTIN_HEX818   DESTIN_HEX819   DESTIN_HEX820  \n     4.6641112       4.4363987       1.8656390       2.9764237       2.3205573  \nDESTIN_HEX8203  DESTIN_HEX8207  DESTIN_HEX8208  DESTIN_HEX8209  DESTIN_HEX8210  \n     4.9293886       4.8590811       3.2939479       5.2322882       4.9904481  \nDESTIN_HEX8211   DESTIN_HEX823   DESTIN_HEX824  DESTIN_HEX8249   DESTIN_HEX825  \n     5.6209738       2.5979235       2.8299429       3.2532258       0.8908424  \nDESTIN_HEX8250  DESTIN_HEX8252  DESTIN_HEX8254  DESTIN_HEX8255  DESTIN_HEX8256  \n     5.3030375       2.6520588       4.3252224       6.5772710       4.0736099  \nDESTIN_HEX8258  DESTIN_HEX8259   DESTIN_HEX826   DESTIN_HEX827   DESTIN_HEX828  \n     3.9031872       2.7381395       1.1072454       5.7659308       3.4112234  \nDESTIN_HEX8296  DESTIN_HEX8297  DESTIN_HEX8298  DESTIN_HEX8299  DESTIN_HEX8300  \n     4.5002142       5.6996823       4.3168747       2.2005582       3.1287379  \nDESTIN_HEX8301  DESTIN_HEX8302  DESTIN_HEX8304  DESTIN_HEX8305  DESTIN_HEX8344  \n     4.5649444       3.5218366       4.4696695       2.8016742       3.2551980  \nDESTIN_HEX8345  DESTIN_HEX8346  DESTIN_HEX8347  DESTIN_HEX8348  DESTIN_HEX8349  \n     5.0486306       2.4340612       4.6164988       4.5760323       3.3725105  \nDESTIN_HEX8351  DESTIN_HEX8352  DESTIN_HEX8353  DESTIN_HEX8389  DESTIN_HEX8390  \n     3.9581833       3.0978872       2.9627468       3.0667451       2.8165226  \nDESTIN_HEX8391  DESTIN_HEX8392  DESTIN_HEX8393  DESTIN_HEX8394  DESTIN_HEX8395  \n     3.2027231       2.4114231       3.4082406       3.5956040       3.2167791  \nDESTIN_HEX8396  DESTIN_HEX8398  DESTIN_HEX8439  DESTIN_HEX8440  DESTIN_HEX8441  \n     4.5045760       6.2529855       3.3384065       3.8459593       5.3829289  \nDESTIN_HEX8442  DESTIN_HEX8443  DESTIN_HEX8444  DESTIN_HEX8445  DESTIN_HEX8484  \n     4.5631121       4.9210968       5.3239063       4.2582668       3.2635705  \nDESTIN_HEX8485  DESTIN_HEX8486  DESTIN_HEX8488  DESTIN_HEX8489  DESTIN_HEX8490  \n     3.2824026       2.7742633       3.5567135       5.4163101       3.7643182  \nDESTIN_HEX8532  DESTIN_HEX8534  DESTIN_HEX8535  DESTIN_HEX8536  DESTIN_HEX8537  \n     4.8535382       2.3270560       4.1666371       3.6490404       5.3194975  \nDESTIN_HEX8538  DESTIN_HEX8539  DESTIN_HEX8540  DESTIN_HEX8580  DESTIN_HEX8581  \n     5.5753545       5.3538659       5.0333532       3.1170637       1.4417135  \nDESTIN_HEX8582  DESTIN_HEX8583  DESTIN_HEX8584  DESTIN_HEX8585  DESTIN_HEX8586  \n     5.2300376       4.6152005       5.0998674       4.5587344       4.8147781  \nDESTIN_HEX8587  DESTIN_HEX8628  DESTIN_HEX8629  DESTIN_HEX8631  DESTIN_HEX8633  \n     5.1590530       2.4488243       4.5359622       5.5039912       5.1381547  \nDESTIN_HEX8634   DESTIN_HEX866   DESTIN_HEX867  DESTIN_HEX8674  DESTIN_HEX8675  \n     4.7232262       1.1523793       1.9147236       2.6936578       2.1458419  \nDESTIN_HEX8676  DESTIN_HEX8677  DESTIN_HEX8679  DESTIN_HEX8680  DESTIN_HEX8681  \n     3.8056743       5.3944193       4.7971934       5.7952476       5.6493015  \n DESTIN_HEX870   DESTIN_HEX872  DESTIN_HEX8721  DESTIN_HEX8722  DESTIN_HEX8723  \n     2.2510151       5.5453843      -0.9876780       4.7275824       1.7542805  \nDESTIN_HEX8724  DESTIN_HEX8725  DESTIN_HEX8726  DESTIN_HEX8727  DESTIN_HEX8728  \n     4.4162965       5.4663378       4.5595626       4.5375539       3.6377447  \n DESTIN_HEX873   DESTIN_HEX874  DESTIN_HEX8768  DESTIN_HEX8769  DESTIN_HEX8771  \n    -0.4233694       1.1643586       0.2387770       1.8608855       3.3044117  \nDESTIN_HEX8772  DESTIN_HEX8773  DESTIN_HEX8774  DESTIN_HEX8775  DESTIN_HEX8815  \n     5.2801325       4.8018136       3.1516845       2.9217890       2.8607349  \nDESTIN_HEX8816  DESTIN_HEX8817  DESTIN_HEX8818  DESTIN_HEX8819  DESTIN_HEX8820  \n     2.6468505       1.7532837       1.8807388       3.7283580       3.1221765  \nDESTIN_HEX8862  DESTIN_HEX8864  DESTIN_HEX8865  DESTIN_HEX8866  DESTIN_HEX8867  \n     1.8315950       2.7049437       2.1714108       4.5111766       2.5860852  \nDESTIN_HEX8868  DESTIN_HEX8910  DESTIN_HEX8912  DESTIN_HEX8914  DESTIN_HEX8915  \n     3.0390411       2.4753274       1.3142224       3.2723508       3.1053101  \nDESTIN_HEX8916  DESTIN_HEX8917  DESTIN_HEX8959  DESTIN_HEX8961  DESTIN_HEX8962  \n     2.3366815       1.9871027       2.3572699       1.5282740       4.2676011  \nDESTIN_HEX8963  DESTIN_HEX8964  DESTIN_HEX9007  DESTIN_HEX9008  DESTIN_HEX9010  \n     0.6084691       2.1960287       2.9063043       3.5002873       2.4125914  \nDESTIN_HEX9011  DESTIN_HEX9055  DESTIN_HEX9056  DESTIN_HEX9057  DESTIN_HEX9103  \n     1.6887608       2.5328127       1.4404796       2.1471001       4.6113701  \nDESTIN_HEX9105  DESTIN_HEX9106   DESTIN_HEX914  DESTIN_HEX9145  DESTIN_HEX9150  \n     0.2868241       2.3434539       2.6487482       3.1234061       1.8808858  \nDESTIN_HEX9152  DESTIN_HEX9153   DESTIN_HEX917   DESTIN_HEX919  DESTIN_HEX9193  \n     2.7496225       2.4314684       0.7894815       3.2217161       4.5984970  \n DESTIN_HEX920  DESTIN_HEX9200  DESTIN_HEX9240  DESTIN_HEX9246  DESTIN_HEX9247  \n     2.3642959       2.6326960       2.9287739       3.6134821       1.7184615  \nDESTIN_HEX9283  DESTIN_HEX9289  DESTIN_HEX9294  DESTIN_HEX9340  DESTIN_HEX9383  \n     6.0226879       5.7685354       4.9359247       3.7758461       3.7910464  \nDESTIN_HEX9384  DESTIN_HEX9388  DESTIN_HEX9432  DESTIN_HEX9471  DESTIN_HEX9480  \n     5.6492497       3.3584586       2.7532063       4.7627330       2.3945719  \nDESTIN_HEX9482  DESTIN_HEX9526  DESTIN_HEX9527  DESTIN_HEX9575  DESTIN_HEX9576  \n     1.1138212       2.2028286       2.2637589       2.6121430       1.1467685  \nDESTIN_HEX9621  DESTIN_HEX9622   DESTIN_HEX965   DESTIN_HEX966  DESTIN_HEX9668  \n     1.4295567       4.0686291       2.1646485       1.2053448       2.2143921  \nDESTIN_HEX9714  DESTIN_HEX9988       log(dist)  \n     2.4806693       3.4955293      -1.2091797  \n\nDegrees of Freedom: 161670 Total (i.e. Null);  158053 Residual\nNull Deviance:      96290000 \nResidual Deviance: 28500000     AIC: 29290000\n\n\n\nCalcRSquared(dbcSIM$data$WEEKDAY_AFTERNOON_PEAK, dbcSIM$fitted.values)\n\n[1] 0.4406584\n\n\n\nr2_mcfadden(dbcSIM)\n\n# R2 for Generalized Linear Regression\n       R2: 0.698\n  adj. R2: 0.698\n\n\n\n\n11.9Model Comparison\n\nmodel_list &lt;- list(unconstrained=uncSIM,\n                   originConstrained=orcSIM,\n                   destinationConstrained=decSIM,\n                   doublyConstrained=dbcSIM)\n\n\ncompare_performance(model_list,\n                    metrics = \"RMSE\")\n\n# Comparison of Model Performance Indices\n\nName                   | Model |    RMSE\n----------------------------------------\nunconstrained          |   glm | 729.068\noriginConstrained      |   glm | 678.683\ndestinationConstrained |   glm | 696.998\ndoublyConstrained      |   glm | 576.958\n\n\n\n\n11.11Visualizing Fitted\n\ndf &lt;- as.data.frame(uncSIM$fitted.values) %&gt;%\n  round(digits = 0)\n\n\nSIM_data &lt;- SIM_data %&gt;%\n  cbind(df) %&gt;%\n  rename(uncWEEKDAY_AFTERNOON_PEAK = \"uncSIM$fitted.values\")\n\n\ndf &lt;- as.data.frame(orcSIM$fitted.values) %&gt;%\n  round(digits = 0)\n\n\nSIM_data &lt;- SIM_data %&gt;%\n  cbind(df) %&gt;%\n  rename(orcWEEKDAY_AFTERNOON_PEAK = \"orcSIM$fitted.values\")\n\n\ndf &lt;- as.data.frame(decSIM$fitted.values) %&gt;%\n  round(digits = 0)\n\n\nSIM_data &lt;- SIM_data %&gt;%\n  cbind(df) %&gt;%\n  rename(decWEEKDAY_AFTERNOON_PEAK = \"decSIM$fitted.values\")\n\n\ndf &lt;- as.data.frame(dbcSIM$fitted.values) %&gt;%\n  round(digits = 0)\n\n\nSIM_data &lt;- SIM_data %&gt;%\n  cbind(df) %&gt;%\n  rename(dbcWEEKDAY_AFTERNOON_PEAK = \"dbcSIM$fitted.values\")\n\n\nunc_p &lt;- ggplot(data = SIM_data,\n                aes(x = uncWEEKDAY_AFTERNOON_PEAK,\n                    y = WEEKDAY_AFTERNOON_PEAK)) +\n  geom_point() +\n  geom_smooth(method = lm)\n\norc_p &lt;- ggplot(data = SIM_data,\n                aes(x = orcWEEKDAY_AFTERNOON_PEAK,\n                    y = WEEKDAY_AFTERNOON_PEAK)) +\n  geom_point() +\n  geom_smooth(method = lm)\n\ndec_p &lt;- ggplot(data = SIM_data,\n                aes(x = decWEEKDAY_AFTERNOON_PEAK,\n                    y = WEEKDAY_AFTERNOON_PEAK)) +\n  geom_point() +\n  geom_smooth(method = lm)\n\ndbc_p &lt;- ggplot(data = SIM_data,\n                aes(x = dbcWEEKDAY_AFTERNOON_PEAK,\n                    y = WEEKDAY_AFTERNOON_PEAK)) +\n  geom_point() +\n  geom_smooth(method = lm)\n\nggarrange(unc_p, orc_p, dec_p, dbc_p,\n          ncol = 2,\n          nrow = 2)"
  },
  {
    "objectID": "Take-home Ex/Take-home Ex 2/data/geospatial/MPSZ-2019.html",
    "href": "Take-home Ex/Take-home Ex 2/data/geospatial/MPSZ-2019.html",
    "title": "ISSS624",
    "section": "",
    "text": "&lt;!DOCTYPE qgis PUBLIC ‘http://mrcc.com/qgis.dtd’ ‘SYSTEM’&gt;     dataset\n\n\n        0 0     false"
  },
  {
    "objectID": "Take-home Ex/Take-home Ex 2/data/geospatial/FinServ.html",
    "href": "Take-home Ex/Take-home Ex 2/data/geospatial/FinServ.html",
    "title": "ISSS624",
    "section": "",
    "text": "&lt;!DOCTYPE qgis PUBLIC ‘http://mrcc.com/qgis.dtd’ ‘SYSTEM’&gt;     dataset\n\n\n       GEOGCRS[“WGS 84”,ENSEMBLE[“World Geodetic System 1984 ensemble”,MEMBER[“World Geodetic System 1984 (Transit)”],MEMBER[“World Geodetic System 1984 (G730)”],MEMBER[“World Geodetic System 1984 (G873)”],MEMBER[“World Geodetic System 1984 (G1150)”],MEMBER[“World Geodetic System 1984 (G1674)”],MEMBER[“World Geodetic System 1984 (G1762)”],MEMBER[“World Geodetic System 1984 (G2139)”],ELLIPSOID[“WGS 84”,6378137,298.257223563,LENGTHUNIT[“metre”,1]],ENSEMBLEACCURACY[2.0]],PRIMEM[“Greenwich”,0,ANGLEUNIT[“degree”,0.0174532925199433]],CS[ellipsoidal,2],AXIS[“geodetic latitude (Lat)”,north,ORDER[1],ANGLEUNIT[“degree”,0.0174532925199433]],AXIS[“geodetic longitude (Lon)”,east,ORDER[2],ANGLEUNIT[“degree”,0.0174532925199433]],USAGE[SCOPE[“Horizontal component of 3D system.”],AREA[“World.”],BBOX[-90,-180,90,180]],ID[“EPSG”,4326]] +proj=longlat +datum=WGS84 +no_defs 3452 4326 EPSG:4326 WGS 84 longlat EPSG:7030 true"
  },
  {
    "objectID": "Take-home Ex/Take-home Ex 2/data/geospatial/entertn.html",
    "href": "Take-home Ex/Take-home Ex 2/data/geospatial/entertn.html",
    "title": "ISSS624",
    "section": "",
    "text": "&lt;!DOCTYPE qgis PUBLIC ‘http://mrcc.com/qgis.dtd’ ‘SYSTEM’&gt;     dataset\n\n\n       GEOGCRS[“WGS 84”,ENSEMBLE[“World Geodetic System 1984 ensemble”,MEMBER[“World Geodetic System 1984 (Transit)”],MEMBER[“World Geodetic System 1984 (G730)”],MEMBER[“World Geodetic System 1984 (G873)”],MEMBER[“World Geodetic System 1984 (G1150)”],MEMBER[“World Geodetic System 1984 (G1674)”],MEMBER[“World Geodetic System 1984 (G1762)”],MEMBER[“World Geodetic System 1984 (G2139)”],ELLIPSOID[“WGS 84”,6378137,298.257223563,LENGTHUNIT[“metre”,1]],ENSEMBLEACCURACY[2.0]],PRIMEM[“Greenwich”,0,ANGLEUNIT[“degree”,0.0174532925199433]],CS[ellipsoidal,2],AXIS[“geodetic latitude (Lat)”,north,ORDER[1],ANGLEUNIT[“degree”,0.0174532925199433]],AXIS[“geodetic longitude (Lon)”,east,ORDER[2],ANGLEUNIT[“degree”,0.0174532925199433]],USAGE[SCOPE[“Horizontal component of 3D system.”],AREA[“World.”],BBOX[-90,-180,90,180]],ID[“EPSG”,4326]] +proj=longlat +datum=WGS84 +no_defs 3452 4326 EPSG:4326 WGS 84 longlat EPSG:7030 true"
  },
  {
    "objectID": "Take-home Ex/Take-home Ex 1/Take-home_Exercise_1.html",
    "href": "Take-home Ex/Take-home Ex 1/Take-home_Exercise_1.html",
    "title": "Take-home Exercise 1: A Comprehensive Spatial Pattern Analysis of Bus Passenger Trips in Singapore",
    "section": "",
    "text": "In modern cities, digital transformations in transportation and public utilities, including buses, taxis, mass transit, and roads, generate extensive datasets. These datasets can track patterns of movement over time and space, especially with the widespread integration of technologies like GPS and RFID in vehicles. For instance, smart cards and GPS devices on public buses help gather data on routes and ridership. The vast amount of movement data thus collected likely reveals structural patterns and useful insights about the observed phenomena. Analyzing and comparing these patterns can offer deeper understanding of human movements and behaviors within urban environments. Such insights are valuable for enhancing city management and providing key information to both private and public urban transport service providers, aiding them in making informed decisions for a competitive edge.\nHowever, in practical applications, the utilization of this extensive location-aware data is often limited to basic tracking and mapping using GIS (Geographic Information System) tools. This limitation stems mainly from the inadequate capabilities of traditional GIS in effectively analyzing and modeling spatial and spatio-temporal data."
  },
  {
    "objectID": "Take-home Ex/Take-home Ex 1/Take-home_Exercise_1.html#setting-the-scene",
    "href": "Take-home Ex/Take-home Ex 1/Take-home_Exercise_1.html#setting-the-scene",
    "title": "Take-home Exercise 1: A Comprehensive Spatial Pattern Analysis of Bus Passenger Trips in Singapore",
    "section": "",
    "text": "In modern cities, digital transformations in transportation and public utilities, including buses, taxis, mass transit, and roads, generate extensive datasets. These datasets can track patterns of movement over time and space, especially with the widespread integration of technologies like GPS and RFID in vehicles. For instance, smart cards and GPS devices on public buses help gather data on routes and ridership. The vast amount of movement data thus collected likely reveals structural patterns and useful insights about the observed phenomena. Analyzing and comparing these patterns can offer deeper understanding of human movements and behaviors within urban environments. Such insights are valuable for enhancing city management and providing key information to both private and public urban transport service providers, aiding them in making informed decisions for a competitive edge.\nHowever, in practical applications, the utilization of this extensive location-aware data is often limited to basic tracking and mapping using GIS (Geographic Information System) tools. This limitation stems mainly from the inadequate capabilities of traditional GIS in effectively analyzing and modeling spatial and spatio-temporal data."
  },
  {
    "objectID": "Take-home Ex/Take-home Ex 1/Take-home_Exercise_1.html#objectives",
    "href": "Take-home Ex/Take-home Ex 1/Take-home_Exercise_1.html#objectives",
    "title": "Take-home Exercise 1: A Comprehensive Spatial Pattern Analysis of Bus Passenger Trips in Singapore",
    "section": "Objectives",
    "text": "Objectives\n\nApply Exploratory Spatial Data Analysis (ESDA) to uncover spatial and spatio-temporal mobility patterns of public bus passengers in Singapore.\nUtilize Local Indicators of Spatial Association (LISA) and Emerging Hot Spot Analysis (EHSA) for this analysis."
  },
  {
    "objectID": "Take-home Ex/Take-home Ex 1/Take-home_Exercise_1.html#tasks",
    "href": "Take-home Ex/Take-home Ex 1/Take-home_Exercise_1.html#tasks",
    "title": "Take-home Exercise 1: A Comprehensive Spatial Pattern Analysis of Bus Passenger Trips in Singapore",
    "section": "Tasks",
    "text": "Tasks\n\nTask 1: Geovisualisation and Analysis\n\nCompute passenger trips from origin at the hexagon level during different peak hours.\n\n\n\n\nPeak hour period\nBus tap on time\n\n\n\n\nWeekday morning peak\n6am to 9am\n\n\nWeekday afternoon peak\n5pm to 8pm\n\n\nWeekend/holiday morning peak\n11am to 2pm\n\n\nWeekend/holiday evening peak\n4pm to 7pm\n\n\n\n\nUse appropriate geovisualisation methods to display geographical distribution of these trips.\nDescribe spatial patterns observed in the geovisualisations.\n\n\n\nTask 2: Local Indicators of Spatial Association (LISA) Analysis\n\nCalculate LISA for passenger trips by origin at hexagon level.\nDisplay LISA maps for these trips, highlighting only significant results (p-value &lt; 0.05).\nDraw statistical conclusions based on the analysis results.\n\n\n\nTask 3: Emerging Hot Spot Analysis (EHSA)\n\nConduct Mann-Kendall Test using spatio-temporal local Gi* values for passenger trips by origin at the hexagon level for the four time intervals.\nPrepare EHSA maps showing Gi* values of passenger trips by origin at hexagon level, focusing on significant results (p-value &lt; 0.05).\nDescribe spatial patterns revealed in EHSA maps and data visual."
  },
  {
    "objectID": "Take-home Ex/Take-home Ex 1/Take-home_Exercise_1.html#installing-and-loading-the-r-packages",
    "href": "Take-home Ex/Take-home Ex 1/Take-home_Exercise_1.html#installing-and-loading-the-r-packages",
    "title": "Take-home Exercise 1: A Comprehensive Spatial Pattern Analysis of Bus Passenger Trips in Singapore",
    "section": "1.Installing and Loading the R Packages",
    "text": "1.Installing and Loading the R Packages\nIn the opening of our analysis, we begin by loading all the necessary packages to ensure a seamless and comprehensive analysis of spatial patterns in bus passenger trips in Singapore. The R code utilizes the pacman package for efficient package management. With pacman::p_load, we conveniently load a suite of essential packages including:\n\nsf for handling spatial data\ndplyr for data manipulation\nsfdep and spdep for spatial dependencies\nmapview and tmap for interactive mapping\nplotly for creating interactive plots\ntidyverse for an integrated approach to data science\nknitr for dynamic report generation\nggplot2 for sophisticated graphics\nspacetime for handling spatio-temporal data.\n\nThis suite of packages equips us with a robust set of tools necessary to conduct an in-depth and multifaceted analysis.\n\npacman::p_load(sf, dplyr, sfdep, spdep, mapview, tmap, plotly, tidyverse, knitr, ggplot2, spacetime)"
  },
  {
    "objectID": "Take-home Ex/Take-home Ex 1/Take-home_Exercise_1.html#data-importing-and-wrangling",
    "href": "Take-home Ex/Take-home Ex 1/Take-home_Exercise_1.html#data-importing-and-wrangling",
    "title": "Take-home Exercise 1: A Comprehensive Spatial Pattern Analysis of Bus Passenger Trips in Singapore",
    "section": "2.Data Importing and Wrangling",
    "text": "2.Data Importing and Wrangling\n\n2.1Aspatial Data\n\n2.1.1Importing Original Passenger Trips Data\n\nPassenger Volume by Origin Destination Bus Stops from LTA DataMall. In this study, we will focus on the latest data which is collected in Octomber, 2023.\n\nRun the code chunk below to load the corresponding csv.file.\n\n    odbus &lt;- read_csv(\"data/aspatial/origin_destination_bus_202310.csv\")\n\nUsing function glimpse() to grasp the basic structure and information of data odbus.\n\nglimpse(odbus)\n\nRows: 5,694,297\nColumns: 7\n$ YEAR_MONTH          &lt;chr&gt; \"2023-10\", \"2023-10\", \"2023-10\", \"2023-10\", \"2023-…\n$ DAY_TYPE            &lt;chr&gt; \"WEEKENDS/HOLIDAY\", \"WEEKDAY\", \"WEEKENDS/HOLIDAY\",…\n$ TIME_PER_HOUR       &lt;dbl&gt; 16, 16, 14, 14, 17, 17, 17, 7, 14, 14, 10, 20, 20,…\n$ PT_TYPE             &lt;chr&gt; \"BUS\", \"BUS\", \"BUS\", \"BUS\", \"BUS\", \"BUS\", \"BUS\", \"…\n$ ORIGIN_PT_CODE      &lt;chr&gt; \"04168\", \"04168\", \"80119\", \"80119\", \"44069\", \"2028…\n$ DESTINATION_PT_CODE &lt;chr&gt; \"10051\", \"10051\", \"90079\", \"90079\", \"17229\", \"2014…\n$ TOTAL_TRIPS         &lt;dbl&gt; 3, 5, 3, 5, 4, 1, 24, 2, 1, 7, 3, 2, 5, 1, 1, 1, 1…\n\n\nThis code converts two columns ORIGIN_PT_CODE and DESTINATION_PT_CODE, into factors, which are categorical variables in R, facilitating their use in statistical modeling and analysis.\n\nodbus$ORIGIN_PT_CODE &lt;- as.factor(odbus$ORIGIN_PT_CODE)\nodbus$DESTINATION_PT_CODE &lt;- as.factor(odbus$DESTINATION_PT_CODE)\n\nCheck again and notice that both of them are in factor data type now.\n\nglimpse(odbus)\n\nRows: 5,694,297\nColumns: 7\n$ YEAR_MONTH          &lt;chr&gt; \"2023-10\", \"2023-10\", \"2023-10\", \"2023-10\", \"2023-…\n$ DAY_TYPE            &lt;chr&gt; \"WEEKENDS/HOLIDAY\", \"WEEKDAY\", \"WEEKENDS/HOLIDAY\",…\n$ TIME_PER_HOUR       &lt;dbl&gt; 16, 16, 14, 14, 17, 17, 17, 7, 14, 14, 10, 20, 20,…\n$ PT_TYPE             &lt;chr&gt; \"BUS\", \"BUS\", \"BUS\", \"BUS\", \"BUS\", \"BUS\", \"BUS\", \"…\n$ ORIGIN_PT_CODE      &lt;fct&gt; 04168, 04168, 80119, 80119, 44069, 20281, 20281, 1…\n$ DESTINATION_PT_CODE &lt;fct&gt; 10051, 10051, 90079, 90079, 17229, 20141, 20141, 1…\n$ TOTAL_TRIPS         &lt;dbl&gt; 3, 5, 3, 5, 4, 1, 24, 2, 1, 7, 3, 2, 5, 1, 1, 1, 1…\n\n\n\n\n2.2.2Extract Commuting Flow data\nThis code chunk below filters and summarizes the odbus data to calculate the total number of passenger trips during the weekday morning peak hours (6am to 9am). It first filters for entries on weekdays, then narrows down to entries between 6am and 9am. It groups the data by the origin point code, sums up the total trips from each origin, and replaces any missing values (NA) in the resulting trip totals with 0.\n\nweekday_morning_peak &lt;- odbus %&gt;%\n  filter(DAY_TYPE == \"WEEKDAY\") %&gt;%\n  filter(TIME_PER_HOUR &gt;= 6 & TIME_PER_HOUR &lt;= 9) %&gt;%\n  group_by(ORIGIN_PT_CODE) %&gt;%\n  summarise(TRIPS = sum(TOTAL_TRIPS)) %&gt;%\n  mutate(TRIPS = ifelse(is.na(TRIPS), 0, TRIPS))\n\nThis code displays the first few rows (head) of the weekday_morning_peak data frame in a well-formatted table using the kable() function, which is commonly used for creating markdown or HTML tables in R.\n\nkable(head(weekday_morning_peak))\n\n\n\n\nORIGIN_PT_CODE\nTRIPS\n\n\n\n\n01012\n1770\n\n\n01013\n841\n\n\n01019\n1530\n\n\n01029\n2483\n\n\n01039\n2919\n\n\n01059\n1734\n\n\n\n\n\nThis code chunk below filters and summarizes the odbus data to calculate the total number of passenger trips during the weekday afternoon peak hours (5pm to 8pm). It first filters for entries on weekdays, then narrows down to entries between 6am and 9am. It groups the data by the origin point code, sums up the total trips from each origin, and replaces any missing values (NA) in the resulting trip totals with 0.\n\nweekday_afternoon_peak &lt;- odbus %&gt;%\n  filter(DAY_TYPE == \"WEEKDAY\") %&gt;%\n  filter(TIME_PER_HOUR &gt;= 17 & TIME_PER_HOUR &lt;= 20) %&gt;%\n  group_by(ORIGIN_PT_CODE) %&gt;%\n  summarise(TRIPS = sum(TOTAL_TRIPS)) %&gt;%\n  mutate(TRIPS = ifelse(is.na(TRIPS), 0, TRIPS))\n\n\nkable(head(weekday_afternoon_peak))\n\n\n\n\nORIGIN_PT_CODE\nTRIPS\n\n\n\n\n01012\n8000\n\n\n01013\n7038\n\n\n01019\n3398\n\n\n01029\n9089\n\n\n01039\n12095\n\n\n01059\n2212\n\n\n\n\n\nThis code chunk below filters and summarizes the odbus data to calculate the total number of passenger trips during the weekends/holidays morning peak hours (11am to 2pm). It first filters for entries on weekends/holidays, then narrows down to entries between 11am and 2pm. It groups the data by the origin point code, sums up the total trips from each origin, and replaces any missing values (NA) in the resulting trip totals with 0.\n\nweekend_morning_peak &lt;- odbus %&gt;%\n  filter(DAY_TYPE == \"WEEKENDS/HOLIDAY\") %&gt;%\n  filter(TIME_PER_HOUR &gt;= 11 & TIME_PER_HOUR &lt;= 14) %&gt;%\n  group_by(ORIGIN_PT_CODE) %&gt;%\n  summarise(TRIPS = sum(TOTAL_TRIPS)) %&gt;%\n  mutate(TRIPS = ifelse(is.na(TRIPS), 0, TRIPS))\n\n\nkable(head(weekend_morning_peak))\n\n\n\n\nORIGIN_PT_CODE\nTRIPS\n\n\n\n\n01012\n2177\n\n\n01013\n1818\n\n\n01019\n1536\n\n\n01029\n3217\n\n\n01039\n5408\n\n\n01059\n1159\n\n\n\n\n\nThis code chunk below filters and summarizes the odbus data to calculate the total number of passenger trips during the weekends/holidays evening peak hours (4pm to 7pm). It first filters for entries on weekends/holidays, then narrows down to entries between 4pm and 7pm. It groups the data by the origin point code, sums up the total trips from each origin, and replaces any missing values (NA) in the resulting trip totals with 0.\n\nweekend_evening_peak &lt;- odbus %&gt;%\n  filter(DAY_TYPE == \"WEEKENDS/HOLIDAY\") %&gt;%\n  filter(TIME_PER_HOUR &gt;= 16 & TIME_PER_HOUR &lt;= 19) %&gt;%\n  group_by(ORIGIN_PT_CODE) %&gt;%\n  summarise(TRIPS = sum(TOTAL_TRIPS)) %&gt;%\n  mutate(TRIPS = ifelse(is.na(TRIPS), 0, TRIPS))\n\n\nkable(head(weekend_evening_peak))\n\n\n\n\nORIGIN_PT_CODE\nTRIPS\n\n\n\n\n01012\n3061\n\n\n01013\n2770\n\n\n01019\n1685\n\n\n01029\n4063\n\n\n01039\n7263\n\n\n01059\n1118\n\n\n\n\n\nThis code calculates the total number of bus trips for each hour on weekdays, grouped by the origin point code. It filters the odbus data for weekday entries, groups the data by origin point and hour, then sums up the trips for each group, handling missing values by removing them. Finally, it replaces any resulting missing total trip values with 0, which helps in understanding hourly variations in trip counts.\n\nweekday_trips &lt;- odbus %&gt;%\n  filter(DAY_TYPE == \"WEEKDAY\") %&gt;%\n  group_by(ORIGIN_PT_CODE, TIME_PER_HOUR) %&gt;%\n  summarise(TRIPS = sum(TOTAL_TRIPS, na.rm = TRUE)) %&gt;%\n  mutate(TRIPS = ifelse(is.na(TRIPS), 0, TRIPS))\n\nThis code calculates the total number of bus trips for each hour on weekends/holidays, grouped by the origin point code. It filters the odbus data for weekends/holidays entries, groups the data by origin point and hour, then sums up the trips for each group, handling missing values by removing them. Finally, it replaces any resulting missing total trip values with 0, which helps in understanding hourly variations in trip counts.\n\nweekend_trips &lt;- odbus %&gt;%\n  filter(DAY_TYPE == \"WEEKENDS/HOLIDAY\") %&gt;%\n  group_by(ORIGIN_PT_CODE, TIME_PER_HOUR) %&gt;%\n  summarise(TRIPS = sum(TOTAL_TRIPS, na.rm = TRUE)) %&gt;%\n  mutate(TRIPS = ifelse(is.na(TRIPS), 0, TRIPS))\n\nThis code uses the rm() function in R to remove the odbus dataset from the current R environment. This is often done to declutter the workspace and free up memory, especially when the dataset is no longer needed, thereby reducing visual distraction and potential confusion with other datasets.\n\nrm(odbus)\n\n\n\n\n2.2Geospatial Data\n\n2.2.1Importing Bus Stop Location\n\nBus Stop Location from LTA DataMall: Contains information on all bus stops serviced by buses, including bus stop codes and location coordinates.\n\nThe code chunk below uses st_read() from the sf package to read the spatial data. After importing, the code transforms the spatial reference system of the bus stop data to coordinate reference system (CRS) 3414 using st_transform(), ensuring the data is in the correct format for spatial analysis within the Singapore context.\n\n    busstop &lt;- st_read(dsn = \"data/geospatial\",\n                       layer = \"BusStop\") %&gt;%\n      st_transform(crs = 3414)\n\nReading layer `BusStop' from data source \n  `D:\\KathyChiu77\\ISSS624\\Take-home Ex\\Take-home Ex 1\\data\\geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 5161 features and 3 fields\nGeometry type: POINT\nDimension:     XY\nBounding box:  xmin: 3970.122 ymin: 26482.1 xmax: 48284.56 ymax: 52983.82\nProjected CRS: SVY21\n\n\nThis code is likely part of the R mapview package, which is designed to create interactive visualizations of spatial data. By calling this function with the busstop data, an interactive map is generated where each bus stop is likely represented as a point.\n\nmapview(busstop)\n\n\n\n\n\n\nLooking at the map above:\n\nThe blank areas on the map where there are no purple points could represent regions without bus stops, non-residential ( like around Marina Bay) or industrial areas, parks ( like Bukit Timah Nature Reserve), or bodies of water where no bus service is.\nThe concentration of bus stops can give insights into urban planning, population density, and the public transport network’s reach within Singapore.\nThe interactive nature of the map allows users to zoom in and out to inspect areas of interest in more detail, which can be useful for both planning and analysis purposes.\n\n\n\n2.2.2Creating the New Hexagon Layer\nThe code creates a hexagonal grid overlay using the st_make_grid() function applied to the busstop dataset, which contains bus stop locations in Singapore. The specified cellsize determines that each hexagon in the grid will have a diameter of approximately 577.35 meters, calculated to ensure accurate hexagonal sizing. Setting square = FALSE ensures the grid is composed of hexagons, not squares.\n\nhex_grid &lt;- st_make_grid(busstop, cellsize = (4/3)*sqrt(3)*250, square = FALSE)\n\nThe provided code transforms the hexagonal grid into a spatial dataframe (sf object) using the st_sf() function, assigning the grid geometries as its spatial features. Subsequently, it appends a unique identifier to each hexagon by creating a new column, hex_id, with a sequence of numbers from 1 to the number of hexagons in the grid.\n\nhex_grid_sf &lt;- st_sf(geometry = hex_grid) %&gt;%\n  mutate(hex_id = 1:length(hex_grid))\n\nBy using the st_intersects() function, which detects the intersections between the hexagons and the bus stops, the code effectively identifies which bus stops fall within each hexagonal cell. The lengths() function is then applied to the list returned by st_intersects() to count the number of bus stops intersecting each hexagon.\n\nhex_grid_sf$bus_stop_count &lt;- lengths(st_intersects(hex_grid_sf, busstop))\n\nThe code refines the visualization by filtering out hexagons that do not contain any bus stops.\n\nhex_grid_sf &lt;- filter(hex_grid_sf, bus_stop_count &gt; 0)\n\nThe code block initializes an interactive mapping mode with tmap_mode(\"view\"), preparing for the creation of an interactive map. It then constructs the map using the tm_shape() function to specify the spatial data (hex_grid_sf) as the basis for the map. Various tm_* functions are chained together to define the map’s aesthetics and interactivity:\n\ntm_fill: This function is used to color the hexagons based on the bus_stop_count attribute, using a blue color palette and a continuous style, with semi-transparency set by alpha = 0.6.\ntm_borders: Adds grey borders to each hexagon to delineate them clearly.\ntm_layout: Adjusts the layout, setting the legend to appear on the left bottom of the map.\n\n\ntmap_mode(\"view\")\n\nmap_hexagon &lt;- tm_shape(hex_grid_sf) +\n  tm_fill(\n    col = \"bus_stop_count\",\n    palette = \"Blues\",\n    style = \"cont\",\n    title = \"Number of Bus Stops\",\n    id = \"hex_id\",\n    showNA = FALSE,\n    alpha = 0.6,\n    popup.vars = c(\n      \"Number of Bus Stops: \" = \"bus_stop_count\"\n    ),\n    popup.format = list(\n      bus_stop_count = list(format = \"f\", digits = 0)\n    )\n  ) +\n  tm_borders(col = \"grey40\", lwd = 0.7) +\n  tm_layout(legend.position = c(\"left\", \"bottom\"))\n\nmap_hexagon\n\n\n\n\n\n\nThe map visualizes the number of bus stops within each hexagonal grid cell across Singapore. The shading of the hexagons, ranging from light to dark blue, corresponds to the number of bus stops, with darker blues indicating a higher count. The darkest blue areas—Pioneer, Jurong East, Choa Chu Kang Road, Bukit Panjang Road, around Fort Canning Park and so on—suggest these are hubs with a higher density of bus stops. These locations are likely to be key transit areas that cater to significant passenger volumes due to factors like commercial activity, residential populations, and connectivity to other modes of transport. For instance, Fort Canning Park, being a popular recreational area, might also have enhanced bus services to support tourism and leisure activities.\nUses the st_write() function to save the hex_grid_sf spatial dataframe, which contains the hexagonal grid layer, to a shapefile named “hex_layer.shp” located in the “data/geospatial” directory. The append = FALSE parameter ensures that if a file with the same name already exists, it will be overwritten rather than appending the new data to the existing file.\n\nst_write(hex_grid_sf, \"data/geospatial/hex_layer.shp\", append = FALSE)\n\nDeleting layer `hex_layer' using driver `ESRI Shapefile'\nWriting layer `hex_layer' to data source \n  `data/geospatial/hex_layer.shp' using driver `ESRI Shapefile'\nWriting 1237 features with 2 fields and geometry type Polygon.\n\n\nmap_hexagon and hex_grid are removed from R environment.\n\nrm(map_hexagon, hex_grid)"
  },
  {
    "objectID": "Take-home Ex/Take-home Ex 1/Take-home_Exercise_1.html#integrating-passenger-trips-with-hexagonal-grids-for-multidimensional-transit-analysis",
    "href": "Take-home Ex/Take-home Ex 1/Take-home_Exercise_1.html#integrating-passenger-trips-with-hexagonal-grids-for-multidimensional-transit-analysis",
    "title": "Take-home Exercise 1: A Comprehensive Spatial Pattern Analysis of Bus Passenger Trips in Singapore",
    "section": "3.Integrating Passenger Trips with Hexagonal Grids for Multidimensional Transit Analysis",
    "text": "3.Integrating Passenger Trips with Hexagonal Grids for Multidimensional Transit Analysis\n\n3.1Weekday Morning Peak\nTo align bus stops with the corresponding hexagonal grid cells they are located in, a spatial join is executed using the st_join function from the sf package.\n\nbusstop_hex &lt;- st_join(busstop, hex_grid_sf)\n\nThis code merges two datasets: busstop_hex, which contains bus stops assigned to their respective hexagons, and weekday_morning_peak, which includes data on bus trips during weekday morning peak hours. The inner_join() function links the records based on the matching bus stop numbers (BUS_STOP_N) and origin point codes (ORIGIN_PT_CODE). The resulting weekday_morning_trips contains only the records that have a corresponding match in both dataframes, specifically for bus stops active during weekday morning peak times.\n\nweekday_morning_trips &lt;- busstop_hex %&gt;%\n  inner_join(weekday_morning_peak, by = c(\"BUS_STOP_N\" = \"ORIGIN_PT_CODE\"))\n\nThe code is designed to identify duplicate records in the weekday_morning_trips dataframe. It groups the data by all columns using group_by_all(), then filters for groups with more than one entry using filter(n() &gt; 1), which would indicate duplicates. After removing the grouping with ungroup(), it uses glimpse(duplicate) to provide a quick overview of the resulting dataframe. The output indicates that no rows are returned, meaning there are no duplicate entries.\n\nduplicate &lt;- weekday_morning_trips %&gt;%\n  group_by_all() %&gt;%\n  filter(n()&gt;1) %&gt;%\n  ungroup()\nglimpse(duplicate)\n\nRows: 0\nColumns: 7\n$ BUS_STOP_N     &lt;chr&gt; \n$ BUS_ROOF_N     &lt;chr&gt; \n$ LOC_DESC       &lt;chr&gt; \n$ hex_id         &lt;int&gt; \n$ bus_stop_count &lt;int&gt; \n$ TRIPS          &lt;dbl&gt; \n$ geometry       &lt;GEOMETRY [m]&gt; \n\n\nThis code aggregates the trip data for weekday mornings by hexagon grid cells. It groups the weekday_morning_trips dataframe by hex_id (each hexagon’s unique identifier), then calculates the sum of trips for each hexagon, ensuring that any missing values (NA) are not included in the sum (na.rm = TRUE). In case there are any NA values resulting from the summarisation, it uses mutate() with ifelse to replace them with zero. The final output, hex_weekday_morning, contains the total number of trips that originated in each hexagon during weekday morning peak hours.\n\nhex_weekday_morning &lt;- weekday_morning_trips %&gt;%\n  group_by(hex_id) %&gt;%\n  summarise(weekday_morning_trips = sum(TRIPS, na.rm = TRUE)) %&gt;%\n  mutate(weekday_morning_trips = ifelse(is.na(weekday_morning_trips), 0, weekday_morning_trips))\n\nThe geometry column is temporarily removed from the hex_weekday_morning dataset to prepare for joining, creating a non-spatial dataframe hex_weekday_morning_df. This is done because the geometry column can sometimes complicate joins due to its complex structure.\nA spatial join is then performed using inner_join from the dplyr package, which merges the trip summary data in hex_weekday_morning_df back into the hex_grid_sf spatial dataframe based on the hex_id column. This enriches the hexagon grid with the aggregated trip data, allowing for spatial analysis of trips within each hexagon.\n\n# Remove the geometry column temporarily for the join\nhex_weekday_morning_df &lt;- hex_weekday_morning %&gt;% \n  st_set_geometry(NULL)\n# Perform the join using dplyr's left_join\nhex_grid_sf &lt;- hex_grid_sf %&gt;%\n  inner_join(hex_weekday_morning_df, by = \"hex_id\")\n\nThe next code chunk is set to generate a static map that visualizes the distribution of weekday morning peak passenger trips across the hexagonal grid, using varying shades of blue to represent the data quantiles\n\ntmap_mode(\"plot\")\ntm_shape(hex_grid_sf) +\n  tm_fill(\"weekday_morning_trips\", \n          style = \"quantile\", \n          palette = \"Blues\",\n          title = \"Passenger trips\") +\n  tm_layout(main.title = \"Weekday Morning Peak Passenger Trips\",\n            main.title.position = \"center\",\n            main.title.size = 1.2,\n            legend.height = 0.45, \n            legend.width = 0.35,\n            frame = TRUE) +\n  tm_borders(alpha = 0.5) +\n  tm_compass(type=\"8star\", size = 2) +\n  tm_scale_bar() +\n  tm_grid(alpha =0.2) +\n  tm_credits(\"Source: LTA DataMall\", position = c(\"left\", \"bottom\"))\n\n\n\n\nThe image depicts a hexagon-based choropleth map of Singapore, illustrating the number of passenger trips made during weekday morning peak hours. From this map, we can conclude that there are significant variations in public bus usage across different areas. High-density areas, likely to be central and suburban commercial or residential hubs, show a larger number of trips, indicating these are key focus areas for transit services. Lighter shaded areas may correspond to less populated or industrial regions with fewer bus trips.\n\n\n3.2Weekday Afternoon Peak\nFor weekday afternoon peak hours, the weekday_afternoon_trips dataframe is created by merging busstop_hex with data on afternoon trips, connecting bus stops to their trip counts using an inner join.\n\nweekday_afternoon_trips &lt;- busstop_hex %&gt;%\n  inner_join(weekday_afternoon_peak, by = c(\"BUS_STOP_N\" = \"ORIGIN_PT_CODE\"))\n\nFor weekday afternoon trips, the code checks for duplicates in the weekday_afternoon_trips dataframe, and confirms there are none.\n\nduplicate &lt;- weekday_morning_trips %&gt;%\n  group_by_all() %&gt;%\n  filter(n()&gt;1) %&gt;%\n  ungroup()\nglimpse(duplicate)\n\nRows: 0\nColumns: 7\n$ BUS_STOP_N     &lt;chr&gt; \n$ BUS_ROOF_N     &lt;chr&gt; \n$ LOC_DESC       &lt;chr&gt; \n$ hex_id         &lt;int&gt; \n$ bus_stop_count &lt;int&gt; \n$ TRIPS          &lt;dbl&gt; \n$ geometry       &lt;GEOMETRY [m]&gt; \n\n\nThe hex_weekday_afternoon data sums up afternoon trips for each hexagon on weekdays, replacing any missing data with zeros.\n\nhex_weekday_afternoon &lt;- weekday_afternoon_trips %&gt;%\n  group_by(hex_id) %&gt;%\n  summarise(weekday_afternoon_trips = sum(TRIPS, na.rm = TRUE)) %&gt;%\n  mutate(weekday_afternoon_trips = ifelse(is.na(weekday_afternoon_trips), 0, weekday_afternoon_trips))\n\nThe hex_weekday_afternoon dataframe is joined with the spatial grid, merging afternoon trip data based on hexagon IDs.\n\n# Remove the geometry column temporarily for the join\nhex_weekday_afternoon_df &lt;- hex_weekday_afternoon %&gt;% \n  st_set_geometry(NULL)\n\n# Perform the join using dplyr's left_join\nhex_grid_sf &lt;- hex_grid_sf %&gt;%\n  inner_join(hex_weekday_afternoon_df, by = \"hex_id\")\n\nA map will display the weekday afternoon peak trips, shaded in blue to show the number of passengers.\n\ntm_shape(hex_grid_sf) +\n  tm_fill(\"weekday_afternoon_trips\", \n          style = \"quantile\", \n          palette = \"Blues\",\n          title = \"Passenger trips\") +\n  tm_layout(main.title = \"Weekday Afternoon Peak Passenger Trips\",\n            main.title.position = \"center\",\n            main.title.size = 1.2,\n            legend.height = 0.45, \n            legend.width = 0.35,\n            frame = TRUE) +\n  tm_borders(alpha = 0.5) +\n  tm_compass(type=\"8star\", size = 2) +\n  tm_scale_bar() +\n  tm_grid(alpha =0.2) +\n  tm_credits(\"Source: LTA DataMall\", position = c(\"left\", \"bottom\"))\n\n\n\n\nThe afternoon peak map for weekdays indicates a different pattern of passenger trips across Singapore compared to the morning peak. Notably, the overall trip counts appear to be higher in the afternoon, as suggested by a greater prevalence of darker blues, possibly due to people returning from work or school. The central areas remain highly active during both time slots, reflecting consistent transit usage in these urban hubs. However, there is a visible increase in activity in the outskirts in the afternoon, suggesting a movement of people towards residential areas after the workday. This contrast may reflect Singapore’s daily work commute patterns, with morning peaks focused on entry into commercial districts and afternoon peaks dispersing towards suburban residential zones.\n\n\n3.3Weekend Morning Peak\nThe weekend_morning_trips dataframe compiles weekend morning data by joining busstop_hex with morning trip information, ensuring each bus stop’s weekend activity is accounted for.\n\nweekend_morning_trips &lt;- busstop_hex %&gt;%\n  inner_join(weekend_morning_peak, by = c(\"BUS_STOP_N\" = \"ORIGIN_PT_CODE\"))\n\nIn the weekend_morning_trips dataframe, the same method ensures no trip entries are repeated for weekend mornings.\n\nduplicate &lt;- weekend_morning_trips %&gt;%\n  group_by_all() %&gt;%\n  filter(n()&gt;1) %&gt;%\n  ungroup()\nglimpse(duplicate)\n\nRows: 0\nColumns: 7\n$ BUS_STOP_N     &lt;chr&gt; \n$ BUS_ROOF_N     &lt;chr&gt; \n$ LOC_DESC       &lt;chr&gt; \n$ hex_id         &lt;int&gt; \n$ bus_stop_count &lt;int&gt; \n$ TRIPS          &lt;dbl&gt; \n$ geometry       &lt;GEOMETRY [m]&gt; \n\n\nWeekend morning trips are totaled in hex_weekend_morning for each hexagon, with missing values set to zero.\n\nhex_weekend_morning &lt;- weekend_morning_trips %&gt;%\n  group_by(hex_id) %&gt;%\n  summarise(weekend_morning_trips = sum(TRIPS, na.rm = TRUE)) %&gt;%\n  mutate(weekend_morning_trips = ifelse(is.na(weekend_morning_trips), 0, weekend_morning_trips))\n\nFor weekend mornings, trip summaries are integrated into the spatial grid through a join on hex_weekend_morning.\n\n# Remove the geometry column temporarily for the join\nhex_weekend_morning_df &lt;- hex_weekend_morning %&gt;% \n  st_set_geometry(NULL)\n\n# Perform the join using dplyr's left_join\nhex_grid_sf &lt;- hex_grid_sf %&gt;%\n  inner_join(hex_weekend_morning_df, by = \"hex_id\")\n\nThe weekend morning peak trips will be depicted on a map with a blue gradient indicating trip frequencies.\n\ntm_shape(hex_grid_sf) +\n  tm_fill(\"weekend_morning_trips\", \n          style = \"quantile\", \n          palette = \"Blues\",\n          title = \"Passenger trips\") +\n  tm_layout(main.title = \"Weekend & Holiday Morning Peak Passenger Trips\",\n            main.title.position = \"center\",\n            main.title.size = 1.2,\n            legend.height = 0.45, \n            legend.width = 0.35,\n            frame = TRUE) +\n  tm_borders(alpha = 0.5) +\n  tm_compass(type=\"8star\", size = 2) +\n  tm_scale_bar() +\n  tm_grid(alpha =0.2) +\n  tm_credits(\"Source: LTA DataMall\", position = c(\"left\", \"bottom\"))\n\n\n\n\nThe map for weekend & holiday morning peak passenger trips in Singapore exhibits a distinct distribution when compared to the weekday morning. The range of trip counts is generally lower, as evidenced by fewer areas with the darkest shade of blue, which could be indicative of a reduced volume of commuters traveling to work or school. There appears to be a more uniform spread of medium-density travel across the island, possibly reflecting leisure or non-work-related travel patterns. The decreased intensity in central business districts and increased activity in residential or recreational areas highlight a shift in transit use, corresponding with the non-working nature of weekends in Singapore.\n\n\n3.4Weekend Evening Peak\nweekend_evening_trips brings together busstop_hex and data on evening bus trips during the weekend, combining the datasets to reflect each hexagon’s bus stop usage.\n\nweekend_evening_trips &lt;- busstop_hex %&gt;%\n  inner_join(weekend_evening_peak, by = c(\"BUS_STOP_N\" = \"ORIGIN_PT_CODE\"))\n\nSimilarly, the weekend_evening_trips dataframe is verified to be free of duplicates for bus trips in the weekend evenings.\n\nduplicate &lt;- weekend_evening_trips %&gt;%\n  group_by_all() %&gt;%\n  filter(n()&gt;1) %&gt;%\n  ungroup()\nglimpse(duplicate)\n\nRows: 0\nColumns: 7\n$ BUS_STOP_N     &lt;chr&gt; \n$ BUS_ROOF_N     &lt;chr&gt; \n$ LOC_DESC       &lt;chr&gt; \n$ hex_id         &lt;int&gt; \n$ bus_stop_count &lt;int&gt; \n$ TRIPS          &lt;dbl&gt; \n$ geometry       &lt;GEOMETRY [m]&gt; \n\n\nhex_weekend_evening compiles the evening trip counts for each hexagon on weekends, accounting for and correcting any missing entries.\n\nhex_weekend_evening &lt;- weekend_evening_trips %&gt;%\n  group_by(hex_id) %&gt;%\n  summarise(weekend_evening_trips = sum(TRIPS, na.rm = TRUE)) %&gt;%\n  mutate(weekend_evening_trips = ifelse(is.na(weekend_evening_trips), 0, weekend_evening_trips))\n\nEvening trip data for the weekend is combined with the hexagonal grid in the hex_weekend_evening dataframe using a similar join method.\n\n# Remove the geometry column temporarily for the join\nhex_weekend_evening_df &lt;- hex_weekend_evening %&gt;% \n  st_set_geometry(NULL)\n\n# Perform the join using dplyr's left_join\nhex_grid_sf &lt;- hex_grid_sf %&gt;%\n  inner_join(hex_weekend_evening_df, by = \"hex_id\")\n\nFor the weekend evening, a map will illustrate passenger trips with blue shades reflecting the volume of travel.\n\ntm_shape(hex_grid_sf) +\n  tm_fill(\"weekend_evening_trips\", \n          style = \"quantile\", \n          palette = \"Blues\",\n          title = \"Passenger trips\") +\n  tm_layout(main.title = \"Weekend & Holiday Evening Peak Passenger Trips\",\n            main.title.position = \"center\",\n            main.title.size = 1.2,\n            legend.height = 0.45, \n            legend.width = 0.35,\n            frame = TRUE) +\n  tm_borders(alpha = 0.5) +\n  tm_compass(type=\"8star\", size = 2) +\n  tm_scale_bar() +\n  tm_grid(alpha =0.2) +\n  tm_credits(\"Source: LTA DataMall\", position = c(\"left\", \"bottom\"))\n\n\n\n\nThe weekend and holiday evening peak passenger trip map for Singapore reveals a different dynamic compared to the weekday afternoon. The trip densities are more evenly distributed across the island, with fewer areas of intense dark blue, which may reflect a more recreational or social travel pattern as opposed to the work-related commutes seen on weekdays. There’s also a notable presence of trips in areas that could be associated with leisure destinations or residential areas, which aligns with typical weekend and holiday evening activities. The lighter shades in the central business district areas suggest a lower volume of commuter traffic compared to the bustling weekday afternoons. This shift highlights the transition from work-focused movement to more leisurely and dispersed travel behavior in the evenings of weekends and holidays in Singapore.\nThe code provided is removing a list of data frames and variables related to various analyses of bus trips during different times of the day and week. By executing this command, the user is clearing the R environment of these specific objects, which helps declutter the workspace, potentially freeing up memory, and makes it easier to focus on the remaining data and analyses without the distraction of no longer needed datasets.\n\nrm(hex_weekday_afternoon, hex_weekday_morning, hex_weekend_evening, hex_weekend_morning, hex_weekday_afternoon_df, hex_weekday_morning_df, hex_weekend_evening_df, hex_weekend_morning_df, weekday_afternoon_peak, weekday_afternoon_trips, weekday_morning_peak, weekday_morning_trips, weekend_evening_peak, weekend_evening_trips, weekend_morning_peak, weekend_morning_trips)"
  },
  {
    "objectID": "Take-home Ex/Take-home Ex 1/Take-home_Exercise_1.html#local-indicators-of-spatial-association-lisa-analysis",
    "href": "Take-home Ex/Take-home Ex 1/Take-home_Exercise_1.html#local-indicators-of-spatial-association-lisa-analysis",
    "title": "Take-home Exercise 1: A Comprehensive Spatial Pattern Analysis of Bus Passenger Trips in Singapore",
    "section": "4.Local Indicators of Spatial Association (LISA) Analysis",
    "text": "4.Local Indicators of Spatial Association (LISA) Analysis\nIn the context of spatial analysis for the provided hexagonal grid, using contiguity weights can prove to be impractical, as there may be hexagons with zero neighbors, particularly on the fringes of the study area or in regions with sparse data coverage. This lack of contiguous neighbors would lead to inaccuracies in the analysis, as these hexagons would be isolated from the rest of the spatial network. Therefore, adopting a distance-based weights matrix is a more robust approach, as it accounts for the spatial relationships between hexagons based on distance rather than mere adjacency. This method ensures that all hexagons, regardless of their neighbor count, are integrated into the analysis, providing a more comprehensive understanding of the spatial dynamics at play.\n\n4.1Deriving Fixed Distance Weights\nThe provided code snippet is for calculating a fixed distance weight matrix in spatial analysis. It first retrieves the spatial geometry of each hexagon from the hex_grid_sf data frame. Then, it identifies the nearest neighbors for each hexagon using a k-nearest neighbors search, which is appropriate for longitude-latitude data as indicated by the longlat = TRUE parameter. Lastly, it calculates and extracts the distances between each hexagon and its neighbors into a single vector, laying the groundwork for constructing a weight matrix based on these distances.\n\ngeo &lt;- sf::st_geometry(hex_grid_sf)\nnb &lt;- st_knn(geo, longlat = TRUE)\ndists &lt;- unlist(st_nb_dists(geo, nb))\n\nThe first code chunk displays a summary of the dists vector, which contains the distances between each hexagon and its nearest neighbors. These statistics describe the range and central tendency of the distances, which is important for understanding the spread and typical distance between neighbors in the grid （especially the maximum 4358.9m).\n\nsummary(dists)\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n  577.4   577.4   577.4   584.1   577.4  4358.9 \n\n\nThe code chunk is creating a fixed distance weights matrix for the hex_grid_sf spatial data. The mutate() function is used to add two new columns: nb, which stores the neighbors within a certain distance band specified by the upper parameter (in this case, 4359 meters), and wt, which calculates the weights for these neighbors. The st_dist_band function is used to identify neighbors within the specified distance band, and st_weights computes the weights based on this neighbor relationship. The .before = 1 argument indicates that the new columns should be added before the first column in the existing data frame.\n\nwm_fd &lt;- hex_grid_sf %&gt;%\n  mutate(nb = st_dist_band(geometry,\n                           upper = 4359),\n               wt = st_weights(nb),\n               .before = 1)\n\n\n\n4.2Deriving Adaptive Distance Weights\nThe given code creates an adaptive weights matrix using the hex_grid_sf spatial data frame, which contains the geometry of a hexagonal grid. By invoking the st_knn() function with k=6, it identifies the six nearest hexagons to each hexagon as neighbors, forming an adaptive neighborhood structure that does not rely on a fixed distance. Subsequently, the st_weights() function calculates the weights for these k-nearest neighbor relationships. The new neighbor and weight columns are added to the beginning of the data frame. This adaptive method is particularly useful for ensuring each hexagon is evenly connected to a set number of neighbors, which is beneficial for spatial analyses in heterogeneous areas.\n\nwm_ad &lt;- hex_grid_sf %&gt;% \n  mutate(nb = st_knn(geometry,\n                     k=6),\n         wt = st_weights(nb),\n               .before = 1)\n\n\n\n4.3Calculate Inverse Distance Weights\nThe code snippet provided outlines the steps to create an inverse distance weights (IDW) matrix for the hex_grid_sf spatial dataframe, which contains the geometries of a hexagonal grid. The process begins by establishing contiguity-based neighbors for each hexagon using the st_contiguity() function, which assesses adjacency between features. Following this, the st_inverse_distance() function is applied to generate weights that are inversely proportional to the distance between neighbors—meaning that closer neighbors have greater influence than those farther away. The scale parameter is set to 1, maintaining the original distance units, and alpha is set to 1, indicating that the weight will be the reciprocal of the distance. These weights are then inserted at the start of the dataframe. The resulting wm_idw dataframe contains an IDW matrix which captures the intensity of spatial relationships based on proximity, suitable for spatial analyses where the effect of distance is expected to diminish with increasing separation.\n\nwm_idw &lt;- hex_grid_sf %&gt;%\n  mutate(nb = st_contiguity(geometry),\n         wts = st_inverse_distance(nb, geometry,\n                                   scale = 1,\n                                   alpha = 1),\n         .before = 1)\n\nAnd the Inverse Distance Weights will be adopted for further analysis for reasons as below:\n\nProximity Relevance: Places closer together are more likely to share similar trip volumes, making inverse distance a logical choice to reflect the stronger relationship between nearby locations.\nUrban Density: Singapore’s urban density varies, and inverse distance weights can accurately capture the greater interaction between bus stops in densely populated areas.\nDistance Decay Principle: Bus ridership tends to decrease with distance, and inverse distance weights naturally incorporate this principle into the analysis.\n\n\n\n4.4Performing Global Moran’sI Test\nThe code is conducting a Global Moran’s I test, which is a measure of spatial autocorrelation. The test assesses whether the pattern of bus trips on weekday mornings across Singapore is clustered, dispersed, or random. The function global_moran_test() is called with the number of weekday morning trips as the variable of interest, using the inverse distance weights matrix and neighbor definitions previously created (wm_idw$nb and wm_idw$wts). The zero.policy = TRUE parameter allows the function to proceed even if some areas have no neighbors.\n\nglobal_moran_test(wm_idw$weekday_morning_trips,\n                       wm_idw$nb,\n                       wm_idw$wts,\n                       zero.policy = TRUE)\n\n\n    Moran I test under randomisation\n\ndata:  x  \nweights: listw  n reduced by no-neighbour observations\n  \n\nMoran I statistic standard deviate = 13.666, p-value &lt; 2.2e-16\nalternative hypothesis: greater\nsample estimates:\nMoran I statistic       Expectation          Variance \n     0.2562577532     -0.0008445946      0.0003539315 \n\n\n\nMoran I statistic: The value of 0.2562577532 indicates positive spatial autocorrelation. This suggests that bus stops with a high number of trips are more likely to be surrounded by stops with similarly high numbers of trips.\nExpectation: The expected Moran’s I in the case of no spatial autocorrelation is close to 0, specifically -0.0008445946 here, and the observed Moran’s I is far from this, suggesting non-randomness.\np-value: A p-value less than 2.2e-16 indicates the result is highly significant, meaning there’s a very low probability that this clustered pattern could be the result of random chance.\n\nIn summary, the Global Moran’s I test suggests a significant clustering of bus trip volumes in Singapore during weekday mornings, which could have implications for transit planning and resource allocation.\n\nglobal_moran_test(wm_idw$weekday_afternoon_trips,\n                       wm_idw$nb,\n                       wm_idw$wts,\n                       zero.policy = TRUE)\n\n\n    Moran I test under randomisation\n\ndata:  x  \nweights: listw  n reduced by no-neighbour observations\n  \n\nMoran I statistic standard deviate = 3.0872, p-value = 0.00101\nalternative hypothesis: greater\nsample estimates:\nMoran I statistic       Expectation          Variance \n     0.0564036260     -0.0008445946      0.0003438615 \n\n\n\nMoran I statistic: The value of 0.0564036260 suggests a positive but weak spatial autocorrelation for weekday afternoon trips. This indicates that while there is some tendency for bus stops with a high number of trips to be near other busy stops, this pattern is not as strong as it is during the morning.\nExpectation: The expected Moran’s I is -0.0008445946, which is a value near zero that would indicate a random spatial pattern. The observed Moran’s I being above this value points to a non-random pattern, though the strength of this pattern is not as pronounced.\np-value: With a p-value of 0.00101, the test is statistically significant, suggesting that the observed spatial pattern of bus trip volumes in the afternoon is unlikely to be due to random variation.\n\nIn summary, the Global Moran’s I test indicates a statistically significant but relatively weak clustering of bus trip volumes in Singapore during weekday afternoons.\n\nglobal_moran_test(wm_idw$weekend_morning_trips,\n                       wm_idw$nb,\n                       wm_idw$wts,\n                       zero.policy = TRUE)\n\n\n    Moran I test under randomisation\n\ndata:  x  \nweights: listw  n reduced by no-neighbour observations\n  \n\nMoran I statistic standard deviate = 9.5213, p-value &lt; 2.2e-16\nalternative hypothesis: greater\nsample estimates:\nMoran I statistic       Expectation          Variance \n     0.1778617811     -0.0008445946      0.0003522790 \n\n\n\nMoran I statistic: The value of 0.1778617811 indicates a positive spatial autocorrelation for weekend morning bus trips, suggesting a pattern where bus stops with higher trip volumes are likely to be close to other stops with high volumes. This clustering tendency, however, is less strong than the value observed for weekday mornings (0.2562577532), implying a somewhat less pronounced clustering on weekends.\nExpectation: The expected Moran’s I value near zero (-0.0008445946) would suggest a random spatial distribution. The observed Moran’s I being much higher suggests a significant departure from randomness, pointing to a clustered spatial pattern.\np-value: The extremely low p-value (less than 2.2e-16) indicates that the clustering pattern is highly statistically significant and is very unlikely to have arisen by chance.\n\nIn comparison with weekday mornings, the Global Moran’s I test for weekend mornings shows significant clustering but indicates that bus stops are likely less tightly clustered than during weekday mornings.\n\nglobal_moran_test(wm_idw$weekend_evening_trips,\n                       wm_idw$nb,\n                       wm_idw$wts,\n                       zero.policy = TRUE)\n\n\n    Moran I test under randomisation\n\ndata:  x  \nweights: listw  n reduced by no-neighbour observations\n  \n\nMoran I statistic standard deviate = 6.1501, p-value = 3.872e-10\nalternative hypothesis: greater\nsample estimates:\nMoran I statistic       Expectation          Variance \n     0.1138372546     -0.0008445946      0.0003477194 \n\n\n\nMoran I statistic: The value of 0.1138372546 suggests a moderate level of positive spatial autocorrelation for weekend evening bus trips.\nExpectation: The expectation of Moran’s I in a random pattern is -0.0008445946, and the observed value being substantially higher suggests that the distribution of bus trips is not random.\np-value: With a p-value of 3.872e-10, the clustering observed is statistically significant, though the strength of autocorrelation is lower compared to weekday morning and weekend morning.\n\nThe Global Moran’s I test result for weekend evenings demonstrates significant clustering of bus trip volumes, indicating that there is a pattern to passenger movement during this time.\n\n\n4.5Performing Global Moran’I Permutation Test\nIt is always a good practice to use set.seed() before performing simulation. This is to ensure that the computation is reproducible.\n\nset.seed(1234)\n\nThe global_moran_perm() function is executing a permutation-based Global Moran’s I test on the weekday morning trips data from the wm_idw dataframe. This test assesses spatial autocorrelation by comparing the observed Moran’s I value against a distribution of Moran’s I values obtained by randomly shuffling the dataset 99 times (nsim = 99). By doing so, it calculates the likelihood of the observed spatial pattern occurring by random chance. The zero.policy = TRUE parameter ensures that the test includes all data points, even those without neighbors, which could otherwise distort the analysis. This permutation approach is a non-parametric test that does not assume the data follows a normal distribution, making it a robust method for evaluating spatial autocorrelation in the distribution of bus trips.\n\nglobal_moran_perm(wm_idw$weekday_morning_trips,\n                       wm_idw$nb,\n                       wm_idw$wts,\n                       zero.policy = TRUE,\n                  nsim = 99)\n\n\n    Monte-Carlo simulation of Moran I\n\ndata:  x \nweights: listw  \nnumber of simulations + 1: 100 \n\nstatistic = 0.25626, observed rank = 100, p-value &lt; 2.2e-16\nalternative hypothesis: two.sided\n\n\nThe result shows a Monte-Carlo simulation of the Global Moran’s I test, with a statistic of 0.25626. This value indicates a positive spatial autocorrelation, meaning there’s a tendency for similar values to be located near each other. The observed rank of 100 out of 100 simulations suggests that the observed Moran’s I is higher than any of the Moran’s I values from the permuted datasets. With a p-value of less than 2.2e-16, the result is highly significant, indicating that the observed spatial pattern is very unlikely to be due to random chance.\n\nglobal_moran_perm(wm_idw$weekday_afternoon_trips,\n                       wm_idw$nb,\n                       wm_idw$wts,\n                       zero.policy = TRUE,\n                  nsim = 99)\n\n\n    Monte-Carlo simulation of Moran I\n\ndata:  x \nweights: listw  \nnumber of simulations + 1: 100 \n\nstatistic = 0.056404, observed rank = 98, p-value = 0.04\nalternative hypothesis: two.sided\n\n\nThe Monte-Carlo simulation result for the Global Moran’s I test on weekday afternoon data shows a statistic of 0.056404, which indicates a low level of positive spatial autocorrelation. This means that there’s a slight tendency for bus stops with similar trip volumes to be located near each other, though not as strongly as in the weekday morning scenario. The observed rank of 98 suggests that the calculated Moran’s I is greater than 97 of the simulated values, placing it near the top of the distribution. With a p-value of 0.04, the result is statistically significant, albeit less so than the morning results, suggesting that the pattern of bus trip clustering in the afternoon is less pronounced.\n\nglobal_moran_perm(wm_idw$weekend_morning_trips,\n                       wm_idw$nb,\n                       wm_idw$wts,\n                       zero.policy = TRUE,\n                  nsim = 99)\n\n\n    Monte-Carlo simulation of Moran I\n\ndata:  x \nweights: listw  \nnumber of simulations + 1: 100 \n\nstatistic = 0.17786, observed rank = 100, p-value &lt; 2.2e-16\nalternative hypothesis: two.sided\n\n\nThe result shows a Monte-Carlo simulation of the Global Moran’s I test, with a statistic of 0.17786. This value indicates a positive spatial autocorrelation, meaning there’s a tendency for similar values to be located near each other. The observed rank of 100 out of 100 simulations suggests that the observed Moran’s I is higher than any of the Moran’s I values from the permuted datasets. With a p-value of less than 2.2e-16, the result is highly significant, indicating that the observed spatial pattern is very unlikely to be due to random chance.\n\nglobal_moran_perm(wm_idw$weekend_evening_trips,\n                       wm_idw$nb,\n                       wm_idw$wts,\n                       zero.policy = TRUE,\n                  nsim = 99)\n\n\n    Monte-Carlo simulation of Moran I\n\ndata:  x \nweights: listw  \nnumber of simulations + 1: 100 \n\nstatistic = 0.11384, observed rank = 100, p-value &lt; 2.2e-16\nalternative hypothesis: two.sided\n\n\nThe Monte-Carlo simulation of the Global Moran’s I test yields a statistic of 0.11384, indicating positive spatial autocorrelation. This suggests a moderate tendency for similar values to cluster geographically. With the observed rank at 100, the test shows that the Moran’s I for the data is higher than any of the Moran’s I values from the simulations. The p-value of less than 2.2e-16 is highly significant, strongly suggesting that the observed spatial clustering is not due to random chance.\n\n\n4.6Compute and Visualize local Moran’s I\nThe code is computing the Local Indicators of Spatial Association (LISA) using the local_moran() function on the weekday_morning_trips data contained within the wm_idw dataframe. This analysis will result in Local Moran’s I values, which identify the type of spatial correlation (such as clusters or outliers) at each location.\n\nlisa_wdm &lt;- wm_idw %&gt;% \n  mutate(local_moran = local_moran(\n    weekday_morning_trips, nb, wts, nsim = 99, zero.policy = TRUE),\n         .before = 1) %&gt;%\n  unnest(local_moran)\n\nThe code creates two thematic maps using the tmap package in R. The first map (map1) visualizes the Local Moran’s I statistic (ii) for weekday morning trips, which indicates areas of significant spatial clustering or dispersion. The second map (map2) shows the p-values (p_ii_sim) from the Local Moran’s I test, categorizing areas by the significance of their spatial autocorrelation, with breaks set at common statistical significance levels. Both maps include semi-transparent borders and are arranged side by side with tmap_arrange for easy comparison.\nFor weekday afternoon, weekend morning, and weekend evening trips, you would create similar pairs of maps. Each pair would consist of one map visualizing the Local Moran’s I values to identify spatial patterns of trips for that specific time, and another map showing the p-values to indicate the statistical significance of these patterns. The arrangement and appearance of the maps would be similar, providing a consistent visual comparison across different times of the week.\n\ntmap_mode(\"plot\")\nmap1 &lt;- tm_shape(lisa_wdm) +\n  tm_fill(\"ii\") + \n  tm_borders(alpha = 0.5) +\n  tm_view(set.zoom.limits = c(6,8)) +\n  tm_layout(main.title = \"local Moran's I of Weekday Morning Trips\",\n            main.title.size = 0.8)\n\nmap2 &lt;- tm_shape(lisa_wdm) +\n  tm_fill(\"p_ii_sim\",\n          breaks = c(0, 0.001, 0.01, 0.05, 1),\n              labels = c(\"0.001\", \"0.01\", \"0.05\", \"Not sig\")) + \n  tm_borders(alpha = 0.5) +\n  tm_layout(main.title = \"p-value of local Moran's I\",\n            main.title.size = 0.8)\n\ntmap_arrange(map1, map2, ncol = 2)\n\n\n\n\nThe image shows two side-by-side maps representing the Local Moran’s I results for weekday morning bus trips in Singapore. The left map displays the Local Moran’s I values with a color gradient where darker greens indicate higher positive autocorrelation, suggesting clusters of high trip volumes, and lighter greens to yellows represent areas with lower or negative autocorrelation, indicating either no significant clustering or potential outliers. The right map shows the p-values associated with these Local Moran’s I statistics. Darker browns represent more statistically significant values (strong evidence of spatial clustering or dispersion), and lighter colors represent less significant values. Areas marked as “Not sig” indicate a lack of significant spatial autocorrelation, while “Missing” denotes data that might be unavailable or excluded from the analysis.\n\nlisa_wdm_sig &lt;- lisa_wdm  %&gt;%\n  filter(p_ii_sim &lt; 0.05)\ntmap_mode(\"plot\")\ntm_shape(lisa_wdm) +\n  tm_polygons() +\n  tm_borders(alpha = 0.5) +\ntm_shape(lisa_wdm_sig) +\n  tm_fill(\"mean\") + \n  tm_borders(alpha = 0.4)\n\n\n\n\nThe code calculates LISA for weekday_afternoon_trips, providing Local Moran’s I values to detect spatial patterns like clusters or isolated points for each bus stop.\n\nlisa_wda &lt;- wm_idw %&gt;% \n  mutate(local_moran = local_moran(\n    weekday_afternoon_trips, nb, wts, nsim = 99, zero.policy = TRUE),\n         .before = 1) %&gt;%\n  unnest(local_moran)\n\nThe LISA map for weekday morning bus trips in Singapore illustrates spatial clusters of similar values. Hexagons marked as “High-High” indicate clusters where bus stops with high trip volumes are surrounded by others with similarly high volumes, likely reflecting central or busy areas with strong demand for bus services. Conversely, “Low-Low” clusters represent areas with uniformly low trip volumes, possibly less urbanized or residential zones with lower bus usage. “Low-High” and “High-Low” hexagons could indicate outliers where a bus stop has a contrasting number of trips compared to its neighbors, such as a busy stop in a generally quiet area or vice versa. These patterns suggest targeted areas for potential service improvements or adjustments to meet passenger demand effectively in Singapore’s urban transport landscape.\nThe first map could show the Local Moran’s I values for weekday afternoons, indicating areas where bus stops with similar trip counts are located near each other, while the second map would represent the p-values, highlighting the areas where the spatial patterns are statistically significant.\n\ntmap_mode(\"plot\")\nmap1 &lt;- tm_shape(lisa_wda) +\n  tm_fill(\"ii\") + \n  tm_borders(alpha = 0.5) +\n  tm_view(set.zoom.limits = c(6,8)) +\n  tm_layout(main.title = \"local Moran's I of Weekday Afternoon Trips\",\n            main.title.size = 0.8)\n\nmap2 &lt;- tm_shape(lisa_wda) +\n  tm_fill(\"p_ii_sim\",\n          breaks = c(0, 0.001, 0.01, 0.05, 1),\n              labels = c(\"0.001\", \"0.01\", \"0.05\", \"Not sig\")) + \n  tm_borders(alpha = 0.5) +\n  tm_layout(main.title = \"p-value of local Moran's I\",\n            main.title.size = 0.8)\n\ntmap_arrange(map1, map2, ncol = 2)\n\n\n\n\nThe LISA map for weekday afternoon bus trips in Singapore shows various spatial clusters indicating how bus trip volumes are distributed. The “High-High” areas (red) suggest pockets of high ridership likely around key commercial districts or busy residential areas where people are heading home or to after-work activities. The “Low-Low” regions (light blue) might correspond to less active parts of the city during the afternoon, such as business districts winding down or quieter residential areas. The presence of “Low-High” and “High-Low” outliers could indicate specific stops that defy the general trend of their surroundings, such as a busy stop in a generally quiet area or a quiet stop in a busy area. These insights could help optimize bus service allocation for the afternoon commute in Singapore.\n\nlisa_wda_sig &lt;- lisa_wda  %&gt;%\n  filter(p_ii_sim &lt; 0.05)\ntmap_mode(\"plot\")\ntm_shape(lisa_wda) +\n  tm_polygons() +\n  tm_borders(alpha = 0.5) +\ntm_shape(lisa_wdm_sig) +\n  tm_fill(\"mean\") + \n  tm_borders(alpha = 0.4)\n\n\n\n\nFor weekend_morning_trips, the script performs LISA, yielding Local Moran’s I values that highlight spatial correlations, pinpointing areas of similar trip densities.\n\nlisa_wem &lt;- wm_idw %&gt;% \n  mutate(local_moran = local_moran(\n    weekend_morning_trips, nb, wts, nsim = 99, zero.policy = TRUE),\n         .before = 1) %&gt;%\n  unnest(local_moran)\n\nA similar pair of maps for weekend mornings would identify clusters or outliers of bus trip volumes and the significance of these patterns, showing how spatial correlations may differ from weekdays due to different travel behaviors.\n\ntmap_mode(\"plot\")\nmap1 &lt;- tm_shape(lisa_wem) +\n  tm_fill(\"ii\") + \n  tm_borders(alpha = 0.5) +\n  tm_view(set.zoom.limits = c(6,8)) +\n  tm_layout(main.title = \"local Moran's I of Weekend Morning Trips\",\n            main.title.size = 0.8)\n\nmap2 &lt;- tm_shape(lisa_wem) +\n  tm_fill(\"p_ii_sim\",\n          breaks = c(0, 0.001, 0.01, 0.05, 1),\n              labels = c(\"0.001\", \"0.01\", \"0.05\", \"Not sig\")) + \n  tm_borders(alpha = 0.5) +\n  tm_layout(main.title = \"p-value of local Moran's I\",\n            main.title.size = 0.8)\n\ntmap_arrange(map1, map2, ncol = 2)\n\n\n\n\nThe LISA map for weekend mornings in Singapore indicates areas where departure activity is concentrated. “High-High” clusters point to departure stops with a high volume of trips, likely in areas with weekend attractions or key residential zones from where people start their weekend outings. “Low-Low” areas signify stops with fewer departures, which could correlate with less active zones during weekend mornings.\n\nlisa_wem_sig &lt;- lisa_wem  %&gt;%\n  filter(p_ii_sim &lt; 0.05)\ntmap_mode(\"plot\")\ntm_shape(lisa_wem) +\n  tm_polygons() +\n  tm_borders(alpha = 0.5) +\ntm_shape(lisa_wem_sig) +\n  tm_fill(\"mean\") + \n  tm_borders(alpha = 0.4)\n\n\n\n\nThe analysis applies LISA to weekend evening trips, generating Local Moran’s I statistics that reveal the geographic distribution of trip volumes, identifying potential clusters.\n\nlisa_wee &lt;- wm_idw %&gt;% \n  mutate(local_moran = local_moran(\n    weekend_evening_trips, nb, wts, nsim = 99, zero.policy = TRUE),\n         .before = 1) %&gt;%\n  unnest(local_moran)\n\nFor weekend evenings, the maps would again display the Local Moran’s I values and their significance, illustrating the spatial distribution of bus trip volumes during leisure times, which might show a different pattern compared to mornings and afternoons.\n\ntmap_mode(\"plot\")\nmap1 &lt;- tm_shape(lisa_wee) +\n  tm_fill(\"ii\") + \n  tm_borders(alpha = 0.5) +\n  tm_view(set.zoom.limits = c(6,8)) +\n  tm_layout(main.title = \"local Moran's I of Weekend Evening Trips\",\n            main.title.size = 0.8)\n\nmap2 &lt;- tm_shape(lisa_wee) +\n  tm_fill(\"p_ii_sim\",\n          breaks = c(0, 0.001, 0.01, 0.05, 1),\n              labels = c(\"0.001\", \"0.01\", \"0.05\", \"Not sig\")) + \n  tm_borders(alpha = 0.5) +\n  tm_layout(main.title = \"p-value of local Moran's I\",\n            main.title.size = 0.8)\n\ntmap_arrange(map1, map2, ncol = 2)\n\n\n\n\nThe LISA map for weekend evening bus trips in Singapore displays “High-High” clusters, indicating areas with a high volume of bus departures, possibly reflecting popular social or recreational destinations active during weekend evenings. “Low-Low” clusters suggest areas with uniformly low departure volumes, which could be residential zones with less outbound activity at this time. The presence of both “High-Low” and “Low-High” areas signifies spots where departure volumes significantly differ from their surroundings, pointing to unique transit patterns. These findings can guide the optimization of bus services to meet the distinct travel demands of weekend evenings in Singapore.\n\nlisa_wee_sig &lt;- lisa_wee  %&gt;%\n  filter(p_ii_sim &lt; 0.05)\ntmap_mode(\"plot\")\ntm_shape(lisa_wee) +\n  tm_polygons() +\n  tm_borders(alpha = 0.5) +\ntm_shape(lisa_wee_sig) +\n  tm_fill(\"mean\") + \n  tm_borders(alpha = 0.4)\n\n\n\n\nThe code provided is removing a list of data frames and variables and cleaning R environment.\n\nrm(lisa_wda, lisa_wda_sig, lisa_wdm, lisa_wdm_sig, lisa_wee, lisa_wee_sig, lisa_wem, lisa_wem_sig, map1, map2, nb, wm_ad, wm_fd, wm_idw, dists)"
  },
  {
    "objectID": "Take-home Ex/Take-home Ex 1/Take-home_Exercise_1.html#reference",
    "href": "Take-home Ex/Take-home Ex 1/Take-home_Exercise_1.html#reference",
    "title": "Take-home Exercise 1: A Comprehensive Spatial Pattern Analysis of Bus Passenger Trips in Singapore",
    "section": "Reference",
    "text": "Reference\nhttps://desktop.arcgis.com/zh-cn/arcmap/latest/tools/spatial-statistics-toolbox/h-whyhexagons.htm\nhttps://urbandatapalette.com/post/2021-08-tessellation-sf/"
  },
  {
    "objectID": "In-class Ex/In-class_Ex5/In-class_Ex5.html",
    "href": "In-class Ex/In-class_Ex5/In-class_Ex5.html",
    "title": "In-class Exercise 5: Spatial Econometric Interaction Modelling",
    "section": "",
    "text": "Spatial Interaction Models have often used to explain origin-destination (OD) flows that arise in fields such as public bus commuting. These models rely on a function of the distance between the origin and destination as well as explanatory variables pertaining to characteristics of both origin and destination locations. Spatial interaction models assume that using distance as an explanatory variable will eradicate the spatial dependence among the sample of OD flows between pairs of locations. The notion that use of distance functions in conventional spatial interaction models effectively captures spatial dependence in interregional flows has long been challenged. In view of the limitation Spatial Interaction Models to account for spatial dependence, Spatial Econometric Interaction Models have been introduce James P. LeSage and R. Kelley Pace (2009).\nIn this in-class exercise, you will gain hands-on exercise on using spflow package, a R library specially developed for calibrating Spatial Econometric Interaction Models. By the end of this in-class exercise, you will acquire the skills to:\n\nextract explanatory variables from secondary source,\nassemble and derive explanatory variables from publicly available geospatial data,\nintegrate these explanatory variable into a tidy variables tibble data.frame.\ncalibrate Spatial Econometric Interaction Models by using spflow."
  },
  {
    "objectID": "In-class Ex/In-class_Ex5/In-class_Ex5.html#overview",
    "href": "In-class Ex/In-class_Ex5/In-class_Ex5.html#overview",
    "title": "In-class Exercise 5: Spatial Econometric Interaction Modelling",
    "section": "",
    "text": "Spatial Interaction Models have often used to explain origin-destination (OD) flows that arise in fields such as public bus commuting. These models rely on a function of the distance between the origin and destination as well as explanatory variables pertaining to characteristics of both origin and destination locations. Spatial interaction models assume that using distance as an explanatory variable will eradicate the spatial dependence among the sample of OD flows between pairs of locations. The notion that use of distance functions in conventional spatial interaction models effectively captures spatial dependence in interregional flows has long been challenged. In view of the limitation Spatial Interaction Models to account for spatial dependence, Spatial Econometric Interaction Models have been introduce James P. LeSage and R. Kelley Pace (2009).\nIn this in-class exercise, you will gain hands-on exercise on using spflow package, a R library specially developed for calibrating Spatial Econometric Interaction Models. By the end of this in-class exercise, you will acquire the skills to:\n\nextract explanatory variables from secondary source,\nassemble and derive explanatory variables from publicly available geospatial data,\nintegrate these explanatory variable into a tidy variables tibble data.frame.\ncalibrate Spatial Econometric Interaction Models by using spflow."
  },
  {
    "objectID": "In-class Ex/In-class_Ex5/In-class_Ex5.html#getting-started",
    "href": "In-class Ex/In-class_Ex5/In-class_Ex5.html#getting-started",
    "title": "In-class Exercise 5: Spatial Econometric Interaction Modelling",
    "section": "Getting Started",
    "text": "Getting Started\nIn this exercise, the development version (0.1.0.9010) of spflow will be used instead of the released version (0.1.0). The code chunk below will be used to install the development version of spflow package.\n\ndevtools::install_github(\"LukeCe/spflow\")\n\nNext, will will load spflow and other R packages into R environment.\n\npacman::p_load(tmap, sf, spdep, sp, Matrix,\n               spflow, reshape2, knitr,\n               tidyverse)"
  },
  {
    "objectID": "In-class Ex/In-class_Ex5/In-class_Ex5.html#data-preparation",
    "href": "In-class Ex/In-class_Ex5/In-class_Ex5.html#data-preparation",
    "title": "In-class Exercise 5: Spatial Econometric Interaction Modelling",
    "section": "Data Preparation",
    "text": "Data Preparation\nBefore we can calibrate Spatial Econometric Interaction Models by using spflow package, three data sets are required. They are:\n\na spatial weights,\na tibble data.frame consists of the origins, destination, flows and distances between the origins and destination, and\na tibble data.frame consists of the explanatory variables.\n\n\nBuilding the geographical area\nFor the purpose of this study, URA Master Planning 2019 Planning Subzone GIS data will be used.\nIn the code chunk below, MPSZ-2019 shapefile will be import into R environment as a sf tibble data.frame called mpsz.\n\nmpsz &lt;- st_read(dsn = \"data/geospatial\",\n                layer = \"MPSZ-2019\") %&gt;%\n  st_transform(crs = 3414) \n\nNext, the code chunk below will be used to import BusStop shapefile into R environment as an sf object called busstop.\n\nbusstop &lt;- st_read(dsn = \"data/geospatial\",\n                   layer = \"BusStop\") %&gt;%\n  st_transform(crs = 3414)\n\nIn this study, our analysis will be focused on planning subzone with bus stop. In view of this, the code chunk below will be used to perform Point-in-Polygon count analysis.\n\nmpsz$`BUSSTOP_COUNT`&lt;- lengths(\n  st_intersects(\n    mpsz, busstop))\n\nNext, code chunk below will be used to select planning subzone with bus stops.\n\nmpsz_busstop &lt;- mpsz %&gt;%\n  filter(BUSSTOP_COUNT &gt; 0)\nmpsz_busstop\n\nNotice that there are 313 planning subzone in this sf object.\n\n\nPreparing the Spatial Weights\nThere are three different matrices that can be used to describe the connectivity between planning subzone. They are: contiguity, fixed distance and adaptive distance.\nCode chunk below will be used to compute the three spatial weights at one goal.\n\ncentroids &lt;- suppressWarnings({\n    st_point_on_surface(st_geometry(mpsz_busstop))})\n\nmpsz_nb &lt;- list(\n  \"by_contiguity\" = poly2nb(mpsz_busstop),\n  \"by_distance\" = dnearneigh(centroids, \n                             d1 = 0, d2 = 5000),\n  \"by_knn\" = knn2nb(knearneigh(centroids, 3))\n)\n\n\nmpsz_nb\n\nCode chunks below will be used to plot the spatial weights in mpsz_nb.\n\nplot(st_geometry(mpsz))\nplot(mpsz_nb$by_contiguity, \n     centroids, \n     add = T, \n     col = rgb(0,0,0,\n               alpha=0.5))\ntitle(\"Contiguity\") \n\nplot(st_geometry(mpsz))\nplot(mpsz_nb$by_distance,\n     centroids, \n     add = T, \n     col = rgb(0,0,0,\n               alpha=0.5)) \ntitle(\"Distance\") \n\nplot(st_geometry(mpsz))\nplot(mpsz_nb$by_knn, \n     centroids, \n     add = T, \n     col = rgb(0,0,0,\n               alpha=0.5))\ntitle(\"3 Nearest Neighbors\") \n\nWhen you are happy with the results, it is time to save mpsz_nb into an rds file for subsequent use by using the code chunk below.\n\nwrite_rds(mpsz_nb, \"data/rds/mpsz_nb.rds\")\n\n\n\nPreparing The Flow Data\nIn this section, you will learn how to prepare a flow data at the planning subzone level as shown in the screenshot below.\n\nodbus6_9 &lt;- read_rds(\"data/rds/odbus6_9.rds\")\n\n\nbusstop_mpsz &lt;- st_intersection(busstop, mpsz) %&gt;%\n  select(BUS_STOP_N, SUBZONE_C) %&gt;%\n  st_drop_geometry()\n\nNext, we are going to append the planning subzone code from busstop_mpsz data.frame onto odbus6_9 data frame.\n\nod_data &lt;- left_join(odbus6_9 , busstop_mpsz,\n            by = c(\"ORIGIN_PT_CODE\" = \"BUS_STOP_N\")) %&gt;%\n  rename(ORIGIN_BS = ORIGIN_PT_CODE,\n         ORIGIN_SZ = SUBZONE_C,\n         DESTIN_BS = DESTINATION_PT_CODE)\n\nBefore continue, it is a good practice for us to check for duplicating records.\n\nduplicate &lt;- od_data %&gt;%\n  group_by_all() %&gt;%\n  filter(n()&gt;1) %&gt;%\n  ungroup()\n\nIf duplicated records are found, the code chunk below will be used to retain the unique records.\n\nod_data &lt;- unique(od_data)\n\nIt will be a good practice to confirm if the duplicating records issue has been addressed fully.\nNext, we will update od_data data frame with the planning subzone codes.\n\nod_data &lt;- left_join(od_data , busstop_mpsz,\n            by = c(\"DESTIN_BS\" = \"BUS_STOP_N\"))\n\n\nduplicate &lt;- od_data %&gt;%\n  group_by_all() %&gt;%\n  filter(n()&gt;1) %&gt;%\n  ungroup()\n\n\nod_data &lt;- unique(od_data)\n\n\nod_data &lt;- od_data %&gt;%\n  rename(DESTIN_SZ = SUBZONE_C) %&gt;%\n  drop_na() %&gt;%\n  group_by(ORIGIN_SZ, DESTIN_SZ) %&gt;%\n  summarise(TRIPS = sum(TRIPS))\n\nThe od_data data.frame should look similar the table below.\n\nkable(head(od_data, n = 5))\n\nBefore we move to the next task, let’s save od_data into an rds file by using the code chunk below.\n\nwrite_rds(od_data, \"data/rds/od_data.rds\")\n\n\n\nComputing Distance Matrix\n\nConverting from sf data.table to SpatialPolygonsDataFrame\nThere are at least two ways to compute the required distance matrix. One is based on sf and the other is based on sp. Past experience shown that computing distance matrix by using sf function took relatively longer time that sp method especially the data set is large. In view of this, sp method is used in the code chunks below.\nFirst as.Spatial() will be used to convert mpsz from sf tibble data frame to SpatialPolygonsDataFrame of sp object as shown in the code chunk below.\n\nmpsz_sp &lt;- as(mpsz_busstop, \"Spatial\")\nmpsz_sp\n\n\n\nComputing the distance matrix\nNext, spDists() of sp package will be used to compute the Euclidean distance between the centroids of the planning subzones.\n\nDISTANCE &lt;- spDists(mpsz_sp, \n                    longlat = FALSE)\n\n\nhead(DISTANCE, n=c(10, 10))\n\nNotice that the output dist is a matrix object class of R. Also notice that the column heanders and row headers are not labeled with the planning subzone codes.\n\n\nLabelling column and row heanders of a distance matrix\nFirst, we will create a list sorted according to the the distance matrix by planning sub-zone code.\n\nsz_names &lt;- mpsz_busstop$SUBZONE_C\n\nNext we will attach SUBZONE_C to row and column for distance matrix matching ahead\n\ncolnames(DISTANCE) &lt;- paste0(sz_names)\nrownames(DISTANCE) &lt;- paste0(sz_names)\n\n\n\nPivoting distance value by SUBZONE_C\nNext, we will pivot the distance matrix into a long table by using the row and column subzone codes as show in the code chunk below.\n\ndistPair &lt;- melt(DISTANCE) %&gt;%\n  rename(DISTANCE = value)\nhead(distPair, 10)\n\nThe code chunk below is used to rename the origin and destination fields.\n\ndistPair &lt;- distPair %&gt;%\n  rename(ORIGIN_SZ = Var1,\n         DESTIN_SZ = Var2)\n\nNow, left_join() of dplyr will be used to flow_data dataframe and distPair dataframe. The output is called flow_data1.\n\nflow_data &lt;- distPair %&gt;%\n  left_join (od_data) %&gt;%\n  mutate(TRIPS = coalesce(TRIPS, 0))\n\nThe flow_data should look similar the table below.\n\nkable(head(flow_data, n = 10))\n\nBefore moving on to the next task, let’s save flow_data into an rds file by usign the code chunk below.\n\nwrite_rds(flow_data, \"data/rds/mpsz_flow.rds\")\n\n\n\n\nPreparing Explanatory Variables\nThe third input data of spflow is a data.frame that contains all the explanatory variables of the geographical unit (i.e. Planning Subzone).\n\nPopulation by age group variables\nFor the purpose of this exercise, we will include three population age-groups as the explanatory variables. They are population age 7-12, 13-24, and 25-64. These information are available in a data file called pop.csv.\nThe code chunk below will be used to import pop.csv into R environment and save it as an tibble data.frame object called pop.\n\npop &lt;- read_csv(\"data/aspatial/pop.csv\")\n\nIn the code chunk below, left_join() of dplyr package is used to append the population by the three age cohorts with mpsz_busstop and an output sf object called mpsz_var is created.\n\nmpsz_var &lt;- mpsz_busstop %&gt;%\n  left_join(pop,\n            by = c(\"PLN_AREA_N\" = \"PA\",\n                   \"SUBZONE_N\" = \"SZ\")) %&gt;%\n  select(1:2, 7:11) %&gt;%\n  rename(SZ_NAME = SUBZONE_N,\n         SZ_CODE = SUBZONE_C)\n\nThe mpsz_var should look similar the table below.\n\nkable(head(mpsz_var[, 1:6], n = 6))\n\n\n\nDeriving explanatory variables using Point-in-Polygon count\nFirst, we will import schools.rds into R environment.\n\nschools &lt;- read_rds(\"data/rds/schools.rds\")\n\nThe, code chunk below will be used to perform Point-in-Polygon count analysis and save the derived values into a new field of mpsz_var called SCHOOL_COUNT.\n\nmpsz_var$`SCHOOL_COUNT`&lt;- lengths(\n  st_intersects(\n    mpsz_var, schools))\n\nNext, we will import the rest of the shapefiles into R environemnt using the code chunk below.\n\nbusiness &lt;- st_read(dsn = \"data/geospatial\",\n                    layer = \"Business\") %&gt;%\n  st_transform(crs = 3414)\n\n\nretails &lt;- st_read(dsn = \"data/geospatial\",\n                    layer = \"Retails\") %&gt;%\n  st_transform(crs = 3414)\n\n\nfinserv &lt;- st_read(dsn = \"data/geospatial\",\n                    layer = \"FinServ\") %&gt;%\n  st_transform(crs = 3414)\n\n\nentertn &lt;- st_read(dsn = \"data/geospatial\",\n                    layer = \"entertn\") %&gt;%\n  st_transform(crs = 3414)\n\n\nfb &lt;- st_read(dsn = \"data/geospatial\",\n                    layer = \"F&B\") %&gt;%\n  st_transform(crs = 3414)\n\n\nlr &lt;- st_read(dsn = \"data/geospatial\",\n                    layer = \"Liesure&Recreation\") %&gt;%\n  st_transform(crs = 3414)\n\nThen,we will perform Point-in-Polygon analysis for each of these sf object by using the code chunk below.\n\nmpsz_var$`BUSINESS_COUNT`&lt;- lengths(\n  st_intersects(\n    mpsz_var, business))\n\nmpsz_var$`RETAILS_COUNT`&lt;- lengths(\n  st_intersects(\n    mpsz_var, retails))\n\nmpsz_var$`FINSERV_COUNT`&lt;- lengths(\n  st_intersects(\n    mpsz_var, finserv))\n\nmpsz_var$`ENTERTN_COUNT`&lt;- lengths(\n  st_intersects(\n    mpsz_var, entertn))\n\nmpsz_var$`FB_COUNT`&lt;- lengths(\n  st_intersects(\n    mpsz_var, fb))\n\nmpsz_var$`LR_COUNT`&lt;- lengths(\n  st_intersects(\n    mpsz_var, lr))\n\n\nglimpse(mpsz_var)\n\nBefore moving to the next task, let’s save mpsz_var into an rds file by using the code chunk below.\n\nwrite_rds(mpsz_var, \"data/rds/mpsz_var.rds\")"
  },
  {
    "objectID": "In-class Ex/In-class_Ex5/In-class_Ex5.html#preparing-spflow-objects",
    "href": "In-class Ex/In-class_Ex5/In-class_Ex5.html#preparing-spflow-objects",
    "title": "In-class Exercise 5: Spatial Econometric Interaction Modelling",
    "section": "Preparing spflow objects",
    "text": "Preparing spflow objects\nThree spflow objects are required, they are:\n\nspflow_network-class, an S4 class that contains all information on a spatial network which is composed by a set of nodes that are linked by some neighborhood relation.\nspflow_network_pair-class, an S4 class which holds information on origin-destination (OD) pairs. Each OD pair is composed of two nodes, each belonging to one network. All origin nodes must belong to the same origin network should be contained in one spflow_network-class, and likewise for the destinations.\nspflow_network_multi-class, an S4 class that gathers information on multiple objects of types spflow_network-class and spflow_network_pair-class. Its purpose is to ensure that the identification between the nodes that serve as origins or destinations, and the OD-pairs is consistent (similar to relational data bases).\n\nLet us retrieve by using the code chunk below\n\nmpsz_nb &lt;- read_rds(\"data/rds/mpsz_nb.rds\")\nmpsz_flow &lt;- read_rds(\"data/rds/mpsz_flow.rds\")\nmpsz_var &lt;- read_rds(\"data/rds/mpsz_var.rds\")\n\n\nCreating spflow_network-class objects\nspflow_network-class is an S4 class that contains all information on a spatial network which is composed by a set of nodes that are linked by some neighborhood relation. It can be created by using spflow_network() of spflow package.\nFor our model, we choose the contiguity based neighborhood structure.\n\nmpsz_net &lt;- spflow_network(\n  id_net = \"sg\",\n  node_neighborhood = nb2mat(mpsz_nb$by_contiguity),\n  node_data = mpsz_var,\n  node_key_column = \"SZ_CODE\")\n\nmpsz_net\n\n\n\nCreating spflow_network-class object\nspflow_network-class object is an S4 class which holds information on origin-destination (OD) pairs. Each OD pair is composed of two nodes, each belonging to one network. All origin nodes must belong to the same origin network should be contained in one spflow_network-class object and likewise for the destinations.\nIn spflow package, spflow_network_pair()\n\nmpsz_net_pairs &lt;- spflow_network_pair(\n  id_orig_net = \"sg\",\n  id_dest_net = \"sg\",\n  pair_data = mpsz_flow,\n  orig_key_column = \"ORIGIN_SZ\",\n  dest_key_column = \"DESTIN_SZ\")\n\nmpsz_net_pairs\n\n\n\nCreating spflow_network_multi-class object\nThe sp_multi_network-class combines information on the nodes and the node-pairs and also ensures that both data sources are consistent. For example, if some of the origins in the sp_network_pair-class are not identified with the nodes in the sp_network_nodes-class an error will be raised.\nspflow_network_multi()\n\nmpsz_multi_net &lt;-  spflow_network_multi(mpsz_net,\n                                   mpsz_net_pairs)\nmpsz_multi_net\n\nGiven the information on origins, destinations and OD pairs we can use the spflow_map() method for a simple geographic representation of the largest flows.\n\nplot(mpsz$geometry)\nspflow_map(\n  mpsz_multi_net,\n  flow_var = \"TRIPS\",\n  add = TRUE, \n  legend_position = \"bottomleft\",\n  filter_lowest = .999, \n  remove_intra = TRUE,\n  cex = 1)\n\n\n\nCorrelation Analysis\nMulticollinearity refers to a situation in which more than two explanatory variables in a multiple regression model are highly linearly related. In this situation, the coefficient estimates of the multiple regression may change erratically in response to small changes in the data or the procedure used to fit the model.\nIn order to avoid including explanatory variables that are highly correlated, spflow provides two functions:\n\npair_cor() to create a correlation matrix, and\ncor_image() to plot the correlation matrix as a correlogram.\n\n\ncor_formula &lt;- log(1 + TRIPS) ~ \n    BUSSTOP_COUNT +\n    AGE7_12 +\n    AGE13_24 +\n    AGE25_64 +\n    SCHOOL_COUNT +\n    BUSINESS_COUNT +\n    RETAILS_COUNT +\n    FINSERV_COUNT +\n    P_(log(DISTANCE + 1))\n\ncor_mat &lt;- pair_cor(\n  mpsz_multi_net, \n  spflow_formula = cor_formula, \n  add_lags_x = FALSE)\n\ncolnames(cor_mat) &lt;- paste0(\n  substr(\n    colnames(cor_mat),1,3),\"...\")\n\ncor_image(cor_mat)"
  },
  {
    "objectID": "In-class Ex/In-class_Ex5/In-class_Ex5.html#model-calibration",
    "href": "In-class Ex/In-class_Ex5/In-class_Ex5.html#model-calibration",
    "title": "In-class Exercise 5: Spatial Econometric Interaction Modelling",
    "section": "Model Calibration",
    "text": "Model Calibration\nThe core function of the package is spflow(). It provides an interface to three different estimators of spatial econometric interaction models (Dargel 2021) that allow the user to estimate origin-destination flows with spatial autocorrelation.\nThe three different estimators currently supported by spflow are:\n\nMaximum Likelihood Estimation (MLE) which is the default estimation procedure. The matrix form estimation in the framework of this model was first developed by LeSage and Pace (2008) and then improved by Dargel (2021) . Spatial two-stage least squares (S2SLS)\nSpatial Two-stage Least Squares (S2SLS) estimator is an adaptation of the one proposed by Kelejian and Prucha (1998), to the case of origin-destination flows, with up to three neighborhood matrices Dargel (2021). A similar estimation is done by Tamesue and Tsutsumi (2016). The user can activate the S2SLS estimation via the estimation_control argument using the input spflow_control(estimation_method = “s2sls”).\nBayesian Markov Chain Monte Carlo (MCMC) estimator is based on the ideas of LeSage and Pace (2009) and incorporates the improvements proposed in Dargel (2021) . The estimation is based on a tuned Metropolis-Hastings sampler for the auto-regressive parameters, and for the remaining parameters it uses Gibbs sampling. The routine uses 5500 iterations of the sampling procedure and considers the first 2500 as burn-in period. The user can activate the S2SLS estimation via the estimation_control argument using the input spflow_control(estimation_method = “mcmc”).\n\nEstimation with default settings requires two arguments: an sp_multi_network-class and a flow_formula. The flow_formula specifies the model we want to estimate. The function offers a formula interface adapted to spatial interaction models, which has the following structure: Y ~ O_(X1) + D_(X2) + I_(X3) + P_(X4). This structure reflects the different data sources involved in such a model. On the left hand side there is the independent variable Y which corresponds to the vector of flows. On the right hand side we have all the explanatory variables. The functions O_(…) and D_(…) indicate which variables are used as characteristics of the origins and destinations respectively. Similarly, I_(…) indicates variables that should be used for the intra-regional parameters. Finally, P_(…) declares which variables describe origin-destination pairs, which most frequently will include a measure of distance.\nAll the declared variables must be available in the provided spflow_network_multi() object, which gathers information on the origins and destinations (inside spflow_network() objects), as well as the information on the origin-destination pairs (inside a spflow_network_pair() object).\nUsing the short notation Y ~ . is possible and will be interpreted as usual, in the sense that we use all variables that are available for each data source. Also mixed formulas, such as Y ~ . + P_(log(X4) + 1), are possible. When the dot shortcut is combined with explicit declaration, it will only be used for the non declared data sources.\n\nThe base model\nLet us calibrate a base model with the following configuration:\n\nExplanatory variables use as characteristics of the origins: BUSSTOP_COUNT and AGE25_64.\nExplanatory variables use as characteristics of the destinations: SCHOOL_COUNT, BUSINESS_COUNT, RETAILS_COUNT, FINSERV_COUNT.\nExplanatory variable describes origin-destination pairs: DISTANCE\n\nThe code chunk will be as follow:\n\nbase_model &lt;- spflow(\n  spflow_formula = log(1 + TRIPS) ~ \n    O_(BUSSTOP_COUNT +\n         AGE25_64) +\n    D_(SCHOOL_COUNT +\n    BUSINESS_COUNT +\n    RETAILS_COUNT +\n    FINSERV_COUNT) +\n    P_(log(DISTANCE + 1)),\n  spflow_networks = mpsz_multi_net)\n\nbase_model\n\n\nplot(base_model)\n\n\n\nResidual diagnostics\nIn building explanatory models, it is important to check if the model calibrate conform to the statistical assumption of the statistical methods used. The beauty of spflow package is that it provides several functions to support residual diagnostics needs.\nIn the code chunk below, spflow_moran_plots() is used.\n\nold_par &lt;- par(mfrow = c(1, 3), \n               mar = c(2,2,2,2))\nspflow_moran_plots(base_model)\n\n\npar(old_par)\n\nNext, pair_cor() can be used to inspect the relationship of the residual and the explanatory variables by using the code chunk below.\n\ncorr_residual &lt;- pair_cor(base_model)\ncolnames(corr_residual) &lt;- substr(colnames(corr_residual),1,3)\ncor_image(corr_residual)\n\n\nmodel.df &lt;- as_tibble(base_model@spflow_indicators) %&gt;%\n  mutate(FITTED_Y = round(exp(FITTED),0))\n\n\nmpsz_flow1 &lt;- mpsz_flow %&gt;%\n  left_join(model.df) %&gt;%\n  select(1:4,8) %&gt;%\n  mutate(diff = (FITTED_Y-TRIPS))\n\n\n\nWorking with model control\n\nspflow_formula &lt;- log(1 + TRIPS) ~ \n    O_(BUSSTOP_COUNT +\n         AGE25_64) +\n    D_(SCHOOL_COUNT +\n    BUSINESS_COUNT +\n    RETAILS_COUNT +\n    FINSERV_COUNT) +\n    P_(log(DISTANCE + 1))\n\nmodel_control &lt;- spflow_control(\n  estimation_method = \"mle\",\n  model = \"model_8\")\n\nmle_model8 &lt;- spflow(\n  spflow_formula,\n  spflow_networks = mpsz_multi_net,\n  estimation_control = model_control)\n\nmle_model8\n\n\nold_par &lt;- par(mfrow = c(1, 3), \n               mar = c(2,2,2,2))\nspflow_moran_plots(mle_model8)\n\n\npar(old_par)"
  },
  {
    "objectID": "In-class Ex/In-class_Ex5/data/geospatial/MPSZ-2019.html",
    "href": "In-class Ex/In-class_Ex5/data/geospatial/MPSZ-2019.html",
    "title": "ISSS624",
    "section": "",
    "text": "&lt;!DOCTYPE qgis PUBLIC ‘http://mrcc.com/qgis.dtd’ ‘SYSTEM’&gt;     dataset\n\n\n        0 0     false"
  },
  {
    "objectID": "In-class Ex/In-class_Ex5/data/geospatial/FinServ.html",
    "href": "In-class Ex/In-class_Ex5/data/geospatial/FinServ.html",
    "title": "ISSS624",
    "section": "",
    "text": "&lt;!DOCTYPE qgis PUBLIC ‘http://mrcc.com/qgis.dtd’ ‘SYSTEM’&gt;     dataset\n\n\n       GEOGCRS[“WGS 84”,ENSEMBLE[“World Geodetic System 1984 ensemble”,MEMBER[“World Geodetic System 1984 (Transit)”],MEMBER[“World Geodetic System 1984 (G730)”],MEMBER[“World Geodetic System 1984 (G873)”],MEMBER[“World Geodetic System 1984 (G1150)”],MEMBER[“World Geodetic System 1984 (G1674)”],MEMBER[“World Geodetic System 1984 (G1762)”],MEMBER[“World Geodetic System 1984 (G2139)”],ELLIPSOID[“WGS 84”,6378137,298.257223563,LENGTHUNIT[“metre”,1]],ENSEMBLEACCURACY[2.0]],PRIMEM[“Greenwich”,0,ANGLEUNIT[“degree”,0.0174532925199433]],CS[ellipsoidal,2],AXIS[“geodetic latitude (Lat)”,north,ORDER[1],ANGLEUNIT[“degree”,0.0174532925199433]],AXIS[“geodetic longitude (Lon)”,east,ORDER[2],ANGLEUNIT[“degree”,0.0174532925199433]],USAGE[SCOPE[“Horizontal component of 3D system.”],AREA[“World.”],BBOX[-90,-180,90,180]],ID[“EPSG”,4326]] +proj=longlat +datum=WGS84 +no_defs 3452 4326 EPSG:4326 WGS 84 longlat EPSG:7030 true"
  },
  {
    "objectID": "In-class Ex/In-class_Ex5/data/geospatial/entertn.html",
    "href": "In-class Ex/In-class_Ex5/data/geospatial/entertn.html",
    "title": "ISSS624",
    "section": "",
    "text": "&lt;!DOCTYPE qgis PUBLIC ‘http://mrcc.com/qgis.dtd’ ‘SYSTEM’&gt;     dataset\n\n\n       GEOGCRS[“WGS 84”,ENSEMBLE[“World Geodetic System 1984 ensemble”,MEMBER[“World Geodetic System 1984 (Transit)”],MEMBER[“World Geodetic System 1984 (G730)”],MEMBER[“World Geodetic System 1984 (G873)”],MEMBER[“World Geodetic System 1984 (G1150)”],MEMBER[“World Geodetic System 1984 (G1674)”],MEMBER[“World Geodetic System 1984 (G1762)”],MEMBER[“World Geodetic System 1984 (G2139)”],ELLIPSOID[“WGS 84”,6378137,298.257223563,LENGTHUNIT[“metre”,1]],ENSEMBLEACCURACY[2.0]],PRIMEM[“Greenwich”,0,ANGLEUNIT[“degree”,0.0174532925199433]],CS[ellipsoidal,2],AXIS[“geodetic latitude (Lat)”,north,ORDER[1],ANGLEUNIT[“degree”,0.0174532925199433]],AXIS[“geodetic longitude (Lon)”,east,ORDER[2],ANGLEUNIT[“degree”,0.0174532925199433]],USAGE[SCOPE[“Horizontal component of 3D system.”],AREA[“World.”],BBOX[-90,-180,90,180]],ID[“EPSG”,4326]] +proj=longlat +datum=WGS84 +no_defs 3452 4326 EPSG:4326 WGS 84 longlat EPSG:7030 true"
  },
  {
    "objectID": "In-class Ex/In-class_Ex4/In-class_Ex_4_SIMs.html",
    "href": "In-class Ex/In-class_Ex4/In-class_Ex_4_SIMs.html",
    "title": "In-class Exercise 4: Calibrating Spatial Interaction Models with R",
    "section": "",
    "text": "This in-class exercise is a continuation of Hands-on Exercise 3, In-class Exercise 3 and In-class Exercise 4: Preparing Spatial Interaction Modelling Variables. We will continue our journey of calibrating Spatial Interaction Models by using propulsiveness and attractiveness variables prepared in earlier in-class exercise."
  },
  {
    "objectID": "In-class Ex/In-class_Ex4/In-class_Ex_4_SIMs.html#overview",
    "href": "In-class Ex/In-class_Ex4/In-class_Ex_4_SIMs.html#overview",
    "title": "In-class Exercise 4: Calibrating Spatial Interaction Models with R",
    "section": "",
    "text": "This in-class exercise is a continuation of Hands-on Exercise 3, In-class Exercise 3 and In-class Exercise 4: Preparing Spatial Interaction Modelling Variables. We will continue our journey of calibrating Spatial Interaction Models by using propulsiveness and attractiveness variables prepared in earlier in-class exercise."
  },
  {
    "objectID": "In-class Ex/In-class_Ex4/In-class_Ex_4_SIMs.html#getting-started",
    "href": "In-class Ex/In-class_Ex4/In-class_Ex_4_SIMs.html#getting-started",
    "title": "In-class Exercise 4: Calibrating Spatial Interaction Models with R",
    "section": "Getting Started",
    "text": "Getting Started\nFor the purpose of this exercise, five r packages will be used. They are:\n\nsf for importing, integrating, processing and transforming geospatial data.\ntidyverse for importing, integrating, wrangling and visualising data.\ntmap for plotting cartographicquality thematic maps.\nperformance for computing model comparison matrices such as rmse.\nggpubr for creating publication quality statistical graphics.\n\n\npacman::p_load(tmap, sf, performance, knitr,\n               ggpubr, tidyverse)"
  },
  {
    "objectID": "In-class Ex/In-class_Ex4/In-class_Ex_4_SIMs.html#the-data",
    "href": "In-class Ex/In-class_Ex4/In-class_Ex_4_SIMs.html#the-data",
    "title": "In-class Exercise 4: Calibrating Spatial Interaction Models with R",
    "section": "The Data",
    "text": "The Data\nThis exercise is a continuation of Hands-on Exercise 3 and In-class Exercise 4: Preparing Spatial Interaction Modelling Variables. The following data will be used:\n\nflow_data_tidy.rds, weekday morning peak passenger flows at planning subzone level.\nmpsz.rds, URA Master Plan 2019 Planning Subzone boundary in simple feature tibble data frame format.\n\n\nflow_data &lt;- read_rds(\"data/rds/flow_data_tidy.rds\")\n\n\nglimpse(flow_data)\n\nRows: 14,734\nColumns: 13\n$ ORIGIN_SZ       &lt;chr&gt; \"AMSZ01\", \"AMSZ01\", \"AMSZ01\", \"AMSZ01\", \"AMSZ01\", \"AMS…\n$ DESTIN_SZ       &lt;chr&gt; \"AMSZ01\", \"AMSZ02\", \"AMSZ03\", \"AMSZ04\", \"AMSZ05\", \"AMS…\n$ MORNING_PEAK    &lt;dbl&gt; 1998, 8289, 8971, 2252, 6136, 2148, 1620, 1925, 1773, …\n$ dist            &lt;dbl&gt; 50.0000, 810.4491, 1360.9294, 840.4432, 1076.7916, 805…\n$ ORIGIN_AGE7_12  &lt;dbl&gt; 310, 310, 310, 310, 310, 310, 310, 310, 310, 310, 310,…\n$ ORIGIN_AGE13_24 &lt;dbl&gt; 710, 710, 710, 710, 710, 710, 710, 710, 710, 710, 710,…\n$ ORIGIN_AGE25_64 &lt;dbl&gt; 2780, 2780, 2780, 2780, 2780, 2780, 2780, 2780, 2780, …\n$ DESTIN_AGE7_12  &lt;dbl&gt; 310.00, 1140.00, 1010.00, 980.00, 810.00, 1050.00, 420…\n$ DESTIN_AGE13_24 &lt;dbl&gt; 710.00, 2770.00, 2650.00, 2000.00, 1920.00, 2390.00, 1…\n$ DESTIN_AGE25_64 &lt;dbl&gt; 2780.00, 15700.00, 14240.00, 11320.00, 9650.00, 12460.…\n$ SCHOOL_COUNT    &lt;dbl&gt; 0.99, 2.00, 2.00, 1.00, 3.00, 2.00, 0.99, 0.99, 3.00, …\n$ RETAIL_COUNT    &lt;dbl&gt; 1.00, 0.99, 6.00, 0.99, 0.99, 0.99, 1.00, 117.00, 0.99…\n$ geometry        &lt;LINESTRING [m]&gt; LINESTRING (29501.77 39419...., LINESTRING …\n\n\nNotice that this sf tibble data.frame includes two additional fields namely: SCHOOL_COUNT and BUSINESS_COUNT. Both of them will be used as attractiveness variables when calibrating origin constrained SIM.\nThe code chunk below is used to display the first five columns and rows of flow_data.\n\nkable(head(flow_data[, 1:5], n = 5))\n\n\n\n\n\n\n\n\n\n\n\n\nORIGIN_SZ\nDESTIN_SZ\nMORNING_PEAK\ndist\nORIGIN_AGE7_12\ngeometry\n\n\n\n\nAMSZ01\nAMSZ01\n1998\n50.0000\n310\nLINESTRING (29501.77 39419….\n\n\nAMSZ01\nAMSZ02\n8289\n810.4491\n310\nLINESTRING (29501.77 39419….\n\n\nAMSZ01\nAMSZ03\n8971\n1360.9294\n310\nLINESTRING (29501.77 39419….\n\n\nAMSZ01\nAMSZ04\n2252\n840.4432\n310\nLINESTRING (29501.77 39419….\n\n\nAMSZ01\nAMSZ05\n6136\n1076.7916\n310\nLINESTRING (29501.77 39419….\n\n\n\n\n\n\nPreparing inter-zonal flow data\nIn general, we will calibrate separate Spatial Interaction Models for inter- and intra-zonal flows. In this hands-on exercise, we will focus our attention on inter-zonal flow. Hence, we need to exclude the intra-zonal flow from flow_data.\nFirst, two new columns called FlowNoIntra and offset will be created by using the code chunk below.\n\nflow_data$FlowNoIntra &lt;- ifelse(\n  flow_data$ORIGIN_SZ == flow_data$DESTIN_SZ, \n  0, flow_data$TRIPS)\n\nError in ans[npos] &lt;- rep(no, length.out = len)[npos]: replacement has length zero\n\nflow_data$offset &lt;- ifelse(\n  flow_data$ORIGIN_SZ == flow_data$DESTIN_SZ, \n  0.000001, 1)\n\nAccording to the syntax used to derive values in FlowNoIntra field, all intra-zonal flow will be given a value of 0 or else the original flow values will be inserted.\nNext, inter-zonal flow will be selected from flow_data and save into a new output data.frame called inter_zonal_flow by using the code chunk below.\n\ninter_zonal_flow &lt;- flow_data %&gt;%\n  filter(FlowNoIntra &gt; 0)\n\nError in `stopifnot()`:\nℹ In argument: `FlowNoIntra &gt; 0`.\nCaused by error:\n! object 'FlowNoIntra' not found\n\n\nYou are ready to calibrate the Spatial Interaction Models now."
  },
  {
    "objectID": "In-class Ex/In-class_Ex4/In-class_Ex_4_SIMs.html#calibrating-spatial-interaction-models",
    "href": "In-class Ex/In-class_Ex4/In-class_Ex_4_SIMs.html#calibrating-spatial-interaction-models",
    "title": "In-class Exercise 4: Calibrating Spatial Interaction Models with R",
    "section": "Calibrating Spatial Interaction Models",
    "text": "Calibrating Spatial Interaction Models\nIn this section, we will focus on calibrating an origin constrained SIM and a doubly constrained by using flow_data prepared. They complement what you have learned in Hands-on Exercise 3.\n\nOrigin- (Production-) constrained Model\nFigure below shows the general formula of the origin-constrained model.\nCode chunk below shows the calibration of the model by using glm() of R and flow_data.\n\norcSIM_Poisson &lt;- glm(formula = TRIPS ~ \n                ORIGIN_SZ +\n                log(SCHOOL_COUNT) +\n                log(BUSINESS_COUNT) +\n                log(DIST) - 1,\n              family = poisson(link = \"log\"),\n              data = inter_zonal_flow,\n              na.action = na.exclude)\n\nError in eval(mf, parent.frame()): object 'inter_zonal_flow' not found\n\nsummary(orcSIM_Poisson)\n\nError in eval(expr, envir, enclos): object 'orcSIM_Poisson' not found\n\n\n\n\nGoodness of fit\nIn statistical modelling, the next question we would like to answer is how well the proportion of variance in the dependent variable (i.e. TRIPS) that can be explained by the explanatory variables.\nIn order to provide answer to this question, R-squared statistics will be used. However, R-squared is not an output of glm(). Hence we will write a function called CalcRSquared by using the code chunk below.\n\nCalcRSquared &lt;- function(observed, estimated){\n  r &lt;- cor(observed, estimated)\n  R2 &lt;- r^2\n  R2\n}\n\nNow, we can examine how the constraints hold for destinations this time.\n\nCalcRSquared(orcSIM_Poisson$data$TRIPS, orcSIM_Poisson$fitted.values)\n\nError in eval(expr, envir, enclos): object 'orcSIM_Poisson' not found\n\n\nWith reference to the R-Squared above, we can conclude that the model accounts for about 44% of the variation of flows in the systems. Not bad, but not brilliant either.\n\n\nDoubly constrained model\nIn this section, we will fit a doubly constrained SIM by using the general formula shown below:\nand the code chunk used is shown below.\n\ndbcSIM_Poisson &lt;- glm(formula = TRIPS ~ \n                ORIGIN_SZ + \n                DESTIN_SZ +\n                log(DIST),\n              family = poisson(link = \"log\"),\n              data = inter_zonal_flow,\n              na.action = na.exclude)\n\nError in eval(mf, parent.frame()): object 'inter_zonal_flow' not found\n\nsummary(dbcSIM_Poisson)\n\nError in eval(expr, envir, enclos): object 'dbcSIM_Poisson' not found\n\n\nNext, let us examine how well the proportion of variance in the dependent variable (i.e. TRIPS) that can be explained by the explanatory variables.\n\nCalcRSquared(dbcSIM_Poisson$data$TRIPS,\n             dbcSIM_Poisson$fitted.values)\n\nError in eval(expr, envir, enclos): object 'dbcSIM_Poisson' not found\n\n\nNotice that there is a relatively greater improvement in the R-Squared value."
  },
  {
    "objectID": "In-class Ex/In-class_Ex4/In-class_Ex_4_SIMs.html#model-comparison",
    "href": "In-class Ex/In-class_Ex4/In-class_Ex_4_SIMs.html#model-comparison",
    "title": "In-class Exercise 4: Calibrating Spatial Interaction Models with R",
    "section": "Model comparison",
    "text": "Model comparison\n\nStatistical measures\nAnother useful model performance measure for continuous dependent variable is Root Mean Squared Error. In this sub-section, you will learn how to use compare_performance() of performance package\nFirst of all, let us create a list called model_list by using the code chunk below.\n\nmodel_list &lt;- list(\n  Origin_Constrained = orcSIM_Poisson,\n  Doubly_Constrained = dbcSIM_Poisson)\n\nError in eval(expr, envir, enclos): object 'orcSIM_Poisson' not found\n\n\nNext, we will compute the RMSE of all the models in model_list file by using the code chunk below.\n\ncompare_performance(model_list,\n                    metrics = \"RMSE\")\n\nError in eval(expr, envir, enclos): object 'model_list' not found\n\n\nThe print above reveals that doubly constrained SIM is the best model among the two SIMs because it has the smallest RMSE value of 1906.694.\n\n\nVisualising fitted values\nIn this section, you will learn how to visualise the observed values and the fitted values.\nFirstly we will extract the fitted values from Origin-constrained Model by using the code chunk below.\n\ndf &lt;- as.data.frame(orcSIM_Poisson$fitted.values) %&gt;%\n  round(digits = 0)\n\nError in eval(expr, envir, enclos): object 'orcSIM_Poisson' not found\n\n\nNext, we will append the fitted values into inter_zonal_flow data frame by using the code chunk below.\n\ninter_zonal_flow &lt;- inter_zonal_flow %&gt;%\n  cbind(df) %&gt;%\n  rename(orcTRIPS = \"orcSIM_Poisson.fitted.values\")\n\nError in eval(expr, envir, enclos): object 'inter_zonal_flow' not found\n\n\n\ndf &lt;- as.data.frame(dbcSIM_Poisson$fitted.values) %&gt;%\n  round(digits = 0)\n\nError in eval(expr, envir, enclos): object 'dbcSIM_Poisson' not found\n\n\n\ninter_zonal_flow &lt;- inter_zonal_flow %&gt;%\n  cbind(df) %&gt;%\n  rename(dbcTRIPS = \"dbcSIM_Poisson.fitted.values\")\n\nError in eval(expr, envir, enclos): object 'inter_zonal_flow' not found\n\n\nNext, two scatterplots will be created by using geom_point() and other appropriate functions of ggplot2 package.\n\norc_p &lt;- ggplot(data = inter_zonal_flow,\n                aes(x = orcTRIPS,\n                    y = TRIPS)) +\n  geom_point() +\n  geom_smooth(method = lm) +\n  coord_cartesian(xlim=c(0,150000),\n                  ylim=c(0,150000))\n\nError in eval(expr, envir, enclos): object 'inter_zonal_flow' not found\n\ndbc_p &lt;- ggplot(data = inter_zonal_flow,\n                aes(x = dbcTRIPS,\n                    y = TRIPS)) +\n  geom_point() +\n  geom_smooth(method = lm) +\n  coord_cartesian(xlim=c(0,150000),\n                  ylim=c(0,150000))\n\nError in eval(expr, envir, enclos): object 'inter_zonal_flow' not found\n\n\nNow, we will put all the graphs into a single visual for better comparison by using the code chunk below.\n\nggarrange(orc_p, dbc_p,\n          ncol = 2,\n          nrow = 1)\n\nError in eval(expr, envir, enclos): object 'orc_p' not found"
  },
  {
    "objectID": "In-class Ex/In-class_Ex4/data/geospatial/Retails.html",
    "href": "In-class Ex/In-class_Ex4/data/geospatial/Retails.html",
    "title": "ISSS624",
    "section": "",
    "text": "&lt;!DOCTYPE qgis PUBLIC ‘http://mrcc.com/qgis.dtd’ ‘SYSTEM’&gt;     dataset\n\n\n       GEOGCRS[“WGS 84”,ENSEMBLE[“World Geodetic System 1984 ensemble”,MEMBER[“World Geodetic System 1984 (Transit)”],MEMBER[“World Geodetic System 1984 (G730)”],MEMBER[“World Geodetic System 1984 (G873)”],MEMBER[“World Geodetic System 1984 (G1150)”],MEMBER[“World Geodetic System 1984 (G1674)”],MEMBER[“World Geodetic System 1984 (G1762)”],MEMBER[“World Geodetic System 1984 (G2139)”],ELLIPSOID[“WGS 84”,6378137,298.257223563,LENGTHUNIT[“metre”,1]],ENSEMBLEACCURACY[2.0]],PRIMEM[“Greenwich”,0,ANGLEUNIT[“degree”,0.0174532925199433]],CS[ellipsoidal,2],AXIS[“geodetic latitude (Lat)”,north,ORDER[1],ANGLEUNIT[“degree”,0.0174532925199433]],AXIS[“geodetic longitude (Lon)”,east,ORDER[2],ANGLEUNIT[“degree”,0.0174532925199433]],USAGE[SCOPE[“Horizontal component of 3D system.”],AREA[“World.”],BBOX[-90,-180,90,180]],ID[“EPSG”,4326]] +proj=longlat +datum=WGS84 +no_defs 3452 4326 EPSG:4326 WGS 84 longlat EPSG:7030 true"
  },
  {
    "objectID": "In-class Ex/In-class_Ex4/data/geospatial/Liesure&Recreation.html",
    "href": "In-class Ex/In-class_Ex4/data/geospatial/Liesure&Recreation.html",
    "title": "ISSS624",
    "section": "",
    "text": "&lt;!DOCTYPE qgis PUBLIC ‘http://mrcc.com/qgis.dtd’ ‘SYSTEM’&gt;     dataset\n\n\n       GEOGCRS[“WGS 84”,ENSEMBLE[“World Geodetic System 1984 ensemble”,MEMBER[“World Geodetic System 1984 (Transit)”],MEMBER[“World Geodetic System 1984 (G730)”],MEMBER[“World Geodetic System 1984 (G873)”],MEMBER[“World Geodetic System 1984 (G1150)”],MEMBER[“World Geodetic System 1984 (G1674)”],MEMBER[“World Geodetic System 1984 (G1762)”],MEMBER[“World Geodetic System 1984 (G2139)”],ELLIPSOID[“WGS 84”,6378137,298.257223563,LENGTHUNIT[“metre”,1]],ENSEMBLEACCURACY[2.0]],PRIMEM[“Greenwich”,0,ANGLEUNIT[“degree”,0.0174532925199433]],CS[ellipsoidal,2],AXIS[“geodetic latitude (Lat)”,north,ORDER[1],ANGLEUNIT[“degree”,0.0174532925199433]],AXIS[“geodetic longitude (Lon)”,east,ORDER[2],ANGLEUNIT[“degree”,0.0174532925199433]],USAGE[SCOPE[“Horizontal component of 3D system.”],AREA[“World.”],BBOX[-90,-180,90,180]],ID[“EPSG”,4326]] +proj=longlat +datum=WGS84 +no_defs 3452 4326 EPSG:4326 WGS 84 longlat EPSG:7030 true"
  },
  {
    "objectID": "In-class Ex/In-class_Ex4/data/geospatial/F&B.html",
    "href": "In-class Ex/In-class_Ex4/data/geospatial/F&B.html",
    "title": "ISSS624",
    "section": "",
    "text": "&lt;!DOCTYPE qgis PUBLIC ‘http://mrcc.com/qgis.dtd’ ‘SYSTEM’&gt;     dataset\n\n\n       GEOGCRS[“WGS 84”,ENSEMBLE[“World Geodetic System 1984 ensemble”,MEMBER[“World Geodetic System 1984 (Transit)”],MEMBER[“World Geodetic System 1984 (G730)”],MEMBER[“World Geodetic System 1984 (G873)”],MEMBER[“World Geodetic System 1984 (G1150)”],MEMBER[“World Geodetic System 1984 (G1674)”],MEMBER[“World Geodetic System 1984 (G1762)”],MEMBER[“World Geodetic System 1984 (G2139)”],ELLIPSOID[“WGS 84”,6378137,298.257223563,LENGTHUNIT[“metre”,1]],ENSEMBLEACCURACY[2.0]],PRIMEM[“Greenwich”,0,ANGLEUNIT[“degree”,0.0174532925199433]],CS[ellipsoidal,2],AXIS[“geodetic latitude (Lat)”,north,ORDER[1],ANGLEUNIT[“degree”,0.0174532925199433]],AXIS[“geodetic longitude (Lon)”,east,ORDER[2],ANGLEUNIT[“degree”,0.0174532925199433]],USAGE[SCOPE[“Horizontal component of 3D system.”],AREA[“World.”],BBOX[-90,-180,90,180]],ID[“EPSG”,4326]] +proj=longlat +datum=WGS84 +no_defs 3452 4326 EPSG:4326 WGS 84 longlat EPSG:7030 true"
  },
  {
    "objectID": "In-class Ex/In-class_Ex4/data/geospatial/Business.html",
    "href": "In-class Ex/In-class_Ex4/data/geospatial/Business.html",
    "title": "ISSS624",
    "section": "",
    "text": "&lt;!DOCTYPE qgis PUBLIC ‘http://mrcc.com/qgis.dtd’ ‘SYSTEM’&gt;     dataset\n\n\n       GEOGCRS[“WGS 84”,ENSEMBLE[“World Geodetic System 1984 ensemble”,MEMBER[“World Geodetic System 1984 (Transit)”],MEMBER[“World Geodetic System 1984 (G730)”],MEMBER[“World Geodetic System 1984 (G873)”],MEMBER[“World Geodetic System 1984 (G1150)”],MEMBER[“World Geodetic System 1984 (G1674)”],MEMBER[“World Geodetic System 1984 (G1762)”],MEMBER[“World Geodetic System 1984 (G2139)”],ELLIPSOID[“WGS 84”,6378137,298.257223563,LENGTHUNIT[“metre”,1]],ENSEMBLEACCURACY[2.0]],PRIMEM[“Greenwich”,0,ANGLEUNIT[“degree”,0.0174532925199433]],CS[ellipsoidal,2],AXIS[“geodetic latitude (Lat)”,north,ORDER[1],ANGLEUNIT[“degree”,0.0174532925199433]],AXIS[“geodetic longitude (Lon)”,east,ORDER[2],ANGLEUNIT[“degree”,0.0174532925199433]],USAGE[SCOPE[“Horizontal component of 3D system.”],AREA[“World.”],BBOX[-90,-180,90,180]],ID[“EPSG”,4326]] +proj=longlat +datum=WGS84 +no_defs 3452 4326 EPSG:4326 WGS 84 longlat EPSG:7030 true"
  },
  {
    "objectID": "In-class Ex/In-class_Ex3/data/geospatial/MPSZ-2019.html",
    "href": "In-class Ex/In-class_Ex3/data/geospatial/MPSZ-2019.html",
    "title": "ISSS624",
    "section": "",
    "text": "&lt;!DOCTYPE qgis PUBLIC ‘http://mrcc.com/qgis.dtd’ ‘SYSTEM’&gt;     dataset\n\n\n        0 0     false"
  },
  {
    "objectID": "In-class Ex/In-class_Ex2/In-class Ex_2_Global_Local_Measures.html",
    "href": "In-class Ex/In-class_Ex2/In-class Ex_2_Global_Local_Measures.html",
    "title": "In-class Ex2: Global and Local Measures of Spatial Association - sfdep methods",
    "section": "",
    "text": "This in-class introduces an alternative R package to spdep package which is called  sfdep. According to Josiah Parry, the developer of the package, “sfdep builds on the great shoulders of spdep package for spatial dependence. sfdep creates an sf and tidyverse friendly interface to the package as well as introduces new functionality that is not present in spdep. sfdep utilizes list columns extensively to make this interface possible.”"
  },
  {
    "objectID": "In-class Ex/In-class_Ex2/In-class Ex_2_Global_Local_Measures.html#overview",
    "href": "In-class Ex/In-class_Ex2/In-class Ex_2_Global_Local_Measures.html#overview",
    "title": "In-class Ex2: Global and Local Measures of Spatial Association - sfdep methods",
    "section": "",
    "text": "This in-class introduces an alternative R package to spdep package which is called  sfdep. According to Josiah Parry, the developer of the package, “sfdep builds on the great shoulders of spdep package for spatial dependence. sfdep creates an sf and tidyverse friendly interface to the package as well as introduces new functionality that is not present in spdep. sfdep utilizes list columns extensively to make this interface possible.”"
  },
  {
    "objectID": "In-class Ex/In-class_Ex2/In-class Ex_2_Global_Local_Measures.html#getting-started",
    "href": "In-class Ex/In-class_Ex2/In-class Ex_2_Global_Local_Measures.html#getting-started",
    "title": "In-class Ex2: Global and Local Measures of Spatial Association - sfdep methods",
    "section": "Getting started",
    "text": "Getting started\n\nInstalling and Loading the R Packages\nFour R packages will be used for this in-class exercise, they are: sf, sfdep, tmap and tidyverse.\n\npacman::p_load(sf, sfdep, tmap, tidyverse)"
  },
  {
    "objectID": "In-class Ex/In-class_Ex2/In-class Ex_2_Global_Local_Measures.html#the-data",
    "href": "In-class Ex/In-class_Ex2/In-class Ex_2_Global_Local_Measures.html#the-data",
    "title": "In-class Ex2: Global and Local Measures of Spatial Association - sfdep methods",
    "section": "The Data",
    "text": "The Data\nFor the purpose of this in-class exercise, the Hunan data sets will be used. There are two data sets in this use case, they are:\n\nHunan, a geospatial data set in ESRI shapefile format, and\nHunan_2012, an attribute data set in csv format.\n\n\nhunan &lt;- st_read(dsn = \"data/geospatial\", \n                 layer = \"Hunan\")\n\nReading layer `Hunan' from data source \n  `D:\\KathyChiu77\\ISSS624\\In-class Ex\\In-class_Ex2\\data\\geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 88 features and 7 fields\nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: 108.7831 ymin: 24.6342 xmax: 114.2544 ymax: 30.12812\nGeodetic CRS:  WGS 84\n\n\n\nImporting attribute table\n\nhunan2012 &lt;- read_csv(\"data/aspatial/Hunan_2012.csv\")\n\n\n\nCombining both data frame by using left join\n\nhunan_GDPPC &lt;- left_join(hunan, hunan2012) %&gt;%\n  select(1:4, 7, 15)\n\n\n\nPlotting a choropleth map\nThe choropleth should look similar to the figure below.\n\ntmap_mode(\"plot\")\ntm_shape(hunan_GDPPC) +\n  tm_fill(\"GDPPC\", \n          style = \"quantile\", \n          palette = \"Blues\",\n          title = \"GDPPC\") +\n  tm_layout(main.title = \"Distribution of GDP per capita by district, Hunan Province\",\n            main.title.position = \"center\",\n            main.title.size = 1.2,\n            legend.height = 0.45, \n            legend.width = 0.35,\n            frame = TRUE) +\n  tm_borders(alpha = 0.5) +\n  tm_compass(type=\"8star\", size = 2) +\n  tm_scale_bar() +\n  tm_grid(alpha =0.2)"
  },
  {
    "objectID": "In-class Ex/In-class_Ex2/In-class Ex_2_Global_Local_Measures.html#global-measures-of-spatial-association",
    "href": "In-class Ex/In-class_Ex2/In-class Ex_2_Global_Local_Measures.html#global-measures-of-spatial-association",
    "title": "In-class Ex2: Global and Local Measures of Spatial Association - sfdep methods",
    "section": "Global Measures of Spatial Association",
    "text": "Global Measures of Spatial Association\n\nStep 1: Deriving contiguity weights: Queen’s method\n\n\nDeriving contiguity weights: Queen’s method\nIn the code chunk below, queen method is used to derive the contiguity weights.\n\nwm_q &lt;- hunan_GDPPC %&gt;%\n  mutate(nb = st_contiguity(geometry),\n         wt = st_weights(nb,\n                         style = \"W\"),\n         .before = 1) \n\nNotice that st_weights() provides tree arguments, they are:\n\nnb: A neighbor list object as created by st_neighbors().\nstyle: Default “W” for row standardized weights. This value can also be “B”, “C”, “U”, “minmax”, and “S”. B is the basic binary coding, W is row standardised (sums over all links to n), C is globally standardised (sums over all links to n), U is equal to C divided by the number of neighbours (sums over all links to unity), while S is the variance-stabilizing coding scheme proposed by Tiefelsdorf et al. 1999, p. 167-168 (sums over all links to n).\nallow_zero: If TRUE, assigns zero as lagged value to zone without neighbors.\n\n\nwm_q\n\nSimple feature collection with 88 features and 8 fields\nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: 108.7831 ymin: 24.6342 xmax: 114.2544 ymax: 30.12812\nGeodetic CRS:  WGS 84\nFirst 10 features:\n                               nb\n1                 2, 3, 4, 57, 85\n2               1, 57, 58, 78, 85\n3                     1, 4, 5, 85\n4                      1, 3, 5, 6\n5                     3, 4, 6, 85\n6                4, 5, 69, 75, 85\n7                  67, 71, 74, 84\n8       9, 46, 47, 56, 78, 80, 86\n9           8, 66, 68, 78, 84, 86\n10 16, 17, 19, 20, 22, 70, 72, 73\n                                                                            wt\n1                                                      0.2, 0.2, 0.2, 0.2, 0.2\n2                                                      0.2, 0.2, 0.2, 0.2, 0.2\n3                                                       0.25, 0.25, 0.25, 0.25\n4                                                       0.25, 0.25, 0.25, 0.25\n5                                                       0.25, 0.25, 0.25, 0.25\n6                                                      0.2, 0.2, 0.2, 0.2, 0.2\n7                                                       0.25, 0.25, 0.25, 0.25\n8  0.1428571, 0.1428571, 0.1428571, 0.1428571, 0.1428571, 0.1428571, 0.1428571\n9             0.1666667, 0.1666667, 0.1666667, 0.1666667, 0.1666667, 0.1666667\n10                      0.125, 0.125, 0.125, 0.125, 0.125, 0.125, 0.125, 0.125\n     NAME_2  ID_3    NAME_3   ENGTYPE_3    County GDPPC\n1   Changde 21098   Anxiang      County   Anxiang 23667\n2   Changde 21100   Hanshou      County   Hanshou 20981\n3   Changde 21101    Jinshi County City    Jinshi 34592\n4   Changde 21102        Li      County        Li 24473\n5   Changde 21103     Linli      County     Linli 25554\n6   Changde 21104    Shimen      County    Shimen 27137\n7  Changsha 21109   Liuyang County City   Liuyang 63118\n8  Changsha 21110 Ningxiang      County Ningxiang 62202\n9  Changsha 21111 Wangcheng      County Wangcheng 70666\n10 Chenzhou 21112     Anren      County     Anren 12761\n                         geometry\n1  POLYGON ((112.0625 29.75523...\n2  POLYGON ((112.2288 29.11684...\n3  POLYGON ((111.8927 29.6013,...\n4  POLYGON ((111.3731 29.94649...\n5  POLYGON ((111.6324 29.76288...\n6  POLYGON ((110.8825 30.11675...\n7  POLYGON ((113.9905 28.5682,...\n8  POLYGON ((112.7181 28.38299...\n9  POLYGON ((112.7914 28.52688...\n10 POLYGON ((113.1757 26.82734...\n\n\n\n\nComputing Global Moran’ I\nIn the code chunk below, global_moran() function is used to compute the Moran’s I value. Different from spdep package, the output is a tibble data.frame.\n\nmoranI &lt;- global_moran(wm_q$GDPPC,\n                       wm_q$nb,\n                       wm_q$wt)\nglimpse(moranI)\n\nList of 2\n $ I: num 0.301\n $ K: num 7.64\n\n\n\n\nPerforming Global Moran’sI test\nIn general, Moran’s I test will be performed instead of just computing the Moran’s I statistics. With sfdep package, Moran’s I test can be performed by using global_moran_test() as shown in the code chunk below.\n\nglobal_moran_test(wm_q$GDPPC,\n                       wm_q$nb,\n                       wm_q$wt)\n\n\n    Moran I test under randomisation\n\ndata:  x  \nweights: listw    \n\nMoran I statistic standard deviate = 4.7351, p-value = 1.095e-06\nalternative hypothesis: greater\nsample estimates:\nMoran I statistic       Expectation          Variance \n      0.300749970      -0.011494253       0.004348351 \n\n\n\n\nPerforming Global Moran’I permutation test\nIn practice, monte carlo simulation should be used to perform the statistical test. For sfdep, it is supported by globel_moran_perm()\nIt is always a good practice to use set.seed() before performing simulation. This is to ensure that the computation is reproducible.\n\nset.seed(1234)\n\nNext, global_moran_perm() is used to perform Monte Carlo simulation.\n\nglobal_moran_perm(wm_q$GDPPC,\n                       wm_q$nb,\n                       wm_q$wt,\n                  nsim = 99)\n\n\n    Monte-Carlo simulation of Moran I\n\ndata:  x \nweights: listw  \nnumber of simulations + 1: 100 \n\nstatistic = 0.30075, observed rank = 100, p-value &lt; 2.2e-16\nalternative hypothesis: two.sided\n\n\nThe report above show that the p-value is smaller than alpha value of 0.05. Hence, reject the null hypothesis that the spatial patterns spatial independent. Because the Moran’s I statistics is greater than 0. We can infer the spatial distribution shows sign of clustering."
  },
  {
    "objectID": "In-class Ex/In-class_Ex2/In-class Ex_2_Global_Local_Measures.html#computing-local-morans-i",
    "href": "In-class Ex/In-class_Ex2/In-class Ex_2_Global_Local_Measures.html#computing-local-morans-i",
    "title": "In-class Ex2: Global and Local Measures of Spatial Association - sfdep methods",
    "section": "Computing local Moran’s I",
    "text": "Computing local Moran’s I\nIn this section, you will learn how to compute Local Moran’s I of GDPPC at county level by using local_moran() of sfdep package.\n\nlisa &lt;- wm_q %&gt;% \n  mutate(local_moran = local_moran(\n    GDPPC, nb, wt, nsim = 99),\n         .before = 1) %&gt;%\n  unnest(local_moran)\n\nThe output of local_moran() is a sf data.frame containing the columns ii, eii, var_ii, z_ii, p_ii, p_ii_sim, and p_folded_sim.\n\nii: local moran statistic\neii: expectation of local moran statistic; for localmoran_permthe permutation sample means\nvar_ii: variance of local moran statistic; for localmoran_permthe permutation sample standard deviations\nz_ii: standard deviate of local moran statistic; for localmoran_perm based on permutation sample means and standard deviations\np_ii: p-value of local moran statistic using pnorm(); for localmoran_perm using standard deviatse based on permutation sample means and standard deviations\np_ii_sim: For localmoran_perm(), rank() and punif() of observed statistic rank for [0, 1] p-values using alternative=\np_folded_sim: the simulation folded [0, 0.5] range ranked p-value based on crand.py of pysal\nskewness: For localmoran_perm, the output of e1071::skewness() for the permutation samples underlying the standard deviates\nkurtosis: For localmoran_perm, the output of e1071::kurtosis() for the permutation samples underlying the standard deviates.\n\n\nVisualising local Moran’s I\nIn this code chunk below, tmap functions are used prepare a choropleth map by using value in the ii field.\n\ntmap_mode(\"plot\")\ntm_shape(lisa) +\n  tm_fill(\"ii\") + \n  tm_borders(alpha = 0.5) +\n  tm_view(set.zoom.limits = c(6,8)) +\n  tm_layout(main.title = \"local Moran's I of GDPPC\",\n            main.title.size = 0.8)\n\n\n\n\n\n\nVisualising p-value of local Moran’s I\nIn the code chunk below, tmap functions are used prepare a choropleth map by using value in the p_ii_sim field.\n\ntmap_mode(\"plot\")\ntm_shape(lisa) +\n  tm_fill(\"p_ii_sim\") + \n  tm_borders(alpha = 0.5) +\n   tm_layout(main.title = \"p-value of local Moran's I\",\n            main.title.size = 0.8)\n\n\n\n\n\n\nVisualising local Moran’s I and p-value\nFor effective comparison, it will be better for us to plot both maps next to each other as shown below.\n\ntmap_mode(\"plot\")\nmap1 &lt;- tm_shape(lisa) +\n  tm_fill(\"ii\") + \n  tm_borders(alpha = 0.5) +\n  tm_view(set.zoom.limits = c(6,8)) +\n  tm_layout(main.title = \"local Moran's I of GDPPC\",\n            main.title.size = 0.8)\n\nmap2 &lt;- tm_shape(lisa) +\n  tm_fill(\"p_ii_sim\",\n          breaks = c(0, 0.001, 0.01, 0.05, 1),\n              labels = c(\"0.001\", \"0.01\", \"0.05\", \"Not sig\")) + \n  tm_borders(alpha = 0.5) +\n  tm_layout(main.title = \"p-value of local Moran's I\",\n            main.title.size = 0.8)\n\ntmap_arrange(map1, map2, ncol = 2)\n\n\n\n\n\n\nVisualising LISA map\nLISA map is a categorical map showing outliers and clusters. There are two types of outliers namely: High-Low and Low-High outliers. Likewise, there are two type of clusters namely: High-High and Low-Low cluaters. In fact, LISA map is an interpreted map by combining local Moran’s I of geographical areas and their respective p-values.\nIn lisa sf data.frame, we can find three fields contain the LISA categories. They are mean, median and pysal. In general, classification in mean will be used as shown in the code chunk below.\n\nlisa_sig &lt;- lisa  %&gt;%\n  filter(p_ii_sim &lt; 0.05)\ntmap_mode(\"plot\")\ntm_shape(lisa) +\n  tm_polygons() +\n  tm_borders(alpha = 0.5) +\ntm_shape(lisa_sig) +\n  tm_fill(\"mean\") + \n  tm_borders(alpha = 0.4)"
  },
  {
    "objectID": "In-class Ex/In-class_Ex2/In-class Ex_2_Global_Local_Measures.html#hot-spot-and-cold-spot-area-analysis-hcsa",
    "href": "In-class Ex/In-class_Ex2/In-class Ex_2_Global_Local_Measures.html#hot-spot-and-cold-spot-area-analysis-hcsa",
    "title": "In-class Ex2: Global and Local Measures of Spatial Association - sfdep methods",
    "section": "Hot Spot and Cold Spot Area Analysis (HCSA)",
    "text": "Hot Spot and Cold Spot Area Analysis (HCSA)\nHCSA uses spatial weights to identify locations of statistically significant hot spots and cold spots in an spatially weighted attribute that are in proximity to one another based on a calculated distance. The analysis groups features when similar high (hot) or low (cold) values are found in a cluster. The polygon features usually represent administration boundaries or a custom grid structure."
  },
  {
    "objectID": "In-class Ex/In-class_Ex2/In-class Ex_2_Global_Local_Measures.html#computing-local-gi-statistics",
    "href": "In-class Ex/In-class_Ex2/In-class Ex_2_Global_Local_Measures.html#computing-local-gi-statistics",
    "title": "In-class Ex2: Global and Local Measures of Spatial Association - sfdep methods",
    "section": "Computing local Gi* statistics",
    "text": "Computing local Gi* statistics\n\nwm_idw &lt;- hunan_GDPPC %&gt;%\n  mutate(nb = st_contiguity(geometry),\n         wts = st_inverse_distance(nb, geometry,\n                                   scale = 1,\n                                   alpha = 1),\n         .before = 1)\n\nNext, local_gstar_perm() of sfdep package will be used to compute local Gi* statistics as shown in the code chunk below.\n\nHCSA &lt;- wm_idw %&gt;% \n  mutate(local_Gi = local_gstar_perm(\n    GDPPC, nb, wt, nsim = 499),\n         .before = 1) %&gt;%\n  unnest(local_Gi)\nHCSA\n\nSimple feature collection with 88 features and 16 fields\nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: 108.7831 ymin: 24.6342 xmax: 114.2544 ymax: 30.12812\nGeodetic CRS:  WGS 84\n# A tibble: 88 × 17\n   gi_star   e_gi    var_gi p_value   p_sim p_folded_sim skewness kurtosis nb   \n     &lt;dbl&gt;  &lt;dbl&gt;     &lt;dbl&gt;   &lt;dbl&gt;   &lt;dbl&gt;        &lt;dbl&gt;    &lt;dbl&gt;    &lt;dbl&gt; &lt;nb&gt; \n 1  0.0416 0.0114   6.24e-6  0.0472 9.62e-1        0.84     0.42     0.739 &lt;int&gt;\n 2 -0.333  0.0112   6.39e-6 -0.301  7.64e-1        0.932    0.466    0.852 &lt;int&gt;\n 3  0.281  0.0125   7.83e-6 -0.0911 9.27e-1        0.872    0.436    1.01  &lt;int&gt;\n 4  0.411  0.0113   7.14e-6  0.508  6.11e-1        0.568    0.284    0.868 &lt;int&gt;\n 5  0.387  0.0114   7.81e-6  0.421  6.74e-1        0.54     0.27     1.25  &lt;int&gt;\n 6 -0.368  0.0116   6.81e-6 -0.478  6.33e-1        0.764    0.382    0.914 &lt;int&gt;\n 7  3.56   0.0146   7.04e-6  2.84   4.56e-3        0.032    0.016    1.09  &lt;int&gt;\n 8  2.52   0.0135   5.08e-6  1.69   9.14e-2        0.148    0.074    0.797 &lt;int&gt;\n 9  4.56   0.0141   4.57e-6  4.12   3.71e-5        0.008    0.004    1.03  &lt;int&gt;\n10  1.16   0.0109   4.92e-6  1.35   1.76e-1        0.208    0.104    0.597 &lt;int&gt;\n# ℹ 78 more rows\n# ℹ 8 more variables: wts &lt;list&gt;, NAME_2 &lt;chr&gt;, ID_3 &lt;int&gt;, NAME_3 &lt;chr&gt;,\n#   ENGTYPE_3 &lt;chr&gt;, County &lt;chr&gt;, GDPPC &lt;dbl&gt;, geometry &lt;POLYGON [°]&gt;\n\n\n\nVisualising Gi*\n\ntmap_mode(\"plot\")\ntm_shape(HCSA) +\n  tm_fill(\"gi_star\") + \n  tm_borders(alpha = 0.5) +\n  tm_view(set.zoom.limits = c(6,8))\n\n\n\n\n\n\nVisualising p-value of HCSA\n\ntmap_mode(\"plot\")\ntm_shape(HCSA) +\n  tm_fill(\"p_sim\") + \n  tm_borders(alpha = 0.5)\n\n\n\n\n\n\nVisuaising local HCSA\nFor effective comparison, you can plot both maps next to each other as shown below.\n\ntmap_mode(\"plot\")\nmap1 &lt;- tm_shape(HCSA) +\n  tm_fill(\"gi_star\") + \n  tm_borders(alpha = 0.5) +\n  tm_view(set.zoom.limits = c(6,8)) +\n  tm_layout(main.title = \"Gi* of GDPPC\",\n            main.title.size = 0.8)\n\nmap2 &lt;- tm_shape(HCSA) +\n  tm_fill(\"p_sim\",\n          breaks = c(0, 0.001, 0.01, 0.05, 1),\n          labels = c(\"0.001\", \"0.01\", \"0.05\", \"Not sig\")) + \n  tm_borders(alpha = 0.5) +\n  tm_layout(main.title = \"p-value of Gi*\",\n            main.title.size = 0.8)\n\ntmap_arrange(map1, map2, ncol = 2)"
  },
  {
    "objectID": "In-class Ex/In-class_Ex2/In-class Ex_2_Global_Local_Measures.html#visualising-hot-spot-and-cold-spot-areas",
    "href": "In-class Ex/In-class_Ex2/In-class Ex_2_Global_Local_Measures.html#visualising-hot-spot-and-cold-spot-areas",
    "title": "In-class Ex2: Global and Local Measures of Spatial Association - sfdep methods",
    "section": "Visualising hot spot and cold spot areas",
    "text": "Visualising hot spot and cold spot areas\nNow, we are ready to plot the significant (i.e. p-values less than 0.05) hot spot and cold spot areas by using appropriate tmap functions as shown below.\n\nHCSA_sig &lt;- HCSA  %&gt;%\n  filter(p_sim &lt; 0.05)\ntmap_mode(\"plot\")\ntm_shape(HCSA) +\n  tm_polygons() +\n  tm_borders(alpha = 0.5) +\ntm_shape(HCSA_sig) +\n  tm_fill(\"gi_star\") + \n  tm_borders(alpha = 0.4)\n\n\n\n\nFigure above reveals that there is one hot spot area and two cold spot areas. Interestingly, the hot spot areas coincide with the High-high cluster identifies by using local Moran’s I method in the earlier sub-section."
  },
  {
    "objectID": "In-class Ex/In-class Ex1/In-class_Ex1_demo.html",
    "href": "In-class Ex/In-class Ex1/In-class_Ex1_demo.html",
    "title": "In-class Exercise 1",
    "section": "",
    "text": "The specific task of this in-class exercise are as follows:\n\nto import Passenger Volume by Origin Destination Bus Stops data set downloaded from LTA DataMall in to RStudio environment,\nto import geospatial data in ESRI shapefile format into sf data frame format,\nto perform data wrangling by using appropriate functions from tidyverse and sf pakcges, and\nto visualise the distribution of passenger trip by using tmap methods and functions."
  },
  {
    "objectID": "In-class Ex/In-class Ex1/In-class_Ex1_demo.html#tasks",
    "href": "In-class Ex/In-class Ex1/In-class_Ex1_demo.html#tasks",
    "title": "In-class Exercise 1",
    "section": "",
    "text": "The specific task of this in-class exercise are as follows:\n\nto import Passenger Volume by Origin Destination Bus Stops data set downloaded from LTA DataMall in to RStudio environment,\nto import geospatial data in ESRI shapefile format into sf data frame format,\nto perform data wrangling by using appropriate functions from tidyverse and sf pakcges, and\nto visualise the distribution of passenger trip by using tmap methods and functions."
  },
  {
    "objectID": "In-class Ex/In-class Ex1/In-class_Ex1_demo.html#getting-started",
    "href": "In-class Ex/In-class Ex1/In-class_Ex1_demo.html#getting-started",
    "title": "In-class Exercise 1",
    "section": "Getting started",
    "text": "Getting started\nThe code chunk below uses p_load() of pacman package to check if the required packages have been installed on the computer. If they are, the packages will be launched. The packages used are:\n\ntmap: for thematic mapping\nsf: for geospatial data wrangling\ntidyverse: for non-spatial data wrangling\n\n\npacman::p_load(tmap, sf, tidyverse, knitr)"
  },
  {
    "objectID": "In-class Ex/In-class Ex1/In-class_Ex1_demo.html#import-passenger-volume-by-origin-destination-bus-stops",
    "href": "In-class Ex/In-class Ex1/In-class_Ex1_demo.html#import-passenger-volume-by-origin-destination-bus-stops",
    "title": "In-class Exercise 1",
    "section": "Import Passenger Volume by Origin-Destination Bus Stops",
    "text": "Import Passenger Volume by Origin-Destination Bus Stops\nThe code chunk below uses the read_csv() function of readr package to import the csv file into R and save it as a R dataframe called odbus.\n\nodbus &lt;- read_csv(\"data/aspatial/origin_destination_bus_202308.csv\")\n\nA quick check of odbus tibble data frame shows that the values in OROGIN_PT_CODE and DESTINATON_PT_CODE are in numeric data type.\n\nglimpse(odbus)\n\nRows: 5,709,512\nColumns: 7\n$ YEAR_MONTH          &lt;chr&gt; \"2023-08\", \"2023-08\", \"2023-08\", \"2023-08\", \"2023-…\n$ DAY_TYPE            &lt;chr&gt; \"WEEKDAY\", \"WEEKENDS/HOLIDAY\", \"WEEKENDS/HOLIDAY\",…\n$ TIME_PER_HOUR       &lt;dbl&gt; 16, 16, 14, 14, 17, 17, 17, 17, 7, 17, 14, 10, 10,…\n$ PT_TYPE             &lt;chr&gt; \"BUS\", \"BUS\", \"BUS\", \"BUS\", \"BUS\", \"BUS\", \"BUS\", \"…\n$ ORIGIN_PT_CODE      &lt;chr&gt; \"04168\", \"04168\", \"80119\", \"80119\", \"44069\", \"4406…\n$ DESTINATION_PT_CODE &lt;chr&gt; \"10051\", \"10051\", \"90079\", \"90079\", \"17229\", \"1722…\n$ TOTAL_TRIPS         &lt;dbl&gt; 7, 2, 3, 10, 5, 4, 3, 22, 3, 3, 7, 1, 3, 1, 3, 1, …\n\n\nORIGIN_PT_CODE and DESTINATION_PT_CODE are numeric variables that are categorical in nature. As such, they should be transformed to factor so that R treats them as a grouping variable.\n\nodbus$ORIGIN_PT_CODE &lt;- as.factor(odbus$ORIGIN_PT_CODE)\nodbus$DESTINATION_PT_CODE &lt;- as.factor(odbus$DESTINATION_PT_CODE)\n\nNotice that both of them are in factor data type now.\n\nglimpse(odbus)\n\nRows: 5,709,512\nColumns: 7\n$ YEAR_MONTH          &lt;chr&gt; \"2023-08\", \"2023-08\", \"2023-08\", \"2023-08\", \"2023-…\n$ DAY_TYPE            &lt;chr&gt; \"WEEKDAY\", \"WEEKENDS/HOLIDAY\", \"WEEKENDS/HOLIDAY\",…\n$ TIME_PER_HOUR       &lt;dbl&gt; 16, 16, 14, 14, 17, 17, 17, 17, 7, 17, 14, 10, 10,…\n$ PT_TYPE             &lt;chr&gt; \"BUS\", \"BUS\", \"BUS\", \"BUS\", \"BUS\", \"BUS\", \"BUS\", \"…\n$ ORIGIN_PT_CODE      &lt;fct&gt; 04168, 04168, 80119, 80119, 44069, 44069, 20281, 2…\n$ DESTINATION_PT_CODE &lt;fct&gt; 10051, 10051, 90079, 90079, 17229, 17229, 20141, 2…\n$ TOTAL_TRIPS         &lt;dbl&gt; 7, 2, 3, 10, 5, 4, 3, 22, 3, 3, 7, 1, 3, 1, 3, 1, …"
  },
  {
    "objectID": "In-class Ex/In-class Ex1/In-class_Ex1_demo.html#extract-commuting-flow-data",
    "href": "In-class Ex/In-class Ex1/In-class_Ex1_demo.html#extract-commuting-flow-data",
    "title": "In-class Exercise 1",
    "section": "Extract Commuting Flow data",
    "text": "Extract Commuting Flow data\nThe code chunk below extracts commuting flows on weekday during the rush hour (7am to 9am).\n\norigin7_9 &lt;- odbus %&gt;%\n  filter(DAY_TYPE == \"WEEKDAY\") %&gt;%\n  filter(TIME_PER_HOUR &gt;= 7 &\n           TIME_PER_HOUR &lt;= 9) %&gt;%\n  group_by(ORIGIN_PT_CODE) %&gt;%\n  summarise(TRIPS = sum(TOTAL_TRIPS))\n\nIt should look similar to the data table below.\n\nkable(head(origin7_9))\n\n\n\n\nORIGIN_PT_CODE\nTRIPS\n\n\n\n\n01012\n1617\n\n\n01013\n813\n\n\n01019\n1620\n\n\n01029\n2383\n\n\n01039\n2727\n\n\n01059\n1415\n\n\n\n\n\nWe will save the output in rds format for future used.\n\nwrite_rds(origin7_9, \"data/rds/origin7_9.rds\")\n\nThe code chunk below will be used to import the save origin7_9.rds into R environment.\n\norigin7_9 &lt;- read_rds(\"data/rds/origin7_9.rds\")"
  },
  {
    "objectID": "In-class Ex/In-class Ex1/In-class_Ex1_demo.html#working-with-geospatial-data",
    "href": "In-class Ex/In-class Ex1/In-class_Ex1_demo.html#working-with-geospatial-data",
    "title": "In-class Exercise 1",
    "section": "Working with Geospatial Data",
    "text": "Working with Geospatial Data\nGeospatial data is adopted to enrich analysis.\n\nImport Bus Stop Locations\nThe code chunk below uses the st_read() function of sf package to import BusStop shapefile into R as a simple feature data frame called BusStop. As BusStop uses svy21 projected coordinate system, the crs is set to 3414.\n\nbusstop &lt;- st_read(dsn = \"data/geospatial\",\n                   layer = \"BusStop\") %&gt;%\n  st_transform(crs = 3414)\n\nReading layer `BusStop' from data source \n  `D:\\KathyChiu77\\ISSS624\\In-class Ex\\In-class Ex1\\data\\geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 5161 features and 3 fields\nGeometry type: POINT\nDimension:     XY\nBounding box:  xmin: 3970.122 ymin: 26482.1 xmax: 48284.56 ymax: 52983.82\nProjected CRS: SVY21\n\n\nThe structure of busstop sf tibble data frame should look as below.\n\nglimpse(busstop)\n\nRows: 5,161\nColumns: 4\n$ BUS_STOP_N &lt;chr&gt; \"22069\", \"32071\", \"44331\", \"96081\", \"11561\", \"66191\", \"2338…\n$ BUS_ROOF_N &lt;chr&gt; \"B06\", \"B23\", \"B01\", \"B05\", \"B05\", \"B03\", \"B02A\", \"B02\", \"B…\n$ LOC_DESC   &lt;chr&gt; \"OPP CEVA LOGISTICS\", \"AFT TRACK 13\", \"BLK 239\", \"GRACE IND…\n$ geometry   &lt;POINT [m]&gt; POINT (13576.31 32883.65), POINT (13228.59 44206.38),…\n\n\n\n\nImport Planning Subzone data\nThe code chunk below uses the st_read() function of sf package to import MPSZ-2019 shapefile into R as a simple feature data frame called mpsz. To ensure we can use mpsz together with BusStop, mpsz is reprojected to the svy21 projected coordinate system (crs=3413).\n\nmpsz &lt;- st_read(dsn = \"data/geospatial\",\n                   layer = \"MPSZ-2019\") %&gt;%\n  st_transform(crs = 3414)\n\nReading layer `MPSZ-2019' from data source \n  `D:\\KathyChiu77\\ISSS624\\In-class Ex\\In-class Ex1\\data\\geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 332 features and 6 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 103.6057 ymin: 1.158699 xmax: 104.0885 ymax: 1.470775\nGeodetic CRS:  WGS 84\n\n\nThe structure of mpsz sf tibble data frame should look as below.\n\nglimpse(mpsz)\n\nRows: 332\nColumns: 7\n$ SUBZONE_N  &lt;chr&gt; \"MARINA EAST\", \"INSTITUTION HILL\", \"ROBERTSON QUAY\", \"JURON…\n$ SUBZONE_C  &lt;chr&gt; \"MESZ01\", \"RVSZ05\", \"SRSZ01\", \"WISZ01\", \"MUSZ02\", \"MPSZ05\",…\n$ PLN_AREA_N &lt;chr&gt; \"MARINA EAST\", \"RIVER VALLEY\", \"SINGAPORE RIVER\", \"WESTERN …\n$ PLN_AREA_C &lt;chr&gt; \"ME\", \"RV\", \"SR\", \"WI\", \"MU\", \"MP\", \"WI\", \"WI\", \"SI\", \"SI\",…\n$ REGION_N   &lt;chr&gt; \"CENTRAL REGION\", \"CENTRAL REGION\", \"CENTRAL REGION\", \"WEST…\n$ REGION_C   &lt;chr&gt; \"CR\", \"CR\", \"CR\", \"WR\", \"CR\", \"CR\", \"WR\", \"WR\", \"CR\", \"CR\",…\n$ geometry   &lt;MULTIPOLYGON [m]&gt; MULTIPOLYGON (((33222.98 29..., MULTIPOLYGON (…"
  },
  {
    "objectID": "In-class Ex/In-class Ex1/In-class_Ex1_demo.html#geospatial-data-wrangling",
    "href": "In-class Ex/In-class Ex1/In-class_Ex1_demo.html#geospatial-data-wrangling",
    "title": "In-class Exercise 1",
    "section": "Geospatial data wrangling",
    "text": "Geospatial data wrangling\n\nCombining Busstop and mpsz\nCode chunk below populates the planning subzone code (i.e. SUBZONE_C) of mpsz sf data frame into busstop sf data frame.\n\nbusstop_mpsz &lt;- st_intersection(busstop, mpsz) %&gt;%\n  select(BUS_STOP_N, SUBZONE_C) %&gt;%\n  st_drop_geometry()\n\nBefore moving to the next step, it is wise to save the output into rds format.\n\nwrite_rds(busstop_mpsz, \"data/rds/busstop_mpsz.csv\")  \n\n\norigin_data &lt;- left_join(origin7_9 , busstop_mpsz,\n            by = c(\"ORIGIN_PT_CODE\" = \"BUS_STOP_N\")) %&gt;%\n  rename(ORIGIN_BS = ORIGIN_PT_CODE,\n         ORIGIN_SZ = SUBZONE_C)\n\nBefore continue, it is a good practice for us to check for duplicating records.\n\nduplicate &lt;- origin_data %&gt;%\n  group_by_all() %&gt;%\n  filter(n()&gt;1) %&gt;%\n  ungroup()\n\nIf duplicated records are found, the code chunk below will be used to retain the unique records.\n\norigin_data &lt;- unique(origin_data)\n\nIt will be a good practice to confirm if the duplicating records issue has been addressed fully.\n\nmpsz_origtrip &lt;- left_join(mpsz, \n                           origin_data,\n                           by = c(\"SUBZONE_C\" = \"ORIGIN_SZ\"))"
  },
  {
    "objectID": "In-class Ex/In-class Ex1/In-class_Ex1_demo.html#choropleth-visualisation",
    "href": "In-class Ex/In-class Ex1/In-class_Ex1_demo.html#choropleth-visualisation",
    "title": "In-class Exercise 1",
    "section": "Choropleth Visualisation",
    "text": "Choropleth Visualisation\nPrepare a choropleth map showing the distribution of passenger trips at planning sub-zone.\n\ntm_shape(mpsz_origtrip)+\n  tm_fill(\"TRIPS\", \n          style = \"quantile\", \n          palette = \"Blues\",\n          title = \"Passenger trips\") +\n  tm_layout(main.title = \"Passenger trips generated at planning sub-zone level\",\n            main.title.position = \"center\",\n            main.title.size = 1.2,\n            legend.height = 0.45, \n            legend.width = 0.35,\n            frame = TRUE) +\n  tm_borders(alpha = 0.5) +\n  tm_compass(type=\"8star\", size = 2) +\n  tm_scale_bar() +\n  tm_grid(alpha =0.2) +\n  tm_credits(\"Source: Planning Sub-zone boundary from Urban Redevelopment Authorithy (URA)\\n and Population data from Department of Statistics DOS\", \n             position = c(\"left\", \"bottom\"))"
  },
  {
    "objectID": "Hands-on Ex/Hands-on_Ex4/Hands-on_Ex_4.html",
    "href": "Hands-on Ex/Hands-on_Ex4/Hands-on_Ex_4.html",
    "title": "Hands-on Exercise 4: Calibrating Hedonic Pricing Model for Private Highrise Property with GWR Method",
    "section": "",
    "text": "Geographically weighted regression (GWR) is a spatial statistical technique that takes non-stationary variables into consideration (e.g., climate; demographic factors; physical environment characteristics) and models the local relationships between these independent variables and an outcome of interest (also known as dependent variable). In this hands-on exercise, we will show how to build hedonic pricing models by using GWR methods. The dependent variable is the resale prices of condominium in 2015. The independent variables are divided into either structural and locational."
  },
  {
    "objectID": "Hands-on Ex/Hands-on_Ex4/Hands-on_Ex_4.html#overview",
    "href": "Hands-on Ex/Hands-on_Ex4/Hands-on_Ex_4.html#overview",
    "title": "Hands-on Exercise 4: Calibrating Hedonic Pricing Model for Private Highrise Property with GWR Method",
    "section": "",
    "text": "Geographically weighted regression (GWR) is a spatial statistical technique that takes non-stationary variables into consideration (e.g., climate; demographic factors; physical environment characteristics) and models the local relationships between these independent variables and an outcome of interest (also known as dependent variable). In this hands-on exercise, we will show how to build hedonic pricing models by using GWR methods. The dependent variable is the resale prices of condominium in 2015. The independent variables are divided into either structural and locational."
  },
  {
    "objectID": "Hands-on Ex/Hands-on_Ex4/Hands-on_Ex_4.html#the-data",
    "href": "Hands-on Ex/Hands-on_Ex4/Hands-on_Ex_4.html#the-data",
    "title": "Hands-on Exercise 4: Calibrating Hedonic Pricing Model for Private Highrise Property with GWR Method",
    "section": "4.2 The Data",
    "text": "4.2 The Data\nTwo data sets will be used in this model building exercise, they are:\n\nURA Master Plan subzone boundary in shapefile format (i.e. MP14_SUBZONE_WEB_PL)\ncondo_resale_2015 in csv format (i.e. condo_resale_2015.csv)"
  },
  {
    "objectID": "Hands-on Ex/Hands-on_Ex4/Hands-on_Ex_4.html#getting-started",
    "href": "Hands-on Ex/Hands-on_Ex4/Hands-on_Ex_4.html#getting-started",
    "title": "Hands-on Exercise 4: Calibrating Hedonic Pricing Model for Private Highrise Property with GWR Method",
    "section": "4.3 Getting Started",
    "text": "4.3 Getting Started\nBefore we get started, it is important for us to install the necessary R packages into R and launch these R packages into R environment.\nThe R packages needed for this exercise are as follows:\n\nR package for building OLS and performing diagnostics tests\n\nolsrr\n\nR package for calibrating geographical weighted family of models\n\nGWmodel\n\nR package for multivariate data visualisation and analysis\n\ncorrplot\n\nSpatial data handling\n\nsf\n\nAttribute data handling\n\ntidyverse, especially readr, ggplot2 and dplyr\n\nChoropleth mapping\n\ntmap\n\n\nThe code chunks below installs and launches these R packages into R environment.\n\npacman::p_load(olsrr, corrplot, ggpubr, sf, spdep, GWmodel, tmap, tidyverse, gtsummary)"
  },
  {
    "objectID": "Hands-on Ex/Hands-on_Ex4/Hands-on_Ex_4.html#a-short-note-about-gwmodel",
    "href": "Hands-on Ex/Hands-on_Ex4/Hands-on_Ex_4.html#a-short-note-about-gwmodel",
    "title": "Hands-on Exercise 4: Calibrating Hedonic Pricing Model for Private Highrise Property with GWR Method",
    "section": "4.4 A short note about GWmodel",
    "text": "4.4 A short note about GWmodel\nGWmodel package provides a collection of localised spatial statistical methods, namely: GW summary statistics, GW principal components analysis, GW discriminant analysis and various forms of GW regression; some of which are provided in basic and robust (outlier resistant) forms. Commonly, outputs or parameters of the GWmodel are mapped to provide a useful exploratory tool, which can often precede (and direct) a more traditional or sophisticated statistical analysis."
  },
  {
    "objectID": "Hands-on Ex/Hands-on_Ex4/Hands-on_Ex_4.html#geospatial-data-wrangling",
    "href": "Hands-on Ex/Hands-on_Ex4/Hands-on_Ex_4.html#geospatial-data-wrangling",
    "title": "Hands-on Exercise 4: Calibrating Hedonic Pricing Model for Private Highrise Property with GWR Method",
    "section": "4.5 Geospatial Data Wrangling",
    "text": "4.5 Geospatial Data Wrangling\n\n4.5.1 Importing geospatial data\nThe geospatial data used in this hands-on exercise is called MP14_SUBZONE_WEB_PL. It is in ESRI shapefile format. The shapefile consists of URA Master Plan 2014’s planning subzone boundaries. Polygon features are used to represent these geographic boundaries. The GIS data is in svy21 projected coordinates systems.\nThe code chunk below is used to import MP_SUBZONE_WEB_PL shapefile by using st_read() of sf packages.\n\nmpsz = st_read(dsn = \"data/geospatial\", layer = \"MP14_SUBZONE_WEB_PL\")\n\nReading layer `MP14_SUBZONE_WEB_PL' from data source \n  `D:\\KathyChiu77\\ISSS624\\Hands-on Ex\\Hands-on_Ex4\\data\\geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 323 features and 15 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2667.538 ymin: 15748.72 xmax: 56396.44 ymax: 50256.33\nProjected CRS: SVY21\n\n\nThe report above shows that the R object used to contain the imported MP14_SUBZONE_WEB_PL shapefile is called mpsz and it is a simple feature object. The geometry type is multipolygon. it is also important to note that mpsz simple feature object does not have EPSG information.\n\n\n4.5.2 Updating CRS information\nThe code chunk below updates the newly imported mpsz with the correct ESPG code (i.e. 3414)\n\nmpsz_svy21 &lt;- st_transform(mpsz, 3414)\n\nAfter transforming the projection metadata, you can varify the projection of the newly transformed mpsz_svy21 by using st_crs() of sf package.\nThe code chunk below will be used to varify the newly transformed mpsz_svy21.\n\nst_crs(mpsz_svy21)\n\nCoordinate Reference System:\n  User input: EPSG:3414 \n  wkt:\nPROJCRS[\"SVY21 / Singapore TM\",\n    BASEGEOGCRS[\"SVY21\",\n        DATUM[\"SVY21\",\n            ELLIPSOID[\"WGS 84\",6378137,298.257223563,\n                LENGTHUNIT[\"metre\",1]]],\n        PRIMEM[\"Greenwich\",0,\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n        ID[\"EPSG\",4757]],\n    CONVERSION[\"Singapore Transverse Mercator\",\n        METHOD[\"Transverse Mercator\",\n            ID[\"EPSG\",9807]],\n        PARAMETER[\"Latitude of natural origin\",1.36666666666667,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8801]],\n        PARAMETER[\"Longitude of natural origin\",103.833333333333,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8802]],\n        PARAMETER[\"Scale factor at natural origin\",1,\n            SCALEUNIT[\"unity\",1],\n            ID[\"EPSG\",8805]],\n        PARAMETER[\"False easting\",28001.642,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8806]],\n        PARAMETER[\"False northing\",38744.572,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8807]]],\n    CS[Cartesian,2],\n        AXIS[\"northing (N)\",north,\n            ORDER[1],\n            LENGTHUNIT[\"metre\",1]],\n        AXIS[\"easting (E)\",east,\n            ORDER[2],\n            LENGTHUNIT[\"metre\",1]],\n    USAGE[\n        SCOPE[\"Cadastre, engineering survey, topographic mapping.\"],\n        AREA[\"Singapore - onshore and offshore.\"],\n        BBOX[1.13,103.59,1.47,104.07]],\n    ID[\"EPSG\",3414]]\n\n\nNotice that the EPSG: is indicated as 3414 now.\nNext, you will reveal the extent of mpsz_svy21 by using st_bbox() of sf package.\n\nst_bbox(mpsz_svy21) #view extent\n\n     xmin      ymin      xmax      ymax \n 2667.538 15748.721 56396.440 50256.334"
  },
  {
    "objectID": "Hands-on Ex/Hands-on_Ex4/Hands-on_Ex_4.html#aspatial-data-wrangling",
    "href": "Hands-on Ex/Hands-on_Ex4/Hands-on_Ex_4.html#aspatial-data-wrangling",
    "title": "Hands-on Exercise 4: Calibrating Hedonic Pricing Model for Private Highrise Property with GWR Method",
    "section": "4.6 Aspatial Data Wrangling",
    "text": "4.6 Aspatial Data Wrangling\n\n4.6.1 Importing the aspatial data\nThe condo_resale_2015 is in csv file format. The codes chunk below uses read_csv() function of readr package to import condo_resale_2015 into R as a tibble data frame called condo_resale.\n\ncondo_resale = read_csv(\"data/aspatial/Condo_resale_2015.csv\")\n\nAfter importing the data file into R, it is important for us to examine if the data file has been imported correctly.\nThe codes chunks below uses glimpse() to display the data structure of will do the job.\n\nglimpse(condo_resale)\n\nRows: 1,436\nColumns: 23\n$ LATITUDE             &lt;dbl&gt; 1.287145, 1.328698, 1.313727, 1.308563, 1.321437,…\n$ LONGITUDE            &lt;dbl&gt; 103.7802, 103.8123, 103.7971, 103.8247, 103.9505,…\n$ POSTCODE             &lt;dbl&gt; 118635, 288420, 267833, 258380, 467169, 466472, 3…\n$ SELLING_PRICE        &lt;dbl&gt; 3000000, 3880000, 3325000, 4250000, 1400000, 1320…\n$ AREA_SQM             &lt;dbl&gt; 309, 290, 248, 127, 145, 139, 218, 141, 165, 168,…\n$ AGE                  &lt;dbl&gt; 30, 32, 33, 7, 28, 22, 24, 24, 27, 31, 17, 22, 6,…\n$ PROX_CBD             &lt;dbl&gt; 7.941259, 6.609797, 6.898000, 4.038861, 11.783402…\n$ PROX_CHILDCARE       &lt;dbl&gt; 0.16597932, 0.28027246, 0.42922669, 0.39473543, 0…\n$ PROX_ELDERLYCARE     &lt;dbl&gt; 2.5198118, 1.9333338, 0.5021395, 1.9910316, 1.121…\n$ PROX_URA_GROWTH_AREA &lt;dbl&gt; 6.618741, 7.505109, 6.463887, 4.906512, 6.410632,…\n$ PROX_HAWKER_MARKET   &lt;dbl&gt; 1.76542207, 0.54507614, 0.37789301, 1.68259969, 0…\n$ PROX_KINDERGARTEN    &lt;dbl&gt; 0.05835552, 0.61592412, 0.14120309, 0.38200076, 0…\n$ PROX_MRT             &lt;dbl&gt; 0.5607188, 0.6584461, 0.3053433, 0.6910183, 0.528…\n$ PROX_PARK            &lt;dbl&gt; 1.1710446, 0.1992269, 0.2779886, 0.9832843, 0.116…\n$ PROX_PRIMARY_SCH     &lt;dbl&gt; 1.6340256, 0.9747834, 1.4715016, 1.4546324, 0.709…\n$ PROX_TOP_PRIMARY_SCH &lt;dbl&gt; 3.3273195, 0.9747834, 1.4715016, 2.3006394, 0.709…\n$ PROX_SHOPPING_MALL   &lt;dbl&gt; 2.2102717, 2.9374279, 1.2256850, 0.3525671, 1.307…\n$ PROX_SUPERMARKET     &lt;dbl&gt; 0.9103958, 0.5900617, 0.4135583, 0.4162219, 0.581…\n$ PROX_BUS_STOP        &lt;dbl&gt; 0.10336166, 0.28673408, 0.28504777, 0.29872340, 0…\n$ NO_Of_UNITS          &lt;dbl&gt; 18, 20, 27, 30, 30, 31, 32, 32, 32, 32, 34, 34, 3…\n$ FAMILY_FRIENDLY      &lt;dbl&gt; 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0…\n$ FREEHOLD             &lt;dbl&gt; 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1…\n$ LEASEHOLD_99YR       &lt;dbl&gt; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0…\n\n\n\nhead(condo_resale$LONGITUDE) #see the data in XCOORD column\n\n[1] 103.7802 103.8123 103.7971 103.8247 103.9505 103.9386\n\n\n\nhead(condo_resale$LATITUDE) #see the data in YCOORD column\n\n[1] 1.287145 1.328698 1.313727 1.308563 1.321437 1.314198\n\n\nNext, summary() of base R is used to display the summary statistics of cond_resale tibble data frame.\n\nsummary(condo_resale)\n\n    LATITUDE       LONGITUDE        POSTCODE      SELLING_PRICE     \n Min.   :1.240   Min.   :103.7   Min.   : 18965   Min.   :  540000  \n 1st Qu.:1.309   1st Qu.:103.8   1st Qu.:259849   1st Qu.: 1100000  \n Median :1.328   Median :103.8   Median :469298   Median : 1383222  \n Mean   :1.334   Mean   :103.8   Mean   :440439   Mean   : 1751211  \n 3rd Qu.:1.357   3rd Qu.:103.9   3rd Qu.:589486   3rd Qu.: 1950000  \n Max.   :1.454   Max.   :104.0   Max.   :828833   Max.   :18000000  \n    AREA_SQM          AGE           PROX_CBD       PROX_CHILDCARE    \n Min.   : 34.0   Min.   : 0.00   Min.   : 0.3869   Min.   :0.004927  \n 1st Qu.:103.0   1st Qu.: 5.00   1st Qu.: 5.5574   1st Qu.:0.174481  \n Median :121.0   Median :11.00   Median : 9.3567   Median :0.258135  \n Mean   :136.5   Mean   :12.14   Mean   : 9.3254   Mean   :0.326313  \n 3rd Qu.:156.0   3rd Qu.:18.00   3rd Qu.:12.6661   3rd Qu.:0.368293  \n Max.   :619.0   Max.   :37.00   Max.   :19.1804   Max.   :3.465726  \n PROX_ELDERLYCARE  PROX_URA_GROWTH_AREA PROX_HAWKER_MARKET PROX_KINDERGARTEN \n Min.   :0.05451   Min.   :0.2145       Min.   :0.05182    Min.   :0.004927  \n 1st Qu.:0.61254   1st Qu.:3.1643       1st Qu.:0.55245    1st Qu.:0.276345  \n Median :0.94179   Median :4.6186       Median :0.90842    Median :0.413385  \n Mean   :1.05351   Mean   :4.5981       Mean   :1.27987    Mean   :0.458903  \n 3rd Qu.:1.35122   3rd Qu.:5.7550       3rd Qu.:1.68578    3rd Qu.:0.578474  \n Max.   :3.94916   Max.   :9.1554       Max.   :5.37435    Max.   :2.229045  \n    PROX_MRT         PROX_PARK       PROX_PRIMARY_SCH  PROX_TOP_PRIMARY_SCH\n Min.   :0.05278   Min.   :0.02906   Min.   :0.07711   Min.   :0.07711     \n 1st Qu.:0.34646   1st Qu.:0.26211   1st Qu.:0.44024   1st Qu.:1.34451     \n Median :0.57430   Median :0.39926   Median :0.63505   Median :1.88213     \n Mean   :0.67316   Mean   :0.49802   Mean   :0.75471   Mean   :2.27347     \n 3rd Qu.:0.84844   3rd Qu.:0.65592   3rd Qu.:0.95104   3rd Qu.:2.90954     \n Max.   :3.48037   Max.   :2.16105   Max.   :3.92899   Max.   :6.74819     \n PROX_SHOPPING_MALL PROX_SUPERMARKET PROX_BUS_STOP       NO_Of_UNITS    \n Min.   :0.0000     Min.   :0.0000   Min.   :0.001595   Min.   :  18.0  \n 1st Qu.:0.5258     1st Qu.:0.3695   1st Qu.:0.098356   1st Qu.: 188.8  \n Median :0.9357     Median :0.5687   Median :0.151710   Median : 360.0  \n Mean   :1.0455     Mean   :0.6141   Mean   :0.193974   Mean   : 409.2  \n 3rd Qu.:1.3994     3rd Qu.:0.7862   3rd Qu.:0.220466   3rd Qu.: 590.0  \n Max.   :3.4774     Max.   :2.2441   Max.   :2.476639   Max.   :1703.0  \n FAMILY_FRIENDLY     FREEHOLD      LEASEHOLD_99YR  \n Min.   :0.0000   Min.   :0.0000   Min.   :0.0000  \n 1st Qu.:0.0000   1st Qu.:0.0000   1st Qu.:0.0000  \n Median :0.0000   Median :0.0000   Median :0.0000  \n Mean   :0.4868   Mean   :0.4227   Mean   :0.4882  \n 3rd Qu.:1.0000   3rd Qu.:1.0000   3rd Qu.:1.0000  \n Max.   :1.0000   Max.   :1.0000   Max.   :1.0000  \n\n\n\n\n4.6.2 Converting aspatial data frame into a sf object\nCurrently, the condo_resale tibble data frame is aspatial. We will convert it to a sf object. The code chunk below converts condo_resale data frame into a simple feature data frame by using st_as_sf() of sf packages.\n\ncondo_resale.sf &lt;- st_as_sf(condo_resale,\n                            coords = c(\"LONGITUDE\", \"LATITUDE\"),\n                            crs=4326) %&gt;%\n  st_transform(crs=3414)\n\nNotice that st_transform() of sf package is used to convert the coordinates from wgs84 (i.e. crs:4326) to svy21 (i.e. crs=3414).\nNext, head() is used to list the content of condo_resale.sf object.\n\nhead(condo_resale.sf)\n\nSimple feature collection with 6 features and 21 fields\nGeometry type: POINT\nDimension:     XY\nBounding box:  xmin: 22085.12 ymin: 29951.54 xmax: 41042.56 ymax: 34546.2\nProjected CRS: SVY21 / Singapore TM\n# A tibble: 6 × 22\n  POSTCODE SELLING_PRICE AREA_SQM   AGE PROX_CBD PROX_CHILDCARE PROX_ELDERLYCARE\n     &lt;dbl&gt;         &lt;dbl&gt;    &lt;dbl&gt; &lt;dbl&gt;    &lt;dbl&gt;          &lt;dbl&gt;            &lt;dbl&gt;\n1   118635       3000000      309    30     7.94          0.166            2.52 \n2   288420       3880000      290    32     6.61          0.280            1.93 \n3   267833       3325000      248    33     6.90          0.429            0.502\n4   258380       4250000      127     7     4.04          0.395            1.99 \n5   467169       1400000      145    28    11.8           0.119            1.12 \n6   466472       1320000      139    22    10.3           0.125            0.789\n# ℹ 15 more variables: PROX_URA_GROWTH_AREA &lt;dbl&gt;, PROX_HAWKER_MARKET &lt;dbl&gt;,\n#   PROX_KINDERGARTEN &lt;dbl&gt;, PROX_MRT &lt;dbl&gt;, PROX_PARK &lt;dbl&gt;,\n#   PROX_PRIMARY_SCH &lt;dbl&gt;, PROX_TOP_PRIMARY_SCH &lt;dbl&gt;,\n#   PROX_SHOPPING_MALL &lt;dbl&gt;, PROX_SUPERMARKET &lt;dbl&gt;, PROX_BUS_STOP &lt;dbl&gt;,\n#   NO_Of_UNITS &lt;dbl&gt;, FAMILY_FRIENDLY &lt;dbl&gt;, FREEHOLD &lt;dbl&gt;,\n#   LEASEHOLD_99YR &lt;dbl&gt;, geometry &lt;POINT [m]&gt;\n\n\nNotice that the output is in point feature data frame."
  },
  {
    "objectID": "Hands-on Ex/Hands-on_Ex4/Hands-on_Ex_4.html#exploratory-data-analysis-eda",
    "href": "Hands-on Ex/Hands-on_Ex4/Hands-on_Ex_4.html#exploratory-data-analysis-eda",
    "title": "Hands-on Exercise 4: Calibrating Hedonic Pricing Model for Private Highrise Property with GWR Method",
    "section": "4.7 Exploratory Data Analysis (EDA)",
    "text": "4.7 Exploratory Data Analysis (EDA)\nIn the section, you will learn how to use statistical graphics functions of ggplot2 package to perform EDA.\n\n4.7.1 EDA using statistical graphics\nWe can plot the distribution of SELLING_PRICE by using appropriate Exploratory Data Analysis (EDA) as shown in the code chunk below.\n\nggplot(data=condo_resale.sf, aes(x=`SELLING_PRICE`)) +\n  geom_histogram(bins=20, color=\"black\", fill=\"light blue\")\n\n\n\n\nThe figure above reveals a right skewed distribution. This means that more condominium units were transacted at relative lower prices.\nStatistically, the skewed dsitribution can be normalised by using log transformation. The code chunk below is used to derive a new variable called LOG_SELLING_PRICE by using a log transformation on the variable SELLING_PRICE. It is performed using mutate() of dplyr package.\n\ncondo_resale.sf &lt;- condo_resale.sf %&gt;%\n  mutate(`LOG_SELLING_PRICE` = log(SELLING_PRICE))\n\nNow plot the LOG_SELLING_PRICE using the code chunk below.\n\nggplot(data=condo_resale.sf, aes(x=`LOG_SELLING_PRICE`)) +\n  geom_histogram(bins=20, color=\"black\", fill=\"light blue\")\n\n\n\n\nNotice that the distribution is relatively less skewed after the transformation.\n\n\n4.7.2 Multiple Histogram Plots distribution of variables\nIn this section, you will learn how to draw a small multiple histograms (also known as trellis plot) by using ggarrange() of ggpubr package.\nThe code chunk below is used to create 12 histograms. Then, ggarrange() is used to organised these histogram into a 3 columns by 4 rows small multiple plot.\n\nAREA_SQM &lt;- ggplot(data=condo_resale.sf, aes(x= `AREA_SQM`)) + \n  geom_histogram(bins=20, color=\"black\", fill=\"light blue\")\n\nAGE &lt;- ggplot(data=condo_resale.sf, aes(x= `AGE`)) +\n  geom_histogram(bins=20, color=\"black\", fill=\"light blue\")\n\nPROX_CBD &lt;- ggplot(data=condo_resale.sf, aes(x= `PROX_CBD`)) +\n  geom_histogram(bins=20, color=\"black\", fill=\"light blue\")\n\nPROX_CHILDCARE &lt;- ggplot(data=condo_resale.sf, aes(x= `PROX_CHILDCARE`)) + \n  geom_histogram(bins=20, color=\"black\", fill=\"light blue\")\n\nPROX_ELDERLYCARE &lt;- ggplot(data=condo_resale.sf, aes(x= `PROX_ELDERLYCARE`)) +\n  geom_histogram(bins=20, color=\"black\", fill=\"light blue\")\n\nPROX_URA_GROWTH_AREA &lt;- ggplot(data=condo_resale.sf, \n                               aes(x= `PROX_URA_GROWTH_AREA`)) +\n  geom_histogram(bins=20, color=\"black\", fill=\"light blue\")\n\nPROX_HAWKER_MARKET &lt;- ggplot(data=condo_resale.sf, aes(x= `PROX_HAWKER_MARKET`)) +\n  geom_histogram(bins=20, color=\"black\", fill=\"light blue\")\n\nPROX_KINDERGARTEN &lt;- ggplot(data=condo_resale.sf, aes(x= `PROX_KINDERGARTEN`)) +\n  geom_histogram(bins=20, color=\"black\", fill=\"light blue\")\n\nPROX_MRT &lt;- ggplot(data=condo_resale.sf, aes(x= `PROX_MRT`)) +\n  geom_histogram(bins=20, color=\"black\", fill=\"light blue\")\n\nPROX_PARK &lt;- ggplot(data=condo_resale.sf, aes(x= `PROX_PARK`)) +\n  geom_histogram(bins=20, color=\"black\", fill=\"light blue\")\n\nPROX_PRIMARY_SCH &lt;- ggplot(data=condo_resale.sf, aes(x= `PROX_PRIMARY_SCH`)) +\n  geom_histogram(bins=20, color=\"black\", fill=\"light blue\")\n\nPROX_TOP_PRIMARY_SCH &lt;- ggplot(data=condo_resale.sf, \n                               aes(x= `PROX_TOP_PRIMARY_SCH`)) +\n  geom_histogram(bins=20, color=\"black\", fill=\"light blue\")\n\nggarrange(AREA_SQM, AGE, PROX_CBD, PROX_CHILDCARE, PROX_ELDERLYCARE, \n          PROX_URA_GROWTH_AREA, PROX_HAWKER_MARKET, PROX_KINDERGARTEN, PROX_MRT,\n          PROX_PARK, PROX_PRIMARY_SCH, PROX_TOP_PRIMARY_SCH,  \n          ncol = 3, nrow = 4)\n\n\n\n\n\n\n4.7.3 Drawing Statistical Point Map\nLastly, we want to reveal the geospatial distribution condominium resale prices in Singapore. The map will be prepared by using tmap package.\nFirst, we will turn on the interactive mode of tmap by using the code chunk below.\n\ntmap_mode(\"view\")\n\nNext, the code chunks below is used to create an interactive point symbol map.\n\n#tm_shape(mpsz_svy21)+\n#  tm_polygons() +\n#tm_shape(condo_resale.sf) +  \n#  tm_dots(col = \"SELLING_PRICE\",\n#          alpha = 0.6,\n#          style=\"quantile\") +\n#  tm_view(set.zoom.limits = c(11,14))\n\nNotice that tm_dots() is used instead of tm_bubbles().\nset.zoom.limits argument of tm_view() sets the minimum and maximum zoom level to 11 and 14 respectively.\nBefore moving on to the next section, the code below will be used to turn R display into plot mode.\n\ntmap_mode(\"plot\")"
  },
  {
    "objectID": "Hands-on Ex/Hands-on_Ex4/Hands-on_Ex_4.html#hedonic-pricing-modelling-in-r",
    "href": "Hands-on Ex/Hands-on_Ex4/Hands-on_Ex_4.html#hedonic-pricing-modelling-in-r",
    "title": "Hands-on Exercise 4: Calibrating Hedonic Pricing Model for Private Highrise Property with GWR Method",
    "section": "4.8 Hedonic Pricing Modelling in R",
    "text": "4.8 Hedonic Pricing Modelling in R\nIn this section, you will learn how to building hedonic pricing models for condominium resale units using lm() of R base.\n\n4.8.1 Simple Linear Regression Method\nFirst, we will build a simple linear regression model by using SELLING_PRICE as the dependent variable and AREA_SQM as the independent variable.\n\ncondo.slr &lt;- lm(formula=SELLING_PRICE ~ AREA_SQM, data = condo_resale.sf)\n\nlm() returns an object of class “lm” or for multiple responses of class c(“mlm”, “lm”).\nThe functions summary() and anova() can be used to obtain and print a summary and analysis of variance table of the results. The generic accessor functions coefficients, effects, fitted.values and residuals extract various useful features of the value returned by lm.\n\nsummary(condo.slr)\n\n\nCall:\nlm(formula = SELLING_PRICE ~ AREA_SQM, data = condo_resale.sf)\n\nResiduals:\n     Min       1Q   Median       3Q      Max \n-3695815  -391764   -87517   258900 13503875 \n\nCoefficients:\n             Estimate Std. Error t value Pr(&gt;|t|)    \n(Intercept) -258121.1    63517.2  -4.064 5.09e-05 ***\nAREA_SQM      14719.0      428.1  34.381  &lt; 2e-16 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 942700 on 1434 degrees of freedom\nMultiple R-squared:  0.4518,    Adjusted R-squared:  0.4515 \nF-statistic:  1182 on 1 and 1434 DF,  p-value: &lt; 2.2e-16\n\n\nThe R-squared of 0.4518 reveals that the simple regression model built is able to explain about 45% of the resale prices.\nSince p-value is much smaller than 0.0001, we will reject the null hypothesis that mean is a good estimator of SELLING_PRICE. This will allow us to infer that simple linear regression model above is a good estimator of SELLING_PRICE.\nThe Coefficients: section of the report reveals that the p-values of both the estimates of the Intercept and ARA_SQM are smaller than 0.001. In view of this, the null hypothesis of the B0 and B1 are equal to 0 will be rejected. As a results, we will be able to infer that the B0 and B1 are good parameter estimates.\nTo visualise the best fit curve on a scatterplot, we can incorporate lm() as a method function in ggplot’s geometry as shown in the code chunk below.\n\nggplot(data=condo_resale.sf,  \n       aes(x=`AREA_SQM`, y=`SELLING_PRICE`)) +\n  geom_point() +\n  geom_smooth(method = lm)\n\n\n\n\nFigure above reveals that there are a few statistical outliers with relatively high selling prices.\n\n\n4.8.2 Multiple Linear Regression Method\n\n4.8.2.1 Visualising the relationships of the independent variables\nBefore building a multiple regression model, it is important to ensure that the indepdent variables used are not highly correlated to each other. If these highly correlated independent variables are used in building a regression model by mistake, the quality of the model will be compromised. This phenomenon is known as multicollinearity in statistics.\nCorrelation matrix is commonly used to visualise the relationships between the independent variables. Beside the pairs() of R, there are many packages support the display of a correlation matrix. In this section, the corrplot package will be used.\nThe code chunk below is used to plot a scatterplot matrix of the relationship between the independent variables in condo_resale data.frame.\n\ncorrplot(cor(condo_resale[, 5:23]), diag = FALSE, order = \"AOE\",\n         tl.pos = \"td\", tl.cex = 0.5, method = \"number\", type = \"upper\")\n\n\n\n\nMatrix reorder is very important for mining the hiden structure and patter in the matrix. There are four methods in corrplot (parameter order), named “AOE”, “FPC”, “hclust”, “alphabet”. In the code chunk above, AOE order is used. It orders the variables by using the angular order of the eigenvectors method suggested by Michael Friendly.\nFrom the scatterplot matrix, it is clear that Freehold is highly correlated to LEASE_99YEAR. In view of this, it is wiser to only include either one of them in the subsequent model building. As a result, LEASE_99YEAR is excluded in the subsequent model building.\n\n\n\n4.8.3 Building a hedonic pricing model using multiple linear regression method\nThe code chunk below using lm() to calibrate the multiple linear regression model.\n\ncondo.mlr &lt;- lm(formula = SELLING_PRICE ~ AREA_SQM + AGE    + \n                  PROX_CBD + PROX_CHILDCARE + PROX_ELDERLYCARE +\n                  PROX_URA_GROWTH_AREA + PROX_HAWKER_MARKET + PROX_KINDERGARTEN + \n                  PROX_MRT  + PROX_PARK + PROX_PRIMARY_SCH + \n                  PROX_TOP_PRIMARY_SCH + PROX_SHOPPING_MALL + PROX_SUPERMARKET + \n                  PROX_BUS_STOP + NO_Of_UNITS + FAMILY_FRIENDLY + FREEHOLD, \n                data=condo_resale.sf)\nsummary(condo.mlr)\n\n\nCall:\nlm(formula = SELLING_PRICE ~ AREA_SQM + AGE + PROX_CBD + PROX_CHILDCARE + \n    PROX_ELDERLYCARE + PROX_URA_GROWTH_AREA + PROX_HAWKER_MARKET + \n    PROX_KINDERGARTEN + PROX_MRT + PROX_PARK + PROX_PRIMARY_SCH + \n    PROX_TOP_PRIMARY_SCH + PROX_SHOPPING_MALL + PROX_SUPERMARKET + \n    PROX_BUS_STOP + NO_Of_UNITS + FAMILY_FRIENDLY + FREEHOLD, \n    data = condo_resale.sf)\n\nResiduals:\n     Min       1Q   Median       3Q      Max \n-3475964  -293923   -23069   241043 12260381 \n\nCoefficients:\n                       Estimate Std. Error t value Pr(&gt;|t|)    \n(Intercept)           481728.40  121441.01   3.967 7.65e-05 ***\nAREA_SQM               12708.32     369.59  34.385  &lt; 2e-16 ***\nAGE                   -24440.82    2763.16  -8.845  &lt; 2e-16 ***\nPROX_CBD              -78669.78    6768.97 -11.622  &lt; 2e-16 ***\nPROX_CHILDCARE       -351617.91  109467.25  -3.212  0.00135 ** \nPROX_ELDERLYCARE      171029.42   42110.51   4.061 5.14e-05 ***\nPROX_URA_GROWTH_AREA   38474.53   12523.57   3.072  0.00217 ** \nPROX_HAWKER_MARKET     23746.10   29299.76   0.810  0.41782    \nPROX_KINDERGARTEN     147468.99   82668.87   1.784  0.07466 .  \nPROX_MRT             -314599.68   57947.44  -5.429 6.66e-08 ***\nPROX_PARK             563280.50   66551.68   8.464  &lt; 2e-16 ***\nPROX_PRIMARY_SCH      180186.08   65237.95   2.762  0.00582 ** \nPROX_TOP_PRIMARY_SCH    2280.04   20410.43   0.112  0.91107    \nPROX_SHOPPING_MALL   -206604.06   42840.60  -4.823 1.57e-06 ***\nPROX_SUPERMARKET      -44991.80   77082.64  -0.584  0.55953    \nPROX_BUS_STOP         683121.35  138353.28   4.938 8.85e-07 ***\nNO_Of_UNITS             -231.18      89.03  -2.597  0.00951 ** \nFAMILY_FRIENDLY       140340.77   47020.55   2.985  0.00289 ** \nFREEHOLD              359913.01   49220.22   7.312 4.38e-13 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 755800 on 1417 degrees of freedom\nMultiple R-squared:  0.6518,    Adjusted R-squared:  0.6474 \nF-statistic: 147.4 on 18 and 1417 DF,  p-value: &lt; 2.2e-16\n\n\n\n\n4.8.4 Preparing Publication Quality Table: olsrr method\nWith reference to the report above, it is clear that not all the independent variables are statistically significant. We will revised the model by removing those variables which are not statistically significant.\nNow, we are ready to calibrate the revised model by using the code chunk below.\n\ncondo.mlr1 &lt;- lm(formula = SELLING_PRICE ~ AREA_SQM + AGE + \n                   PROX_CBD + PROX_CHILDCARE + PROX_ELDERLYCARE +\n                   PROX_URA_GROWTH_AREA + PROX_MRT  + PROX_PARK + \n                   PROX_PRIMARY_SCH + PROX_SHOPPING_MALL    + PROX_BUS_STOP + \n                   NO_Of_UNITS + FAMILY_FRIENDLY + FREEHOLD,\n                 data=condo_resale.sf)\nols_regress(condo.mlr1)\n\n                             Model Summary                               \n------------------------------------------------------------------------\nR                       0.807       RMSE                     755957.289 \nR-Squared               0.651       Coef. Var                    43.168 \nAdj. R-Squared          0.647       MSE                571471422208.591 \nPred R-Squared          0.638       MAE                      414819.628 \n------------------------------------------------------------------------\n RMSE: Root Mean Square Error \n MSE: Mean Square Error \n MAE: Mean Absolute Error \n\n                                     ANOVA                                       \n--------------------------------------------------------------------------------\n                    Sum of                                                      \n                   Squares          DF         Mean Square       F         Sig. \n--------------------------------------------------------------------------------\nRegression    1.512586e+15          14        1.080418e+14    189.059    0.0000 \nResidual      8.120609e+14        1421    571471422208.591                      \nTotal         2.324647e+15        1435                                          \n--------------------------------------------------------------------------------\n\n                                               Parameter Estimates                                                \n-----------------------------------------------------------------------------------------------------------------\n               model           Beta    Std. Error    Std. Beta       t        Sig           lower          upper \n-----------------------------------------------------------------------------------------------------------------\n         (Intercept)     527633.222    108183.223                   4.877    0.000     315417.244     739849.200 \n            AREA_SQM      12777.523       367.479        0.584     34.771    0.000      12056.663      13498.382 \n                 AGE     -24687.739      2754.845       -0.167     -8.962    0.000     -30091.739     -19283.740 \n            PROX_CBD     -77131.323      5763.125       -0.263    -13.384    0.000     -88436.469     -65826.176 \n      PROX_CHILDCARE    -318472.751    107959.512       -0.084     -2.950    0.003    -530249.889    -106695.613 \n    PROX_ELDERLYCARE     185575.623     39901.864        0.090      4.651    0.000     107302.737     263848.510 \nPROX_URA_GROWTH_AREA      39163.254     11754.829        0.060      3.332    0.001      16104.571      62221.936 \n            PROX_MRT    -294745.107     56916.367       -0.112     -5.179    0.000    -406394.234    -183095.980 \n           PROX_PARK     570504.807     65507.029        0.150      8.709    0.000     442003.938     699005.677 \n    PROX_PRIMARY_SCH     159856.136     60234.599        0.062      2.654    0.008      41697.849     278014.424 \n  PROX_SHOPPING_MALL    -220947.251     36561.832       -0.115     -6.043    0.000    -292668.213    -149226.288 \n       PROX_BUS_STOP     682482.221    134513.243        0.134      5.074    0.000     418616.359     946348.082 \n         NO_Of_UNITS       -245.480        87.947       -0.053     -2.791    0.005       -418.000        -72.961 \n     FAMILY_FRIENDLY     146307.576     46893.021        0.057      3.120    0.002      54320.593     238294.560 \n            FREEHOLD     350599.812     48506.485        0.136      7.228    0.000     255447.802     445751.821 \n-----------------------------------------------------------------------------------------------------------------\n\n\n\n\n4.8.5 Preparing Publication Quality Table: gtsummary method\nThe gtsummary package provides an elegant and flexible way to create publication-ready summary tables in R.\nIn the code chunk below, tbl_regression() is used to create a well formatted regression report.\n\ntbl_regression(condo.mlr1, intercept = TRUE)\n\n\n\n\n\n  \n    \n    \n      Characteristic\n      Beta\n      95% CI1\n      p-value\n    \n  \n  \n    (Intercept)\n527,633\n315,417, 739,849\n&lt;0.001\n    AREA_SQM\n12,778\n12,057, 13,498\n&lt;0.001\n    AGE\n-24,688\n-30,092, -19,284\n&lt;0.001\n    PROX_CBD\n-77,131\n-88,436, -65,826\n&lt;0.001\n    PROX_CHILDCARE\n-318,473\n-530,250, -106,696\n0.003\n    PROX_ELDERLYCARE\n185,576\n107,303, 263,849\n&lt;0.001\n    PROX_URA_GROWTH_AREA\n39,163\n16,105, 62,222\n&lt;0.001\n    PROX_MRT\n-294,745\n-406,394, -183,096\n&lt;0.001\n    PROX_PARK\n570,505\n442,004, 699,006\n&lt;0.001\n    PROX_PRIMARY_SCH\n159,856\n41,698, 278,014\n0.008\n    PROX_SHOPPING_MALL\n-220,947\n-292,668, -149,226\n&lt;0.001\n    PROX_BUS_STOP\n682,482\n418,616, 946,348\n&lt;0.001\n    NO_Of_UNITS\n-245\n-418, -73\n0.005\n    FAMILY_FRIENDLY\n146,308\n54,321, 238,295\n0.002\n    FREEHOLD\n350,600\n255,448, 445,752\n&lt;0.001\n  \n  \n  \n    \n      1 CI = Confidence Interval\n    \n  \n\n\n\n\nWith gtsummary package, model statistics can be included in the report by either appending them to the report table by using add_glance_table() or adding as a table source note by using add_glance_source_note() as shown in the code chunk below.\n\ntbl_regression(condo.mlr1, \n               intercept = TRUE) %&gt;% \n  add_glance_source_note(\n    label = list(sigma ~ \"\\U03C3\"),\n    include = c(r.squared, adj.r.squared, \n                AIC, statistic,\n                p.value, sigma))\n\n\n\n\n\n  \n    \n    \n      Characteristic\n      Beta\n      95% CI1\n      p-value\n    \n  \n  \n    (Intercept)\n527,633\n315,417, 739,849\n&lt;0.001\n    AREA_SQM\n12,778\n12,057, 13,498\n&lt;0.001\n    AGE\n-24,688\n-30,092, -19,284\n&lt;0.001\n    PROX_CBD\n-77,131\n-88,436, -65,826\n&lt;0.001\n    PROX_CHILDCARE\n-318,473\n-530,250, -106,696\n0.003\n    PROX_ELDERLYCARE\n185,576\n107,303, 263,849\n&lt;0.001\n    PROX_URA_GROWTH_AREA\n39,163\n16,105, 62,222\n&lt;0.001\n    PROX_MRT\n-294,745\n-406,394, -183,096\n&lt;0.001\n    PROX_PARK\n570,505\n442,004, 699,006\n&lt;0.001\n    PROX_PRIMARY_SCH\n159,856\n41,698, 278,014\n0.008\n    PROX_SHOPPING_MALL\n-220,947\n-292,668, -149,226\n&lt;0.001\n    PROX_BUS_STOP\n682,482\n418,616, 946,348\n&lt;0.001\n    NO_Of_UNITS\n-245\n-418, -73\n0.005\n    FAMILY_FRIENDLY\n146,308\n54,321, 238,295\n0.002\n    FREEHOLD\n350,600\n255,448, 445,752\n&lt;0.001\n  \n  \n    \n      R² = 0.651; Adjusted R² = 0.647; AIC = 42,967; Statistic = 189; p-value = &lt;0.001; σ = 755,957\n    \n  \n  \n    \n      1 CI = Confidence Interval\n    \n  \n\n\n\n\n\n4.8.5.1 Checking for multicolinearity\nIn this section, we would like to introduce you a fantastic R package specially programmed for performing OLS regression. It is called olsrr. It provides a collection of very useful methods for building better multiple linear regression models:\n\ncomprehensive regression output\nresidual diagnostics\nmeasures of influence\nheteroskedasticity tests\ncollinearity diagnostics\nmodel fit assessment\nvariable contribution assessment\nvariable selection procedures\n\nIn the code chunk below, the ols_vif_tol() of olsrr package is used to test if there are sign of multicollinearity.\n\nols_vif_tol(condo.mlr1)\n\n              Variables Tolerance      VIF\n1              AREA_SQM 0.8728554 1.145665\n2                   AGE 0.7071275 1.414172\n3              PROX_CBD 0.6356147 1.573280\n4        PROX_CHILDCARE 0.3066019 3.261559\n5      PROX_ELDERLYCARE 0.6598479 1.515501\n6  PROX_URA_GROWTH_AREA 0.7510311 1.331503\n7              PROX_MRT 0.5236090 1.909822\n8             PROX_PARK 0.8279261 1.207837\n9      PROX_PRIMARY_SCH 0.4524628 2.210126\n10   PROX_SHOPPING_MALL 0.6738795 1.483945\n11        PROX_BUS_STOP 0.3514118 2.845664\n12          NO_Of_UNITS 0.6901036 1.449058\n13      FAMILY_FRIENDLY 0.7244157 1.380423\n14             FREEHOLD 0.6931163 1.442759\n\n\nSince the VIF of the independent variables are less than 10. We can safely conclude that there are no sign of multicollinearity among the independent variables.\n\n\n4.8.5.2 Test for Non-Linearity\nIn multiple linear regression, it is important for us to test the assumption that linearity and additivity of the relationship between dependent and independent variables.\nIn the code chunk below, the ols_plot_resid_fit() of olsrr package is used to perform linearity assumption test.\n\nols_plot_resid_fit(condo.mlr1)\n\n\n\n\nThe figure above reveals that most of the data poitns are scattered around the 0 line, hence we can safely conclude that the relationships between the dependent variable and independent variables are linear.\n\n\n4.8.5.3 Test for Normality Assumption\nLastly, the code chunk below uses ols_plot_resid_hist() of olsrr package to perform normality assumption test.\n\nols_plot_resid_hist(condo.mlr1)\n\n\n\n\nThe figure reveals that the residual of the multiple linear regression model (i.e. condo.mlr1) is resemble normal distribution.\nIf you prefer formal statistical test methods, the ols_test_normality() of olsrr package can be used as shown in the code chun below.\n\nols_test_normality(condo.mlr1)\n\n-----------------------------------------------\n       Test             Statistic       pvalue  \n-----------------------------------------------\nShapiro-Wilk              0.6856         0.0000 \nKolmogorov-Smirnov        0.1366         0.0000 \nCramer-von Mises         121.0768        0.0000 \nAnderson-Darling         67.9551         0.0000 \n-----------------------------------------------\n\n\nThe summary table above reveals that the p-values of the four tests are way smaller than the alpha value of 0.05. Hence we will reject the null hypothesis and infer that there is statistical evidence that the residual are not normally distributed.\n\n\n4.8.5.4 Testing for Spatial Autocorrelation\nThe hedonic model we try to build are using geographically referenced attributes, hence it is also important for us to visual the residual of the hedonic pricing model.\nIn order to perform spatial autocorrelation test, we need to convert condo_resale.sf from sf data frame into a SpatialPointsDataFrame.\nFirst, we will export the residual of the hedonic pricing model and save it as a data frame.\n\nmlr.output &lt;- as.data.frame(condo.mlr1$residuals)\n\nNext, we will join the newly created data frame with condo_resale.sf object.\n\ncondo_resale.res.sf &lt;- cbind(condo_resale.sf, \n                        condo.mlr1$residuals) %&gt;%\nrename(`MLR_RES` = `condo.mlr1.residuals`)\n\nNext, we will convert condo_resale.res.sf from simple feature object into a SpatialPointsDataFrame because spdep package can only process sp conformed spatial data objects.\nThe code chunk below will be used to perform the data conversion process.\n\ncondo_resale.sp &lt;- as_Spatial(condo_resale.res.sf)\ncondo_resale.sp\n\nclass       : SpatialPointsDataFrame \nfeatures    : 1436 \nextent      : 14940.85, 43352.45, 24765.67, 48382.81  (xmin, xmax, ymin, ymax)\ncrs         : +proj=tmerc +lat_0=1.36666666666667 +lon_0=103.833333333333 +k=1 +x_0=28001.642 +y_0=38744.572 +ellps=WGS84 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs \nvariables   : 23\nnames       : POSTCODE, SELLING_PRICE, AREA_SQM, AGE,    PROX_CBD, PROX_CHILDCARE, PROX_ELDERLYCARE, PROX_URA_GROWTH_AREA, PROX_HAWKER_MARKET, PROX_KINDERGARTEN,    PROX_MRT,   PROX_PARK, PROX_PRIMARY_SCH, PROX_TOP_PRIMARY_SCH, PROX_SHOPPING_MALL, ... \nmin values  :    18965,        540000,       34,   0, 0.386916393,    0.004927023,      0.054508623,          0.214539508,        0.051817113,       0.004927023, 0.052779424, 0.029064164,      0.077106132,          0.077106132,                  0, ... \nmax values  :   828833,       1.8e+07,      619,  37, 19.18042832,     3.46572633,      3.949157205,           9.15540001,        5.374348075,       2.229045366,  3.48037319,  2.16104919,      3.928989144,          6.748192062,        3.477433767, ... \n\n\nNext, we will use tmap package to display the distribution of the residuals on an interactive map.\nThe code churn below will turn on the interactive mode of tmap.\n\ntmap_mode(\"view\")\n\nThe code chunks below is used to create an interactive point symbol map.\n\ntm_shape(mpsz_svy21)+\n  tmap_options(check.and.fix = TRUE) +\n  tm_polygons(alpha = 0.4) +\ntm_shape(condo_resale.res.sf) +  \n  tm_dots(col = \"MLR_RES\",\n          alpha = 0.6,\n          style=\"quantile\") +\n  tm_view(set.zoom.limits = c(11,14))\n\n\n\n\n\n\nRemember to switch back to “plot” mode before continue.\n\ntmap_mode(\"plot\")\n\nThe figure above reveal that there is sign of spatial autocorrelation.\nTo proof that our observation is indeed true, the Moran’s I test will be performed\nFirst, we will compute the distance-based weight matrix by using dnearneigh() function of spdep.\n\nnb &lt;- dnearneigh(coordinates(condo_resale.sp), 0, 1500, longlat = FALSE)\nsummary(nb)\n\nNeighbour list object:\nNumber of regions: 1436 \nNumber of nonzero links: 66266 \nPercentage nonzero weights: 3.213526 \nAverage number of links: 46.14624 \n10 disjoint connected subgraphs\nLink number distribution:\n\n  1   3   5   7   9  10  11  12  13  14  15  16  17  18  19  20  21  22  23  24 \n  3   3   9   4   3  15  10  19  17  45  19   5  14  29  19   6  35  45  18  47 \n 25  26  27  28  29  30  31  32  33  34  35  36  37  38  39  40  41  42  43  44 \n 16  43  22  26  21  11   9  23  22  13  16  25  21  37  16  18   8  21   4  12 \n 45  46  47  48  49  50  51  52  53  54  55  56  57  58  59  60  61  62  63  64 \n  8  36  18  14  14  43  11  12   8  13  12  13   4   5   6  12  11  20  29  33 \n 65  66  67  68  69  70  71  72  73  74  75  76  77  78  79  80  81  82  83  84 \n 15  20  10  14  15  15  11  16  12  10   8  19  12  14   9   8   4  13  11   6 \n 85  86  87  88  89  90  91  92  93  94  95  96  97  98  99 100 101 102 103 104 \n  4   9   4   4   4   6   2  16   9   4   5   9   3   9   4   2   1   2   1   1 \n105 106 107 108 109 110 112 116 125 \n  1   5   9   2   1   3   1   1   1 \n3 least connected regions:\n193 194 277 with 1 link\n1 most connected region:\n285 with 125 links\n\n\nNext, nb2listw() of spdep packge will be used to convert the output neighbours lists (i.e. nb) into a spatial weights.\n\nnb_lw &lt;- nb2listw(nb, style = 'W')\nsummary(nb_lw)\n\nCharacteristics of weights list object:\nNeighbour list object:\nNumber of regions: 1436 \nNumber of nonzero links: 66266 \nPercentage nonzero weights: 3.213526 \nAverage number of links: 46.14624 \n10 disjoint connected subgraphs\nLink number distribution:\n\n  1   3   5   7   9  10  11  12  13  14  15  16  17  18  19  20  21  22  23  24 \n  3   3   9   4   3  15  10  19  17  45  19   5  14  29  19   6  35  45  18  47 \n 25  26  27  28  29  30  31  32  33  34  35  36  37  38  39  40  41  42  43  44 \n 16  43  22  26  21  11   9  23  22  13  16  25  21  37  16  18   8  21   4  12 \n 45  46  47  48  49  50  51  52  53  54  55  56  57  58  59  60  61  62  63  64 \n  8  36  18  14  14  43  11  12   8  13  12  13   4   5   6  12  11  20  29  33 \n 65  66  67  68  69  70  71  72  73  74  75  76  77  78  79  80  81  82  83  84 \n 15  20  10  14  15  15  11  16  12  10   8  19  12  14   9   8   4  13  11   6 \n 85  86  87  88  89  90  91  92  93  94  95  96  97  98  99 100 101 102 103 104 \n  4   9   4   4   4   6   2  16   9   4   5   9   3   9   4   2   1   2   1   1 \n105 106 107 108 109 110 112 116 125 \n  1   5   9   2   1   3   1   1   1 \n3 least connected regions:\n193 194 277 with 1 link\n1 most connected region:\n285 with 125 links\n\nWeights style: W \nWeights constants summary:\n     n      nn   S0       S1       S2\nW 1436 2062096 1436 94.81916 5798.341\n\n\nNext, lm.morantest() of spdep package will be used to perform Moran’s I test for residual spatial autocorrelation.\n\nlm.morantest(condo.mlr1, nb_lw)\n\n\n    Global Moran I for regression residuals\n\ndata:  \nmodel: lm(formula = SELLING_PRICE ~ AREA_SQM + AGE + PROX_CBD +\nPROX_CHILDCARE + PROX_ELDERLYCARE + PROX_URA_GROWTH_AREA + PROX_MRT +\nPROX_PARK + PROX_PRIMARY_SCH + PROX_SHOPPING_MALL + PROX_BUS_STOP +\nNO_Of_UNITS + FAMILY_FRIENDLY + FREEHOLD, data = condo_resale.sf)\nweights: nb_lw\n\nMoran I statistic standard deviate = 24.366, p-value &lt; 2.2e-16\nalternative hypothesis: greater\nsample estimates:\nObserved Moran I      Expectation         Variance \n    1.438876e-01    -5.487594e-03     3.758259e-05 \n\n\nThe Global Moran’s I test for residual spatial autocorrelation shows that it’s p-value is less than 0.00000000000000022 which is less than the alpha value of 0.05. Hence, we will reject the null hypothesis that the residuals are randomly distributed.\nSince the Observed Global Moran I = 0.1424418 which is greater than 0, we can infer than the residuals resemble cluster distribution."
  },
  {
    "objectID": "Hands-on Ex/Hands-on_Ex4/Hands-on_Ex_4.html#building-hedonic-pricing-models-using-gwmodel",
    "href": "Hands-on Ex/Hands-on_Ex4/Hands-on_Ex_4.html#building-hedonic-pricing-models-using-gwmodel",
    "title": "Hands-on Exercise 4: Calibrating Hedonic Pricing Model for Private Highrise Property with GWR Method",
    "section": "4.9 Building Hedonic Pricing Models using GWmodel",
    "text": "4.9 Building Hedonic Pricing Models using GWmodel\nIn this section, we are going to show how to modelling hedonic pricing using both the fixed and adaptive bandwidth schemes.\n\n4.9.1 Building Fixed Bandwidth GWR Model\n\n4.9.1.1 Computing fixed bandwith\nIn the code chunk below bw.gwr() of GWModel package is used to determine the optimal fixed bandwidth to use in the model. Notice that the argument adaptive is set to FALSE indicates that we are interested to compute the fixed bandwidth.\nThere are two possible approaches can be uused to determine the stopping rule, they are: CV cross-validation approach and AIC corrected (AICc) approach. We define the stopping rule using approach argeement.\n\nbw.fixed &lt;- bw.gwr(formula = SELLING_PRICE ~ AREA_SQM + AGE + PROX_CBD + \n                     PROX_CHILDCARE + PROX_ELDERLYCARE  + PROX_URA_GROWTH_AREA + \n                     PROX_MRT   + PROX_PARK + PROX_PRIMARY_SCH + \n                     PROX_SHOPPING_MALL + PROX_BUS_STOP + NO_Of_UNITS + \n                     FAMILY_FRIENDLY + FREEHOLD, \n                   data=condo_resale.sp, \n                   approach=\"CV\", \n                   kernel=\"gaussian\", \n                   adaptive=FALSE, \n                   longlat=FALSE)\n\nFixed bandwidth: 17660.96 CV score: 8.259118e+14 \nFixed bandwidth: 10917.26 CV score: 7.970454e+14 \nFixed bandwidth: 6749.419 CV score: 7.273273e+14 \nFixed bandwidth: 4173.553 CV score: 6.300006e+14 \nFixed bandwidth: 2581.58 CV score: 5.404958e+14 \nFixed bandwidth: 1597.687 CV score: 4.857515e+14 \nFixed bandwidth: 989.6077 CV score: 4.722431e+14 \nFixed bandwidth: 613.7939 CV score: 1.378294e+16 \nFixed bandwidth: 1221.873 CV score: 4.778717e+14 \nFixed bandwidth: 846.0596 CV score: 4.791629e+14 \nFixed bandwidth: 1078.325 CV score: 4.751406e+14 \nFixed bandwidth: 934.7772 CV score: 4.72518e+14 \nFixed bandwidth: 1023.495 CV score: 4.730305e+14 \nFixed bandwidth: 968.6643 CV score: 4.721317e+14 \nFixed bandwidth: 955.7206 CV score: 4.722072e+14 \nFixed bandwidth: 976.6639 CV score: 4.721387e+14 \nFixed bandwidth: 963.7202 CV score: 4.721484e+14 \nFixed bandwidth: 971.7199 CV score: 4.721293e+14 \nFixed bandwidth: 973.6083 CV score: 4.721309e+14 \nFixed bandwidth: 970.5527 CV score: 4.721295e+14 \nFixed bandwidth: 972.4412 CV score: 4.721296e+14 \nFixed bandwidth: 971.2741 CV score: 4.721292e+14 \nFixed bandwidth: 970.9985 CV score: 4.721293e+14 \nFixed bandwidth: 971.4443 CV score: 4.721292e+14 \nFixed bandwidth: 971.5496 CV score: 4.721293e+14 \nFixed bandwidth: 971.3793 CV score: 4.721292e+14 \nFixed bandwidth: 971.3391 CV score: 4.721292e+14 \nFixed bandwidth: 971.3143 CV score: 4.721292e+14 \nFixed bandwidth: 971.3545 CV score: 4.721292e+14 \nFixed bandwidth: 971.3296 CV score: 4.721292e+14 \nFixed bandwidth: 971.345 CV score: 4.721292e+14 \nFixed bandwidth: 971.3355 CV score: 4.721292e+14 \nFixed bandwidth: 971.3413 CV score: 4.721292e+14 \nFixed bandwidth: 971.3377 CV score: 4.721292e+14 \nFixed bandwidth: 971.34 CV score: 4.721292e+14 \nFixed bandwidth: 971.3405 CV score: 4.721292e+14 \nFixed bandwidth: 971.3408 CV score: 4.721292e+14 \nFixed bandwidth: 971.3403 CV score: 4.721292e+14 \nFixed bandwidth: 971.3406 CV score: 4.721292e+14 \nFixed bandwidth: 971.3404 CV score: 4.721292e+14 \nFixed bandwidth: 971.3405 CV score: 4.721292e+14 \nFixed bandwidth: 971.3405 CV score: 4.721292e+14 \n\n\nThe result shows that the recommended bandwidth is 971.3405 metres. (Quiz: Do you know why it is in metre?)\n\n\n4.9.1.2 GWModel method - fixed bandwith\nNow we can use the code chunk below to calibrate the gwr model using fixed bandwidth and gaussian kernel.\n\ngwr.fixed &lt;- gwr.basic(formula = SELLING_PRICE ~ AREA_SQM + AGE + PROX_CBD + \n                         PROX_CHILDCARE + PROX_ELDERLYCARE  + PROX_URA_GROWTH_AREA + \n                         PROX_MRT   + PROX_PARK + PROX_PRIMARY_SCH + \n                         PROX_SHOPPING_MALL + PROX_BUS_STOP + NO_Of_UNITS + \n                         FAMILY_FRIENDLY + FREEHOLD, \n                       data=condo_resale.sp, \n                       bw=bw.fixed, \n                       kernel = 'gaussian', \n                       longlat = FALSE)\n\nThe output is saved in a list of class “gwrm”. The code below can be used to display the model output.\n\ngwr.fixed\n\n   ***********************************************************************\n   *                       Package   GWmodel                             *\n   ***********************************************************************\n   Program starts at: 2023-12-17 09:15:59.291029 \n   Call:\n   gwr.basic(formula = SELLING_PRICE ~ AREA_SQM + AGE + PROX_CBD + \n    PROX_CHILDCARE + PROX_ELDERLYCARE + PROX_URA_GROWTH_AREA + \n    PROX_MRT + PROX_PARK + PROX_PRIMARY_SCH + PROX_SHOPPING_MALL + \n    PROX_BUS_STOP + NO_Of_UNITS + FAMILY_FRIENDLY + FREEHOLD, \n    data = condo_resale.sp, bw = bw.fixed, kernel = \"gaussian\", \n    longlat = FALSE)\n\n   Dependent (y) variable:  SELLING_PRICE\n   Independent variables:  AREA_SQM AGE PROX_CBD PROX_CHILDCARE PROX_ELDERLYCARE PROX_URA_GROWTH_AREA PROX_MRT PROX_PARK PROX_PRIMARY_SCH PROX_SHOPPING_MALL PROX_BUS_STOP NO_Of_UNITS FAMILY_FRIENDLY FREEHOLD\n   Number of data points: 1436\n   ***********************************************************************\n   *                    Results of Global Regression                     *\n   ***********************************************************************\n\n   Call:\n    lm(formula = formula, data = data)\n\n   Residuals:\n     Min       1Q   Median       3Q      Max \n-3470778  -298119   -23481   248917 12234210 \n\n   Coefficients:\n                          Estimate Std. Error t value Pr(&gt;|t|)    \n   (Intercept)           527633.22  108183.22   4.877 1.20e-06 ***\n   AREA_SQM               12777.52     367.48  34.771  &lt; 2e-16 ***\n   AGE                   -24687.74    2754.84  -8.962  &lt; 2e-16 ***\n   PROX_CBD              -77131.32    5763.12 -13.384  &lt; 2e-16 ***\n   PROX_CHILDCARE       -318472.75  107959.51  -2.950 0.003231 ** \n   PROX_ELDERLYCARE      185575.62   39901.86   4.651 3.61e-06 ***\n   PROX_URA_GROWTH_AREA   39163.25   11754.83   3.332 0.000885 ***\n   PROX_MRT             -294745.11   56916.37  -5.179 2.56e-07 ***\n   PROX_PARK             570504.81   65507.03   8.709  &lt; 2e-16 ***\n   PROX_PRIMARY_SCH      159856.14   60234.60   2.654 0.008046 ** \n   PROX_SHOPPING_MALL   -220947.25   36561.83  -6.043 1.93e-09 ***\n   PROX_BUS_STOP         682482.22  134513.24   5.074 4.42e-07 ***\n   NO_Of_UNITS             -245.48      87.95  -2.791 0.005321 ** \n   FAMILY_FRIENDLY       146307.58   46893.02   3.120 0.001845 ** \n   FREEHOLD              350599.81   48506.48   7.228 7.98e-13 ***\n\n   ---Significance stars\n   Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 \n   Residual standard error: 756000 on 1421 degrees of freedom\n   Multiple R-squared: 0.6507\n   Adjusted R-squared: 0.6472 \n   F-statistic: 189.1 on 14 and 1421 DF,  p-value: &lt; 2.2e-16 \n   ***Extra Diagnostic information\n   Residual sum of squares: 8.120609e+14\n   Sigma(hat): 752522.9\n   AIC:  42966.76\n   AICc:  42967.14\n   BIC:  41731.39\n   ***********************************************************************\n   *          Results of Geographically Weighted Regression              *\n   ***********************************************************************\n\n   *********************Model calibration information*********************\n   Kernel function: gaussian \n   Fixed bandwidth: 971.3405 \n   Regression points: the same locations as observations are used.\n   Distance metric: Euclidean distance metric is used.\n\n   ****************Summary of GWR coefficient estimates:******************\n                               Min.     1st Qu.      Median     3rd Qu.\n   Intercept            -3.5988e+07 -5.1998e+05  7.6780e+05  1.7412e+06\n   AREA_SQM              1.0003e+03  5.2758e+03  7.4740e+03  1.2301e+04\n   AGE                  -1.3475e+05 -2.0813e+04 -8.6260e+03 -3.7784e+03\n   PROX_CBD             -7.7047e+07 -2.3608e+05 -8.3600e+04  3.4646e+04\n   PROX_CHILDCARE       -6.0097e+06 -3.3667e+05 -9.7425e+04  2.9007e+05\n   PROX_ELDERLYCARE     -3.5000e+06 -1.5970e+05  3.1971e+04  1.9577e+05\n   PROX_URA_GROWTH_AREA -3.0170e+06 -8.2013e+04  7.0749e+04  2.2612e+05\n   PROX_MRT             -3.5282e+06 -6.5836e+05 -1.8833e+05  3.6922e+04\n   PROX_PARK            -1.2062e+06 -2.1732e+05  3.5383e+04  4.1335e+05\n   PROX_PRIMARY_SCH     -2.2695e+07 -1.7066e+05  4.8472e+04  5.1555e+05\n   PROX_SHOPPING_MALL   -7.2585e+06 -1.6684e+05 -1.0517e+04  1.5923e+05\n   PROX_BUS_STOP        -1.4676e+06 -4.5207e+04  3.7601e+05  1.1664e+06\n   NO_Of_UNITS          -1.3170e+03 -2.4822e+02 -3.0846e+01  2.5496e+02\n   FAMILY_FRIENDLY      -2.2749e+06 -1.1140e+05  7.6214e+03  1.6107e+05\n   FREEHOLD             -9.2067e+06  3.8073e+04  1.5169e+05  3.7528e+05\n                             Max.\n   Intercept            112793548\n   AREA_SQM                 21575\n   AGE                     434201\n   PROX_CBD               2704596\n   PROX_CHILDCARE         1654087\n   PROX_ELDERLYCARE      38867814\n   PROX_URA_GROWTH_AREA  78515730\n   PROX_MRT               3124316\n   PROX_PARK             18122425\n   PROX_PRIMARY_SCH       4637503\n   PROX_SHOPPING_MALL     1529952\n   PROX_BUS_STOP         11342182\n   NO_Of_UNITS              12907\n   FAMILY_FRIENDLY        1720744\n   FREEHOLD               6073636\n   ************************Diagnostic information*************************\n   Number of data points: 1436 \n   Effective number of parameters (2trace(S) - trace(S'S)): 438.3804 \n   Effective degrees of freedom (n-2trace(S) + trace(S'S)): 997.6196 \n   AICc (GWR book, Fotheringham, et al. 2002, p. 61, eq 2.33): 42263.61 \n   AIC (GWR book, Fotheringham, et al. 2002,GWR p. 96, eq. 4.22): 41632.36 \n   BIC (GWR book, Fotheringham, et al. 2002,GWR p. 61, eq. 2.34): 42515.71 \n   Residual sum of squares: 2.53407e+14 \n   R-square value:  0.8909912 \n   Adjusted R-square value:  0.8430417 \n\n   ***********************************************************************\n   Program stops at: 2023-12-17 09:15:59.83444 \n\n\nThe report shows that the AICc of the gwr is 42263.61 which is significantly smaller than the globel multiple linear regression model of 42967.1.\n\n\n\n4.9.2 Building Adaptive Bandwidth GWR Model\nIn this section, we will calibrate the gwr-based hedonic pricing model by using adaptive bandwidth approach.\n\n4.9.2.1 Computing the adaptive bandwidth\nSimilar to the earlier section, we will first use bw.gwr() to determine the recommended data point to use.\nThe code chunk used look very similar to the one used to compute the fixed bandwidth except the adaptive argument has changed to TRUE.\n\nbw.adaptive &lt;- bw.gwr(formula = SELLING_PRICE ~ AREA_SQM + AGE  + \n                        PROX_CBD + PROX_CHILDCARE + PROX_ELDERLYCARE    + \n                        PROX_URA_GROWTH_AREA + PROX_MRT + PROX_PARK + \n                        PROX_PRIMARY_SCH + PROX_SHOPPING_MALL   + PROX_BUS_STOP + \n                        NO_Of_UNITS + FAMILY_FRIENDLY + FREEHOLD, \n                      data=condo_resale.sp, \n                      approach=\"CV\", \n                      kernel=\"gaussian\", \n                      adaptive=TRUE, \n                      longlat=FALSE)\n\nAdaptive bandwidth: 895 CV score: 7.952401e+14 \nAdaptive bandwidth: 561 CV score: 7.667364e+14 \nAdaptive bandwidth: 354 CV score: 6.953454e+14 \nAdaptive bandwidth: 226 CV score: 6.15223e+14 \nAdaptive bandwidth: 147 CV score: 5.674373e+14 \nAdaptive bandwidth: 98 CV score: 5.426745e+14 \nAdaptive bandwidth: 68 CV score: 5.168117e+14 \nAdaptive bandwidth: 49 CV score: 4.859631e+14 \nAdaptive bandwidth: 37 CV score: 4.646518e+14 \nAdaptive bandwidth: 30 CV score: 4.422088e+14 \nAdaptive bandwidth: 25 CV score: 4.430816e+14 \nAdaptive bandwidth: 32 CV score: 4.505602e+14 \nAdaptive bandwidth: 27 CV score: 4.462172e+14 \nAdaptive bandwidth: 30 CV score: 4.422088e+14 \n\n\nThe result shows that the 30 is the recommended data points to be used.\n\n\n4.9.2.2 Constructing the adaptive bandwidth gwr model\nNow, we can go ahead to calibrate the gwr-based hedonic pricing model by using adaptive bandwidth and gaussian kernel as shown in the code chunk below.\n\ngwr.adaptive &lt;- gwr.basic(formula = SELLING_PRICE ~ AREA_SQM + AGE + \n                            PROX_CBD + PROX_CHILDCARE + PROX_ELDERLYCARE + \n                            PROX_URA_GROWTH_AREA + PROX_MRT + PROX_PARK + \n                            PROX_PRIMARY_SCH + PROX_SHOPPING_MALL + PROX_BUS_STOP + \n                            NO_Of_UNITS + FAMILY_FRIENDLY + FREEHOLD, \n                          data=condo_resale.sp, bw=bw.adaptive, \n                          kernel = 'gaussian', \n                          adaptive=TRUE, \n                          longlat = FALSE)\n\nThe code below can be used to display the model output.\n\ngwr.adaptive\n\n   ***********************************************************************\n   *                       Package   GWmodel                             *\n   ***********************************************************************\n   Program starts at: 2023-12-17 09:16:03.893426 \n   Call:\n   gwr.basic(formula = SELLING_PRICE ~ AREA_SQM + AGE + PROX_CBD + \n    PROX_CHILDCARE + PROX_ELDERLYCARE + PROX_URA_GROWTH_AREA + \n    PROX_MRT + PROX_PARK + PROX_PRIMARY_SCH + PROX_SHOPPING_MALL + \n    PROX_BUS_STOP + NO_Of_UNITS + FAMILY_FRIENDLY + FREEHOLD, \n    data = condo_resale.sp, bw = bw.adaptive, kernel = \"gaussian\", \n    adaptive = TRUE, longlat = FALSE)\n\n   Dependent (y) variable:  SELLING_PRICE\n   Independent variables:  AREA_SQM AGE PROX_CBD PROX_CHILDCARE PROX_ELDERLYCARE PROX_URA_GROWTH_AREA PROX_MRT PROX_PARK PROX_PRIMARY_SCH PROX_SHOPPING_MALL PROX_BUS_STOP NO_Of_UNITS FAMILY_FRIENDLY FREEHOLD\n   Number of data points: 1436\n   ***********************************************************************\n   *                    Results of Global Regression                     *\n   ***********************************************************************\n\n   Call:\n    lm(formula = formula, data = data)\n\n   Residuals:\n     Min       1Q   Median       3Q      Max \n-3470778  -298119   -23481   248917 12234210 \n\n   Coefficients:\n                          Estimate Std. Error t value Pr(&gt;|t|)    \n   (Intercept)           527633.22  108183.22   4.877 1.20e-06 ***\n   AREA_SQM               12777.52     367.48  34.771  &lt; 2e-16 ***\n   AGE                   -24687.74    2754.84  -8.962  &lt; 2e-16 ***\n   PROX_CBD              -77131.32    5763.12 -13.384  &lt; 2e-16 ***\n   PROX_CHILDCARE       -318472.75  107959.51  -2.950 0.003231 ** \n   PROX_ELDERLYCARE      185575.62   39901.86   4.651 3.61e-06 ***\n   PROX_URA_GROWTH_AREA   39163.25   11754.83   3.332 0.000885 ***\n   PROX_MRT             -294745.11   56916.37  -5.179 2.56e-07 ***\n   PROX_PARK             570504.81   65507.03   8.709  &lt; 2e-16 ***\n   PROX_PRIMARY_SCH      159856.14   60234.60   2.654 0.008046 ** \n   PROX_SHOPPING_MALL   -220947.25   36561.83  -6.043 1.93e-09 ***\n   PROX_BUS_STOP         682482.22  134513.24   5.074 4.42e-07 ***\n   NO_Of_UNITS             -245.48      87.95  -2.791 0.005321 ** \n   FAMILY_FRIENDLY       146307.58   46893.02   3.120 0.001845 ** \n   FREEHOLD              350599.81   48506.48   7.228 7.98e-13 ***\n\n   ---Significance stars\n   Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 \n   Residual standard error: 756000 on 1421 degrees of freedom\n   Multiple R-squared: 0.6507\n   Adjusted R-squared: 0.6472 \n   F-statistic: 189.1 on 14 and 1421 DF,  p-value: &lt; 2.2e-16 \n   ***Extra Diagnostic information\n   Residual sum of squares: 8.120609e+14\n   Sigma(hat): 752522.9\n   AIC:  42966.76\n   AICc:  42967.14\n   BIC:  41731.39\n   ***********************************************************************\n   *          Results of Geographically Weighted Regression              *\n   ***********************************************************************\n\n   *********************Model calibration information*********************\n   Kernel function: gaussian \n   Adaptive bandwidth: 30 (number of nearest neighbours)\n   Regression points: the same locations as observations are used.\n   Distance metric: Euclidean distance metric is used.\n\n   ****************Summary of GWR coefficient estimates:******************\n                               Min.     1st Qu.      Median     3rd Qu.\n   Intercept            -1.3487e+08 -2.4669e+05  7.7928e+05  1.6194e+06\n   AREA_SQM              3.3188e+03  5.6285e+03  7.7825e+03  1.2738e+04\n   AGE                  -9.6746e+04 -2.9288e+04 -1.4043e+04 -5.6119e+03\n   PROX_CBD             -2.5330e+06 -1.6256e+05 -7.7242e+04  2.6624e+03\n   PROX_CHILDCARE       -1.2790e+06 -2.0175e+05  8.7158e+03  3.7778e+05\n   PROX_ELDERLYCARE     -1.6212e+06 -9.2050e+04  6.1029e+04  2.8184e+05\n   PROX_URA_GROWTH_AREA -7.2686e+06 -3.0350e+04  4.5869e+04  2.4613e+05\n   PROX_MRT             -4.3781e+07 -6.7282e+05 -2.2115e+05 -7.4593e+04\n   PROX_PARK            -2.9020e+06 -1.6782e+05  1.1601e+05  4.6572e+05\n   PROX_PRIMARY_SCH     -8.6418e+05 -1.6627e+05 -7.7853e+03  4.3222e+05\n   PROX_SHOPPING_MALL   -1.8272e+06 -1.3175e+05 -1.4049e+04  1.3799e+05\n   PROX_BUS_STOP        -2.0579e+06 -7.1461e+04  4.1104e+05  1.2071e+06\n   NO_Of_UNITS          -2.1993e+03 -2.3685e+02 -3.4699e+01  1.1657e+02\n   FAMILY_FRIENDLY      -5.9879e+05 -5.0927e+04  2.6173e+04  2.2481e+05\n   FREEHOLD             -1.6340e+05  4.0765e+04  1.9023e+05  3.7960e+05\n                            Max.\n   Intercept            18758355\n   AREA_SQM                23064\n   AGE                     13303\n   PROX_CBD             11346650\n   PROX_CHILDCARE        2892127\n   PROX_ELDERLYCARE      2465671\n   PROX_URA_GROWTH_AREA  7384059\n   PROX_MRT              1186242\n   PROX_PARK             2588497\n   PROX_PRIMARY_SCH      3381462\n   PROX_SHOPPING_MALL   38038564\n   PROX_BUS_STOP        12081592\n   NO_Of_UNITS              1010\n   FAMILY_FRIENDLY       2072414\n   FREEHOLD              1813995\n   ************************Diagnostic information*************************\n   Number of data points: 1436 \n   Effective number of parameters (2trace(S) - trace(S'S)): 350.3088 \n   Effective degrees of freedom (n-2trace(S) + trace(S'S)): 1085.691 \n   AICc (GWR book, Fotheringham, et al. 2002, p. 61, eq 2.33): 41982.22 \n   AIC (GWR book, Fotheringham, et al. 2002,GWR p. 96, eq. 4.22): 41546.74 \n   BIC (GWR book, Fotheringham, et al. 2002,GWR p. 61, eq. 2.34): 41914.08 \n   Residual sum of squares: 2.528227e+14 \n   R-square value:  0.8912425 \n   Adjusted R-square value:  0.8561185 \n\n   ***********************************************************************\n   Program stops at: 2023-12-17 09:16:04.552668 \n\n\nThe report shows that the AICc the adaptive distance gwr is 41982.22 which is even smaller than the AICc of the fixed distance gwr of 42263.61.\n\n\n\n4.9.3 Visualising GWR Output\nIn addition to regression residuals, the output feature class table includes fields for observed and predicted y values, condition number (cond), Local R2, residuals, and explanatory variable coefficients and standard errors:\n\nCondition Number: this diagnostic evaluates local collinearity. In the presence of strong local collinearity, results become unstable. Results associated with condition numbers larger than 30, may be unreliable.\nLocal R2: these values range between 0.0 and 1.0 and indicate how well the local regression model fits observed y values. Very low values indicate the local model is performing poorly. Mapping the Local R2 values to see where GWR predicts well and where it predicts poorly may provide clues about important variables that may be missing from the regression model.\nPredicted: these are the estimated (or fitted) y values 3. computed by GWR.\nResiduals: to obtain the residual values, the fitted y values are subtracted from the observed y values. Standardized residuals have a mean of zero and a standard deviation of 1. A cold-to-hot rendered map of standardized residuals can be produce by using these values.\nCoefficient Standard Error: these values measure the reliability of each coefficient estimate. Confidence in those estimates are higher when standard errors are small in relation to the actual coefficient values. Large standard errors may indicate problems with local collinearity.\n\nThey are all stored in a SpatialPointsDataFrame or SpatialPolygonsDataFrame object integrated with fit.points, GWR coefficient estimates, y value, predicted values, coefficient standard errors and t-values in its “data” slot in an object called SDF of the output list.\n\n\n4.9.4 Converting SDF into sf data.frame\nTo visualise the fields in SDF, we need to first covert it into sf data.frame by using the code chunk below.\n\ncondo_resale.sf.adaptive &lt;- st_as_sf(gwr.adaptive$SDF) %&gt;%\n  st_transform(crs=3414)\n\n\ncondo_resale.sf.adaptive.svy21 &lt;- st_transform(condo_resale.sf.adaptive, 3414)\ncondo_resale.sf.adaptive.svy21  \n\nSimple feature collection with 1436 features and 51 fields\nGeometry type: POINT\nDimension:     XY\nBounding box:  xmin: 14940.85 ymin: 24765.67 xmax: 43352.45 ymax: 48382.81\nProjected CRS: SVY21 / Singapore TM\nFirst 10 features:\n    Intercept  AREA_SQM        AGE  PROX_CBD PROX_CHILDCARE PROX_ELDERLYCARE\n1   2050011.7  9561.892  -9514.634 -120681.9      319266.92       -393417.79\n2   1633128.2 16576.853 -58185.479 -149434.2      441102.18        325188.74\n3   3433608.2 13091.861 -26707.386 -259397.8     -120116.82        535855.81\n4    234358.9 20730.601 -93308.988 2426853.7      480825.28        314783.72\n5   2285804.9  6722.836 -17608.018 -316835.5       90764.78       -137384.61\n6  -3568877.4  6039.581 -26535.592  327306.1     -152531.19       -700392.85\n7  -2874842.4 16843.575 -59166.727 -983577.2     -177810.50       -122384.02\n8   2038086.0  6905.135 -17681.897 -285076.6       70259.40        -96012.78\n9   1718478.4  9580.703 -14401.128  105803.4     -657698.02       -123276.00\n10  3457054.0 14072.011 -31579.884 -234895.4       79961.45        548581.04\n   PROX_URA_GROWTH_AREA    PROX_MRT  PROX_PARK PROX_PRIMARY_SCH\n1            -159980.20  -299742.96 -172104.47        242668.03\n2            -142290.39 -2510522.23  523379.72       1106830.66\n3            -253621.21  -936853.28  209099.85        571462.33\n4           -2679297.89 -2039479.50 -759153.26       3127477.21\n5             303714.81   -44567.05  -10284.62         30413.56\n6             -28051.25   733566.47 1511488.92        320878.23\n7            1397676.38 -2745430.34  710114.74       1786570.95\n8             269368.71   -14552.99   73533.34         53359.73\n9            -361974.72  -476785.32 -132067.59        -40128.92\n10           -150024.38 -1503835.53  574155.47        108996.67\n   PROX_SHOPPING_MALL PROX_BUS_STOP  NO_Of_UNITS FAMILY_FRIENDLY  FREEHOLD\n1          300881.390     1210615.4  104.8290640       -9075.370  303955.6\n2          -87693.378     1843587.2 -288.3441183      310074.664  396221.3\n3         -126732.712     1411924.9   -9.5532945        5949.746  168821.7\n4          -29593.342     7225577.5 -161.3551620     1556178.531 1212515.6\n5           -7490.586      677577.0   42.2659674       58986.951  328175.2\n6          258583.881     1086012.6 -214.3671271      201992.641  471873.1\n7         -384251.210     5094060.5   -0.9212521      359659.512  408871.9\n8          -39634.902      735767.1   30.1741069       55602.506  347075.0\n9          276718.757     2815772.4  675.1615559      -30453.297  503872.8\n10        -454726.822     2123557.0  -21.3044311     -100935.586  213324.6\n         y    yhat    residual CV_Score Stud_residual Intercept_SE AREA_SQM_SE\n1  3000000 2886532   113468.16        0    0.38207013     516105.5    823.2860\n2  3880000 3466801   413198.52        0    1.01433140     488083.5    825.2380\n3  3325000 3616527  -291527.20        0   -0.83780678     963711.4    988.2240\n4  4250000 5435482 -1185481.63        0   -2.84614670     444185.5    617.4007\n5  1400000 1388166    11834.26        0    0.03404453    2119620.6   1376.2778\n6  1320000 1516702  -196701.94        0   -0.72065800   28572883.7   2348.0091\n7  3410000 3266881   143118.77        0    0.41291992     679546.6    893.5893\n8  1420000 1431955   -11955.27        0   -0.03033109    2217773.1   1415.2604\n9  2025000 1832799   192200.83        0    0.52018109     814281.8    943.8434\n10 2550000 2223364   326635.53        0    1.10559735    2410252.0   1271.4073\n      AGE_SE PROX_CBD_SE PROX_CHILDCARE_SE PROX_ELDERLYCARE_SE\n1   5889.782    37411.22          319111.1           120633.34\n2   6226.916    23615.06          299705.3            84546.69\n3   6510.236    56103.77          349128.5           129687.07\n4   6010.511   469337.41          304965.2           127150.69\n5   8180.361   410644.47          698720.6           327371.55\n6  14601.909  5272846.47         1141599.8          1653002.19\n7   8970.629   346164.20          530101.1           148598.71\n8   8661.309   438035.69          742532.8           399221.05\n9  11791.208    89148.35          704630.7           329683.30\n10  9941.980   173532.77          500976.2           281876.74\n   PROX_URA_GROWTH_AREA_SE PROX_MRT_SE PROX_PARK_SE PROX_PRIMARY_SCH_SE\n1                 56207.39    185181.3     205499.6            152400.7\n2                 76956.50    281133.9     229358.7            165150.7\n3                 95774.60    275483.7     314124.3            196662.6\n4                470762.12    279877.1     227249.4            240878.9\n5                474339.56    363830.0     364580.9            249087.7\n6               5496627.21    730453.2    1741712.0            683265.5\n7                371692.97    375511.9     297400.9            344602.8\n8                517977.91    423155.4     440984.4            261251.2\n9                153436.22    285325.4     304998.4            278258.5\n10               239182.57    571355.7     599131.8            331284.8\n   PROX_SHOPPING_MALL_SE PROX_BUS_STOP_SE NO_Of_UNITS_SE FAMILY_FRIENDLY_SE\n1               109268.8         600668.6       218.1258           131474.7\n2                98906.8         410222.1       208.9410           114989.1\n3               119913.3         464156.7       210.9828           146607.2\n4               177104.1         562810.8       361.7767           108726.6\n5               301032.9         740922.4       299.5034           160663.7\n6              2931208.6        1418333.3       602.5571           331727.0\n7               249969.5         821236.4       532.1978           129241.2\n8               351634.0         775038.4       338.6777           171895.1\n9               289872.7         850095.5       439.9037           220223.4\n10              265529.7         631399.2       259.0169           189125.5\n   FREEHOLD_SE Intercept_TV AREA_SQM_TV     AGE_TV PROX_CBD_TV\n1     115954.0    3.9720784   11.614302  -1.615447 -3.22582173\n2     130110.0    3.3460017   20.087361  -9.344188 -6.32792021\n3     141031.5    3.5629010   13.247868  -4.102368 -4.62353528\n4     138239.1    0.5276150   33.577223 -15.524302  5.17080808\n5     210641.1    1.0784029    4.884795  -2.152474 -0.77155660\n6     374347.3   -0.1249043    2.572214  -1.817269  0.06207388\n7     182216.9   -4.2305303   18.849348  -6.595605 -2.84136028\n8     216649.4    0.9189786    4.879056  -2.041481 -0.65080678\n9     220473.7    2.1104224   10.150733  -1.221345  1.18682383\n10    206346.2    1.4343123   11.068059  -3.176418 -1.35360852\n   PROX_CHILDCARE_TV PROX_ELDERLYCARE_TV PROX_URA_GROWTH_AREA_TV PROX_MRT_TV\n1         1.00048819          -3.2612693            -2.846248368 -1.61864578\n2         1.47178634           3.8462625            -1.848971738 -8.92998600\n3        -0.34404755           4.1319138            -2.648105057 -3.40075727\n4         1.57665606           2.4756745            -5.691404992 -7.28705261\n5         0.12990138          -0.4196596             0.640289855 -0.12249416\n6        -0.13361179          -0.4237096            -0.005103357  1.00426206\n7        -0.33542751          -0.8235874             3.760298131 -7.31116712\n8         0.09462126          -0.2405003             0.520038994 -0.03439159\n9        -0.93339393          -0.3739225            -2.359121712 -1.67102293\n10        0.15961128           1.9461735            -0.627237944 -2.63204802\n   PROX_PARK_TV PROX_PRIMARY_SCH_TV PROX_SHOPPING_MALL_TV PROX_BUS_STOP_TV\n1   -0.83749312           1.5923022            2.75358842        2.0154464\n2    2.28192684           6.7019454           -0.88662640        4.4941192\n3    0.66565951           2.9058009           -1.05686949        3.0419145\n4   -3.34061770          12.9836105           -0.16709578       12.8383775\n5   -0.02820944           0.1220998           -0.02488294        0.9145046\n6    0.86781794           0.4696245            0.08821750        0.7656963\n7    2.38773567           5.1844351           -1.53719231        6.2029165\n8    0.16674816           0.2042469           -0.11271635        0.9493299\n9   -0.43301073          -0.1442145            0.95462153        3.3123012\n10   0.95831249           0.3290120           -1.71252687        3.3632555\n   NO_Of_UNITS_TV FAMILY_FRIENDLY_TV FREEHOLD_TV  Local_R2\n1     0.480589953        -0.06902748    2.621347 0.8846744\n2    -1.380026395         2.69655779    3.045280 0.8899773\n3    -0.045279967         0.04058290    1.197050 0.8947007\n4    -0.446007570        14.31276425    8.771149 0.9073605\n5     0.141120178         0.36714544    1.557983 0.9510057\n6    -0.355762335         0.60891234    1.260522 0.9247586\n7    -0.001731033         2.78285441    2.243875 0.8310458\n8     0.089093858         0.32346758    1.602012 0.9463936\n9     1.534793921        -0.13828365    2.285410 0.8380365\n10   -0.082251138        -0.53369623    1.033819 0.9080753\n                    geometry\n1  POINT (22085.12 29951.54)\n2   POINT (25656.84 34546.2)\n3   POINT (23963.99 32890.8)\n4  POINT (27044.28 32319.77)\n5  POINT (41042.56 33743.64)\n6   POINT (39717.04 32943.1)\n7   POINT (28419.1 33513.37)\n8  POINT (40763.57 33879.61)\n9  POINT (23595.63 28884.78)\n10 POINT (24586.56 33194.31)\n\n\n\ngwr.adaptive.output &lt;- as.data.frame(gwr.adaptive$SDF)\ncondo_resale.sf.adaptive &lt;- cbind(condo_resale.res.sf, as.matrix(gwr.adaptive.output))\n\nNext, glimpse() is used to display the content of condo_resale.sf.adaptive sf data frame.\n\nglimpse(condo_resale.sf.adaptive)\n\nRows: 1,436\nColumns: 77\n$ POSTCODE                &lt;dbl&gt; 118635, 288420, 267833, 258380, 467169, 466472…\n$ SELLING_PRICE           &lt;dbl&gt; 3000000, 3880000, 3325000, 4250000, 1400000, 1…\n$ AREA_SQM                &lt;dbl&gt; 309, 290, 248, 127, 145, 139, 218, 141, 165, 1…\n$ AGE                     &lt;dbl&gt; 30, 32, 33, 7, 28, 22, 24, 24, 27, 31, 17, 22,…\n$ PROX_CBD                &lt;dbl&gt; 7.941259, 6.609797, 6.898000, 4.038861, 11.783…\n$ PROX_CHILDCARE          &lt;dbl&gt; 0.16597932, 0.28027246, 0.42922669, 0.39473543…\n$ PROX_ELDERLYCARE        &lt;dbl&gt; 2.5198118, 1.9333338, 0.5021395, 1.9910316, 1.…\n$ PROX_URA_GROWTH_AREA    &lt;dbl&gt; 6.618741, 7.505109, 6.463887, 4.906512, 6.4106…\n$ PROX_HAWKER_MARKET      &lt;dbl&gt; 1.76542207, 0.54507614, 0.37789301, 1.68259969…\n$ PROX_KINDERGARTEN       &lt;dbl&gt; 0.05835552, 0.61592412, 0.14120309, 0.38200076…\n$ PROX_MRT                &lt;dbl&gt; 0.5607188, 0.6584461, 0.3053433, 0.6910183, 0.…\n$ PROX_PARK               &lt;dbl&gt; 1.1710446, 0.1992269, 0.2779886, 0.9832843, 0.…\n$ PROX_PRIMARY_SCH        &lt;dbl&gt; 1.6340256, 0.9747834, 1.4715016, 1.4546324, 0.…\n$ PROX_TOP_PRIMARY_SCH    &lt;dbl&gt; 3.3273195, 0.9747834, 1.4715016, 2.3006394, 0.…\n$ PROX_SHOPPING_MALL      &lt;dbl&gt; 2.2102717, 2.9374279, 1.2256850, 0.3525671, 1.…\n$ PROX_SUPERMARKET        &lt;dbl&gt; 0.9103958, 0.5900617, 0.4135583, 0.4162219, 0.…\n$ PROX_BUS_STOP           &lt;dbl&gt; 0.10336166, 0.28673408, 0.28504777, 0.29872340…\n$ NO_Of_UNITS             &lt;dbl&gt; 18, 20, 27, 30, 30, 31, 32, 32, 32, 32, 34, 34…\n$ FAMILY_FRIENDLY         &lt;dbl&gt; 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0…\n$ FREEHOLD                &lt;dbl&gt; 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1…\n$ LEASEHOLD_99YR          &lt;dbl&gt; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0…\n$ LOG_SELLING_PRICE       &lt;dbl&gt; 14.91412, 15.17135, 15.01698, 15.26243, 14.151…\n$ MLR_RES                 &lt;dbl&gt; -1489099.55, 415494.57, 194129.69, 1088992.71,…\n$ Intercept               &lt;dbl&gt; 2050011.67, 1633128.24, 3433608.17, 234358.91,…\n$ AREA_SQM.1              &lt;dbl&gt; 9561.892, 16576.853, 13091.861, 20730.601, 672…\n$ AGE.1                   &lt;dbl&gt; -9514.634, -58185.479, -26707.386, -93308.988,…\n$ PROX_CBD.1              &lt;dbl&gt; -120681.94, -149434.22, -259397.77, 2426853.66…\n$ PROX_CHILDCARE.1        &lt;dbl&gt; 319266.925, 441102.177, -120116.816, 480825.28…\n$ PROX_ELDERLYCARE.1      &lt;dbl&gt; -393417.795, 325188.741, 535855.806, 314783.72…\n$ PROX_URA_GROWTH_AREA.1  &lt;dbl&gt; -159980.203, -142290.389, -253621.206, -267929…\n$ PROX_MRT.1              &lt;dbl&gt; -299742.96, -2510522.23, -936853.28, -2039479.…\n$ PROX_PARK.1             &lt;dbl&gt; -172104.47, 523379.72, 209099.85, -759153.26, …\n$ PROX_PRIMARY_SCH.1      &lt;dbl&gt; 242668.03, 1106830.66, 571462.33, 3127477.21, …\n$ PROX_SHOPPING_MALL.1    &lt;dbl&gt; 300881.390, -87693.378, -126732.712, -29593.34…\n$ PROX_BUS_STOP.1         &lt;dbl&gt; 1210615.44, 1843587.22, 1411924.90, 7225577.51…\n$ NO_Of_UNITS.1           &lt;dbl&gt; 104.8290640, -288.3441183, -9.5532945, -161.35…\n$ FAMILY_FRIENDLY.1       &lt;dbl&gt; -9075.370, 310074.664, 5949.746, 1556178.531, …\n$ FREEHOLD.1              &lt;dbl&gt; 303955.61, 396221.27, 168821.75, 1212515.58, 3…\n$ y                       &lt;dbl&gt; 3000000, 3880000, 3325000, 4250000, 1400000, 1…\n$ yhat                    &lt;dbl&gt; 2886531.8, 3466801.5, 3616527.2, 5435481.6, 13…\n$ residual                &lt;dbl&gt; 113468.16, 413198.52, -291527.20, -1185481.63,…\n$ CV_Score                &lt;dbl&gt; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0…\n$ Stud_residual           &lt;dbl&gt; 0.38207013, 1.01433140, -0.83780678, -2.846146…\n$ Intercept_SE            &lt;dbl&gt; 516105.5, 488083.5, 963711.4, 444185.5, 211962…\n$ AREA_SQM_SE             &lt;dbl&gt; 823.2860, 825.2380, 988.2240, 617.4007, 1376.2…\n$ AGE_SE                  &lt;dbl&gt; 5889.782, 6226.916, 6510.236, 6010.511, 8180.3…\n$ PROX_CBD_SE             &lt;dbl&gt; 37411.22, 23615.06, 56103.77, 469337.41, 41064…\n$ PROX_CHILDCARE_SE       &lt;dbl&gt; 319111.1, 299705.3, 349128.5, 304965.2, 698720…\n$ PROX_ELDERLYCARE_SE     &lt;dbl&gt; 120633.34, 84546.69, 129687.07, 127150.69, 327…\n$ PROX_URA_GROWTH_AREA_SE &lt;dbl&gt; 56207.39, 76956.50, 95774.60, 470762.12, 47433…\n$ PROX_MRT_SE             &lt;dbl&gt; 185181.3, 281133.9, 275483.7, 279877.1, 363830…\n$ PROX_PARK_SE            &lt;dbl&gt; 205499.6, 229358.7, 314124.3, 227249.4, 364580…\n$ PROX_PRIMARY_SCH_SE     &lt;dbl&gt; 152400.7, 165150.7, 196662.6, 240878.9, 249087…\n$ PROX_SHOPPING_MALL_SE   &lt;dbl&gt; 109268.8, 98906.8, 119913.3, 177104.1, 301032.…\n$ PROX_BUS_STOP_SE        &lt;dbl&gt; 600668.6, 410222.1, 464156.7, 562810.8, 740922…\n$ NO_Of_UNITS_SE          &lt;dbl&gt; 218.1258, 208.9410, 210.9828, 361.7767, 299.50…\n$ FAMILY_FRIENDLY_SE      &lt;dbl&gt; 131474.73, 114989.07, 146607.22, 108726.62, 16…\n$ FREEHOLD_SE             &lt;dbl&gt; 115954.0, 130110.0, 141031.5, 138239.1, 210641…\n$ Intercept_TV            &lt;dbl&gt; 3.9720784, 3.3460017, 3.5629010, 0.5276150, 1.…\n$ AREA_SQM_TV             &lt;dbl&gt; 11.614302, 20.087361, 13.247868, 33.577223, 4.…\n$ AGE_TV                  &lt;dbl&gt; -1.6154474, -9.3441881, -4.1023685, -15.524301…\n$ PROX_CBD_TV             &lt;dbl&gt; -3.22582173, -6.32792021, -4.62353528, 5.17080…\n$ PROX_CHILDCARE_TV       &lt;dbl&gt; 1.000488185, 1.471786337, -0.344047555, 1.5766…\n$ PROX_ELDERLYCARE_TV     &lt;dbl&gt; -3.26126929, 3.84626245, 4.13191383, 2.4756745…\n$ PROX_URA_GROWTH_AREA_TV &lt;dbl&gt; -2.846248368, -1.848971738, -2.648105057, -5.6…\n$ PROX_MRT_TV             &lt;dbl&gt; -1.61864578, -8.92998600, -3.40075727, -7.2870…\n$ PROX_PARK_TV            &lt;dbl&gt; -0.83749312, 2.28192684, 0.66565951, -3.340617…\n$ PROX_PRIMARY_SCH_TV     &lt;dbl&gt; 1.59230221, 6.70194543, 2.90580089, 12.9836104…\n$ PROX_SHOPPING_MALL_TV   &lt;dbl&gt; 2.753588422, -0.886626400, -1.056869486, -0.16…\n$ PROX_BUS_STOP_TV        &lt;dbl&gt; 2.0154464, 4.4941192, 3.0419145, 12.8383775, 0…\n$ NO_Of_UNITS_TV          &lt;dbl&gt; 0.480589953, -1.380026395, -0.045279967, -0.44…\n$ FAMILY_FRIENDLY_TV      &lt;dbl&gt; -0.06902748, 2.69655779, 0.04058290, 14.312764…\n$ FREEHOLD_TV             &lt;dbl&gt; 2.6213469, 3.0452799, 1.1970499, 8.7711485, 1.…\n$ Local_R2                &lt;dbl&gt; 0.8846744, 0.8899773, 0.8947007, 0.9073605, 0.…\n$ coords.x1               &lt;dbl&gt; 22085.12, 25656.84, 23963.99, 27044.28, 41042.…\n$ coords.x2               &lt;dbl&gt; 29951.54, 34546.20, 32890.80, 32319.77, 33743.…\n$ geometry                &lt;POINT [m]&gt; POINT (22085.12 29951.54), POINT (25656.…\n\n\n\nsummary(gwr.adaptive$SDF$yhat)\n\n    Min.  1st Qu.   Median     Mean  3rd Qu.     Max. \n  171347  1102001  1385528  1751842  1982307 13887901 \n\n\n\n\n4.9.5 Visualising local R2\nThe code chunks below is used to create an interactive point symbol map.\n\ntmap_mode(\"view\")\ntm_shape(mpsz_svy21)+\n  tm_polygons(alpha = 0.1) +\ntm_shape(condo_resale.sf.adaptive) +  \n  tm_dots(col = \"Local_R2\",\n          border.col = \"gray60\",\n          border.lwd = 1) +\n  tm_view(set.zoom.limits = c(11,14))\n\n\n\n\n\n\n\ntmap_mode(\"plot\")\n\n\n\n4.9.6 Visualising coefficient estimates\nThe code chunks below is used to create an interactive point symbol map.\n\ntmap_mode(\"view\")\nAREA_SQM_SE &lt;- tm_shape(mpsz_svy21)+\n  tm_polygons(alpha = 0.1) +\ntm_shape(condo_resale.sf.adaptive) +  \n  tm_dots(col = \"AREA_SQM_SE\",\n          border.col = \"gray60\",\n          border.lwd = 1) +\n  tm_view(set.zoom.limits = c(11,14))\n\nAREA_SQM_TV &lt;- tm_shape(mpsz_svy21)+\n  tm_polygons(alpha = 0.1) +\ntm_shape(condo_resale.sf.adaptive) +  \n  tm_dots(col = \"AREA_SQM_TV\",\n          border.col = \"gray60\",\n          border.lwd = 1) +\n  tm_view(set.zoom.limits = c(11,14))\n\ntmap_arrange(AREA_SQM_SE, AREA_SQM_TV, \n             asp=1, ncol=2,\n             sync = TRUE)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ntmap_mode(\"plot\")\n\n\n4.9.6.1 By URA Plannign Region\n\ntm_shape(mpsz_svy21[mpsz_svy21$REGION_N==\"CENTRAL REGION\", ])+\n  tm_polygons()+\ntm_shape(condo_resale.sf.adaptive) + \n  tm_bubbles(col = \"Local_R2\",\n           size = 0.15,\n           border.col = \"gray60\",\n           border.lwd = 1)"
  },
  {
    "objectID": "Hands-on Ex/Hands-on_Ex4/Hands-on_Ex_4.html#reference",
    "href": "Hands-on Ex/Hands-on_Ex4/Hands-on_Ex_4.html#reference",
    "title": "Hands-on Exercise 4: Calibrating Hedonic Pricing Model for Private Highrise Property with GWR Method",
    "section": "4.10 Reference",
    "text": "4.10 Reference\nGollini I, Lu B, Charlton M, Brunsdon C, Harris P (2015) “GWmodel: an R Package for exploring Spatial Heterogeneity using Geographically Weighted Models”. Journal of Statistical Software, 63(17):1-50, http://www.jstatsoft.org/v63/i17/\nLu B, Harris P, Charlton M, Brunsdon C (2014) “The GWmodel R Package: further topics for exploring Spatial Heterogeneity using GeographicallyWeighted Models”. Geo-spatial Information Science 17(2): 85-101, http://www.tandfonline.com/doi/abs/10.1080/1009502.2014.917453"
  },
  {
    "objectID": "Hands-on Ex/Hands-on Ex 3/data/geospatial/MPSZ-2019.html",
    "href": "Hands-on Ex/Hands-on Ex 3/data/geospatial/MPSZ-2019.html",
    "title": "ISSS624",
    "section": "",
    "text": "&lt;!DOCTYPE qgis PUBLIC ‘http://mrcc.com/qgis.dtd’ ‘SYSTEM’&gt;     dataset\n\n\n        0 0     false"
  },
  {
    "objectID": "Hands-on Ex/Hands-on Ex 2/Hands-on Exercise 2B.html",
    "href": "Hands-on Ex/Hands-on Ex 2/Hands-on Exercise 2B.html",
    "title": "Hands-on Exercise 2B: Global Measures of Spatial Autocorrelation",
    "section": "",
    "text": "In hands-on exercise 2B, we will show how to compute Global and Local Measure of Spatial Autocorrelation (GLSA) by using spdep package. By the end to this hands-on exercise, we will be able to:\n\nimport geospatial data using appropriate function(s) of sf package,\nimport csv file using appropriate function of readr package,\nperform relational join using appropriate join function of dplyr package,\ncompute Global Spatial Autocorrelation (GSA) statistics by using appropriate functions of spdep package,\n\nplot Moran scatterplot,\ncompute and plot spatial correlogram using appropriate function of spdep package.\n\ncompute Local Indicator of Spatial Association (LISA) statistics for detecting clusters and outliers by using appropriate functions spdep package;\ncompute Getis-Ord’s Gi-statistics for detecting hot spot or/and cold spot area by using appropriate functions of spdep package; and\nto visualise the analysis output by using tmap package."
  },
  {
    "objectID": "Hands-on Ex/Hands-on Ex 2/Hands-on Exercise 2B.html#overview",
    "href": "Hands-on Ex/Hands-on Ex 2/Hands-on Exercise 2B.html#overview",
    "title": "Hands-on Exercise 2B: Global Measures of Spatial Autocorrelation",
    "section": "",
    "text": "In hands-on exercise 2B, we will show how to compute Global and Local Measure of Spatial Autocorrelation (GLSA) by using spdep package. By the end to this hands-on exercise, we will be able to:\n\nimport geospatial data using appropriate function(s) of sf package,\nimport csv file using appropriate function of readr package,\nperform relational join using appropriate join function of dplyr package,\ncompute Global Spatial Autocorrelation (GSA) statistics by using appropriate functions of spdep package,\n\nplot Moran scatterplot,\ncompute and plot spatial correlogram using appropriate function of spdep package.\n\ncompute Local Indicator of Spatial Association (LISA) statistics for detecting clusters and outliers by using appropriate functions spdep package;\ncompute Getis-Ord’s Gi-statistics for detecting hot spot or/and cold spot area by using appropriate functions of spdep package; and\nto visualise the analysis output by using tmap package."
  },
  {
    "objectID": "Hands-on Ex/Hands-on Ex 2/Hands-on Exercise 2B.html#getting-started",
    "href": "Hands-on Ex/Hands-on Ex 2/Hands-on Exercise 2B.html#getting-started",
    "title": "Hands-on Exercise 2B: Global Measures of Spatial Autocorrelation",
    "section": "2.2 Getting Started",
    "text": "2.2 Getting Started\n\n2.2.1 The analytical question\nIn spatial policy, one of the main development objective of the local government and planners is to ensure equal distribution of development in the province. Our task in this study, hence, is to apply appropriate spatial statistical methods to discover if development are even distributed geographically. If the answer is No. Then, our next question will be “is there sign of spatial clustering?”. And, if the answer for this question is yes, then our next question will be “where are these clusters?”\nIn this case study, we are interested to examine the spatial pattern of a selected development indicator (i.e. GDP per capita) of Hunan Provice, People Republic of China.(https://en.wikipedia.org/wiki/Hunan)\n\n\n2.2.2 The Study Area and Data\nTwo data sets will be used in this hands-on exercise, they are:\n\nHunan province administrative boundary layer at county level. This is a geospatial data set in ESRI shapefile format.\nHunan_2012.csv: This csv file contains selected Hunan’s local development indicators in 2012.\n\n\n\n2.2.3 Setting the Analytical Toolls\nBefore we get started, we need to ensure that spdep, sf, tmap and tidyverse packages of R are currently installed in your R.\n\nsf is use for importing and handling geospatial data in R,\ntidyverse is mainly use for wrangling attribute data in R,\nspdep will be used to compute spatial weights, global and local spatial autocorrelation statistics, and\ntmap will be used to prepare cartographic quality chropleth map.\n\nThe code chunk below is used to perform the following tasks:\n\ncreating a package list containing the necessary R packages,\nchecking if the R packages in the package list have been installed in R,\n\nif they have yet to be installed, RStudio will installed the missing packages,\n\nlaunching the packages into R environment.\n\n\npacman::p_load(sf, spdep, tmap, tidyverse)"
  },
  {
    "objectID": "Hands-on Ex/Hands-on Ex 2/Hands-on Exercise 2B.html#getting-the-data-into-r-environment",
    "href": "Hands-on Ex/Hands-on Ex 2/Hands-on Exercise 2B.html#getting-the-data-into-r-environment",
    "title": "Hands-on Exercise 2B: Global Measures of Spatial Autocorrelation",
    "section": "2.3 Getting the Data Into R Environment",
    "text": "2.3 Getting the Data Into R Environment\nIn this section, we will learn how to bring a geospatial data and its associated attribute table into R environment. The geospatial data is in ESRI shapefile format and the attribute table is in csv fomat.\n\n2.3.1 Import shapefile into R environment\nThe code chunk below uses st_read() of sf package to import Hunan shapefile into R. The imported shapefile will be simple features Object of sf.\n\nhunan &lt;- st_read(dsn = \"data/geospatial\", \n                 layer = \"Hunan\")\n\nReading layer `Hunan' from data source \n  `D:\\KathyChiu77\\ISSS624\\Hands-on Ex\\Hands-on Ex 2\\data\\geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 88 features and 7 fields\nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: 108.7831 ymin: 24.6342 xmax: 114.2544 ymax: 30.12812\nGeodetic CRS:  WGS 84\n\n\n\n\n2.3.2 Import csv file into R environment\nNext, we will import Hunan_2012.csv into R by using read_csv() of readr package. The output is R data frame class.\n\nhunan2012 &lt;- read_csv(\"data/aspatial/Hunan_2012.csv\")\n\n\n\n2.3.3 Performing relational join\nThe code chunk below will be used to update the attribute table of hunan’s SpatialPolygonsDataFrame with the attribute fields of hunan2012 dataframe. This is performed by using left_join() of dplyr package.\n\nhunan &lt;- left_join(hunan,hunan2012) %&gt;%\n  select(1:4, 7, 15)\n\n\n\n2.3.4 Visualising Regional Development Indicator\nNow, we are going to prepare a basemap and a choropleth map showing the distribution of GDPPC 2012 by using qtm() of tmap package.\n\nequal &lt;- tm_shape(hunan) +\n  tm_fill(\"GDPPC\",\n          n = 5,\n          style = \"equal\") +\n  tm_borders(alpha = 0.5) +\n  tm_layout(main.title = \"Equal interval classification\")\n\nquantile &lt;- tm_shape(hunan) +\n  tm_fill(\"GDPPC\",\n          n = 5,\n          style = \"quantile\") +\n  tm_borders(alpha = 0.5) +\n  tm_layout(main.title = \"Equal quantile classification\")\n\ntmap_arrange(equal, \n             quantile, \n             asp=1, \n             ncol=2)"
  },
  {
    "objectID": "Hands-on Ex/Hands-on Ex 2/Hands-on Exercise 2B.html#global-spatial-autocorrelation",
    "href": "Hands-on Ex/Hands-on Ex 2/Hands-on Exercise 2B.html#global-spatial-autocorrelation",
    "title": "Hands-on Exercise 2B: Global Measures of Spatial Autocorrelation",
    "section": "2.4 Global Spatial Autocorrelation",
    "text": "2.4 Global Spatial Autocorrelation\nIn this section, we will compute global spatial autocorrelation statistics and to perform spatial complete randomness test for global spatial autocorrelation.\n\n2.4.1 Computing Contiguity Spatial Weights\nBefore we can compute the global spatial autocorrelation statistics, we need to construct a spatial weights of the study area. The spatial weights is used to define the neighbourhood relationships between the geographical units (i.e. county) in the study area.\nIn the code chunk below, poly2nb() of spdep package is used to compute contiguity weight matrices for the study area. This function builds a neighbours list based on regions with contiguous boundaries. If you look at the documentation you will see that you can pass a “queen” argument that takes TRUE or FALSE as options. If you do not specify this argument the default is set to TRUE, that is, if you don’t specify queen = FALSE this function will return a list of first order neighbours using the Queen criteria.\nMore specifically, the code chunk below is used to compute Queen contiguity weight matrix.\n\nwm_q &lt;- poly2nb(hunan, \n                queen=TRUE)\nsummary(wm_q)\n\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 448 \nPercentage nonzero weights: 5.785124 \nAverage number of links: 5.090909 \nLink number distribution:\n\n 1  2  3  4  5  6  7  8  9 11 \n 2  2 12 16 24 14 11  4  2  1 \n2 least connected regions:\n30 65 with 1 link\n1 most connected region:\n85 with 11 links\n\n\n\n\n2.4.2 Row-standardised weights matrix\nNext, we need to assign weights to each neighboring polygon. In our case, each neighboring polygon will be assigned equal weight (style=“W”). This is accomplished by assigning the fraction 1/(#ofneighbors) to each neighboring county then summing the weighted income values. While this is the most intuitive way to summaries the neighbors’ values it has one drawback in that polygons along the edges of the study area will base their lagged values on fewer polygons thus potentially over- or under-estimating the true nature of the spatial autocorrelation in the data. For this example, we’ll stick with the style=“W” option for simplicity’s sake but note that other more robust options are available, notably style=“B”.\n\nrswm_q &lt;- nb2listw(wm_q, \n                   style=\"W\", \n                   zero.policy = TRUE)\nrswm_q\n\nCharacteristics of weights list object:\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 448 \nPercentage nonzero weights: 5.785124 \nAverage number of links: 5.090909 \n\nWeights style: W \nWeights constants summary:\n   n   nn S0       S1       S2\nW 88 7744 88 37.86334 365.9147\n\n\nThe input of nb2listw() must be an object of class nb. The syntax of the function has two major arguments, namely style and zero.poly.\n\nstyle can take values “W”, “B”, “C”, “U”, “minmax” and “S”. B is the basic binary coding, W is row standardised (sums over all links to n), C is globally standardised (sums over all links to n), U is equal to C divided by the number of neighbours (sums over all links to unity), while S is the variance-stabilizing coding scheme proposed by Tiefelsdorf et al. 1999, p. 167-168 (sums over all links to n).\nIf zero policy is set to TRUE, weights vectors of zero length are inserted for regions without neighbour in the neighbours list. These will in turn generate lag values of zero, equivalent to the sum of products of the zero row t(rep(0, length=length(neighbours))) %*% x, for arbitrary numerical vector x of length length(neighbours). The spatially lagged value of x for the zero-neighbour region will then be zero, which may (or may not) be a sensible choice.\n\n\n\n2.4.3 Global Spatial Autocorrelation: Moran’s I\nIn this section, you will learn how to perform Moran’s I statistics testing by using moran.test() of spdep.\n\n\n2.4.4 Maron’s I test\nThe code chunk below performs Moran’s I statistical testing using moran.test() of spdep.\n\nmoran.test(hunan$GDPPC, \n           listw=rswm_q, \n           zero.policy = TRUE, \n           na.action=na.omit)\n\n\n    Moran I test under randomisation\n\ndata:  hunan$GDPPC  \nweights: rswm_q    \n\nMoran I statistic standard deviate = 4.7351, p-value = 1.095e-06\nalternative hypothesis: greater\nsample estimates:\nMoran I statistic       Expectation          Variance \n      0.300749970      -0.011494253       0.004348351 \n\n\nThe Moran’s I statistic of approximately 0.3075 indicates a positive spatial autocorrelation. This suggests that locations with similar values of GDPPC are clustered together geographically.\n\n2.4.4.1 Computing Monte Carlo Moran’s I\nThe code chunk below performs permutation test for Moran’s I statistic by using moran.mc() of spdep. A total of 1000 simulation will be performed.\n\nset.seed(1234)\nbperm= moran.mc(hunan$GDPPC, \n                listw=rswm_q, \n                nsim=999, \n                zero.policy = TRUE, \n                na.action=na.omit)\nbperm\n\n\n    Monte-Carlo simulation of Moran I\n\ndata:  hunan$GDPPC \nweights: rswm_q  \nnumber of simulations + 1: 1000 \n\nstatistic = 0.30075, observed rank = 1000, p-value = 0.001\nalternative hypothesis: greater\n\n\nThe statistic of approximately 0.30075 suggests that there is a positive spatial autocorrelation in the dataset hunan$GDPPC, similar to what was indicated in the previous output.\n\n\n2.4.4.2 Visualising Monte Carlo Moran’s I\nIt is always a good practice for us the examine the simulated Moran’s I test statistics in greater detail. This can be achieved by plotting the distribution of the statistical values as a histogram by using the code chunk below.\nIn the code chunk below hist() and abline() of R Graphics are used.\n\nmean(bperm$res[1:999])\n\n[1] -0.01504572\n\n\n\nvar(bperm$res[1:999])\n\n[1] 0.004371574\n\n\n\nsummary(bperm$res[1:999])\n\n    Min.  1st Qu.   Median     Mean  3rd Qu.     Max. \n-0.18339 -0.06168 -0.02125 -0.01505  0.02611  0.27593 \n\n\n\nhist(bperm$res, \n     freq=TRUE, \n     breaks=20, \n     xlab=\"Simulated Moran's I\")\nabline(v=0, \n       col=\"red\") \n\n\n\n\n\nbperm_data &lt;- data.frame(MoransI = bperm$res)\nggplot(bperm_data, aes(x = MoransI)) + \n  geom_histogram(bins = 20, fill = 'blue', color = 'black') +\n  geom_vline(xintercept = 0, color = 'red', linetype = 'dashed') +\n  xlab('Simulated Moran\\'s I') +\n  ylab('Frequency') +\n  ggtitle('Histogram of Simulated Moran\\'s I')\n\n\n\n\n\n\n\n2.4.5 Global Spatial Autocorrelation: Geary’s\nIn this section, you will learn how to perform Geary’s c statistics testing by using appropriate functions of spdep package.\n\n2.4.5.1 Geary’s C test\nThe code chunk below performs Geary’s C test for spatial autocorrelation by using geary.test() of spdep.\n\ngeary.test(hunan$GDPPC, listw=rswm_q)\n\n\n    Geary C test under randomisation\n\ndata:  hunan$GDPPC \nweights: rswm_q \n\nGeary C statistic standard deviate = 3.6108, p-value = 0.0001526\nalternative hypothesis: Expectation greater than statistic\nsample estimates:\nGeary C statistic       Expectation          Variance \n        0.6907223         1.0000000         0.0073364 \n\n\nThe Geary’s C test results suggest there is a statistically significant positive local spatial autocorrelation in the variable GDPPC within the dataset hunan$. This means that regions with similar values of GDPPC are clustered together geographically more than would be expected by chance.\n\n\n2.4.5.2 Computing Monte Carlo Geary’s C\nThe code chunk below performs permutation test for Geary’s C statistic by using geary.mc() of spdep.\n\nset.seed(1234)\nbperm=geary.mc(hunan$GDPPC, \n               listw=rswm_q, \n               nsim=999)\nbperm\n\n\n    Monte-Carlo simulation of Geary C\n\ndata:  hunan$GDPPC \nweights: rswm_q \nnumber of simulations + 1: 1000 \n\nstatistic = 0.69072, observed rank = 1, p-value = 0.001\nalternative hypothesis: greater\n\n\n\n\n2.4.5.3 Visualising the Monte Carlo Geary’s C\nNext, we will plot a histogram to reveal the distribution of the simulated values by using the code chunk below.\n\nmean(bperm$res[1:999])\n\n[1] 1.004402\n\n\n\nvar(bperm$res[1:999])\n\n[1] 0.007436493\n\n\n\nsummary(bperm$res[1:999])\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n 0.7142  0.9502  1.0052  1.0044  1.0595  1.2722 \n\n\n\nhist(bperm$res, freq=TRUE, breaks=20, xlab=\"Simulated Geary c\")\nabline(v=1, col=\"red\")"
  },
  {
    "objectID": "Hands-on Ex/Hands-on Ex 2/Hands-on Exercise 2B.html#spatial-correlogram",
    "href": "Hands-on Ex/Hands-on Ex 2/Hands-on Exercise 2B.html#spatial-correlogram",
    "title": "Hands-on Exercise 2B: Global Measures of Spatial Autocorrelation",
    "section": "2.5 Spatial Correlogram",
    "text": "2.5 Spatial Correlogram\nSpatial correlograms are great to examine patterns of spatial autocorrelation in your data or model residuals. They show how correlated are pairs of spatial observations when you increase the distance (lag) between them - they are plots of some index of autocorrelation (Moran’s I or Geary’s c) against distance.Although correlograms are not as fundamental as variograms (a keystone concept of geostatistics), they are very useful as an exploratory and descriptive tool. For this purpose they actually provide richer information than variograms.\n\n2.5.1 Compute Moran’s I correlogram\nIn the code chunk below, sp.correlogram() of spdep package is used to compute a 6-lag spatial correlogram of GDPPC. The global spatial autocorrelation used in Moran’s I. The plot() of base Graph is then used to plot the output.\n\nMI_corr &lt;- sp.correlogram(wm_q, \n                          hunan$GDPPC, \n                          order=6, \n                          method=\"I\", \n                          style=\"W\")\nplot(MI_corr)\n\n\n\n\nBy plotting the output might not allow us to provide complete interpretation. This is because not all autocorrelation values are statistically significant. Hence, it is important for us to examine the full analysis report by printing out the analysis results as in the code chunk below.\n\nprint(MI_corr)\n\nSpatial correlogram for hunan$GDPPC \nmethod: Moran's I\n         estimate expectation   variance standard deviate Pr(I) two sided    \n1 (88)  0.3007500  -0.0114943  0.0043484           4.7351       2.189e-06 ***\n2 (88)  0.2060084  -0.0114943  0.0020962           4.7505       2.029e-06 ***\n3 (88)  0.0668273  -0.0114943  0.0014602           2.0496        0.040400 *  \n4 (88)  0.0299470  -0.0114943  0.0011717           1.2107        0.226015    \n5 (88) -0.1530471  -0.0114943  0.0012440          -4.0134       5.984e-05 ***\n6 (88) -0.1187070  -0.0114943  0.0016791          -2.6164        0.008886 ** \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\n\nThe correlogram suggest that there is a pattern of positive spatial autocorrelation at shorter distances (lags 1-4) and negative spatial autocorrelation at larger distances (lags 5-6), with the pattern being statistically significant at least up to lag 5. This implies that GDPPC values are spatially clustered at small distances and dispersed at larger distances.\n\n\n2.5.2 Compute Geary’s C correlogram and plot\nIn the code chunk below, sp.correlogram() of spdep package is used to compute a 6-lag spatial correlogram of GDPPC. The global spatial autocorrelation used in Geary’s C. The plot() of base Graph is then used to plot the output.\n\nGC_corr &lt;- sp.correlogram(wm_q, \n                          hunan$GDPPC, \n                          order=6, \n                          method=\"C\", \n                          style=\"W\")\nplot(GC_corr)\n\n\n\n\nSimilar to the previous step, we will print out the analysis report by using the code chunk below.\n\nprint(GC_corr)\n\nSpatial correlogram for hunan$GDPPC \nmethod: Geary's C\n        estimate expectation  variance standard deviate Pr(I) two sided    \n1 (88) 0.6907223   1.0000000 0.0073364          -3.6108       0.0003052 ***\n2 (88) 0.7630197   1.0000000 0.0049126          -3.3811       0.0007220 ***\n3 (88) 0.9397299   1.0000000 0.0049005          -0.8610       0.3892612    \n4 (88) 1.0098462   1.0000000 0.0039631           0.1564       0.8757128    \n5 (88) 1.2008204   1.0000000 0.0035568           3.3673       0.0007592 ***\n6 (88) 1.0773386   1.0000000 0.0058042           1.0151       0.3100407    \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1"
  },
  {
    "objectID": "Hands-on Ex/Hands-on Ex 1/Hands-on Exercise 1.html",
    "href": "Hands-on Ex/Hands-on Ex 1/Hands-on Exercise 1.html",
    "title": "Hands on Exercise 1: Data importing and wrangling",
    "section": "",
    "text": "In this hands-on exercise, you will learn how to handle geospatial data in R by using sf package.\nBy the end of this hands-on exercise, you should acquire the following competencies:\n\ninstalling and loading sf and tidyverse packages into R environment,\nimporting geospatial data by using appropriate functions of sf package,\nimporting aspatial data by using appropriate function of readr package,\nexploring the content of simple feature data frame by using appropriate Base R and sf functions,\nassigning or transforming coordinate systems by using using appropriate sf functions,\nconverting an aspatial data into a sf data frame by using appropriate function of sf package,\nperforming geoprocessing tasks by using appropriate functions of sf package,\nperforming data wrangling tasks by using appropriate functions of dplyr package and\nperforming Exploratory Data Analysis (EDA) by using appropriate functions from ggplot2 package."
  },
  {
    "objectID": "Hands-on Ex/Hands-on Ex 1/Hands-on Exercise 1.html#data-wrangling",
    "href": "Hands-on Ex/Hands-on Ex 1/Hands-on Exercise 1.html#data-wrangling",
    "title": "Hands on Exercise 1: Data importing and wrangling",
    "section": "Data wrangling",
    "text": "Data wrangling\n\npopdata2020 &lt;- popdata %&gt;%\n  filter(Time == 2020) %&gt;%\n  group_by(PA, SZ, AG) %&gt;%\n  summarise(`POP` = sum(`Pop`)) %&gt;%\n  ungroup()%&gt;%\n  pivot_wider(names_from=AG, \n              values_from=POP) %&gt;%\n  mutate(YOUNG = rowSums(.[3:6])\n         +rowSums(.[12])) %&gt;%\nmutate(`ECONOMY ACTIVE` = rowSums(.[7:11])+\nrowSums(.[13:15]))%&gt;%\nmutate(`AGED`=rowSums(.[16:21])) %&gt;%\nmutate(`TOTAL`=rowSums(.[3:21])) %&gt;%  \nmutate(`DEPENDENCY` = (`YOUNG` + `AGED`)\n/`ECONOMY ACTIVE`) %&gt;%\n  select(`PA`, `SZ`, `YOUNG`, \n       `ECONOMY ACTIVE`, `AGED`, \n       `TOTAL`, `DEPENDENCY`)"
  },
  {
    "objectID": "Hands-on Ex/Hands-on Ex 1/Hands-on Exercise 1.html#joining-the-attribute-data-and-geospatial-data",
    "href": "Hands-on Ex/Hands-on Ex 1/Hands-on Exercise 1.html#joining-the-attribute-data-and-geospatial-data",
    "title": "Hands on Exercise 1: Data importing and wrangling",
    "section": "Joining the attribute data and geospatial data",
    "text": "Joining the attribute data and geospatial data\n\npopdata2020 &lt;- popdata2020 %&gt;%\n  mutate_at(.vars = vars(PA, SZ), \n          .funs = list(toupper)) %&gt;%\n  filter(`ECONOMY ACTIVE` &gt; 0)\nmpsz_pop2020 &lt;- left_join(mpsz, popdata2020,\n                          by = c(\"SUBZONE_N\" = \"SZ\"))\nwrite_rds(mpsz_pop2020, \"Data/rds/mpszpop2020.rds\")"
  },
  {
    "objectID": "Hands-on Ex/Hands-on Ex 1/Hands-on Exercise 1.html#plotting-a-choropleth-map-quickly-by-using-qtm",
    "href": "Hands-on Ex/Hands-on Ex 1/Hands-on Exercise 1.html#plotting-a-choropleth-map-quickly-by-using-qtm",
    "title": "Hands on Exercise 1: Data importing and wrangling",
    "section": "Plotting a choropleth map quickly by using qtm()",
    "text": "Plotting a choropleth map quickly by using qtm()\n\ntmap_mode(\"plot\")\nqtm(mpsz_pop2020, \n    fill = \"DEPENDENCY\")"
  },
  {
    "objectID": "Hands-on Ex/Hands-on Ex 1/Hands-on Exercise 1.html#creating-a-choropleth-map-by-using-tmaps-elements",
    "href": "Hands-on Ex/Hands-on Ex 1/Hands-on Exercise 1.html#creating-a-choropleth-map-by-using-tmaps-elements",
    "title": "Hands on Exercise 1: Data importing and wrangling",
    "section": "Creating a choropleth map by using tmap’s elements",
    "text": "Creating a choropleth map by using tmap’s elements\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\", \n          style = \"quantile\", \n          palette = \"Blues\",\n          title = \"Dependency ratio\") +\n  tm_layout(main.title = \"Distribution of Dependency Ratio by planning subzone\",\n            main.title.position = \"center\",\n            main.title.size = 1.2,\n            legend.height = 0.45, \n            legend.width = 0.35,\n            frame = TRUE) +\n  tm_borders(alpha = 0.5) +\n  tm_compass(type=\"8star\", size = 2) +\n  tm_scale_bar() +\n  tm_grid(alpha =0.2) +\n  tm_credits(\"Source: Planning Sub-zone boundary from Urban Redevelopment Authorithy (URA)\\n and Population data from Department of Statistics DOS\", \n             position = c(\"left\", \"bottom\"))"
  },
  {
    "objectID": "Hands-on Ex/Hands-on Ex 1/Hands-on Exercise 1.html#drawing-a-base-map",
    "href": "Hands-on Ex/Hands-on Ex 1/Hands-on Exercise 1.html#drawing-a-base-map",
    "title": "Hands on Exercise 1: Data importing and wrangling",
    "section": "Drawing a base map",
    "text": "Drawing a base map\n\ntm_shape(mpsz_pop2020) +\n  tm_polygons()"
  },
  {
    "objectID": "Hands-on Ex/Hands-on Ex 1/Hands-on Exercise 1.html#drawing-a-choropleth-map-using-tm_polygons",
    "href": "Hands-on Ex/Hands-on Ex 1/Hands-on Exercise 1.html#drawing-a-choropleth-map-using-tm_polygons",
    "title": "Hands on Exercise 1: Data importing and wrangling",
    "section": "Drawing a choropleth map using tm_polygons()",
    "text": "Drawing a choropleth map using tm_polygons()\n\ntm_shape(mpsz_pop2020)+\n  tm_polygons(\"DEPENDENCY\")"
  },
  {
    "objectID": "Hands-on Ex/Hands-on Ex 1/Hands-on Exercise 1.html#drawing-a-choropleth-map-using-tm_fill-and-tm_border",
    "href": "Hands-on Ex/Hands-on Ex 1/Hands-on Exercise 1.html#drawing-a-choropleth-map-using-tm_fill-and-tm_border",
    "title": "Hands on Exercise 1: Data importing and wrangling",
    "section": "Drawing a choropleth map using tm_fill() and *tm_border()**",
    "text": "Drawing a choropleth map using tm_fill() and *tm_border()**\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\")\n\n\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\") +\n  tm_borders(lwd = 0.1,  alpha = 1)"
  },
  {
    "objectID": "Hands-on Ex/Hands-on Ex 1/Hands-on Exercise 1.html#plotting-choropleth-maps-with-built-in-classification-methods",
    "href": "Hands-on Ex/Hands-on Ex 1/Hands-on Exercise 1.html#plotting-choropleth-maps-with-built-in-classification-methods",
    "title": "Hands on Exercise 1: Data importing and wrangling",
    "section": "Plotting choropleth maps with built-in classification methods",
    "text": "Plotting choropleth maps with built-in classification methods\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          n = 5,\n          style = \"jenks\") +\n  tm_borders(alpha = 0.5)\n\n\n\n\nIn the code chunk below, equal data classification method is used.\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          n = 5,\n          style = \"equal\") +\n  tm_borders(alpha = 0.5)"
  },
  {
    "objectID": "Hands-on Ex/Hands-on Ex 1/Hands-on Exercise 1.html#plotting-choropleth-map-with-custome-break",
    "href": "Hands-on Ex/Hands-on Ex 1/Hands-on Exercise 1.html#plotting-choropleth-map-with-custome-break",
    "title": "Hands on Exercise 1: Data importing and wrangling",
    "section": "Plotting choropleth map with custome break",
    "text": "Plotting choropleth map with custome break\n\nsummary(mpsz_pop2020$DEPENDENCY)\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max.    NA's \n 0.1111  0.7147  0.7866  0.8585  0.8763 19.0000      92 \n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          breaks = c(0, 0.60, 0.70, 0.80, 0.90, 1.00)) +\n  tm_borders(alpha = 0.5)"
  },
  {
    "objectID": "Hands-on Ex/Hands-on Ex 1/Hands-on Exercise 1.html#using-colourbrewer-palette",
    "href": "Hands-on Ex/Hands-on Ex 1/Hands-on Exercise 1.html#using-colourbrewer-palette",
    "title": "Hands on Exercise 1: Data importing and wrangling",
    "section": "Using ColourBrewer palette",
    "text": "Using ColourBrewer palette\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          n = 6,\n          style = \"quantile\",\n          palette = \"Blues\") +\n  tm_borders(alpha = 0.5)\n\n\n\n\nTo reverse the colour shading, add a “-” prefix.\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          style = \"quantile\",\n          palette = \"-Greens\") +\n  tm_borders(alpha = 0.5)"
  },
  {
    "objectID": "Hands-on Ex/Hands-on Ex 1/Hands-on Exercise 1.html#map-legend",
    "href": "Hands-on Ex/Hands-on Ex 1/Hands-on Exercise 1.html#map-legend",
    "title": "Hands on Exercise 1: Data importing and wrangling",
    "section": "Map Legend",
    "text": "Map Legend\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\", \n          style = \"jenks\", \n          palette = \"Blues\", \n          legend.hist = TRUE, \n          legend.is.portrait = TRUE,\n          legend.hist.z = 0.1) +\n  tm_layout(main.title = \"Distribution of Dependency Ratio by planning subzone \\n(Jenks classification)\",\n            main.title.position = \"center\",\n            main.title.size = 1,\n            legend.height = 0.45, \n            legend.width = 0.35,\n            legend.outside = FALSE,\n            legend.position = c(\"right\", \"bottom\"),\n            frame = FALSE) +\n  tm_borders(alpha = 0.5)"
  },
  {
    "objectID": "Hands-on Ex/Hands-on Ex 1/Hands-on Exercise 1.html#map-style",
    "href": "Hands-on Ex/Hands-on Ex 1/Hands-on Exercise 1.html#map-style",
    "title": "Hands on Exercise 1: Data importing and wrangling",
    "section": "Map style",
    "text": "Map style\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\", \n          style = \"quantile\", \n          palette = \"-Greens\") +\n  tm_borders(alpha = 0.5) +\n  tmap_style(\"classic\")"
  },
  {
    "objectID": "Hands-on Ex/Hands-on Ex 1/Hands-on Exercise 1.html#cartographic-furniture",
    "href": "Hands-on Ex/Hands-on Ex 1/Hands-on Exercise 1.html#cartographic-furniture",
    "title": "Hands on Exercise 1: Data importing and wrangling",
    "section": "Cartographic Furniture",
    "text": "Cartographic Furniture\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\", \n          style = \"quantile\", \n          palette = \"Blues\",\n          title = \"No. of persons\") +\n  tm_layout(main.title = \"Distribution of Dependency Ratio \\nby planning subzone\",\n            main.title.position = \"center\",\n            main.title.size = 1.2,\n            legend.height = 0.45, \n            legend.width = 0.35,\n            frame = TRUE) +\n  tm_borders(alpha = 0.5) +\n  tm_compass(type=\"8star\", size = 2) +\n  tm_scale_bar(width = 0.15) +\n  tm_grid(lwd = 0.1, alpha = 0.2) +\n  tm_credits(\"Source: Planning Sub-zone boundary from Urban Redevelopment Authorithy (URA)\\n and Population data from Department of Statistics DOS\", \n             position = c(\"left\", \"bottom\"))"
  },
  {
    "objectID": "Hands-on Ex/Hands-on Ex 1/Hands-on Exercise 1.html#drawing-small-multiple-choropleth-maps",
    "href": "Hands-on Ex/Hands-on Ex 1/Hands-on Exercise 1.html#drawing-small-multiple-choropleth-maps",
    "title": "Hands on Exercise 1: Data importing and wrangling",
    "section": "Drawing Small Multiple Choropleth Maps",
    "text": "Drawing Small Multiple Choropleth Maps"
  },
  {
    "objectID": "Hands-on Ex/Hands-on Ex 1/Hands-on Exercise 1.html#by-assigning-multiple-values-to-at-least-one-of-the-aesthetic-arguments",
    "href": "Hands-on Ex/Hands-on Ex 1/Hands-on Exercise 1.html#by-assigning-multiple-values-to-at-least-one-of-the-aesthetic-arguments",
    "title": "Hands on Exercise 1: Data importing and wrangling",
    "section": "By assigning multiple values to at least one of the aesthetic arguments",
    "text": "By assigning multiple values to at least one of the aesthetic arguments\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(c(\"YOUNG\", \"AGED\"),\n          style = \"equal\", \n          palette = \"Blues\") +\n  tm_layout(legend.position = c(\"right\", \"bottom\")) +\n  tm_borders(alpha = 0.5) +\n  tmap_style(\"white\")\n\n\n\n\n\ntm_shape(mpsz_pop2020)+ \n  tm_polygons(c(\"DEPENDENCY\",\"AGED\"),\n          style = c(\"equal\", \"quantile\"), \n          palette = list(\"Blues\",\"Greens\")) +\n  tm_layout(legend.position = c(\"right\", \"bottom\"))"
  },
  {
    "objectID": "Hands-on Ex/Hands-on Ex 1/Hands-on Exercise 1.html#by-defining-a-group-by-variable-in-tm_facets",
    "href": "Hands-on Ex/Hands-on Ex 1/Hands-on Exercise 1.html#by-defining-a-group-by-variable-in-tm_facets",
    "title": "Hands on Exercise 1: Data importing and wrangling",
    "section": "By defining a group-by variable in tm_facets()",
    "text": "By defining a group-by variable in tm_facets()\n\ntm_shape(mpsz_pop2020) +\n  tm_fill(\"DEPENDENCY\",\n          style = \"quantile\",\n          palette = \"Blues\",\n          thres.poly = 0) + \n  tm_facets(by=\"REGION_N\", \n            free.coords=TRUE, \n            drop.shapes=TRUE) +\n  tm_layout(legend.show = FALSE,\n            title.position = c(\"center\", \"center\"), \n            title.size = 20) +\n  tm_borders(alpha = 0.5)"
  },
  {
    "objectID": "Hands-on Ex/Hands-on Ex 1/Hands-on Exercise 1.html#by-creating-multiple-stand-alone-maps-with-tmap_arrange",
    "href": "Hands-on Ex/Hands-on Ex 1/Hands-on Exercise 1.html#by-creating-multiple-stand-alone-maps-with-tmap_arrange",
    "title": "Hands on Exercise 1: Data importing and wrangling",
    "section": "By creating multiple stand-alone maps with tmap_arrange()",
    "text": "By creating multiple stand-alone maps with tmap_arrange()\n\nyoungmap &lt;- tm_shape(mpsz_pop2020)+ \n  tm_polygons(\"YOUNG\", \n              style = \"quantile\", \n              palette = \"Blues\")\n\nagedmap &lt;- tm_shape(mpsz_pop2020)+ \n  tm_polygons(\"AGED\", \n              style = \"quantile\", \n              palette = \"Blues\")\n\ntmap_arrange(youngmap, agedmap, asp=1, ncol=2)"
  },
  {
    "objectID": "Hands-on Ex/Hands-on Ex 1/Hands-on Exercise 1.html#mappping-spatial-object-meeting-a-selection-criterion",
    "href": "Hands-on Ex/Hands-on Ex 1/Hands-on Exercise 1.html#mappping-spatial-object-meeting-a-selection-criterion",
    "title": "Hands on Exercise 1: Data importing and wrangling",
    "section": "Mappping Spatial Object Meeting a Selection Criterion",
    "text": "Mappping Spatial Object Meeting a Selection Criterion\n\ntm_shape(mpsz_pop2020[mpsz_pop2020$REGION_N==\"CENTRAL REGION\", ])+\n  tm_fill(\"DEPENDENCY\", \n          style = \"quantile\", \n          palette = \"Blues\", \n          legend.hist = TRUE, \n          legend.is.portrait = TRUE,\n          legend.hist.z = 0.1) +\n  tm_layout(legend.outside = TRUE,\n            legend.height = 0.45, \n            legend.width = 5.0,\n            legend.position = c(\"right\", \"bottom\"),\n            frame = FALSE) +\n  tm_borders(alpha = 0.5)"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "This is the journey of geospatial analytics of QIU RUILIU!!!"
  },
  {
    "objectID": "Hands-on Ex/Hands-on Ex 2/Hands-on Exercise 2A.html",
    "href": "Hands-on Ex/Hands-on Ex 2/Hands-on Exercise 2A.html",
    "title": "Hands-on Exercise 2A: Spatial Weights and Applications",
    "section": "",
    "text": "The main task of hands-on exercise 2 is to learn how to compute spatial weights using R. We are mainly using:\n\nimport geospatial data using appropriate function(s) of sf package,\nimport csv file using appropriate function of readr package,\nperform relational join using appropriate join function of dplyr package,\ncompute spatial weights using appropriate functions of spdep package, and\ncalculate spatially lagged variables using appropriate functions of spdep package.\n\n\n\n\nTwo data sets will be used in this hands-on exercise, they are:\n\nHunan county boundary layer. This is a geospatial data set in ESRI shapefile format.\nHunan_2012.csv: This csv file contains selected Hunan’s local development indicators in 2012.\n\n\n\nBefore we get started, we need to ensure that spdep, sf, tmap and tidyverse packages of R are currently installed in your R.\n\npacman::p_load(sf, spdep, tmap, tidyverse, knitr)\n\n\n\n\n\nIn this section, we will bring a geospatial data and its associated attribute table into R environment. The geospatial data is in ESRI shapefile format and the attribute table is in csv fomat.\n\n\nThe code chunk below uses st_read() of sf package to import Hunan shapefile into R. The imported shapefile will be simple features Object of sf.\n\nhunan &lt;- st_read(dsn = \"data/geospatial\", \n                 layer = \"Hunan\")\n\nReading layer `Hunan' from data source \n  `D:\\KathyChiu77\\ISSS624\\Hands-on Ex\\Hands-on Ex 2\\data\\geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 88 features and 7 fields\nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: 108.7831 ymin: 24.6342 xmax: 114.2544 ymax: 30.12812\nGeodetic CRS:  WGS 84\n\n\n\n\n\nNext, we will import Hunan_2012.csv into R by using read_csv() of readr package. The output is R dataframe class.\n\nhunan2012 &lt;- read_csv(\"data/aspatial/Hunan_2012.csv\")\n\n\n\n\nThe code chunk below will be used to update the attribute table of hunan’s SpatialPolygonsDataFrame with the attribute fields of hunan2012 dataframe. This is performed by using left_join() of dplyr package.\n\nhunan &lt;- left_join(hunan,hunan2012)%&gt;%\n  select(1:4, 7, 15)\n\n select(1:4, 7, 15)  This function is used to select specific columns from a data frame.  1:4  means it selects the first, second, third, and fourth columns. The numbers  7  and  15  mean it also selects the seventh and fifteenth columns.\n\n\n\n\nNow, we are going to prepare a basemap and a choropleth map showing the distribution of GDPPC 2012 by using qtm() of tmap package.\n\nbasemap &lt;- tm_shape(hunan) +\n  tm_polygons() +\n  tm_text(\"NAME_3\", size=0.5)\n\ngdppc &lt;- qtm(hunan, \"GDPPC\")\ntmap_arrange(basemap, gdppc, asp=1, ncol=2)\n\n\n\n\n\n\n\nIn this section, we will use poly2nb() of spdep package to compute contiguity weight matrices for the study area. This function builds a neighbours list based on regions with contiguous boundaries. If you look at the documentation you will see that you can pass a “queen” argument that takes TRUE or FALSE as options. If you do not specify this argument the default is set to TRUE, that is, if you don’t specify queen = FALSE this function will return a list of first order neighbours using the Queen criteria.\n\n\nThe code chunk below is used to compute Queen contiguity weight matrix.\n\nwm_q &lt;- poly2nb(hunan, queen=TRUE)\nsummary(wm_q)\n\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 448 \nPercentage nonzero weights: 5.785124 \nAverage number of links: 5.090909 \nLink number distribution:\n\n 1  2  3  4  5  6  7  8  9 11 \n 2  2 12 16 24 14 11  4  2  1 \n2 least connected regions:\n30 65 with 1 link\n1 most connected region:\n85 with 11 links\n\n\nThe summary report above shows that there are 88 area units in Hunan. The most connected area unit has 11 neighbours. There are two area units with only one heighbours.\nFor each polygon in our polygon object, wm_q lists all neighboring polygons. For example, to see the neighbors for the first polygon in the object, type:\n\nwm_q[[1]]\n\n[1]  2  3  4 57 85\n\n\nPolygon 1 has 5 neighbors. The numbers represent the polygon IDs as stored in hunan SpatialPolygonsDataFrame class.\nWe can retrive the county name of Polygon ID=1 by using the code chunk below:\n\nhunan$County[1]\n\n[1] \"Anxiang\"\n\n\nThe output reveals that Polygon ID=1 is Anxiang county.\nTo reveal the county names of the five neighboring polygons, the code chunk will be used:\n\nhunan$NAME_3[c(2,3,4,57,85)]\n\n[1] \"Hanshou\" \"Jinshi\"  \"Li\"      \"Nan\"     \"Taoyuan\"\n\n\nWe can retrieve the GDPPC of these five countries by using the code chunk below.\n\nnb1 &lt;- wm_q[[1]]\nnb1 &lt;- hunan$GDPPC[nb1]\nnb1\n\n[1] 20981 34592 24473 21311 22879\n\n\nThe printed output above shows that the GDPPC of the five nearest neighbours based on Queen’s method are 20981, 34592, 24473, 21311 and 22879 respectively.\nYou can display the complete weight matrix by using str().\n\nstr(wm_q)\n\nList of 88\n $ : int [1:5] 2 3 4 57 85\n $ : int [1:5] 1 57 58 78 85\n $ : int [1:4] 1 4 5 85\n $ : int [1:4] 1 3 5 6\n $ : int [1:4] 3 4 6 85\n $ : int [1:5] 4 5 69 75 85\n $ : int [1:4] 67 71 74 84\n $ : int [1:7] 9 46 47 56 78 80 86\n $ : int [1:6] 8 66 68 78 84 86\n $ : int [1:8] 16 17 19 20 22 70 72 73\n $ : int [1:3] 14 17 72\n $ : int [1:5] 13 60 61 63 83\n $ : int [1:4] 12 15 60 83\n $ : int [1:3] 11 15 17\n $ : int [1:4] 13 14 17 83\n $ : int [1:5] 10 17 22 72 83\n $ : int [1:7] 10 11 14 15 16 72 83\n $ : int [1:5] 20 22 23 77 83\n $ : int [1:6] 10 20 21 73 74 86\n $ : int [1:7] 10 18 19 21 22 23 82\n $ : int [1:5] 19 20 35 82 86\n $ : int [1:5] 10 16 18 20 83\n $ : int [1:7] 18 20 38 41 77 79 82\n $ : int [1:5] 25 28 31 32 54\n $ : int [1:5] 24 28 31 33 81\n $ : int [1:4] 27 33 42 81\n $ : int [1:3] 26 29 42\n $ : int [1:5] 24 25 33 49 54\n $ : int [1:3] 27 37 42\n $ : int 33\n $ : int [1:8] 24 25 32 36 39 40 56 81\n $ : int [1:8] 24 31 50 54 55 56 75 85\n $ : int [1:5] 25 26 28 30 81\n $ : int [1:3] 36 45 80\n $ : int [1:6] 21 41 47 80 82 86\n $ : int [1:6] 31 34 40 45 56 80\n $ : int [1:4] 29 42 43 44\n $ : int [1:4] 23 44 77 79\n $ : int [1:5] 31 40 42 43 81\n $ : int [1:6] 31 36 39 43 45 79\n $ : int [1:6] 23 35 45 79 80 82\n $ : int [1:7] 26 27 29 37 39 43 81\n $ : int [1:6] 37 39 40 42 44 79\n $ : int [1:4] 37 38 43 79\n $ : int [1:6] 34 36 40 41 79 80\n $ : int [1:3] 8 47 86\n $ : int [1:5] 8 35 46 80 86\n $ : int [1:5] 50 51 52 53 55\n $ : int [1:4] 28 51 52 54\n $ : int [1:5] 32 48 52 54 55\n $ : int [1:3] 48 49 52\n $ : int [1:5] 48 49 50 51 54\n $ : int [1:3] 48 55 75\n $ : int [1:6] 24 28 32 49 50 52\n $ : int [1:5] 32 48 50 53 75\n $ : int [1:7] 8 31 32 36 78 80 85\n $ : int [1:6] 1 2 58 64 76 85\n $ : int [1:5] 2 57 68 76 78\n $ : int [1:4] 60 61 87 88\n $ : int [1:4] 12 13 59 61\n $ : int [1:7] 12 59 60 62 63 77 87\n $ : int [1:3] 61 77 87\n $ : int [1:4] 12 61 77 83\n $ : int [1:2] 57 76\n $ : int 76\n $ : int [1:5] 9 67 68 76 84\n $ : int [1:4] 7 66 76 84\n $ : int [1:5] 9 58 66 76 78\n $ : int [1:3] 6 75 85\n $ : int [1:3] 10 72 73\n $ : int [1:3] 7 73 74\n $ : int [1:5] 10 11 16 17 70\n $ : int [1:5] 10 19 70 71 74\n $ : int [1:6] 7 19 71 73 84 86\n $ : int [1:6] 6 32 53 55 69 85\n $ : int [1:7] 57 58 64 65 66 67 68\n $ : int [1:7] 18 23 38 61 62 63 83\n $ : int [1:7] 2 8 9 56 58 68 85\n $ : int [1:7] 23 38 40 41 43 44 45\n $ : int [1:8] 8 34 35 36 41 45 47 56\n $ : int [1:6] 25 26 31 33 39 42\n $ : int [1:5] 20 21 23 35 41\n $ : int [1:9] 12 13 15 16 17 18 22 63 77\n $ : int [1:6] 7 9 66 67 74 86\n $ : int [1:11] 1 2 3 5 6 32 56 57 69 75 ...\n $ : int [1:9] 8 9 19 21 35 46 47 74 84\n $ : int [1:4] 59 61 62 88\n $ : int [1:2] 59 87\n - attr(*, \"class\")= chr \"nb\"\n - attr(*, \"region.id\")= chr [1:88] \"1\" \"2\" \"3\" \"4\" ...\n - attr(*, \"call\")= language poly2nb(pl = hunan, queen = TRUE)\n - attr(*, \"type\")= chr \"queen\"\n - attr(*, \"sym\")= logi TRUE\n\n\n\n\n\nThe code chunk below is used to compute Rook contiguity weight matrix.\n\nwm_r &lt;- poly2nb(hunan, queen=FALSE)\nsummary(wm_r)\n\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 440 \nPercentage nonzero weights: 5.681818 \nAverage number of links: 5 \nLink number distribution:\n\n 1  2  3  4  5  6  7  8  9 10 \n 2  2 12 20 21 14 11  3  2  1 \n2 least connected regions:\n30 65 with 1 link\n1 most connected region:\n85 with 10 links\n\n\nThe summary report above shows that there are 88 area units in Hunan. The most connect area unit has 10 neighbours. There are two area units with only one heighbours.\n\n\n\nA connectivity graph takes a point and displays a line to each neighboring point. We are working with polygons at the moment, so we will need to get points in order to make our connectivity graphs. The most typically method for this will be polygon centroids. We will calculate these in the sf package before moving onto the graphs. Getting Latitude and Longitude of Polygon Centroids\nWe will need points to associate with each polygon before we can make our connectivity graph. It will be a little more complicated than just running st_centroid on the sf object: us.bound. We need the coordinates in a separate data frame for this to work. To do this we will use a mapping function. The mapping function applies a given function to each element of a vector and returns a vector of the same length. Our input vector will be the geometry column of us.bound. Our function will be st_centroid. We will be using map_dbl variation of map from the purrr package. For more documentation, check out map documentation\nTo get our longitude values we map the st_centroid function over the geometry column of us.bound and access the longitude value through double bracket notation [[]] and 1. This allows us to get only the longitude, which is the first value in each centroid.\n\nlongitude &lt;- map_dbl(hunan$geometry, ~st_centroid(.x)[[1]])\n\nWe do the same for latitude with one key difference. We access the second value per each centroid with [[2]].\n\nlatitude &lt;- map_dbl(hunan$geometry, ~st_centroid(.x)[[2]])\n\nNow that we have latitude and longitude, we use cbind to put longitude and latitude into the same object.\n\ncoords &lt;- cbind(longitude, latitude)\n\nWe check the first few observations to see if things are formatted correctly.\n\nhead(coords)\n\n     longitude latitude\n[1,]  112.1531 29.44362\n[2,]  112.0372 28.86489\n[3,]  111.8917 29.47107\n[4,]  111.7031 29.74499\n[5,]  111.6138 29.49258\n[6,]  111.0341 29.79863\n\n\n\n\n\nplot(hunan$geometry, border=\"lightgrey\")\nplot(wm_q, coords, pch = 19, cex = 0.6, add = TRUE, col= \"lightgreen\")\n\n\n\n\n\n\n\n\nplot(hunan$geometry, border=\"lightgrey\")\nplot(wm_r, coords, pch = 19, cex = 0.6, add = TRUE, col = \"lightgreen\")\n\n\n\n\n\n\n\n\npar(mfrow=c(1,2))\nplot(hunan$geometry, border=\"lightgrey\", main=\"Queen Contiguity\")\nplot(wm_q, coords, pch = 19, cex = 0.6, add = TRUE, col= \"red\")\nplot(hunan$geometry, border=\"lightgrey\", main=\"Rook Contiguity\")\nplot(wm_r, coords, pch = 19, cex = 0.6, add = TRUE, col = \"red\")\n\n\n\n\n\n\n\n\n\nIn this section, you will learn how to derive distance-based weight matrices by using dnearneigh() of spdep package.\nThe function identifies neighbours of region points by Euclidean distance with a distance band with lower d1= and upper d2= bounds controlled by the bounds= argument. If unprojected coordinates are used and either specified in the coordinates object x or with x as a two column matrix and longlat=TRUE, great circle distances in km will be calculated assuming the WGS84 reference ellipsoid.\n\n\nFirstly, we need to determine the upper limit for distance band by using the steps below:\n\nReturn a matrix with the indices of points belonging to the set of the k nearest neighbours of each other by using knearneigh() of spdep.\nConvert the knn object returned by knearneigh() into a neighbours list of class nb with a list of integer vectors containing neighbour region number ids by using knn2nb().\nReturn the length of neighbour relationship edges by using nbdists() of spdep. The function returns in the units of the coordinates if the coordinates are projected, in km otherwise.\nRemove the list structure of the returned object by using unlist().\n\n\n#coords &lt;- coordinates(hunan)\nk1 &lt;- knn2nb(knearneigh(coords))\nk1dists &lt;- unlist(nbdists(k1, coords, longlat = TRUE))\nsummary(k1dists)\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n  24.79   32.57   38.01   39.07   44.52   61.79 \n\n\nThe summary report shows that the largest first nearest neighbour distance is 61.79 km, so using this as the upper threshold gives certainty that all units will have at least one neighbour.\n\n\n\nNow, we will compute the distance weight matrix by using dnearneigh() as shown in the code chunk below.\n\nwm_d62 &lt;- dnearneigh(coords, 0, 62, longlat = TRUE)\nwm_d62\n\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 324 \nPercentage nonzero weights: 4.183884 \nAverage number of links: 3.681818 \n\n\nAverage number of links: 3.681818 here means that on average, each region has about 3.68 neighboring regions that are within the distance threshold which is specified as 62 units.\nNext, we will use str() to display the content of wm_d62 weight matrix.\n\nstr(wm_d62)\n\nList of 88\n $ : int [1:5] 3 4 5 57 64\n $ : int [1:4] 57 58 78 85\n $ : int [1:4] 1 4 5 57\n $ : int [1:3] 1 3 5\n $ : int [1:4] 1 3 4 85\n $ : int 69\n $ : int [1:2] 67 84\n $ : int [1:4] 9 46 47 78\n $ : int [1:4] 8 46 68 84\n $ : int [1:4] 16 22 70 72\n $ : int [1:3] 14 17 72\n $ : int [1:5] 13 60 61 63 83\n $ : int [1:4] 12 15 60 83\n $ : int [1:2] 11 17\n $ : int 13\n $ : int [1:4] 10 17 22 83\n $ : int [1:3] 11 14 16\n $ : int [1:3] 20 22 63\n $ : int [1:5] 20 21 73 74 82\n $ : int [1:5] 18 19 21 22 82\n $ : int [1:6] 19 20 35 74 82 86\n $ : int [1:4] 10 16 18 20\n $ : int [1:3] 41 77 82\n $ : int [1:4] 25 28 31 54\n $ : int [1:4] 24 28 33 81\n $ : int [1:4] 27 33 42 81\n $ : int [1:2] 26 29\n $ : int [1:6] 24 25 33 49 52 54\n $ : int [1:2] 27 37\n $ : int 33\n $ : int [1:2] 24 36\n $ : int 50\n $ : int [1:5] 25 26 28 30 81\n $ : int [1:3] 36 45 80\n $ : int [1:6] 21 41 46 47 80 82\n $ : int [1:5] 31 34 45 56 80\n $ : int [1:2] 29 42\n $ : int [1:3] 44 77 79\n $ : int [1:4] 40 42 43 81\n $ : int [1:3] 39 45 79\n $ : int [1:5] 23 35 45 79 82\n $ : int [1:5] 26 37 39 43 81\n $ : int [1:3] 39 42 44\n $ : int [1:2] 38 43\n $ : int [1:6] 34 36 40 41 79 80\n $ : int [1:5] 8 9 35 47 86\n $ : int [1:5] 8 35 46 80 86\n $ : int [1:5] 50 51 52 53 55\n $ : int [1:4] 28 51 52 54\n $ : int [1:6] 32 48 51 52 54 55\n $ : int [1:4] 48 49 50 52\n $ : int [1:6] 28 48 49 50 51 54\n $ : int [1:2] 48 55\n $ : int [1:5] 24 28 49 50 52\n $ : int [1:4] 48 50 53 75\n $ : int 36\n $ : int [1:5] 1 2 3 58 64\n $ : int [1:5] 2 57 64 66 68\n $ : int [1:3] 60 87 88\n $ : int [1:4] 12 13 59 61\n $ : int [1:5] 12 60 62 63 87\n $ : int [1:4] 61 63 77 87\n $ : int [1:5] 12 18 61 62 83\n $ : int [1:4] 1 57 58 76\n $ : int 76\n $ : int [1:5] 58 67 68 76 84\n $ : int [1:2] 7 66\n $ : int [1:4] 9 58 66 84\n $ : int [1:2] 6 75\n $ : int [1:3] 10 72 73\n $ : int [1:2] 73 74\n $ : int [1:3] 10 11 70\n $ : int [1:4] 19 70 71 74\n $ : int [1:5] 19 21 71 73 86\n $ : int [1:2] 55 69\n $ : int [1:3] 64 65 66\n $ : int [1:3] 23 38 62\n $ : int [1:2] 2 8\n $ : int [1:4] 38 40 41 45\n $ : int [1:5] 34 35 36 45 47\n $ : int [1:5] 25 26 33 39 42\n $ : int [1:6] 19 20 21 23 35 41\n $ : int [1:4] 12 13 16 63\n $ : int [1:4] 7 9 66 68\n $ : int [1:2] 2 5\n $ : int [1:4] 21 46 47 74\n $ : int [1:4] 59 61 62 88\n $ : int [1:2] 59 87\n - attr(*, \"class\")= chr \"nb\"\n - attr(*, \"region.id\")= chr [1:88] \"1\" \"2\" \"3\" \"4\" ...\n - attr(*, \"call\")= language dnearneigh(x = coords, d1 = 0, d2 = 62, longlat = TRUE)\n - attr(*, \"dnn\")= num [1:2] 0 62\n - attr(*, \"bounds\")= chr [1:2] \"GE\" \"LE\"\n - attr(*, \"nbtype\")= chr \"distance\"\n - attr(*, \"sym\")= logi TRUE\n\n\nAnother way to display the structure of the weight matrix is to combine table() and card() of spdep.\n\ntable(hunan$County, card(wm_d62))\n\n               \n                1 2 3 4 5 6\n  Anhua         1 0 0 0 0 0\n  Anren         0 0 0 1 0 0\n  Anxiang       0 0 0 0 1 0\n  Baojing       0 0 0 0 1 0\n  Chaling       0 0 1 0 0 0\n  Changning     0 0 1 0 0 0\n  Changsha      0 0 0 1 0 0\n  Chengbu       0 1 0 0 0 0\n  Chenxi        0 0 0 1 0 0\n  Cili          0 1 0 0 0 0\n  Dao           0 0 0 1 0 0\n  Dongan        0 0 1 0 0 0\n  Dongkou       0 0 0 1 0 0\n  Fenghuang     0 0 0 1 0 0\n  Guidong       0 0 1 0 0 0\n  Guiyang       0 0 0 1 0 0\n  Guzhang       0 0 0 0 0 1\n  Hanshou       0 0 0 1 0 0\n  Hengdong      0 0 0 0 1 0\n  Hengnan       0 0 0 0 1 0\n  Hengshan      0 0 0 0 0 1\n  Hengyang      0 0 0 0 0 1\n  Hongjiang     0 0 0 0 1 0\n  Huarong       0 0 0 1 0 0\n  Huayuan       0 0 0 1 0 0\n  Huitong       0 0 0 1 0 0\n  Jiahe         0 0 0 0 1 0\n  Jianghua      0 0 1 0 0 0\n  Jiangyong     0 1 0 0 0 0\n  Jingzhou      0 1 0 0 0 0\n  Jinshi        0 0 0 1 0 0\n  Jishou        0 0 0 0 0 1\n  Lanshan       0 0 0 1 0 0\n  Leiyang       0 0 0 1 0 0\n  Lengshuijiang 0 0 1 0 0 0\n  Li            0 0 1 0 0 0\n  Lianyuan      0 0 0 0 1 0\n  Liling        0 1 0 0 0 0\n  Linli         0 0 0 1 0 0\n  Linwu         0 0 0 1 0 0\n  Linxiang      1 0 0 0 0 0\n  Liuyang       0 1 0 0 0 0\n  Longhui       0 0 1 0 0 0\n  Longshan      0 1 0 0 0 0\n  Luxi          0 0 0 0 1 0\n  Mayang        0 0 0 0 0 1\n  Miluo         0 0 0 0 1 0\n  Nan           0 0 0 0 1 0\n  Ningxiang     0 0 0 1 0 0\n  Ningyuan      0 0 0 0 1 0\n  Pingjiang     0 1 0 0 0 0\n  Qidong        0 0 1 0 0 0\n  Qiyang        0 0 1 0 0 0\n  Rucheng       0 1 0 0 0 0\n  Sangzhi       0 1 0 0 0 0\n  Shaodong      0 0 0 0 1 0\n  Shaoshan      0 0 0 0 1 0\n  Shaoyang      0 0 0 1 0 0\n  Shimen        1 0 0 0 0 0\n  Shuangfeng    0 0 0 0 0 1\n  Shuangpai     0 0 0 1 0 0\n  Suining       0 0 0 0 1 0\n  Taojiang      0 1 0 0 0 0\n  Taoyuan       0 1 0 0 0 0\n  Tongdao       0 1 0 0 0 0\n  Wangcheng     0 0 0 1 0 0\n  Wugang        0 0 1 0 0 0\n  Xiangtan      0 0 0 1 0 0\n  Xiangxiang    0 0 0 0 1 0\n  Xiangyin      0 0 0 1 0 0\n  Xinhua        0 0 0 0 1 0\n  Xinhuang      1 0 0 0 0 0\n  Xinning       0 1 0 0 0 0\n  Xinshao       0 0 0 0 0 1\n  Xintian       0 0 0 0 1 0\n  Xupu          0 1 0 0 0 0\n  Yanling       0 0 1 0 0 0\n  Yizhang       1 0 0 0 0 0\n  Yongshun      0 0 0 1 0 0\n  Yongxing      0 0 0 1 0 0\n  You           0 0 0 1 0 0\n  Yuanjiang     0 0 0 0 1 0\n  Yuanling      1 0 0 0 0 0\n  Yueyang       0 0 1 0 0 0\n  Zhijiang      0 0 0 0 1 0\n  Zhongfang     0 0 0 1 0 0\n  Zhuzhou       0 0 0 0 1 0\n  Zixing        0 0 1 0 0 0\n\n\n\nn_comp &lt;- n.comp.nb(wm_d62)\nn_comp$nc\n\n[1] 1\n\n\n\ntable(n_comp$comp.id)\n\n\n 1 \n88 \n\n\n\n\nNext, we will plot the distance weight matrix by using the code chunk below.\n\nplot(hunan$geometry, border=\"lightgrey\")\nplot(wm_d62, coords, add=TRUE)\nplot(k1, coords, add=TRUE, col=\"red\", length=0.08)\n\n\n\n\nThe red lines show the links of 1st nearest neighbours and the black lines show the links of neighbours within the cut-off distance of 62km.\nAlternatively, we can plot both of them next to each other by using the code chunk below.\n\npar(mfrow=c(1,2))\nplot(hunan$geometry, border=\"lightgrey\", main=\"1st nearest neighbours\")\nplot(k1, coords, add=TRUE, col=\"red\", length=0.08)\nplot(hunan$geometry, border=\"lightgrey\", main=\"Distance link\")\nplot(wm_d62, coords, add=TRUE, pch = 19, cex = 0.6)\n\n\n\n\n\n\n\n\nOne of the characteristics of fixed distance weight matrix is that more densely settled areas (usually the urban areas) tend to have more neighbours and the less densely settled areas (usually the rural counties) tend to have lesser neighbours. Having many neighbours smoothes the neighbour relationship across more neighbours.\nIt is possible to control the numbers of neighbours directly using k-nearest neighbours, either accepting asymmetric neighbours or imposing symmetry as shown in the code chunk below.\n\nknn6 &lt;- knn2nb(knearneigh(coords, k=6))\nknn6\n\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 528 \nPercentage nonzero weights: 6.818182 \nAverage number of links: 6 \nNon-symmetric neighbours list\n\n\nSimilarly, we can display the content of the matrix by using str().\n\nstr(knn6)\n\nList of 88\n $ : int [1:6] 2 3 4 5 57 64\n $ : int [1:6] 1 3 57 58 78 85\n $ : int [1:6] 1 2 4 5 57 85\n $ : int [1:6] 1 3 5 6 69 85\n $ : int [1:6] 1 3 4 6 69 85\n $ : int [1:6] 3 4 5 69 75 85\n $ : int [1:6] 9 66 67 71 74 84\n $ : int [1:6] 9 46 47 78 80 86\n $ : int [1:6] 8 46 66 68 84 86\n $ : int [1:6] 16 19 22 70 72 73\n $ : int [1:6] 10 14 16 17 70 72\n $ : int [1:6] 13 15 60 61 63 83\n $ : int [1:6] 12 15 60 61 63 83\n $ : int [1:6] 11 15 16 17 72 83\n $ : int [1:6] 12 13 14 17 60 83\n $ : int [1:6] 10 11 17 22 72 83\n $ : int [1:6] 10 11 14 16 72 83\n $ : int [1:6] 20 22 23 63 77 83\n $ : int [1:6] 10 20 21 73 74 82\n $ : int [1:6] 18 19 21 22 23 82\n $ : int [1:6] 19 20 35 74 82 86\n $ : int [1:6] 10 16 18 19 20 83\n $ : int [1:6] 18 20 41 77 79 82\n $ : int [1:6] 25 28 31 52 54 81\n $ : int [1:6] 24 28 31 33 54 81\n $ : int [1:6] 25 27 29 33 42 81\n $ : int [1:6] 26 29 30 37 42 81\n $ : int [1:6] 24 25 33 49 52 54\n $ : int [1:6] 26 27 37 42 43 81\n $ : int [1:6] 26 27 28 33 49 81\n $ : int [1:6] 24 25 36 39 40 54\n $ : int [1:6] 24 31 50 54 55 56\n $ : int [1:6] 25 26 28 30 49 81\n $ : int [1:6] 36 40 41 45 56 80\n $ : int [1:6] 21 41 46 47 80 82\n $ : int [1:6] 31 34 40 45 56 80\n $ : int [1:6] 26 27 29 42 43 44\n $ : int [1:6] 23 43 44 62 77 79\n $ : int [1:6] 25 40 42 43 44 81\n $ : int [1:6] 31 36 39 43 45 79\n $ : int [1:6] 23 35 45 79 80 82\n $ : int [1:6] 26 27 37 39 43 81\n $ : int [1:6] 37 39 40 42 44 79\n $ : int [1:6] 37 38 39 42 43 79\n $ : int [1:6] 34 36 40 41 79 80\n $ : int [1:6] 8 9 35 47 78 86\n $ : int [1:6] 8 21 35 46 80 86\n $ : int [1:6] 49 50 51 52 53 55\n $ : int [1:6] 28 33 48 51 52 54\n $ : int [1:6] 32 48 51 52 54 55\n $ : int [1:6] 28 48 49 50 52 54\n $ : int [1:6] 28 48 49 50 51 54\n $ : int [1:6] 48 50 51 52 55 75\n $ : int [1:6] 24 28 49 50 51 52\n $ : int [1:6] 32 48 50 52 53 75\n $ : int [1:6] 32 34 36 78 80 85\n $ : int [1:6] 1 2 3 58 64 68\n $ : int [1:6] 2 57 64 66 68 78\n $ : int [1:6] 12 13 60 61 87 88\n $ : int [1:6] 12 13 59 61 63 87\n $ : int [1:6] 12 13 60 62 63 87\n $ : int [1:6] 12 38 61 63 77 87\n $ : int [1:6] 12 18 60 61 62 83\n $ : int [1:6] 1 3 57 58 68 76\n $ : int [1:6] 58 64 66 67 68 76\n $ : int [1:6] 9 58 67 68 76 84\n $ : int [1:6] 7 65 66 68 76 84\n $ : int [1:6] 9 57 58 66 78 84\n $ : int [1:6] 4 5 6 32 75 85\n $ : int [1:6] 10 16 19 22 72 73\n $ : int [1:6] 7 19 73 74 84 86\n $ : int [1:6] 10 11 14 16 17 70\n $ : int [1:6] 10 19 21 70 71 74\n $ : int [1:6] 19 21 71 73 84 86\n $ : int [1:6] 6 32 50 53 55 69\n $ : int [1:6] 58 64 65 66 67 68\n $ : int [1:6] 18 23 38 61 62 63\n $ : int [1:6] 2 8 9 46 58 68\n $ : int [1:6] 38 40 41 43 44 45\n $ : int [1:6] 34 35 36 41 45 47\n $ : int [1:6] 25 26 28 33 39 42\n $ : int [1:6] 19 20 21 23 35 41\n $ : int [1:6] 12 13 15 16 22 63\n $ : int [1:6] 7 9 66 68 71 74\n $ : int [1:6] 2 3 4 5 56 69\n $ : int [1:6] 8 9 21 46 47 74\n $ : int [1:6] 59 60 61 62 63 88\n $ : int [1:6] 59 60 61 62 63 87\n - attr(*, \"region.id\")= chr [1:88] \"1\" \"2\" \"3\" \"4\" ...\n - attr(*, \"call\")= language knearneigh(x = coords, k = 6)\n - attr(*, \"sym\")= logi FALSE\n - attr(*, \"type\")= chr \"knn\"\n - attr(*, \"knn-k\")= num 6\n - attr(*, \"class\")= chr \"nb\"\n\n\nNotice that each county has six neighbours, no less no more!\n\n\nWe can plot the weight matrix using the code chunk below.\n\nplot(hunan$geometry, border=\"lightgrey\")\nplot(knn6, coords, pch = 19, cex = 0.6, add = TRUE, col = \"red\")\n\n\n\n\n\n\n\n\n\nIn this section, you will learn how to derive a spatial weight matrix based on Inversed Distance method.\nFirst, we will compute the distances between areas by using nbdists() of spdep.\n\ndist &lt;- nbdists(wm_q, coords, longlat = TRUE)\nids &lt;- lapply(dist, function(x) 1/(x))\nids\n\n[[1]]\n[1] 0.01535405 0.03916350 0.01820896 0.02807922 0.01145113\n\n[[2]]\n[1] 0.01535405 0.01764308 0.01925924 0.02323898 0.01719350\n\n[[3]]\n[1] 0.03916350 0.02822040 0.03695795 0.01395765\n\n[[4]]\n[1] 0.01820896 0.02822040 0.03414741 0.01539065\n\n[[5]]\n[1] 0.03695795 0.03414741 0.01524598 0.01618354\n\n[[6]]\n[1] 0.015390649 0.015245977 0.021748129 0.011883901 0.009810297\n\n[[7]]\n[1] 0.01708612 0.01473997 0.01150924 0.01872915\n\n[[8]]\n[1] 0.02022144 0.03453056 0.02529256 0.01036340 0.02284457 0.01500600 0.01515314\n\n[[9]]\n[1] 0.02022144 0.01574888 0.02109502 0.01508028 0.02902705 0.01502980\n\n[[10]]\n[1] 0.02281552 0.01387777 0.01538326 0.01346650 0.02100510 0.02631658 0.01874863\n[8] 0.01500046\n\n[[11]]\n[1] 0.01882869 0.02243492 0.02247473\n\n[[12]]\n[1] 0.02779227 0.02419652 0.02333385 0.02986130 0.02335429\n\n[[13]]\n[1] 0.02779227 0.02650020 0.02670323 0.01714243\n\n[[14]]\n[1] 0.01882869 0.01233868 0.02098555\n\n[[15]]\n[1] 0.02650020 0.01233868 0.01096284 0.01562226\n\n[[16]]\n[1] 0.02281552 0.02466962 0.02765018 0.01476814 0.01671430\n\n[[17]]\n[1] 0.01387777 0.02243492 0.02098555 0.01096284 0.02466962 0.01593341 0.01437996\n\n[[18]]\n[1] 0.02039779 0.02032767 0.01481665 0.01473691 0.01459380\n\n[[19]]\n[1] 0.01538326 0.01926323 0.02668415 0.02140253 0.01613589 0.01412874\n\n[[20]]\n[1] 0.01346650 0.02039779 0.01926323 0.01723025 0.02153130 0.01469240 0.02327034\n\n[[21]]\n[1] 0.02668415 0.01723025 0.01766299 0.02644986 0.02163800\n\n[[22]]\n[1] 0.02100510 0.02765018 0.02032767 0.02153130 0.01489296\n\n[[23]]\n[1] 0.01481665 0.01469240 0.01401432 0.02246233 0.01880425 0.01530458 0.01849605\n\n[[24]]\n[1] 0.02354598 0.01837201 0.02607264 0.01220154 0.02514180\n\n[[25]]\n[1] 0.02354598 0.02188032 0.01577283 0.01949232 0.02947957\n\n[[26]]\n[1] 0.02155798 0.01745522 0.02212108 0.02220532\n\n[[27]]\n[1] 0.02155798 0.02490625 0.01562326\n\n[[28]]\n[1] 0.01837201 0.02188032 0.02229549 0.03076171 0.02039506\n\n[[29]]\n[1] 0.02490625 0.01686587 0.01395022\n\n[[30]]\n[1] 0.02090587\n\n[[31]]\n[1] 0.02607264 0.01577283 0.01219005 0.01724850 0.01229012 0.01609781 0.01139438\n[8] 0.01150130\n\n[[32]]\n[1] 0.01220154 0.01219005 0.01712515 0.01340413 0.01280928 0.01198216 0.01053374\n[8] 0.01065655\n\n[[33]]\n[1] 0.01949232 0.01745522 0.02229549 0.02090587 0.01979045\n\n[[34]]\n[1] 0.03113041 0.03589551 0.02882915\n\n[[35]]\n[1] 0.01766299 0.02185795 0.02616766 0.02111721 0.02108253 0.01509020\n\n[[36]]\n[1] 0.01724850 0.03113041 0.01571707 0.01860991 0.02073549 0.01680129\n\n[[37]]\n[1] 0.01686587 0.02234793 0.01510990 0.01550676\n\n[[38]]\n[1] 0.01401432 0.02407426 0.02276151 0.01719415\n\n[[39]]\n[1] 0.01229012 0.02172543 0.01711924 0.02629732 0.01896385\n\n[[40]]\n[1] 0.01609781 0.01571707 0.02172543 0.01506473 0.01987922 0.01894207\n\n[[41]]\n[1] 0.02246233 0.02185795 0.02205991 0.01912542 0.01601083 0.01742892\n\n[[42]]\n[1] 0.02212108 0.01562326 0.01395022 0.02234793 0.01711924 0.01836831 0.01683518\n\n[[43]]\n[1] 0.01510990 0.02629732 0.01506473 0.01836831 0.03112027 0.01530782\n\n[[44]]\n[1] 0.01550676 0.02407426 0.03112027 0.01486508\n\n[[45]]\n[1] 0.03589551 0.01860991 0.01987922 0.02205991 0.02107101 0.01982700\n\n[[46]]\n[1] 0.03453056 0.04033752 0.02689769\n\n[[47]]\n[1] 0.02529256 0.02616766 0.04033752 0.01949145 0.02181458\n\n[[48]]\n[1] 0.02313819 0.03370576 0.02289485 0.01630057 0.01818085\n\n[[49]]\n[1] 0.03076171 0.02138091 0.02394529 0.01990000\n\n[[50]]\n[1] 0.01712515 0.02313819 0.02551427 0.02051530 0.02187179\n\n[[51]]\n[1] 0.03370576 0.02138091 0.02873854\n\n[[52]]\n[1] 0.02289485 0.02394529 0.02551427 0.02873854 0.03516672\n\n[[53]]\n[1] 0.01630057 0.01979945 0.01253977\n\n[[54]]\n[1] 0.02514180 0.02039506 0.01340413 0.01990000 0.02051530 0.03516672\n\n[[55]]\n[1] 0.01280928 0.01818085 0.02187179 0.01979945 0.01882298\n\n[[56]]\n[1] 0.01036340 0.01139438 0.01198216 0.02073549 0.01214479 0.01362855 0.01341697\n\n[[57]]\n[1] 0.028079221 0.017643082 0.031423501 0.029114131 0.013520292 0.009903702\n\n[[58]]\n[1] 0.01925924 0.03142350 0.02722997 0.01434859 0.01567192\n\n[[59]]\n[1] 0.01696711 0.01265572 0.01667105 0.01785036\n\n[[60]]\n[1] 0.02419652 0.02670323 0.01696711 0.02343040\n\n[[61]]\n[1] 0.02333385 0.01265572 0.02343040 0.02514093 0.02790764 0.01219751 0.02362452\n\n[[62]]\n[1] 0.02514093 0.02002219 0.02110260\n\n[[63]]\n[1] 0.02986130 0.02790764 0.01407043 0.01805987\n\n[[64]]\n[1] 0.02911413 0.01689892\n\n[[65]]\n[1] 0.02471705\n\n[[66]]\n[1] 0.01574888 0.01726461 0.03068853 0.01954805 0.01810569\n\n[[67]]\n[1] 0.01708612 0.01726461 0.01349843 0.01361172\n\n[[68]]\n[1] 0.02109502 0.02722997 0.03068853 0.01406357 0.01546511\n\n[[69]]\n[1] 0.02174813 0.01645838 0.01419926\n\n[[70]]\n[1] 0.02631658 0.01963168 0.02278487\n\n[[71]]\n[1] 0.01473997 0.01838483 0.03197403\n\n[[72]]\n[1] 0.01874863 0.02247473 0.01476814 0.01593341 0.01963168\n\n[[73]]\n[1] 0.01500046 0.02140253 0.02278487 0.01838483 0.01652709\n\n[[74]]\n[1] 0.01150924 0.01613589 0.03197403 0.01652709 0.01342099 0.02864567\n\n[[75]]\n[1] 0.011883901 0.010533736 0.012539774 0.018822977 0.016458383 0.008217581\n\n[[76]]\n[1] 0.01352029 0.01434859 0.01689892 0.02471705 0.01954805 0.01349843 0.01406357\n\n[[77]]\n[1] 0.014736909 0.018804247 0.022761507 0.012197506 0.020022195 0.014070428\n[7] 0.008440896\n\n[[78]]\n[1] 0.02323898 0.02284457 0.01508028 0.01214479 0.01567192 0.01546511 0.01140779\n\n[[79]]\n[1] 0.01530458 0.01719415 0.01894207 0.01912542 0.01530782 0.01486508 0.02107101\n\n[[80]]\n[1] 0.01500600 0.02882915 0.02111721 0.01680129 0.01601083 0.01982700 0.01949145\n[8] 0.01362855\n\n[[81]]\n[1] 0.02947957 0.02220532 0.01150130 0.01979045 0.01896385 0.01683518\n\n[[82]]\n[1] 0.02327034 0.02644986 0.01849605 0.02108253 0.01742892\n\n[[83]]\n[1] 0.023354289 0.017142433 0.015622258 0.016714303 0.014379961 0.014593799\n[7] 0.014892965 0.018059871 0.008440896\n\n[[84]]\n[1] 0.01872915 0.02902705 0.01810569 0.01361172 0.01342099 0.01297994\n\n[[85]]\n [1] 0.011451133 0.017193502 0.013957649 0.016183544 0.009810297 0.010656545\n [7] 0.013416965 0.009903702 0.014199260 0.008217581 0.011407794\n\n[[86]]\n[1] 0.01515314 0.01502980 0.01412874 0.02163800 0.01509020 0.02689769 0.02181458\n[8] 0.02864567 0.01297994\n\n[[87]]\n[1] 0.01667105 0.02362452 0.02110260 0.02058034\n\n[[88]]\n[1] 0.01785036 0.02058034\n\n\n\n\nNext, we need to assign weights to each neighboring polygon. In our case, each neighboring polygon will be assigned equal weight (style=“W”). This is accomplished by assigning the fraction 1/(#ofneighbors) to each neighboring county then summing the weighted income values. While this is the most intuitive way to summaries the neighbors’ values it has one drawback in that polygons along the edges of the study area will base their lagged values on fewer polygons thus potentially over- or under-estimating the true nature of the spatial autocorrelation in the data. For this example, we’ll stick with the style=“W” option for simplicity’s sake but note that other more robust options are available, notably style=“B”.\n\nrswm_q &lt;- nb2listw(wm_q, style=\"W\", zero.policy = TRUE)\nrswm_q\n\nCharacteristics of weights list object:\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 448 \nPercentage nonzero weights: 5.785124 \nAverage number of links: 5.090909 \n\nWeights style: W \nWeights constants summary:\n   n   nn S0       S1       S2\nW 88 7744 88 37.86334 365.9147\n\n\nThe zero.policy=TRUE option allows for lists of non-neighbors. This should be used with caution since the user may not be aware of missing neighbors in their dataset however, a zero.policy of FALSE would return an error.\nTo see the weight of the first polygon’s eight neighbors type:\n\nrswm_q$weights[10]\n\n[[1]]\n[1] 0.125 0.125 0.125 0.125 0.125 0.125 0.125 0.125\n\n\nEach neighbor is assigned a 0.125 of the total weight. This means that when R computes the average neighboring income values, each neighbor’s income will be multiplied by 0.2 before being tallied.\nUsing the same method, we can also derive a row standardised distance weight matrix by using the code chunk below.\n\nrswm_ids &lt;- nb2listw(wm_q, glist=ids, style=\"B\", zero.policy=TRUE)\nrswm_ids\n\nCharacteristics of weights list object:\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 448 \nPercentage nonzero weights: 5.785124 \nAverage number of links: 5.090909 \n\nWeights style: B \nWeights constants summary:\n   n   nn       S0        S1     S2\nB 88 7744 8.786867 0.3776535 3.8137\n\n\n\nrswm_ids$weights[1]\n\n[[1]]\n[1] 0.01535405 0.03916350 0.01820896 0.02807922 0.01145113\n\n\n\nsummary(unlist(rswm_ids$weights))\n\n    Min.  1st Qu.   Median     Mean  3rd Qu.     Max. \n0.008218 0.015088 0.018739 0.019614 0.022823 0.040338 \n\n\n\n\n\n\nIn this section, we will show how to create four different spatial lagged variables, they are:\n\nspatial lag with row-standardized weights,\nspatial lag as a sum of neighbouring values,\nspatial window average, and\nspatial window sum.\n\n\n\nFinally, we’ll compute the average neighbor GDPPC value for each polygon. These values are often referred to as spatially lagged values.\n\nGDPPC.lag &lt;- lag.listw(rswm_q, hunan$GDPPC)\nGDPPC.lag\n\n [1] 24847.20 22724.80 24143.25 27737.50 27270.25 21248.80 43747.00 33582.71\n [9] 45651.17 32027.62 32671.00 20810.00 25711.50 30672.33 33457.75 31689.20\n[17] 20269.00 23901.60 25126.17 21903.43 22718.60 25918.80 20307.00 20023.80\n[25] 16576.80 18667.00 14394.67 19848.80 15516.33 20518.00 17572.00 15200.12\n[33] 18413.80 14419.33 24094.50 22019.83 12923.50 14756.00 13869.80 12296.67\n[41] 15775.17 14382.86 11566.33 13199.50 23412.00 39541.00 36186.60 16559.60\n[49] 20772.50 19471.20 19827.33 15466.80 12925.67 18577.17 14943.00 24913.00\n[57] 25093.00 24428.80 17003.00 21143.75 20435.00 17131.33 24569.75 23835.50\n[65] 26360.00 47383.40 55157.75 37058.00 21546.67 23348.67 42323.67 28938.60\n[73] 25880.80 47345.67 18711.33 29087.29 20748.29 35933.71 15439.71 29787.50\n[81] 18145.00 21617.00 29203.89 41363.67 22259.09 44939.56 16902.00 16930.00\n\n\nRecalled in the previous section, we retrieved the GDPPC of these five countries by using the code chunk below.\n\nnb1 &lt;- wm_q[[1]]\nnb1 &lt;- hunan$GDPPC[nb1]\nnb1\n\n[1] 20981 34592 24473 21311 22879\n\n\nWe can append the spatially lag GDPPC values onto hunan sf data frame by using the code chunk below.\n\nlag.list &lt;- list(hunan$NAME_3, lag.listw(rswm_q, hunan$GDPPC))\nlag.res &lt;- as.data.frame(lag.list)\ncolnames(lag.res) &lt;- c(\"NAME_3\", \"lag GDPPC\")\nhunan &lt;- left_join(hunan,lag.res)\n\nThe following table shows the average neighboring income values (stored in the Inc.lag object) for each county.\n\nhead(hunan)\n\nSimple feature collection with 6 features and 7 fields\nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: 110.4922 ymin: 28.61762 xmax: 112.3013 ymax: 30.12812\nGeodetic CRS:  WGS 84\n   NAME_2  ID_3  NAME_3   ENGTYPE_3  County GDPPC lag GDPPC\n1 Changde 21098 Anxiang      County Anxiang 23667  24847.20\n2 Changde 21100 Hanshou      County Hanshou 20981  22724.80\n3 Changde 21101  Jinshi County City  Jinshi 34592  24143.25\n4 Changde 21102      Li      County      Li 24473  27737.50\n5 Changde 21103   Linli      County   Linli 25554  27270.25\n6 Changde 21104  Shimen      County  Shimen 27137  21248.80\n                        geometry\n1 POLYGON ((112.0625 29.75523...\n2 POLYGON ((112.2288 29.11684...\n3 POLYGON ((111.8927 29.6013,...\n4 POLYGON ((111.3731 29.94649...\n5 POLYGON ((111.6324 29.76288...\n6 POLYGON ((110.8825 30.11675...\n\n\nNext, we will plot both the GDPPC and spatial lag GDPPC for comparison using the code chunk below.\n\ngdppc &lt;- qtm(hunan, \"GDPPC\")\nlag_gdppc &lt;- qtm(hunan, \"lag GDPPC\")\ntmap_arrange(gdppc, lag_gdppc, asp=1, ncol=2)\n\n\n\n\n\n\n\nWe can calculate spatial lag as a sum of neighboring values by assigning binary weights. This requires us to go back to our neighbors list, then apply a function that will assign binary weights, then we use glist = in the nb2listw function to explicitly assign these weights.\nWe start by applying a function that will assign a value of 1 per each neighbor. This is done with lapply, which we have been using to manipulate the neighbors structure throughout the past notebooks. Basically it applies a function across each value in the neighbors structure.\n\nb_weights &lt;- lapply(wm_q, function(x) 0*x + 1)\nb_weights2 &lt;- nb2listw(wm_q, \n                       glist = b_weights, \n                       style = \"B\")\nb_weights2\n\nCharacteristics of weights list object:\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 448 \nPercentage nonzero weights: 5.785124 \nAverage number of links: 5.090909 \n\nWeights style: B \nWeights constants summary:\n   n   nn  S0  S1    S2\nB 88 7744 448 896 10224\n\n\nWith the proper weights assigned, we can use lag.listw to compute a lag variable from our weight and GDPPC.\n\nlag_sum &lt;- list(hunan$NAME_3, lag.listw(b_weights2, hunan$GDPPC))\nlag.res &lt;- as.data.frame(lag_sum)\ncolnames(lag.res) &lt;- c(\"NAME_3\", \"lag_sum GDPPC\")\n\nFirst, let us examine the result by using the code chunk below.\n\nlag_sum\n\n[[1]]\n [1] \"Anxiang\"       \"Hanshou\"       \"Jinshi\"        \"Li\"           \n [5] \"Linli\"         \"Shimen\"        \"Liuyang\"       \"Ningxiang\"    \n [9] \"Wangcheng\"     \"Anren\"         \"Guidong\"       \"Jiahe\"        \n[13] \"Linwu\"         \"Rucheng\"       \"Yizhang\"       \"Yongxing\"     \n[17] \"Zixing\"        \"Changning\"     \"Hengdong\"      \"Hengnan\"      \n[21] \"Hengshan\"      \"Leiyang\"       \"Qidong\"        \"Chenxi\"       \n[25] \"Zhongfang\"     \"Huitong\"       \"Jingzhou\"      \"Mayang\"       \n[29] \"Tongdao\"       \"Xinhuang\"      \"Xupu\"          \"Yuanling\"     \n[33] \"Zhijiang\"      \"Lengshuijiang\" \"Shuangfeng\"    \"Xinhua\"       \n[37] \"Chengbu\"       \"Dongan\"        \"Dongkou\"       \"Longhui\"      \n[41] \"Shaodong\"      \"Suining\"       \"Wugang\"        \"Xinning\"      \n[45] \"Xinshao\"       \"Shaoshan\"      \"Xiangxiang\"    \"Baojing\"      \n[49] \"Fenghuang\"     \"Guzhang\"       \"Huayuan\"       \"Jishou\"       \n[53] \"Longshan\"      \"Luxi\"          \"Yongshun\"      \"Anhua\"        \n[57] \"Nan\"           \"Yuanjiang\"     \"Jianghua\"      \"Lanshan\"      \n[61] \"Ningyuan\"      \"Shuangpai\"     \"Xintian\"       \"Huarong\"      \n[65] \"Linxiang\"      \"Miluo\"         \"Pingjiang\"     \"Xiangyin\"     \n[69] \"Cili\"          \"Chaling\"       \"Liling\"        \"Yanling\"      \n[73] \"You\"           \"Zhuzhou\"       \"Sangzhi\"       \"Yueyang\"      \n[77] \"Qiyang\"        \"Taojiang\"      \"Shaoyang\"      \"Lianyuan\"     \n[81] \"Hongjiang\"     \"Hengyang\"      \"Guiyang\"       \"Changsha\"     \n[85] \"Taoyuan\"       \"Xiangtan\"      \"Dao\"           \"Jiangyong\"    \n\n[[2]]\n [1] 124236 113624  96573 110950 109081 106244 174988 235079 273907 256221\n[11]  98013 104050 102846  92017 133831 158446 141883 119508 150757 153324\n[21] 113593 129594 142149 100119  82884  74668  43184  99244  46549  20518\n[31] 140576 121601  92069  43258 144567 132119  51694  59024  69349  73780\n[41]  94651 100680  69398  52798 140472 118623 180933  82798  83090  97356\n[51]  59482  77334  38777 111463  74715 174391 150558 122144  68012  84575\n[61] 143045  51394  98279  47671  26360 236917 220631 185290  64640  70046\n[71] 126971 144693 129404 284074 112268 203611 145238 251536 108078 238300\n[81] 108870 108085 262835 248182 244850 404456  67608  33860\n\n\nNext, we will append the lag_sum GDPPC field into hunan sf data frame by using the code chunk below.\n\nhunan &lt;- left_join(hunan, lag.res)\n\nNow, We can plot both the GDPPC and Spatial Lag Sum GDPPC for comparison using the code chunk below.\n\ngdppc &lt;- qtm(hunan, \"GDPPC\")\nlag_sum_gdppc &lt;- qtm(hunan, \"lag_sum GDPPC\")\ntmap_arrange(gdppc, lag_sum_gdppc, asp=1, ncol=2)\n\n\n\n\n\n\n\nThe spatial window average uses row-standardized weights and includes the diagonal element. To do this in R, we need to go back to the neighbors structure and add the diagonal element before assigning weights.\nTo add the diagonal element to the neighbour list, we just need to use include.self() from spdep.\n\nwm_qs &lt;- include.self(wm_q)\n\nNotice that the Number of nonzero links, Percentage nonzero weights and Average number of links are 536, 6.921488 and 6.090909 respectively as compared to wm_q of 448, 5.785124 and 5.090909\nLet us take a good look at the neighbour list of area [1] by using the code chunk below.\n\nwm_qs[[1]]\n\n[1]  1  2  3  4 57 85\n\n\nNotice that now [1] has six neighbours instead of five.\nNow we obtain weights with nb2listw()\n\nwm_qs &lt;- nb2listw(wm_qs)\nwm_qs\n\nCharacteristics of weights list object:\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 536 \nPercentage nonzero weights: 6.921488 \nAverage number of links: 6.090909 \n\nWeights style: W \nWeights constants summary:\n   n   nn S0       S1       S2\nW 88 7744 88 30.90265 357.5308\n\n\nAgain, we use nb2listw() and glist() to explicitly assign weight values.\nLastly, we just need to create the lag variable from our weight structure and GDPPC variable.\n\nlag_w_avg_gpdpc &lt;- lag.listw(wm_qs, \n                             hunan$GDPPC)\nlag_w_avg_gpdpc\n\n [1] 24650.50 22434.17 26233.00 27084.60 26927.00 22230.17 47621.20 37160.12\n [9] 49224.71 29886.89 26627.50 22690.17 25366.40 25825.75 30329.00 32682.83\n[17] 25948.62 23987.67 25463.14 21904.38 23127.50 25949.83 20018.75 19524.17\n[25] 18955.00 17800.40 15883.00 18831.33 14832.50 17965.00 17159.89 16199.44\n[33] 18764.50 26878.75 23188.86 20788.14 12365.20 15985.00 13764.83 11907.43\n[41] 17128.14 14593.62 11644.29 12706.00 21712.29 43548.25 35049.00 16226.83\n[49] 19294.40 18156.00 19954.75 18145.17 12132.75 18419.29 14050.83 23619.75\n[57] 24552.71 24733.67 16762.60 20932.60 19467.75 18334.00 22541.00 26028.00\n[65] 29128.50 46569.00 47576.60 36545.50 20838.50 22531.00 42115.50 27619.00\n[73] 27611.33 44523.29 18127.43 28746.38 20734.50 33880.62 14716.38 28516.22\n[81] 18086.14 21244.50 29568.80 48119.71 22310.75 43151.60 17133.40 17009.33\n\n\nNext, we will convert the lag variable listw object into a data.frame by using as.data.frame().\n\nlag.list.wm_qs &lt;- list(hunan$NAME_3, lag.listw(wm_qs, hunan$GDPPC))\nlag_wm_qs.res &lt;- as.data.frame(lag.list.wm_qs)\ncolnames(lag_wm_qs.res) &lt;- c(\"NAME_3\", \"lag_window_avg GDPPC\")\n\nNote: The third command line on the code chunk above renames the field names of lag_wm_q1.res object into NAME_3 and lag_window_avg GDPPC respectively.\nNext, the code chunk below will be used to append lag_window_avg GDPPC values onto hunan sf data.frame by using left_join() of dplyr package.\n\nhunan &lt;- left_join(hunan, lag_wm_qs.res)\n\nTo compare the values of lag GDPPC and Spatial window average, kable() of Knitr package is used to prepare a table using the code chunk below.\n\nhunan %&gt;%\n  select(\"County\", \n         \"lag GDPPC\", \n         \"lag_window_avg GDPPC\") %&gt;%\n  kable()\n\n\n\n\n\n\n\n\n\n\nCounty\nlag GDPPC\nlag_window_avg GDPPC\ngeometry\n\n\n\n\nAnxiang\n24847.20\n24650.50\nPOLYGON ((112.0625 29.75523…\n\n\nHanshou\n22724.80\n22434.17\nPOLYGON ((112.2288 29.11684…\n\n\nJinshi\n24143.25\n26233.00\nPOLYGON ((111.8927 29.6013,…\n\n\nLi\n27737.50\n27084.60\nPOLYGON ((111.3731 29.94649…\n\n\nLinli\n27270.25\n26927.00\nPOLYGON ((111.6324 29.76288…\n\n\nShimen\n21248.80\n22230.17\nPOLYGON ((110.8825 30.11675…\n\n\nLiuyang\n43747.00\n47621.20\nPOLYGON ((113.9905 28.5682,…\n\n\nNingxiang\n33582.71\n37160.12\nPOLYGON ((112.7181 28.38299…\n\n\nWangcheng\n45651.17\n49224.71\nPOLYGON ((112.7914 28.52688…\n\n\nAnren\n32027.62\n29886.89\nPOLYGON ((113.1757 26.82734…\n\n\nGuidong\n32671.00\n26627.50\nPOLYGON ((114.1799 26.20117…\n\n\nJiahe\n20810.00\n22690.17\nPOLYGON ((112.4425 25.74358…\n\n\nLinwu\n25711.50\n25366.40\nPOLYGON ((112.5914 25.55143…\n\n\nRucheng\n30672.33\n25825.75\nPOLYGON ((113.6759 25.87578…\n\n\nYizhang\n33457.75\n30329.00\nPOLYGON ((113.2621 25.68394…\n\n\nYongxing\n31689.20\n32682.83\nPOLYGON ((113.3169 26.41843…\n\n\nZixing\n20269.00\n25948.62\nPOLYGON ((113.7311 26.16259…\n\n\nChangning\n23901.60\n23987.67\nPOLYGON ((112.6144 26.60198…\n\n\nHengdong\n25126.17\n25463.14\nPOLYGON ((113.1056 27.21007…\n\n\nHengnan\n21903.43\n21904.38\nPOLYGON ((112.7599 26.98149…\n\n\nHengshan\n22718.60\n23127.50\nPOLYGON ((112.607 27.4689, …\n\n\nLeiyang\n25918.80\n25949.83\nPOLYGON ((112.9996 26.69276…\n\n\nQidong\n20307.00\n20018.75\nPOLYGON ((111.7818 27.0383,…\n\n\nChenxi\n20023.80\n19524.17\nPOLYGON ((110.2624 28.21778…\n\n\nZhongfang\n16576.80\n18955.00\nPOLYGON ((109.9431 27.72858…\n\n\nHuitong\n18667.00\n17800.40\nPOLYGON ((109.9419 27.10512…\n\n\nJingzhou\n14394.67\n15883.00\nPOLYGON ((109.8186 26.75842…\n\n\nMayang\n19848.80\n18831.33\nPOLYGON ((109.795 27.98008,…\n\n\nTongdao\n15516.33\n14832.50\nPOLYGON ((109.9294 26.46561…\n\n\nXinhuang\n20518.00\n17965.00\nPOLYGON ((109.227 27.43733,…\n\n\nXupu\n17572.00\n17159.89\nPOLYGON ((110.7189 28.30485…\n\n\nYuanling\n15200.12\n16199.44\nPOLYGON ((110.9652 28.99895…\n\n\nZhijiang\n18413.80\n18764.50\nPOLYGON ((109.8818 27.60661…\n\n\nLengshuijiang\n14419.33\n26878.75\nPOLYGON ((111.5307 27.81472…\n\n\nShuangfeng\n24094.50\n23188.86\nPOLYGON ((112.263 27.70421,…\n\n\nXinhua\n22019.83\n20788.14\nPOLYGON ((111.3345 28.19642…\n\n\nChengbu\n12923.50\n12365.20\nPOLYGON ((110.4455 26.69317…\n\n\nDongan\n14756.00\n15985.00\nPOLYGON ((111.4531 26.86812…\n\n\nDongkou\n13869.80\n13764.83\nPOLYGON ((110.6622 27.37305…\n\n\nLonghui\n12296.67\n11907.43\nPOLYGON ((110.985 27.65983,…\n\n\nShaodong\n15775.17\n17128.14\nPOLYGON ((111.9054 27.40254…\n\n\nSuining\n14382.86\n14593.62\nPOLYGON ((110.389 27.10006,…\n\n\nWugang\n11566.33\n11644.29\nPOLYGON ((110.9878 27.03345…\n\n\nXinning\n13199.50\n12706.00\nPOLYGON ((111.0736 26.84627…\n\n\nXinshao\n23412.00\n21712.29\nPOLYGON ((111.6013 27.58275…\n\n\nShaoshan\n39541.00\n43548.25\nPOLYGON ((112.5391 27.97742…\n\n\nXiangxiang\n36186.60\n35049.00\nPOLYGON ((112.4549 28.05783…\n\n\nBaojing\n16559.60\n16226.83\nPOLYGON ((109.7015 28.82844…\n\n\nFenghuang\n20772.50\n19294.40\nPOLYGON ((109.5239 28.19206…\n\n\nGuzhang\n19471.20\n18156.00\nPOLYGON ((109.8968 28.74034…\n\n\nHuayuan\n19827.33\n19954.75\nPOLYGON ((109.5647 28.61712…\n\n\nJishou\n15466.80\n18145.17\nPOLYGON ((109.8375 28.4696,…\n\n\nLongshan\n12925.67\n12132.75\nPOLYGON ((109.6337 29.62521…\n\n\nLuxi\n18577.17\n18419.29\nPOLYGON ((110.1067 28.41835…\n\n\nYongshun\n14943.00\n14050.83\nPOLYGON ((110.0003 29.29499…\n\n\nAnhua\n24913.00\n23619.75\nPOLYGON ((111.6034 28.63716…\n\n\nNan\n25093.00\n24552.71\nPOLYGON ((112.3232 29.46074…\n\n\nYuanjiang\n24428.80\n24733.67\nPOLYGON ((112.4391 29.1791,…\n\n\nJianghua\n17003.00\n16762.60\nPOLYGON ((111.6461 25.29661…\n\n\nLanshan\n21143.75\n20932.60\nPOLYGON ((112.2286 25.61123…\n\n\nNingyuan\n20435.00\n19467.75\nPOLYGON ((112.0715 26.09892…\n\n\nShuangpai\n17131.33\n18334.00\nPOLYGON ((111.8864 26.11957…\n\n\nXintian\n24569.75\n22541.00\nPOLYGON ((112.2578 26.0796,…\n\n\nHuarong\n23835.50\n26028.00\nPOLYGON ((112.9242 29.69134…\n\n\nLinxiang\n26360.00\n29128.50\nPOLYGON ((113.5502 29.67418…\n\n\nMiluo\n47383.40\n46569.00\nPOLYGON ((112.9902 29.02139…\n\n\nPingjiang\n55157.75\n47576.60\nPOLYGON ((113.8436 29.06152…\n\n\nXiangyin\n37058.00\n36545.50\nPOLYGON ((112.9173 28.98264…\n\n\nCili\n21546.67\n20838.50\nPOLYGON ((110.8822 29.69017…\n\n\nChaling\n23348.67\n22531.00\nPOLYGON ((113.7666 27.10573…\n\n\nLiling\n42323.67\n42115.50\nPOLYGON ((113.5673 27.94346…\n\n\nYanling\n28938.60\n27619.00\nPOLYGON ((113.9292 26.6154,…\n\n\nYou\n25880.80\n27611.33\nPOLYGON ((113.5879 27.41324…\n\n\nZhuzhou\n47345.67\n44523.29\nPOLYGON ((113.2493 28.02411…\n\n\nSangzhi\n18711.33\n18127.43\nPOLYGON ((110.556 29.40543,…\n\n\nYueyang\n29087.29\n28746.38\nPOLYGON ((113.343 29.61064,…\n\n\nQiyang\n20748.29\n20734.50\nPOLYGON ((111.5563 26.81318…\n\n\nTaojiang\n35933.71\n33880.62\nPOLYGON ((112.0508 28.67265…\n\n\nShaoyang\n15439.71\n14716.38\nPOLYGON ((111.5013 27.30207…\n\n\nLianyuan\n29787.50\n28516.22\nPOLYGON ((111.6789 28.02946…\n\n\nHongjiang\n18145.00\n18086.14\nPOLYGON ((110.1441 27.47513…\n\n\nHengyang\n21617.00\n21244.50\nPOLYGON ((112.7144 26.98613…\n\n\nGuiyang\n29203.89\n29568.80\nPOLYGON ((113.0811 26.04963…\n\n\nChangsha\n41363.67\n48119.71\nPOLYGON ((112.9421 28.03722…\n\n\nTaoyuan\n22259.09\n22310.75\nPOLYGON ((112.0612 29.32855…\n\n\nXiangtan\n44939.56\n43151.60\nPOLYGON ((113.0426 27.8942,…\n\n\nDao\n16902.00\n17133.40\nPOLYGON ((111.498 25.81679,…\n\n\nJiangyong\n16930.00\n17009.33\nPOLYGON ((111.3659 25.39472…\n\n\n\n\n\nLastly, qtm() of tmap package is used to plot the lag_gdppc and w_ave_gdppc maps next to each other for quick comparison.\n\nw_avg_gdppc &lt;- qtm(hunan, \"lag_window_avg GDPPC\")\ntmap_arrange(lag_gdppc, w_avg_gdppc, asp=1, ncol=2)\n\n\n\n\nNote: For more effective comparison, it is advicible to use the core tmap mapping functions.\n\n\n\nThe spatial window sum is the counter part of the window average, but without using row-standardized weights.\nTo add the diagonal element to the neighbour list, we just need to use include.self() from spdep.\n\nwm_qs &lt;- include.self(wm_q)\nwm_qs\n\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 536 \nPercentage nonzero weights: 6.921488 \nAverage number of links: 6.090909 \n\n\nNext, we will assign binary weights to the neighbour structure that includes the diagonal element.\n\nb_weights &lt;- lapply(wm_qs, function(x) 0*x + 1)\nb_weights[1]\n\n[[1]]\n[1] 1 1 1 1 1 1\n\n\nNotice that now [1] has six neighbours instead of five.\nAgain, we use nb2listw() and glist() to explicitly assign weight values.\n\nb_weights2 &lt;- nb2listw(wm_qs, \n                       glist = b_weights, \n                       style = \"B\")\nb_weights2\n\nCharacteristics of weights list object:\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 536 \nPercentage nonzero weights: 6.921488 \nAverage number of links: 6.090909 \n\nWeights style: B \nWeights constants summary:\n   n   nn  S0   S1    S2\nB 88 7744 536 1072 14160\n\n\nWith our new weight structure, we can compute the lag variable with lag.listw().\n\nw_sum_gdppc &lt;- list(hunan$NAME_3, lag.listw(b_weights2, hunan$GDPPC))\nw_sum_gdppc\n\n[[1]]\n [1] \"Anxiang\"       \"Hanshou\"       \"Jinshi\"        \"Li\"           \n [5] \"Linli\"         \"Shimen\"        \"Liuyang\"       \"Ningxiang\"    \n [9] \"Wangcheng\"     \"Anren\"         \"Guidong\"       \"Jiahe\"        \n[13] \"Linwu\"         \"Rucheng\"       \"Yizhang\"       \"Yongxing\"     \n[17] \"Zixing\"        \"Changning\"     \"Hengdong\"      \"Hengnan\"      \n[21] \"Hengshan\"      \"Leiyang\"       \"Qidong\"        \"Chenxi\"       \n[25] \"Zhongfang\"     \"Huitong\"       \"Jingzhou\"      \"Mayang\"       \n[29] \"Tongdao\"       \"Xinhuang\"      \"Xupu\"          \"Yuanling\"     \n[33] \"Zhijiang\"      \"Lengshuijiang\" \"Shuangfeng\"    \"Xinhua\"       \n[37] \"Chengbu\"       \"Dongan\"        \"Dongkou\"       \"Longhui\"      \n[41] \"Shaodong\"      \"Suining\"       \"Wugang\"        \"Xinning\"      \n[45] \"Xinshao\"       \"Shaoshan\"      \"Xiangxiang\"    \"Baojing\"      \n[49] \"Fenghuang\"     \"Guzhang\"       \"Huayuan\"       \"Jishou\"       \n[53] \"Longshan\"      \"Luxi\"          \"Yongshun\"      \"Anhua\"        \n[57] \"Nan\"           \"Yuanjiang\"     \"Jianghua\"      \"Lanshan\"      \n[61] \"Ningyuan\"      \"Shuangpai\"     \"Xintian\"       \"Huarong\"      \n[65] \"Linxiang\"      \"Miluo\"         \"Pingjiang\"     \"Xiangyin\"     \n[69] \"Cili\"          \"Chaling\"       \"Liling\"        \"Yanling\"      \n[73] \"You\"           \"Zhuzhou\"       \"Sangzhi\"       \"Yueyang\"      \n[77] \"Qiyang\"        \"Taojiang\"      \"Shaoyang\"      \"Lianyuan\"     \n[81] \"Hongjiang\"     \"Hengyang\"      \"Guiyang\"       \"Changsha\"     \n[85] \"Taoyuan\"       \"Xiangtan\"      \"Dao\"           \"Jiangyong\"    \n\n[[2]]\n [1] 147903 134605 131165 135423 134635 133381 238106 297281 344573 268982\n[11] 106510 136141 126832 103303 151645 196097 207589 143926 178242 175235\n[21] 138765 155699 160150 117145 113730  89002  63532 112988  59330  35930\n[31] 154439 145795 112587 107515 162322 145517  61826  79925  82589  83352\n[41] 119897 116749  81510  63530 151986 174193 210294  97361  96472 108936\n[51]  79819 108871  48531 128935  84305 188958 171869 148402  83813 104663\n[61] 155742  73336 112705  78084  58257 279414 237883 219273  83354  90124\n[71] 168462 165714 165668 311663 126892 229971 165876 271045 117731 256646\n[81] 126603 127467 295688 336838 267729 431516  85667  51028\n\n\nNext, we will convert the lag variable listw object into a data.frame by using as.data.frame().\n\nw_sum_gdppc.res &lt;- as.data.frame(w_sum_gdppc)\ncolnames(w_sum_gdppc.res) &lt;- c(\"NAME_3\", \"w_sum GDPPC\")\n\nNote: The second command line on the code chunk above renames the field names of w_sum_gdppc.res object into NAME_3 and w_sum GDPPC respectively.\nNext, the code chunk below will be used to append w_sum GDPPC values onto hunan sf data.frame by using left_join() of dplyr package.\n\nhunan &lt;- left_join(hunan, w_sum_gdppc.res)\n\nTo compare the values of lag GDPPC and Spatial window average, kable() of Knitr package is used to prepare a table using the code chunk below.\n\nhunan %&gt;%\n  select(\"County\", \"lag_sum GDPPC\", \"w_sum GDPPC\") %&gt;%\n  kable()\n\n\n\n\n\n\n\n\n\n\nCounty\nlag_sum GDPPC\nw_sum GDPPC\ngeometry\n\n\n\n\nAnxiang\n124236\n147903\nPOLYGON ((112.0625 29.75523…\n\n\nHanshou\n113624\n134605\nPOLYGON ((112.2288 29.11684…\n\n\nJinshi\n96573\n131165\nPOLYGON ((111.8927 29.6013,…\n\n\nLi\n110950\n135423\nPOLYGON ((111.3731 29.94649…\n\n\nLinli\n109081\n134635\nPOLYGON ((111.6324 29.76288…\n\n\nShimen\n106244\n133381\nPOLYGON ((110.8825 30.11675…\n\n\nLiuyang\n174988\n238106\nPOLYGON ((113.9905 28.5682,…\n\n\nNingxiang\n235079\n297281\nPOLYGON ((112.7181 28.38299…\n\n\nWangcheng\n273907\n344573\nPOLYGON ((112.7914 28.52688…\n\n\nAnren\n256221\n268982\nPOLYGON ((113.1757 26.82734…\n\n\nGuidong\n98013\n106510\nPOLYGON ((114.1799 26.20117…\n\n\nJiahe\n104050\n136141\nPOLYGON ((112.4425 25.74358…\n\n\nLinwu\n102846\n126832\nPOLYGON ((112.5914 25.55143…\n\n\nRucheng\n92017\n103303\nPOLYGON ((113.6759 25.87578…\n\n\nYizhang\n133831\n151645\nPOLYGON ((113.2621 25.68394…\n\n\nYongxing\n158446\n196097\nPOLYGON ((113.3169 26.41843…\n\n\nZixing\n141883\n207589\nPOLYGON ((113.7311 26.16259…\n\n\nChangning\n119508\n143926\nPOLYGON ((112.6144 26.60198…\n\n\nHengdong\n150757\n178242\nPOLYGON ((113.1056 27.21007…\n\n\nHengnan\n153324\n175235\nPOLYGON ((112.7599 26.98149…\n\n\nHengshan\n113593\n138765\nPOLYGON ((112.607 27.4689, …\n\n\nLeiyang\n129594\n155699\nPOLYGON ((112.9996 26.69276…\n\n\nQidong\n142149\n160150\nPOLYGON ((111.7818 27.0383,…\n\n\nChenxi\n100119\n117145\nPOLYGON ((110.2624 28.21778…\n\n\nZhongfang\n82884\n113730\nPOLYGON ((109.9431 27.72858…\n\n\nHuitong\n74668\n89002\nPOLYGON ((109.9419 27.10512…\n\n\nJingzhou\n43184\n63532\nPOLYGON ((109.8186 26.75842…\n\n\nMayang\n99244\n112988\nPOLYGON ((109.795 27.98008,…\n\n\nTongdao\n46549\n59330\nPOLYGON ((109.9294 26.46561…\n\n\nXinhuang\n20518\n35930\nPOLYGON ((109.227 27.43733,…\n\n\nXupu\n140576\n154439\nPOLYGON ((110.7189 28.30485…\n\n\nYuanling\n121601\n145795\nPOLYGON ((110.9652 28.99895…\n\n\nZhijiang\n92069\n112587\nPOLYGON ((109.8818 27.60661…\n\n\nLengshuijiang\n43258\n107515\nPOLYGON ((111.5307 27.81472…\n\n\nShuangfeng\n144567\n162322\nPOLYGON ((112.263 27.70421,…\n\n\nXinhua\n132119\n145517\nPOLYGON ((111.3345 28.19642…\n\n\nChengbu\n51694\n61826\nPOLYGON ((110.4455 26.69317…\n\n\nDongan\n59024\n79925\nPOLYGON ((111.4531 26.86812…\n\n\nDongkou\n69349\n82589\nPOLYGON ((110.6622 27.37305…\n\n\nLonghui\n73780\n83352\nPOLYGON ((110.985 27.65983,…\n\n\nShaodong\n94651\n119897\nPOLYGON ((111.9054 27.40254…\n\n\nSuining\n100680\n116749\nPOLYGON ((110.389 27.10006,…\n\n\nWugang\n69398\n81510\nPOLYGON ((110.9878 27.03345…\n\n\nXinning\n52798\n63530\nPOLYGON ((111.0736 26.84627…\n\n\nXinshao\n140472\n151986\nPOLYGON ((111.6013 27.58275…\n\n\nShaoshan\n118623\n174193\nPOLYGON ((112.5391 27.97742…\n\n\nXiangxiang\n180933\n210294\nPOLYGON ((112.4549 28.05783…\n\n\nBaojing\n82798\n97361\nPOLYGON ((109.7015 28.82844…\n\n\nFenghuang\n83090\n96472\nPOLYGON ((109.5239 28.19206…\n\n\nGuzhang\n97356\n108936\nPOLYGON ((109.8968 28.74034…\n\n\nHuayuan\n59482\n79819\nPOLYGON ((109.5647 28.61712…\n\n\nJishou\n77334\n108871\nPOLYGON ((109.8375 28.4696,…\n\n\nLongshan\n38777\n48531\nPOLYGON ((109.6337 29.62521…\n\n\nLuxi\n111463\n128935\nPOLYGON ((110.1067 28.41835…\n\n\nYongshun\n74715\n84305\nPOLYGON ((110.0003 29.29499…\n\n\nAnhua\n174391\n188958\nPOLYGON ((111.6034 28.63716…\n\n\nNan\n150558\n171869\nPOLYGON ((112.3232 29.46074…\n\n\nYuanjiang\n122144\n148402\nPOLYGON ((112.4391 29.1791,…\n\n\nJianghua\n68012\n83813\nPOLYGON ((111.6461 25.29661…\n\n\nLanshan\n84575\n104663\nPOLYGON ((112.2286 25.61123…\n\n\nNingyuan\n143045\n155742\nPOLYGON ((112.0715 26.09892…\n\n\nShuangpai\n51394\n73336\nPOLYGON ((111.8864 26.11957…\n\n\nXintian\n98279\n112705\nPOLYGON ((112.2578 26.0796,…\n\n\nHuarong\n47671\n78084\nPOLYGON ((112.9242 29.69134…\n\n\nLinxiang\n26360\n58257\nPOLYGON ((113.5502 29.67418…\n\n\nMiluo\n236917\n279414\nPOLYGON ((112.9902 29.02139…\n\n\nPingjiang\n220631\n237883\nPOLYGON ((113.8436 29.06152…\n\n\nXiangyin\n185290\n219273\nPOLYGON ((112.9173 28.98264…\n\n\nCili\n64640\n83354\nPOLYGON ((110.8822 29.69017…\n\n\nChaling\n70046\n90124\nPOLYGON ((113.7666 27.10573…\n\n\nLiling\n126971\n168462\nPOLYGON ((113.5673 27.94346…\n\n\nYanling\n144693\n165714\nPOLYGON ((113.9292 26.6154,…\n\n\nYou\n129404\n165668\nPOLYGON ((113.5879 27.41324…\n\n\nZhuzhou\n284074\n311663\nPOLYGON ((113.2493 28.02411…\n\n\nSangzhi\n112268\n126892\nPOLYGON ((110.556 29.40543,…\n\n\nYueyang\n203611\n229971\nPOLYGON ((113.343 29.61064,…\n\n\nQiyang\n145238\n165876\nPOLYGON ((111.5563 26.81318…\n\n\nTaojiang\n251536\n271045\nPOLYGON ((112.0508 28.67265…\n\n\nShaoyang\n108078\n117731\nPOLYGON ((111.5013 27.30207…\n\n\nLianyuan\n238300\n256646\nPOLYGON ((111.6789 28.02946…\n\n\nHongjiang\n108870\n126603\nPOLYGON ((110.1441 27.47513…\n\n\nHengyang\n108085\n127467\nPOLYGON ((112.7144 26.98613…\n\n\nGuiyang\n262835\n295688\nPOLYGON ((113.0811 26.04963…\n\n\nChangsha\n248182\n336838\nPOLYGON ((112.9421 28.03722…\n\n\nTaoyuan\n244850\n267729\nPOLYGON ((112.0612 29.32855…\n\n\nXiangtan\n404456\n431516\nPOLYGON ((113.0426 27.8942,…\n\n\nDao\n67608\n85667\nPOLYGON ((111.498 25.81679,…\n\n\nJiangyong\n33860\n51028\nPOLYGON ((111.3659 25.39472…\n\n\n\n\n\nLastly, qtm() of tmap package is used to plot the lag_sum GDPPC and w_sum_gdppc maps next to each other for quick comparison.\n\nw_sum_gdppc &lt;- qtm(hunan, \"w_sum GDPPC\")\ntmap_arrange(lag_sum_gdppc, w_sum_gdppc, asp=1, ncol=2)\n\n\n\n\nNote: For more effective comparison, it is advicible to use the core tmap mapping functions.\n\n\n\n\n\nCreating Neighbours using sf objects"
  },
  {
    "objectID": "Hands-on Ex/Hands-on Ex 2/Hands-on Exercise 2A.html#overview",
    "href": "Hands-on Ex/Hands-on Ex 2/Hands-on Exercise 2A.html#overview",
    "title": "Hands-on Exercise 2A: Spatial Weights and Applications",
    "section": "",
    "text": "The main task of hands-on exercise 2 is to learn how to compute spatial weights using R. We are mainly using:\n\nimport geospatial data using appropriate function(s) of sf package,\nimport csv file using appropriate function of readr package,\nperform relational join using appropriate join function of dplyr package,\ncompute spatial weights using appropriate functions of spdep package, and\ncalculate spatially lagged variables using appropriate functions of spdep package."
  },
  {
    "objectID": "Hands-on Ex/Hands-on Ex 2/Hands-on Exercise 2A.html#the-study-area-and-data",
    "href": "Hands-on Ex/Hands-on Ex 2/Hands-on Exercise 2A.html#the-study-area-and-data",
    "title": "Hands-on Exercise 2A: Spatial Weights and Applications",
    "section": "",
    "text": "Two data sets will be used in this hands-on exercise, they are:\n\nHunan county boundary layer. This is a geospatial data set in ESRI shapefile format.\nHunan_2012.csv: This csv file contains selected Hunan’s local development indicators in 2012.\n\n\n\nBefore we get started, we need to ensure that spdep, sf, tmap and tidyverse packages of R are currently installed in your R.\n\npacman::p_load(sf, spdep, tmap, tidyverse, knitr)"
  },
  {
    "objectID": "Hands-on Ex/Hands-on Ex 2/Hands-on Exercise 2A.html#getting-the-data-into-r-environment",
    "href": "Hands-on Ex/Hands-on Ex 2/Hands-on Exercise 2A.html#getting-the-data-into-r-environment",
    "title": "Hands-on Exercise 2A: Spatial Weights and Applications",
    "section": "",
    "text": "In this section, we will bring a geospatial data and its associated attribute table into R environment. The geospatial data is in ESRI shapefile format and the attribute table is in csv fomat.\n\n\nThe code chunk below uses st_read() of sf package to import Hunan shapefile into R. The imported shapefile will be simple features Object of sf.\n\nhunan &lt;- st_read(dsn = \"data/geospatial\", \n                 layer = \"Hunan\")\n\nReading layer `Hunan' from data source \n  `D:\\KathyChiu77\\ISSS624\\Hands-on Ex\\Hands-on Ex 2\\data\\geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 88 features and 7 fields\nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: 108.7831 ymin: 24.6342 xmax: 114.2544 ymax: 30.12812\nGeodetic CRS:  WGS 84\n\n\n\n\n\nNext, we will import Hunan_2012.csv into R by using read_csv() of readr package. The output is R dataframe class.\n\nhunan2012 &lt;- read_csv(\"data/aspatial/Hunan_2012.csv\")\n\n\n\n\nThe code chunk below will be used to update the attribute table of hunan’s SpatialPolygonsDataFrame with the attribute fields of hunan2012 dataframe. This is performed by using left_join() of dplyr package.\n\nhunan &lt;- left_join(hunan,hunan2012)%&gt;%\n  select(1:4, 7, 15)\n\n select(1:4, 7, 15)  This function is used to select specific columns from a data frame.  1:4  means it selects the first, second, third, and fourth columns. The numbers  7  and  15  mean it also selects the seventh and fifteenth columns."
  },
  {
    "objectID": "Hands-on Ex/Hands-on Ex 2/Hands-on Exercise 2A.html#visualising-regional-development-indicator",
    "href": "Hands-on Ex/Hands-on Ex 2/Hands-on Exercise 2A.html#visualising-regional-development-indicator",
    "title": "Hands-on Exercise 2A: Spatial Weights and Applications",
    "section": "",
    "text": "Now, we are going to prepare a basemap and a choropleth map showing the distribution of GDPPC 2012 by using qtm() of tmap package.\n\nbasemap &lt;- tm_shape(hunan) +\n  tm_polygons() +\n  tm_text(\"NAME_3\", size=0.5)\n\ngdppc &lt;- qtm(hunan, \"GDPPC\")\ntmap_arrange(basemap, gdppc, asp=1, ncol=2)"
  },
  {
    "objectID": "Hands-on Ex/Hands-on Ex 2/Hands-on Exercise 2A.html#computing-contiguity-spatial-weights",
    "href": "Hands-on Ex/Hands-on Ex 2/Hands-on Exercise 2A.html#computing-contiguity-spatial-weights",
    "title": "Hands-on Exercise 2A: Spatial Weights and Applications",
    "section": "",
    "text": "In this section, we will use poly2nb() of spdep package to compute contiguity weight matrices for the study area. This function builds a neighbours list based on regions with contiguous boundaries. If you look at the documentation you will see that you can pass a “queen” argument that takes TRUE or FALSE as options. If you do not specify this argument the default is set to TRUE, that is, if you don’t specify queen = FALSE this function will return a list of first order neighbours using the Queen criteria.\n\n\nThe code chunk below is used to compute Queen contiguity weight matrix.\n\nwm_q &lt;- poly2nb(hunan, queen=TRUE)\nsummary(wm_q)\n\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 448 \nPercentage nonzero weights: 5.785124 \nAverage number of links: 5.090909 \nLink number distribution:\n\n 1  2  3  4  5  6  7  8  9 11 \n 2  2 12 16 24 14 11  4  2  1 \n2 least connected regions:\n30 65 with 1 link\n1 most connected region:\n85 with 11 links\n\n\nThe summary report above shows that there are 88 area units in Hunan. The most connected area unit has 11 neighbours. There are two area units with only one heighbours.\nFor each polygon in our polygon object, wm_q lists all neighboring polygons. For example, to see the neighbors for the first polygon in the object, type:\n\nwm_q[[1]]\n\n[1]  2  3  4 57 85\n\n\nPolygon 1 has 5 neighbors. The numbers represent the polygon IDs as stored in hunan SpatialPolygonsDataFrame class.\nWe can retrive the county name of Polygon ID=1 by using the code chunk below:\n\nhunan$County[1]\n\n[1] \"Anxiang\"\n\n\nThe output reveals that Polygon ID=1 is Anxiang county.\nTo reveal the county names of the five neighboring polygons, the code chunk will be used:\n\nhunan$NAME_3[c(2,3,4,57,85)]\n\n[1] \"Hanshou\" \"Jinshi\"  \"Li\"      \"Nan\"     \"Taoyuan\"\n\n\nWe can retrieve the GDPPC of these five countries by using the code chunk below.\n\nnb1 &lt;- wm_q[[1]]\nnb1 &lt;- hunan$GDPPC[nb1]\nnb1\n\n[1] 20981 34592 24473 21311 22879\n\n\nThe printed output above shows that the GDPPC of the five nearest neighbours based on Queen’s method are 20981, 34592, 24473, 21311 and 22879 respectively.\nYou can display the complete weight matrix by using str().\n\nstr(wm_q)\n\nList of 88\n $ : int [1:5] 2 3 4 57 85\n $ : int [1:5] 1 57 58 78 85\n $ : int [1:4] 1 4 5 85\n $ : int [1:4] 1 3 5 6\n $ : int [1:4] 3 4 6 85\n $ : int [1:5] 4 5 69 75 85\n $ : int [1:4] 67 71 74 84\n $ : int [1:7] 9 46 47 56 78 80 86\n $ : int [1:6] 8 66 68 78 84 86\n $ : int [1:8] 16 17 19 20 22 70 72 73\n $ : int [1:3] 14 17 72\n $ : int [1:5] 13 60 61 63 83\n $ : int [1:4] 12 15 60 83\n $ : int [1:3] 11 15 17\n $ : int [1:4] 13 14 17 83\n $ : int [1:5] 10 17 22 72 83\n $ : int [1:7] 10 11 14 15 16 72 83\n $ : int [1:5] 20 22 23 77 83\n $ : int [1:6] 10 20 21 73 74 86\n $ : int [1:7] 10 18 19 21 22 23 82\n $ : int [1:5] 19 20 35 82 86\n $ : int [1:5] 10 16 18 20 83\n $ : int [1:7] 18 20 38 41 77 79 82\n $ : int [1:5] 25 28 31 32 54\n $ : int [1:5] 24 28 31 33 81\n $ : int [1:4] 27 33 42 81\n $ : int [1:3] 26 29 42\n $ : int [1:5] 24 25 33 49 54\n $ : int [1:3] 27 37 42\n $ : int 33\n $ : int [1:8] 24 25 32 36 39 40 56 81\n $ : int [1:8] 24 31 50 54 55 56 75 85\n $ : int [1:5] 25 26 28 30 81\n $ : int [1:3] 36 45 80\n $ : int [1:6] 21 41 47 80 82 86\n $ : int [1:6] 31 34 40 45 56 80\n $ : int [1:4] 29 42 43 44\n $ : int [1:4] 23 44 77 79\n $ : int [1:5] 31 40 42 43 81\n $ : int [1:6] 31 36 39 43 45 79\n $ : int [1:6] 23 35 45 79 80 82\n $ : int [1:7] 26 27 29 37 39 43 81\n $ : int [1:6] 37 39 40 42 44 79\n $ : int [1:4] 37 38 43 79\n $ : int [1:6] 34 36 40 41 79 80\n $ : int [1:3] 8 47 86\n $ : int [1:5] 8 35 46 80 86\n $ : int [1:5] 50 51 52 53 55\n $ : int [1:4] 28 51 52 54\n $ : int [1:5] 32 48 52 54 55\n $ : int [1:3] 48 49 52\n $ : int [1:5] 48 49 50 51 54\n $ : int [1:3] 48 55 75\n $ : int [1:6] 24 28 32 49 50 52\n $ : int [1:5] 32 48 50 53 75\n $ : int [1:7] 8 31 32 36 78 80 85\n $ : int [1:6] 1 2 58 64 76 85\n $ : int [1:5] 2 57 68 76 78\n $ : int [1:4] 60 61 87 88\n $ : int [1:4] 12 13 59 61\n $ : int [1:7] 12 59 60 62 63 77 87\n $ : int [1:3] 61 77 87\n $ : int [1:4] 12 61 77 83\n $ : int [1:2] 57 76\n $ : int 76\n $ : int [1:5] 9 67 68 76 84\n $ : int [1:4] 7 66 76 84\n $ : int [1:5] 9 58 66 76 78\n $ : int [1:3] 6 75 85\n $ : int [1:3] 10 72 73\n $ : int [1:3] 7 73 74\n $ : int [1:5] 10 11 16 17 70\n $ : int [1:5] 10 19 70 71 74\n $ : int [1:6] 7 19 71 73 84 86\n $ : int [1:6] 6 32 53 55 69 85\n $ : int [1:7] 57 58 64 65 66 67 68\n $ : int [1:7] 18 23 38 61 62 63 83\n $ : int [1:7] 2 8 9 56 58 68 85\n $ : int [1:7] 23 38 40 41 43 44 45\n $ : int [1:8] 8 34 35 36 41 45 47 56\n $ : int [1:6] 25 26 31 33 39 42\n $ : int [1:5] 20 21 23 35 41\n $ : int [1:9] 12 13 15 16 17 18 22 63 77\n $ : int [1:6] 7 9 66 67 74 86\n $ : int [1:11] 1 2 3 5 6 32 56 57 69 75 ...\n $ : int [1:9] 8 9 19 21 35 46 47 74 84\n $ : int [1:4] 59 61 62 88\n $ : int [1:2] 59 87\n - attr(*, \"class\")= chr \"nb\"\n - attr(*, \"region.id\")= chr [1:88] \"1\" \"2\" \"3\" \"4\" ...\n - attr(*, \"call\")= language poly2nb(pl = hunan, queen = TRUE)\n - attr(*, \"type\")= chr \"queen\"\n - attr(*, \"sym\")= logi TRUE\n\n\n\n\n\nThe code chunk below is used to compute Rook contiguity weight matrix.\n\nwm_r &lt;- poly2nb(hunan, queen=FALSE)\nsummary(wm_r)\n\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 440 \nPercentage nonzero weights: 5.681818 \nAverage number of links: 5 \nLink number distribution:\n\n 1  2  3  4  5  6  7  8  9 10 \n 2  2 12 20 21 14 11  3  2  1 \n2 least connected regions:\n30 65 with 1 link\n1 most connected region:\n85 with 10 links\n\n\nThe summary report above shows that there are 88 area units in Hunan. The most connect area unit has 10 neighbours. There are two area units with only one heighbours.\n\n\n\nA connectivity graph takes a point and displays a line to each neighboring point. We are working with polygons at the moment, so we will need to get points in order to make our connectivity graphs. The most typically method for this will be polygon centroids. We will calculate these in the sf package before moving onto the graphs. Getting Latitude and Longitude of Polygon Centroids\nWe will need points to associate with each polygon before we can make our connectivity graph. It will be a little more complicated than just running st_centroid on the sf object: us.bound. We need the coordinates in a separate data frame for this to work. To do this we will use a mapping function. The mapping function applies a given function to each element of a vector and returns a vector of the same length. Our input vector will be the geometry column of us.bound. Our function will be st_centroid. We will be using map_dbl variation of map from the purrr package. For more documentation, check out map documentation\nTo get our longitude values we map the st_centroid function over the geometry column of us.bound and access the longitude value through double bracket notation [[]] and 1. This allows us to get only the longitude, which is the first value in each centroid.\n\nlongitude &lt;- map_dbl(hunan$geometry, ~st_centroid(.x)[[1]])\n\nWe do the same for latitude with one key difference. We access the second value per each centroid with [[2]].\n\nlatitude &lt;- map_dbl(hunan$geometry, ~st_centroid(.x)[[2]])\n\nNow that we have latitude and longitude, we use cbind to put longitude and latitude into the same object.\n\ncoords &lt;- cbind(longitude, latitude)\n\nWe check the first few observations to see if things are formatted correctly.\n\nhead(coords)\n\n     longitude latitude\n[1,]  112.1531 29.44362\n[2,]  112.0372 28.86489\n[3,]  111.8917 29.47107\n[4,]  111.7031 29.74499\n[5,]  111.6138 29.49258\n[6,]  111.0341 29.79863\n\n\n\n\n\nplot(hunan$geometry, border=\"lightgrey\")\nplot(wm_q, coords, pch = 19, cex = 0.6, add = TRUE, col= \"lightgreen\")\n\n\n\n\n\n\n\n\nplot(hunan$geometry, border=\"lightgrey\")\nplot(wm_r, coords, pch = 19, cex = 0.6, add = TRUE, col = \"lightgreen\")\n\n\n\n\n\n\n\n\npar(mfrow=c(1,2))\nplot(hunan$geometry, border=\"lightgrey\", main=\"Queen Contiguity\")\nplot(wm_q, coords, pch = 19, cex = 0.6, add = TRUE, col= \"red\")\nplot(hunan$geometry, border=\"lightgrey\", main=\"Rook Contiguity\")\nplot(wm_r, coords, pch = 19, cex = 0.6, add = TRUE, col = \"red\")"
  },
  {
    "objectID": "Hands-on Ex/Hands-on Ex 2/Hands-on Exercise 2A.html#computing-distance-based-neighbours",
    "href": "Hands-on Ex/Hands-on Ex 2/Hands-on Exercise 2A.html#computing-distance-based-neighbours",
    "title": "Hands-on Exercise 2A: Spatial Weights and Applications",
    "section": "",
    "text": "In this section, you will learn how to derive distance-based weight matrices by using dnearneigh() of spdep package.\nThe function identifies neighbours of region points by Euclidean distance with a distance band with lower d1= and upper d2= bounds controlled by the bounds= argument. If unprojected coordinates are used and either specified in the coordinates object x or with x as a two column matrix and longlat=TRUE, great circle distances in km will be calculated assuming the WGS84 reference ellipsoid.\n\n\nFirstly, we need to determine the upper limit for distance band by using the steps below:\n\nReturn a matrix with the indices of points belonging to the set of the k nearest neighbours of each other by using knearneigh() of spdep.\nConvert the knn object returned by knearneigh() into a neighbours list of class nb with a list of integer vectors containing neighbour region number ids by using knn2nb().\nReturn the length of neighbour relationship edges by using nbdists() of spdep. The function returns in the units of the coordinates if the coordinates are projected, in km otherwise.\nRemove the list structure of the returned object by using unlist().\n\n\n#coords &lt;- coordinates(hunan)\nk1 &lt;- knn2nb(knearneigh(coords))\nk1dists &lt;- unlist(nbdists(k1, coords, longlat = TRUE))\nsummary(k1dists)\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n  24.79   32.57   38.01   39.07   44.52   61.79 \n\n\nThe summary report shows that the largest first nearest neighbour distance is 61.79 km, so using this as the upper threshold gives certainty that all units will have at least one neighbour.\n\n\n\nNow, we will compute the distance weight matrix by using dnearneigh() as shown in the code chunk below.\n\nwm_d62 &lt;- dnearneigh(coords, 0, 62, longlat = TRUE)\nwm_d62\n\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 324 \nPercentage nonzero weights: 4.183884 \nAverage number of links: 3.681818 \n\n\nAverage number of links: 3.681818 here means that on average, each region has about 3.68 neighboring regions that are within the distance threshold which is specified as 62 units.\nNext, we will use str() to display the content of wm_d62 weight matrix.\n\nstr(wm_d62)\n\nList of 88\n $ : int [1:5] 3 4 5 57 64\n $ : int [1:4] 57 58 78 85\n $ : int [1:4] 1 4 5 57\n $ : int [1:3] 1 3 5\n $ : int [1:4] 1 3 4 85\n $ : int 69\n $ : int [1:2] 67 84\n $ : int [1:4] 9 46 47 78\n $ : int [1:4] 8 46 68 84\n $ : int [1:4] 16 22 70 72\n $ : int [1:3] 14 17 72\n $ : int [1:5] 13 60 61 63 83\n $ : int [1:4] 12 15 60 83\n $ : int [1:2] 11 17\n $ : int 13\n $ : int [1:4] 10 17 22 83\n $ : int [1:3] 11 14 16\n $ : int [1:3] 20 22 63\n $ : int [1:5] 20 21 73 74 82\n $ : int [1:5] 18 19 21 22 82\n $ : int [1:6] 19 20 35 74 82 86\n $ : int [1:4] 10 16 18 20\n $ : int [1:3] 41 77 82\n $ : int [1:4] 25 28 31 54\n $ : int [1:4] 24 28 33 81\n $ : int [1:4] 27 33 42 81\n $ : int [1:2] 26 29\n $ : int [1:6] 24 25 33 49 52 54\n $ : int [1:2] 27 37\n $ : int 33\n $ : int [1:2] 24 36\n $ : int 50\n $ : int [1:5] 25 26 28 30 81\n $ : int [1:3] 36 45 80\n $ : int [1:6] 21 41 46 47 80 82\n $ : int [1:5] 31 34 45 56 80\n $ : int [1:2] 29 42\n $ : int [1:3] 44 77 79\n $ : int [1:4] 40 42 43 81\n $ : int [1:3] 39 45 79\n $ : int [1:5] 23 35 45 79 82\n $ : int [1:5] 26 37 39 43 81\n $ : int [1:3] 39 42 44\n $ : int [1:2] 38 43\n $ : int [1:6] 34 36 40 41 79 80\n $ : int [1:5] 8 9 35 47 86\n $ : int [1:5] 8 35 46 80 86\n $ : int [1:5] 50 51 52 53 55\n $ : int [1:4] 28 51 52 54\n $ : int [1:6] 32 48 51 52 54 55\n $ : int [1:4] 48 49 50 52\n $ : int [1:6] 28 48 49 50 51 54\n $ : int [1:2] 48 55\n $ : int [1:5] 24 28 49 50 52\n $ : int [1:4] 48 50 53 75\n $ : int 36\n $ : int [1:5] 1 2 3 58 64\n $ : int [1:5] 2 57 64 66 68\n $ : int [1:3] 60 87 88\n $ : int [1:4] 12 13 59 61\n $ : int [1:5] 12 60 62 63 87\n $ : int [1:4] 61 63 77 87\n $ : int [1:5] 12 18 61 62 83\n $ : int [1:4] 1 57 58 76\n $ : int 76\n $ : int [1:5] 58 67 68 76 84\n $ : int [1:2] 7 66\n $ : int [1:4] 9 58 66 84\n $ : int [1:2] 6 75\n $ : int [1:3] 10 72 73\n $ : int [1:2] 73 74\n $ : int [1:3] 10 11 70\n $ : int [1:4] 19 70 71 74\n $ : int [1:5] 19 21 71 73 86\n $ : int [1:2] 55 69\n $ : int [1:3] 64 65 66\n $ : int [1:3] 23 38 62\n $ : int [1:2] 2 8\n $ : int [1:4] 38 40 41 45\n $ : int [1:5] 34 35 36 45 47\n $ : int [1:5] 25 26 33 39 42\n $ : int [1:6] 19 20 21 23 35 41\n $ : int [1:4] 12 13 16 63\n $ : int [1:4] 7 9 66 68\n $ : int [1:2] 2 5\n $ : int [1:4] 21 46 47 74\n $ : int [1:4] 59 61 62 88\n $ : int [1:2] 59 87\n - attr(*, \"class\")= chr \"nb\"\n - attr(*, \"region.id\")= chr [1:88] \"1\" \"2\" \"3\" \"4\" ...\n - attr(*, \"call\")= language dnearneigh(x = coords, d1 = 0, d2 = 62, longlat = TRUE)\n - attr(*, \"dnn\")= num [1:2] 0 62\n - attr(*, \"bounds\")= chr [1:2] \"GE\" \"LE\"\n - attr(*, \"nbtype\")= chr \"distance\"\n - attr(*, \"sym\")= logi TRUE\n\n\nAnother way to display the structure of the weight matrix is to combine table() and card() of spdep.\n\ntable(hunan$County, card(wm_d62))\n\n               \n                1 2 3 4 5 6\n  Anhua         1 0 0 0 0 0\n  Anren         0 0 0 1 0 0\n  Anxiang       0 0 0 0 1 0\n  Baojing       0 0 0 0 1 0\n  Chaling       0 0 1 0 0 0\n  Changning     0 0 1 0 0 0\n  Changsha      0 0 0 1 0 0\n  Chengbu       0 1 0 0 0 0\n  Chenxi        0 0 0 1 0 0\n  Cili          0 1 0 0 0 0\n  Dao           0 0 0 1 0 0\n  Dongan        0 0 1 0 0 0\n  Dongkou       0 0 0 1 0 0\n  Fenghuang     0 0 0 1 0 0\n  Guidong       0 0 1 0 0 0\n  Guiyang       0 0 0 1 0 0\n  Guzhang       0 0 0 0 0 1\n  Hanshou       0 0 0 1 0 0\n  Hengdong      0 0 0 0 1 0\n  Hengnan       0 0 0 0 1 0\n  Hengshan      0 0 0 0 0 1\n  Hengyang      0 0 0 0 0 1\n  Hongjiang     0 0 0 0 1 0\n  Huarong       0 0 0 1 0 0\n  Huayuan       0 0 0 1 0 0\n  Huitong       0 0 0 1 0 0\n  Jiahe         0 0 0 0 1 0\n  Jianghua      0 0 1 0 0 0\n  Jiangyong     0 1 0 0 0 0\n  Jingzhou      0 1 0 0 0 0\n  Jinshi        0 0 0 1 0 0\n  Jishou        0 0 0 0 0 1\n  Lanshan       0 0 0 1 0 0\n  Leiyang       0 0 0 1 0 0\n  Lengshuijiang 0 0 1 0 0 0\n  Li            0 0 1 0 0 0\n  Lianyuan      0 0 0 0 1 0\n  Liling        0 1 0 0 0 0\n  Linli         0 0 0 1 0 0\n  Linwu         0 0 0 1 0 0\n  Linxiang      1 0 0 0 0 0\n  Liuyang       0 1 0 0 0 0\n  Longhui       0 0 1 0 0 0\n  Longshan      0 1 0 0 0 0\n  Luxi          0 0 0 0 1 0\n  Mayang        0 0 0 0 0 1\n  Miluo         0 0 0 0 1 0\n  Nan           0 0 0 0 1 0\n  Ningxiang     0 0 0 1 0 0\n  Ningyuan      0 0 0 0 1 0\n  Pingjiang     0 1 0 0 0 0\n  Qidong        0 0 1 0 0 0\n  Qiyang        0 0 1 0 0 0\n  Rucheng       0 1 0 0 0 0\n  Sangzhi       0 1 0 0 0 0\n  Shaodong      0 0 0 0 1 0\n  Shaoshan      0 0 0 0 1 0\n  Shaoyang      0 0 0 1 0 0\n  Shimen        1 0 0 0 0 0\n  Shuangfeng    0 0 0 0 0 1\n  Shuangpai     0 0 0 1 0 0\n  Suining       0 0 0 0 1 0\n  Taojiang      0 1 0 0 0 0\n  Taoyuan       0 1 0 0 0 0\n  Tongdao       0 1 0 0 0 0\n  Wangcheng     0 0 0 1 0 0\n  Wugang        0 0 1 0 0 0\n  Xiangtan      0 0 0 1 0 0\n  Xiangxiang    0 0 0 0 1 0\n  Xiangyin      0 0 0 1 0 0\n  Xinhua        0 0 0 0 1 0\n  Xinhuang      1 0 0 0 0 0\n  Xinning       0 1 0 0 0 0\n  Xinshao       0 0 0 0 0 1\n  Xintian       0 0 0 0 1 0\n  Xupu          0 1 0 0 0 0\n  Yanling       0 0 1 0 0 0\n  Yizhang       1 0 0 0 0 0\n  Yongshun      0 0 0 1 0 0\n  Yongxing      0 0 0 1 0 0\n  You           0 0 0 1 0 0\n  Yuanjiang     0 0 0 0 1 0\n  Yuanling      1 0 0 0 0 0\n  Yueyang       0 0 1 0 0 0\n  Zhijiang      0 0 0 0 1 0\n  Zhongfang     0 0 0 1 0 0\n  Zhuzhou       0 0 0 0 1 0\n  Zixing        0 0 1 0 0 0\n\n\n\nn_comp &lt;- n.comp.nb(wm_d62)\nn_comp$nc\n\n[1] 1\n\n\n\ntable(n_comp$comp.id)\n\n\n 1 \n88 \n\n\n\n\nNext, we will plot the distance weight matrix by using the code chunk below.\n\nplot(hunan$geometry, border=\"lightgrey\")\nplot(wm_d62, coords, add=TRUE)\nplot(k1, coords, add=TRUE, col=\"red\", length=0.08)\n\n\n\n\nThe red lines show the links of 1st nearest neighbours and the black lines show the links of neighbours within the cut-off distance of 62km.\nAlternatively, we can plot both of them next to each other by using the code chunk below.\n\npar(mfrow=c(1,2))\nplot(hunan$geometry, border=\"lightgrey\", main=\"1st nearest neighbours\")\nplot(k1, coords, add=TRUE, col=\"red\", length=0.08)\nplot(hunan$geometry, border=\"lightgrey\", main=\"Distance link\")\nplot(wm_d62, coords, add=TRUE, pch = 19, cex = 0.6)\n\n\n\n\n\n\n\n\nOne of the characteristics of fixed distance weight matrix is that more densely settled areas (usually the urban areas) tend to have more neighbours and the less densely settled areas (usually the rural counties) tend to have lesser neighbours. Having many neighbours smoothes the neighbour relationship across more neighbours.\nIt is possible to control the numbers of neighbours directly using k-nearest neighbours, either accepting asymmetric neighbours or imposing symmetry as shown in the code chunk below.\n\nknn6 &lt;- knn2nb(knearneigh(coords, k=6))\nknn6\n\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 528 \nPercentage nonzero weights: 6.818182 \nAverage number of links: 6 \nNon-symmetric neighbours list\n\n\nSimilarly, we can display the content of the matrix by using str().\n\nstr(knn6)\n\nList of 88\n $ : int [1:6] 2 3 4 5 57 64\n $ : int [1:6] 1 3 57 58 78 85\n $ : int [1:6] 1 2 4 5 57 85\n $ : int [1:6] 1 3 5 6 69 85\n $ : int [1:6] 1 3 4 6 69 85\n $ : int [1:6] 3 4 5 69 75 85\n $ : int [1:6] 9 66 67 71 74 84\n $ : int [1:6] 9 46 47 78 80 86\n $ : int [1:6] 8 46 66 68 84 86\n $ : int [1:6] 16 19 22 70 72 73\n $ : int [1:6] 10 14 16 17 70 72\n $ : int [1:6] 13 15 60 61 63 83\n $ : int [1:6] 12 15 60 61 63 83\n $ : int [1:6] 11 15 16 17 72 83\n $ : int [1:6] 12 13 14 17 60 83\n $ : int [1:6] 10 11 17 22 72 83\n $ : int [1:6] 10 11 14 16 72 83\n $ : int [1:6] 20 22 23 63 77 83\n $ : int [1:6] 10 20 21 73 74 82\n $ : int [1:6] 18 19 21 22 23 82\n $ : int [1:6] 19 20 35 74 82 86\n $ : int [1:6] 10 16 18 19 20 83\n $ : int [1:6] 18 20 41 77 79 82\n $ : int [1:6] 25 28 31 52 54 81\n $ : int [1:6] 24 28 31 33 54 81\n $ : int [1:6] 25 27 29 33 42 81\n $ : int [1:6] 26 29 30 37 42 81\n $ : int [1:6] 24 25 33 49 52 54\n $ : int [1:6] 26 27 37 42 43 81\n $ : int [1:6] 26 27 28 33 49 81\n $ : int [1:6] 24 25 36 39 40 54\n $ : int [1:6] 24 31 50 54 55 56\n $ : int [1:6] 25 26 28 30 49 81\n $ : int [1:6] 36 40 41 45 56 80\n $ : int [1:6] 21 41 46 47 80 82\n $ : int [1:6] 31 34 40 45 56 80\n $ : int [1:6] 26 27 29 42 43 44\n $ : int [1:6] 23 43 44 62 77 79\n $ : int [1:6] 25 40 42 43 44 81\n $ : int [1:6] 31 36 39 43 45 79\n $ : int [1:6] 23 35 45 79 80 82\n $ : int [1:6] 26 27 37 39 43 81\n $ : int [1:6] 37 39 40 42 44 79\n $ : int [1:6] 37 38 39 42 43 79\n $ : int [1:6] 34 36 40 41 79 80\n $ : int [1:6] 8 9 35 47 78 86\n $ : int [1:6] 8 21 35 46 80 86\n $ : int [1:6] 49 50 51 52 53 55\n $ : int [1:6] 28 33 48 51 52 54\n $ : int [1:6] 32 48 51 52 54 55\n $ : int [1:6] 28 48 49 50 52 54\n $ : int [1:6] 28 48 49 50 51 54\n $ : int [1:6] 48 50 51 52 55 75\n $ : int [1:6] 24 28 49 50 51 52\n $ : int [1:6] 32 48 50 52 53 75\n $ : int [1:6] 32 34 36 78 80 85\n $ : int [1:6] 1 2 3 58 64 68\n $ : int [1:6] 2 57 64 66 68 78\n $ : int [1:6] 12 13 60 61 87 88\n $ : int [1:6] 12 13 59 61 63 87\n $ : int [1:6] 12 13 60 62 63 87\n $ : int [1:6] 12 38 61 63 77 87\n $ : int [1:6] 12 18 60 61 62 83\n $ : int [1:6] 1 3 57 58 68 76\n $ : int [1:6] 58 64 66 67 68 76\n $ : int [1:6] 9 58 67 68 76 84\n $ : int [1:6] 7 65 66 68 76 84\n $ : int [1:6] 9 57 58 66 78 84\n $ : int [1:6] 4 5 6 32 75 85\n $ : int [1:6] 10 16 19 22 72 73\n $ : int [1:6] 7 19 73 74 84 86\n $ : int [1:6] 10 11 14 16 17 70\n $ : int [1:6] 10 19 21 70 71 74\n $ : int [1:6] 19 21 71 73 84 86\n $ : int [1:6] 6 32 50 53 55 69\n $ : int [1:6] 58 64 65 66 67 68\n $ : int [1:6] 18 23 38 61 62 63\n $ : int [1:6] 2 8 9 46 58 68\n $ : int [1:6] 38 40 41 43 44 45\n $ : int [1:6] 34 35 36 41 45 47\n $ : int [1:6] 25 26 28 33 39 42\n $ : int [1:6] 19 20 21 23 35 41\n $ : int [1:6] 12 13 15 16 22 63\n $ : int [1:6] 7 9 66 68 71 74\n $ : int [1:6] 2 3 4 5 56 69\n $ : int [1:6] 8 9 21 46 47 74\n $ : int [1:6] 59 60 61 62 63 88\n $ : int [1:6] 59 60 61 62 63 87\n - attr(*, \"region.id\")= chr [1:88] \"1\" \"2\" \"3\" \"4\" ...\n - attr(*, \"call\")= language knearneigh(x = coords, k = 6)\n - attr(*, \"sym\")= logi FALSE\n - attr(*, \"type\")= chr \"knn\"\n - attr(*, \"knn-k\")= num 6\n - attr(*, \"class\")= chr \"nb\"\n\n\nNotice that each county has six neighbours, no less no more!\n\n\nWe can plot the weight matrix using the code chunk below.\n\nplot(hunan$geometry, border=\"lightgrey\")\nplot(knn6, coords, pch = 19, cex = 0.6, add = TRUE, col = \"red\")"
  },
  {
    "objectID": "Hands-on Ex/Hands-on Ex 2/Hands-on Exercise 2A.html#weights-based-on-idw",
    "href": "Hands-on Ex/Hands-on Ex 2/Hands-on Exercise 2A.html#weights-based-on-idw",
    "title": "Hands-on Exercise 2A: Spatial Weights and Applications",
    "section": "",
    "text": "In this section, you will learn how to derive a spatial weight matrix based on Inversed Distance method.\nFirst, we will compute the distances between areas by using nbdists() of spdep.\n\ndist &lt;- nbdists(wm_q, coords, longlat = TRUE)\nids &lt;- lapply(dist, function(x) 1/(x))\nids\n\n[[1]]\n[1] 0.01535405 0.03916350 0.01820896 0.02807922 0.01145113\n\n[[2]]\n[1] 0.01535405 0.01764308 0.01925924 0.02323898 0.01719350\n\n[[3]]\n[1] 0.03916350 0.02822040 0.03695795 0.01395765\n\n[[4]]\n[1] 0.01820896 0.02822040 0.03414741 0.01539065\n\n[[5]]\n[1] 0.03695795 0.03414741 0.01524598 0.01618354\n\n[[6]]\n[1] 0.015390649 0.015245977 0.021748129 0.011883901 0.009810297\n\n[[7]]\n[1] 0.01708612 0.01473997 0.01150924 0.01872915\n\n[[8]]\n[1] 0.02022144 0.03453056 0.02529256 0.01036340 0.02284457 0.01500600 0.01515314\n\n[[9]]\n[1] 0.02022144 0.01574888 0.02109502 0.01508028 0.02902705 0.01502980\n\n[[10]]\n[1] 0.02281552 0.01387777 0.01538326 0.01346650 0.02100510 0.02631658 0.01874863\n[8] 0.01500046\n\n[[11]]\n[1] 0.01882869 0.02243492 0.02247473\n\n[[12]]\n[1] 0.02779227 0.02419652 0.02333385 0.02986130 0.02335429\n\n[[13]]\n[1] 0.02779227 0.02650020 0.02670323 0.01714243\n\n[[14]]\n[1] 0.01882869 0.01233868 0.02098555\n\n[[15]]\n[1] 0.02650020 0.01233868 0.01096284 0.01562226\n\n[[16]]\n[1] 0.02281552 0.02466962 0.02765018 0.01476814 0.01671430\n\n[[17]]\n[1] 0.01387777 0.02243492 0.02098555 0.01096284 0.02466962 0.01593341 0.01437996\n\n[[18]]\n[1] 0.02039779 0.02032767 0.01481665 0.01473691 0.01459380\n\n[[19]]\n[1] 0.01538326 0.01926323 0.02668415 0.02140253 0.01613589 0.01412874\n\n[[20]]\n[1] 0.01346650 0.02039779 0.01926323 0.01723025 0.02153130 0.01469240 0.02327034\n\n[[21]]\n[1] 0.02668415 0.01723025 0.01766299 0.02644986 0.02163800\n\n[[22]]\n[1] 0.02100510 0.02765018 0.02032767 0.02153130 0.01489296\n\n[[23]]\n[1] 0.01481665 0.01469240 0.01401432 0.02246233 0.01880425 0.01530458 0.01849605\n\n[[24]]\n[1] 0.02354598 0.01837201 0.02607264 0.01220154 0.02514180\n\n[[25]]\n[1] 0.02354598 0.02188032 0.01577283 0.01949232 0.02947957\n\n[[26]]\n[1] 0.02155798 0.01745522 0.02212108 0.02220532\n\n[[27]]\n[1] 0.02155798 0.02490625 0.01562326\n\n[[28]]\n[1] 0.01837201 0.02188032 0.02229549 0.03076171 0.02039506\n\n[[29]]\n[1] 0.02490625 0.01686587 0.01395022\n\n[[30]]\n[1] 0.02090587\n\n[[31]]\n[1] 0.02607264 0.01577283 0.01219005 0.01724850 0.01229012 0.01609781 0.01139438\n[8] 0.01150130\n\n[[32]]\n[1] 0.01220154 0.01219005 0.01712515 0.01340413 0.01280928 0.01198216 0.01053374\n[8] 0.01065655\n\n[[33]]\n[1] 0.01949232 0.01745522 0.02229549 0.02090587 0.01979045\n\n[[34]]\n[1] 0.03113041 0.03589551 0.02882915\n\n[[35]]\n[1] 0.01766299 0.02185795 0.02616766 0.02111721 0.02108253 0.01509020\n\n[[36]]\n[1] 0.01724850 0.03113041 0.01571707 0.01860991 0.02073549 0.01680129\n\n[[37]]\n[1] 0.01686587 0.02234793 0.01510990 0.01550676\n\n[[38]]\n[1] 0.01401432 0.02407426 0.02276151 0.01719415\n\n[[39]]\n[1] 0.01229012 0.02172543 0.01711924 0.02629732 0.01896385\n\n[[40]]\n[1] 0.01609781 0.01571707 0.02172543 0.01506473 0.01987922 0.01894207\n\n[[41]]\n[1] 0.02246233 0.02185795 0.02205991 0.01912542 0.01601083 0.01742892\n\n[[42]]\n[1] 0.02212108 0.01562326 0.01395022 0.02234793 0.01711924 0.01836831 0.01683518\n\n[[43]]\n[1] 0.01510990 0.02629732 0.01506473 0.01836831 0.03112027 0.01530782\n\n[[44]]\n[1] 0.01550676 0.02407426 0.03112027 0.01486508\n\n[[45]]\n[1] 0.03589551 0.01860991 0.01987922 0.02205991 0.02107101 0.01982700\n\n[[46]]\n[1] 0.03453056 0.04033752 0.02689769\n\n[[47]]\n[1] 0.02529256 0.02616766 0.04033752 0.01949145 0.02181458\n\n[[48]]\n[1] 0.02313819 0.03370576 0.02289485 0.01630057 0.01818085\n\n[[49]]\n[1] 0.03076171 0.02138091 0.02394529 0.01990000\n\n[[50]]\n[1] 0.01712515 0.02313819 0.02551427 0.02051530 0.02187179\n\n[[51]]\n[1] 0.03370576 0.02138091 0.02873854\n\n[[52]]\n[1] 0.02289485 0.02394529 0.02551427 0.02873854 0.03516672\n\n[[53]]\n[1] 0.01630057 0.01979945 0.01253977\n\n[[54]]\n[1] 0.02514180 0.02039506 0.01340413 0.01990000 0.02051530 0.03516672\n\n[[55]]\n[1] 0.01280928 0.01818085 0.02187179 0.01979945 0.01882298\n\n[[56]]\n[1] 0.01036340 0.01139438 0.01198216 0.02073549 0.01214479 0.01362855 0.01341697\n\n[[57]]\n[1] 0.028079221 0.017643082 0.031423501 0.029114131 0.013520292 0.009903702\n\n[[58]]\n[1] 0.01925924 0.03142350 0.02722997 0.01434859 0.01567192\n\n[[59]]\n[1] 0.01696711 0.01265572 0.01667105 0.01785036\n\n[[60]]\n[1] 0.02419652 0.02670323 0.01696711 0.02343040\n\n[[61]]\n[1] 0.02333385 0.01265572 0.02343040 0.02514093 0.02790764 0.01219751 0.02362452\n\n[[62]]\n[1] 0.02514093 0.02002219 0.02110260\n\n[[63]]\n[1] 0.02986130 0.02790764 0.01407043 0.01805987\n\n[[64]]\n[1] 0.02911413 0.01689892\n\n[[65]]\n[1] 0.02471705\n\n[[66]]\n[1] 0.01574888 0.01726461 0.03068853 0.01954805 0.01810569\n\n[[67]]\n[1] 0.01708612 0.01726461 0.01349843 0.01361172\n\n[[68]]\n[1] 0.02109502 0.02722997 0.03068853 0.01406357 0.01546511\n\n[[69]]\n[1] 0.02174813 0.01645838 0.01419926\n\n[[70]]\n[1] 0.02631658 0.01963168 0.02278487\n\n[[71]]\n[1] 0.01473997 0.01838483 0.03197403\n\n[[72]]\n[1] 0.01874863 0.02247473 0.01476814 0.01593341 0.01963168\n\n[[73]]\n[1] 0.01500046 0.02140253 0.02278487 0.01838483 0.01652709\n\n[[74]]\n[1] 0.01150924 0.01613589 0.03197403 0.01652709 0.01342099 0.02864567\n\n[[75]]\n[1] 0.011883901 0.010533736 0.012539774 0.018822977 0.016458383 0.008217581\n\n[[76]]\n[1] 0.01352029 0.01434859 0.01689892 0.02471705 0.01954805 0.01349843 0.01406357\n\n[[77]]\n[1] 0.014736909 0.018804247 0.022761507 0.012197506 0.020022195 0.014070428\n[7] 0.008440896\n\n[[78]]\n[1] 0.02323898 0.02284457 0.01508028 0.01214479 0.01567192 0.01546511 0.01140779\n\n[[79]]\n[1] 0.01530458 0.01719415 0.01894207 0.01912542 0.01530782 0.01486508 0.02107101\n\n[[80]]\n[1] 0.01500600 0.02882915 0.02111721 0.01680129 0.01601083 0.01982700 0.01949145\n[8] 0.01362855\n\n[[81]]\n[1] 0.02947957 0.02220532 0.01150130 0.01979045 0.01896385 0.01683518\n\n[[82]]\n[1] 0.02327034 0.02644986 0.01849605 0.02108253 0.01742892\n\n[[83]]\n[1] 0.023354289 0.017142433 0.015622258 0.016714303 0.014379961 0.014593799\n[7] 0.014892965 0.018059871 0.008440896\n\n[[84]]\n[1] 0.01872915 0.02902705 0.01810569 0.01361172 0.01342099 0.01297994\n\n[[85]]\n [1] 0.011451133 0.017193502 0.013957649 0.016183544 0.009810297 0.010656545\n [7] 0.013416965 0.009903702 0.014199260 0.008217581 0.011407794\n\n[[86]]\n[1] 0.01515314 0.01502980 0.01412874 0.02163800 0.01509020 0.02689769 0.02181458\n[8] 0.02864567 0.01297994\n\n[[87]]\n[1] 0.01667105 0.02362452 0.02110260 0.02058034\n\n[[88]]\n[1] 0.01785036 0.02058034\n\n\n\n\nNext, we need to assign weights to each neighboring polygon. In our case, each neighboring polygon will be assigned equal weight (style=“W”). This is accomplished by assigning the fraction 1/(#ofneighbors) to each neighboring county then summing the weighted income values. While this is the most intuitive way to summaries the neighbors’ values it has one drawback in that polygons along the edges of the study area will base their lagged values on fewer polygons thus potentially over- or under-estimating the true nature of the spatial autocorrelation in the data. For this example, we’ll stick with the style=“W” option for simplicity’s sake but note that other more robust options are available, notably style=“B”.\n\nrswm_q &lt;- nb2listw(wm_q, style=\"W\", zero.policy = TRUE)\nrswm_q\n\nCharacteristics of weights list object:\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 448 \nPercentage nonzero weights: 5.785124 \nAverage number of links: 5.090909 \n\nWeights style: W \nWeights constants summary:\n   n   nn S0       S1       S2\nW 88 7744 88 37.86334 365.9147\n\n\nThe zero.policy=TRUE option allows for lists of non-neighbors. This should be used with caution since the user may not be aware of missing neighbors in their dataset however, a zero.policy of FALSE would return an error.\nTo see the weight of the first polygon’s eight neighbors type:\n\nrswm_q$weights[10]\n\n[[1]]\n[1] 0.125 0.125 0.125 0.125 0.125 0.125 0.125 0.125\n\n\nEach neighbor is assigned a 0.125 of the total weight. This means that when R computes the average neighboring income values, each neighbor’s income will be multiplied by 0.2 before being tallied.\nUsing the same method, we can also derive a row standardised distance weight matrix by using the code chunk below.\n\nrswm_ids &lt;- nb2listw(wm_q, glist=ids, style=\"B\", zero.policy=TRUE)\nrswm_ids\n\nCharacteristics of weights list object:\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 448 \nPercentage nonzero weights: 5.785124 \nAverage number of links: 5.090909 \n\nWeights style: B \nWeights constants summary:\n   n   nn       S0        S1     S2\nB 88 7744 8.786867 0.3776535 3.8137\n\n\n\nrswm_ids$weights[1]\n\n[[1]]\n[1] 0.01535405 0.03916350 0.01820896 0.02807922 0.01145113\n\n\n\nsummary(unlist(rswm_ids$weights))\n\n    Min.  1st Qu.   Median     Mean  3rd Qu.     Max. \n0.008218 0.015088 0.018739 0.019614 0.022823 0.040338"
  },
  {
    "objectID": "Hands-on Ex/Hands-on Ex 2/Hands-on Exercise 2A.html#application-of-spatial-weight-matrix",
    "href": "Hands-on Ex/Hands-on Ex 2/Hands-on Exercise 2A.html#application-of-spatial-weight-matrix",
    "title": "Hands-on Exercise 2A: Spatial Weights and Applications",
    "section": "",
    "text": "In this section, we will show how to create four different spatial lagged variables, they are:\n\nspatial lag with row-standardized weights,\nspatial lag as a sum of neighbouring values,\nspatial window average, and\nspatial window sum.\n\n\n\nFinally, we’ll compute the average neighbor GDPPC value for each polygon. These values are often referred to as spatially lagged values.\n\nGDPPC.lag &lt;- lag.listw(rswm_q, hunan$GDPPC)\nGDPPC.lag\n\n [1] 24847.20 22724.80 24143.25 27737.50 27270.25 21248.80 43747.00 33582.71\n [9] 45651.17 32027.62 32671.00 20810.00 25711.50 30672.33 33457.75 31689.20\n[17] 20269.00 23901.60 25126.17 21903.43 22718.60 25918.80 20307.00 20023.80\n[25] 16576.80 18667.00 14394.67 19848.80 15516.33 20518.00 17572.00 15200.12\n[33] 18413.80 14419.33 24094.50 22019.83 12923.50 14756.00 13869.80 12296.67\n[41] 15775.17 14382.86 11566.33 13199.50 23412.00 39541.00 36186.60 16559.60\n[49] 20772.50 19471.20 19827.33 15466.80 12925.67 18577.17 14943.00 24913.00\n[57] 25093.00 24428.80 17003.00 21143.75 20435.00 17131.33 24569.75 23835.50\n[65] 26360.00 47383.40 55157.75 37058.00 21546.67 23348.67 42323.67 28938.60\n[73] 25880.80 47345.67 18711.33 29087.29 20748.29 35933.71 15439.71 29787.50\n[81] 18145.00 21617.00 29203.89 41363.67 22259.09 44939.56 16902.00 16930.00\n\n\nRecalled in the previous section, we retrieved the GDPPC of these five countries by using the code chunk below.\n\nnb1 &lt;- wm_q[[1]]\nnb1 &lt;- hunan$GDPPC[nb1]\nnb1\n\n[1] 20981 34592 24473 21311 22879\n\n\nWe can append the spatially lag GDPPC values onto hunan sf data frame by using the code chunk below.\n\nlag.list &lt;- list(hunan$NAME_3, lag.listw(rswm_q, hunan$GDPPC))\nlag.res &lt;- as.data.frame(lag.list)\ncolnames(lag.res) &lt;- c(\"NAME_3\", \"lag GDPPC\")\nhunan &lt;- left_join(hunan,lag.res)\n\nThe following table shows the average neighboring income values (stored in the Inc.lag object) for each county.\n\nhead(hunan)\n\nSimple feature collection with 6 features and 7 fields\nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: 110.4922 ymin: 28.61762 xmax: 112.3013 ymax: 30.12812\nGeodetic CRS:  WGS 84\n   NAME_2  ID_3  NAME_3   ENGTYPE_3  County GDPPC lag GDPPC\n1 Changde 21098 Anxiang      County Anxiang 23667  24847.20\n2 Changde 21100 Hanshou      County Hanshou 20981  22724.80\n3 Changde 21101  Jinshi County City  Jinshi 34592  24143.25\n4 Changde 21102      Li      County      Li 24473  27737.50\n5 Changde 21103   Linli      County   Linli 25554  27270.25\n6 Changde 21104  Shimen      County  Shimen 27137  21248.80\n                        geometry\n1 POLYGON ((112.0625 29.75523...\n2 POLYGON ((112.2288 29.11684...\n3 POLYGON ((111.8927 29.6013,...\n4 POLYGON ((111.3731 29.94649...\n5 POLYGON ((111.6324 29.76288...\n6 POLYGON ((110.8825 30.11675...\n\n\nNext, we will plot both the GDPPC and spatial lag GDPPC for comparison using the code chunk below.\n\ngdppc &lt;- qtm(hunan, \"GDPPC\")\nlag_gdppc &lt;- qtm(hunan, \"lag GDPPC\")\ntmap_arrange(gdppc, lag_gdppc, asp=1, ncol=2)\n\n\n\n\n\n\n\nWe can calculate spatial lag as a sum of neighboring values by assigning binary weights. This requires us to go back to our neighbors list, then apply a function that will assign binary weights, then we use glist = in the nb2listw function to explicitly assign these weights.\nWe start by applying a function that will assign a value of 1 per each neighbor. This is done with lapply, which we have been using to manipulate the neighbors structure throughout the past notebooks. Basically it applies a function across each value in the neighbors structure.\n\nb_weights &lt;- lapply(wm_q, function(x) 0*x + 1)\nb_weights2 &lt;- nb2listw(wm_q, \n                       glist = b_weights, \n                       style = \"B\")\nb_weights2\n\nCharacteristics of weights list object:\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 448 \nPercentage nonzero weights: 5.785124 \nAverage number of links: 5.090909 \n\nWeights style: B \nWeights constants summary:\n   n   nn  S0  S1    S2\nB 88 7744 448 896 10224\n\n\nWith the proper weights assigned, we can use lag.listw to compute a lag variable from our weight and GDPPC.\n\nlag_sum &lt;- list(hunan$NAME_3, lag.listw(b_weights2, hunan$GDPPC))\nlag.res &lt;- as.data.frame(lag_sum)\ncolnames(lag.res) &lt;- c(\"NAME_3\", \"lag_sum GDPPC\")\n\nFirst, let us examine the result by using the code chunk below.\n\nlag_sum\n\n[[1]]\n [1] \"Anxiang\"       \"Hanshou\"       \"Jinshi\"        \"Li\"           \n [5] \"Linli\"         \"Shimen\"        \"Liuyang\"       \"Ningxiang\"    \n [9] \"Wangcheng\"     \"Anren\"         \"Guidong\"       \"Jiahe\"        \n[13] \"Linwu\"         \"Rucheng\"       \"Yizhang\"       \"Yongxing\"     \n[17] \"Zixing\"        \"Changning\"     \"Hengdong\"      \"Hengnan\"      \n[21] \"Hengshan\"      \"Leiyang\"       \"Qidong\"        \"Chenxi\"       \n[25] \"Zhongfang\"     \"Huitong\"       \"Jingzhou\"      \"Mayang\"       \n[29] \"Tongdao\"       \"Xinhuang\"      \"Xupu\"          \"Yuanling\"     \n[33] \"Zhijiang\"      \"Lengshuijiang\" \"Shuangfeng\"    \"Xinhua\"       \n[37] \"Chengbu\"       \"Dongan\"        \"Dongkou\"       \"Longhui\"      \n[41] \"Shaodong\"      \"Suining\"       \"Wugang\"        \"Xinning\"      \n[45] \"Xinshao\"       \"Shaoshan\"      \"Xiangxiang\"    \"Baojing\"      \n[49] \"Fenghuang\"     \"Guzhang\"       \"Huayuan\"       \"Jishou\"       \n[53] \"Longshan\"      \"Luxi\"          \"Yongshun\"      \"Anhua\"        \n[57] \"Nan\"           \"Yuanjiang\"     \"Jianghua\"      \"Lanshan\"      \n[61] \"Ningyuan\"      \"Shuangpai\"     \"Xintian\"       \"Huarong\"      \n[65] \"Linxiang\"      \"Miluo\"         \"Pingjiang\"     \"Xiangyin\"     \n[69] \"Cili\"          \"Chaling\"       \"Liling\"        \"Yanling\"      \n[73] \"You\"           \"Zhuzhou\"       \"Sangzhi\"       \"Yueyang\"      \n[77] \"Qiyang\"        \"Taojiang\"      \"Shaoyang\"      \"Lianyuan\"     \n[81] \"Hongjiang\"     \"Hengyang\"      \"Guiyang\"       \"Changsha\"     \n[85] \"Taoyuan\"       \"Xiangtan\"      \"Dao\"           \"Jiangyong\"    \n\n[[2]]\n [1] 124236 113624  96573 110950 109081 106244 174988 235079 273907 256221\n[11]  98013 104050 102846  92017 133831 158446 141883 119508 150757 153324\n[21] 113593 129594 142149 100119  82884  74668  43184  99244  46549  20518\n[31] 140576 121601  92069  43258 144567 132119  51694  59024  69349  73780\n[41]  94651 100680  69398  52798 140472 118623 180933  82798  83090  97356\n[51]  59482  77334  38777 111463  74715 174391 150558 122144  68012  84575\n[61] 143045  51394  98279  47671  26360 236917 220631 185290  64640  70046\n[71] 126971 144693 129404 284074 112268 203611 145238 251536 108078 238300\n[81] 108870 108085 262835 248182 244850 404456  67608  33860\n\n\nNext, we will append the lag_sum GDPPC field into hunan sf data frame by using the code chunk below.\n\nhunan &lt;- left_join(hunan, lag.res)\n\nNow, We can plot both the GDPPC and Spatial Lag Sum GDPPC for comparison using the code chunk below.\n\ngdppc &lt;- qtm(hunan, \"GDPPC\")\nlag_sum_gdppc &lt;- qtm(hunan, \"lag_sum GDPPC\")\ntmap_arrange(gdppc, lag_sum_gdppc, asp=1, ncol=2)\n\n\n\n\n\n\n\nThe spatial window average uses row-standardized weights and includes the diagonal element. To do this in R, we need to go back to the neighbors structure and add the diagonal element before assigning weights.\nTo add the diagonal element to the neighbour list, we just need to use include.self() from spdep.\n\nwm_qs &lt;- include.self(wm_q)\n\nNotice that the Number of nonzero links, Percentage nonzero weights and Average number of links are 536, 6.921488 and 6.090909 respectively as compared to wm_q of 448, 5.785124 and 5.090909\nLet us take a good look at the neighbour list of area [1] by using the code chunk below.\n\nwm_qs[[1]]\n\n[1]  1  2  3  4 57 85\n\n\nNotice that now [1] has six neighbours instead of five.\nNow we obtain weights with nb2listw()\n\nwm_qs &lt;- nb2listw(wm_qs)\nwm_qs\n\nCharacteristics of weights list object:\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 536 \nPercentage nonzero weights: 6.921488 \nAverage number of links: 6.090909 \n\nWeights style: W \nWeights constants summary:\n   n   nn S0       S1       S2\nW 88 7744 88 30.90265 357.5308\n\n\nAgain, we use nb2listw() and glist() to explicitly assign weight values.\nLastly, we just need to create the lag variable from our weight structure and GDPPC variable.\n\nlag_w_avg_gpdpc &lt;- lag.listw(wm_qs, \n                             hunan$GDPPC)\nlag_w_avg_gpdpc\n\n [1] 24650.50 22434.17 26233.00 27084.60 26927.00 22230.17 47621.20 37160.12\n [9] 49224.71 29886.89 26627.50 22690.17 25366.40 25825.75 30329.00 32682.83\n[17] 25948.62 23987.67 25463.14 21904.38 23127.50 25949.83 20018.75 19524.17\n[25] 18955.00 17800.40 15883.00 18831.33 14832.50 17965.00 17159.89 16199.44\n[33] 18764.50 26878.75 23188.86 20788.14 12365.20 15985.00 13764.83 11907.43\n[41] 17128.14 14593.62 11644.29 12706.00 21712.29 43548.25 35049.00 16226.83\n[49] 19294.40 18156.00 19954.75 18145.17 12132.75 18419.29 14050.83 23619.75\n[57] 24552.71 24733.67 16762.60 20932.60 19467.75 18334.00 22541.00 26028.00\n[65] 29128.50 46569.00 47576.60 36545.50 20838.50 22531.00 42115.50 27619.00\n[73] 27611.33 44523.29 18127.43 28746.38 20734.50 33880.62 14716.38 28516.22\n[81] 18086.14 21244.50 29568.80 48119.71 22310.75 43151.60 17133.40 17009.33\n\n\nNext, we will convert the lag variable listw object into a data.frame by using as.data.frame().\n\nlag.list.wm_qs &lt;- list(hunan$NAME_3, lag.listw(wm_qs, hunan$GDPPC))\nlag_wm_qs.res &lt;- as.data.frame(lag.list.wm_qs)\ncolnames(lag_wm_qs.res) &lt;- c(\"NAME_3\", \"lag_window_avg GDPPC\")\n\nNote: The third command line on the code chunk above renames the field names of lag_wm_q1.res object into NAME_3 and lag_window_avg GDPPC respectively.\nNext, the code chunk below will be used to append lag_window_avg GDPPC values onto hunan sf data.frame by using left_join() of dplyr package.\n\nhunan &lt;- left_join(hunan, lag_wm_qs.res)\n\nTo compare the values of lag GDPPC and Spatial window average, kable() of Knitr package is used to prepare a table using the code chunk below.\n\nhunan %&gt;%\n  select(\"County\", \n         \"lag GDPPC\", \n         \"lag_window_avg GDPPC\") %&gt;%\n  kable()\n\n\n\n\n\n\n\n\n\n\nCounty\nlag GDPPC\nlag_window_avg GDPPC\ngeometry\n\n\n\n\nAnxiang\n24847.20\n24650.50\nPOLYGON ((112.0625 29.75523…\n\n\nHanshou\n22724.80\n22434.17\nPOLYGON ((112.2288 29.11684…\n\n\nJinshi\n24143.25\n26233.00\nPOLYGON ((111.8927 29.6013,…\n\n\nLi\n27737.50\n27084.60\nPOLYGON ((111.3731 29.94649…\n\n\nLinli\n27270.25\n26927.00\nPOLYGON ((111.6324 29.76288…\n\n\nShimen\n21248.80\n22230.17\nPOLYGON ((110.8825 30.11675…\n\n\nLiuyang\n43747.00\n47621.20\nPOLYGON ((113.9905 28.5682,…\n\n\nNingxiang\n33582.71\n37160.12\nPOLYGON ((112.7181 28.38299…\n\n\nWangcheng\n45651.17\n49224.71\nPOLYGON ((112.7914 28.52688…\n\n\nAnren\n32027.62\n29886.89\nPOLYGON ((113.1757 26.82734…\n\n\nGuidong\n32671.00\n26627.50\nPOLYGON ((114.1799 26.20117…\n\n\nJiahe\n20810.00\n22690.17\nPOLYGON ((112.4425 25.74358…\n\n\nLinwu\n25711.50\n25366.40\nPOLYGON ((112.5914 25.55143…\n\n\nRucheng\n30672.33\n25825.75\nPOLYGON ((113.6759 25.87578…\n\n\nYizhang\n33457.75\n30329.00\nPOLYGON ((113.2621 25.68394…\n\n\nYongxing\n31689.20\n32682.83\nPOLYGON ((113.3169 26.41843…\n\n\nZixing\n20269.00\n25948.62\nPOLYGON ((113.7311 26.16259…\n\n\nChangning\n23901.60\n23987.67\nPOLYGON ((112.6144 26.60198…\n\n\nHengdong\n25126.17\n25463.14\nPOLYGON ((113.1056 27.21007…\n\n\nHengnan\n21903.43\n21904.38\nPOLYGON ((112.7599 26.98149…\n\n\nHengshan\n22718.60\n23127.50\nPOLYGON ((112.607 27.4689, …\n\n\nLeiyang\n25918.80\n25949.83\nPOLYGON ((112.9996 26.69276…\n\n\nQidong\n20307.00\n20018.75\nPOLYGON ((111.7818 27.0383,…\n\n\nChenxi\n20023.80\n19524.17\nPOLYGON ((110.2624 28.21778…\n\n\nZhongfang\n16576.80\n18955.00\nPOLYGON ((109.9431 27.72858…\n\n\nHuitong\n18667.00\n17800.40\nPOLYGON ((109.9419 27.10512…\n\n\nJingzhou\n14394.67\n15883.00\nPOLYGON ((109.8186 26.75842…\n\n\nMayang\n19848.80\n18831.33\nPOLYGON ((109.795 27.98008,…\n\n\nTongdao\n15516.33\n14832.50\nPOLYGON ((109.9294 26.46561…\n\n\nXinhuang\n20518.00\n17965.00\nPOLYGON ((109.227 27.43733,…\n\n\nXupu\n17572.00\n17159.89\nPOLYGON ((110.7189 28.30485…\n\n\nYuanling\n15200.12\n16199.44\nPOLYGON ((110.9652 28.99895…\n\n\nZhijiang\n18413.80\n18764.50\nPOLYGON ((109.8818 27.60661…\n\n\nLengshuijiang\n14419.33\n26878.75\nPOLYGON ((111.5307 27.81472…\n\n\nShuangfeng\n24094.50\n23188.86\nPOLYGON ((112.263 27.70421,…\n\n\nXinhua\n22019.83\n20788.14\nPOLYGON ((111.3345 28.19642…\n\n\nChengbu\n12923.50\n12365.20\nPOLYGON ((110.4455 26.69317…\n\n\nDongan\n14756.00\n15985.00\nPOLYGON ((111.4531 26.86812…\n\n\nDongkou\n13869.80\n13764.83\nPOLYGON ((110.6622 27.37305…\n\n\nLonghui\n12296.67\n11907.43\nPOLYGON ((110.985 27.65983,…\n\n\nShaodong\n15775.17\n17128.14\nPOLYGON ((111.9054 27.40254…\n\n\nSuining\n14382.86\n14593.62\nPOLYGON ((110.389 27.10006,…\n\n\nWugang\n11566.33\n11644.29\nPOLYGON ((110.9878 27.03345…\n\n\nXinning\n13199.50\n12706.00\nPOLYGON ((111.0736 26.84627…\n\n\nXinshao\n23412.00\n21712.29\nPOLYGON ((111.6013 27.58275…\n\n\nShaoshan\n39541.00\n43548.25\nPOLYGON ((112.5391 27.97742…\n\n\nXiangxiang\n36186.60\n35049.00\nPOLYGON ((112.4549 28.05783…\n\n\nBaojing\n16559.60\n16226.83\nPOLYGON ((109.7015 28.82844…\n\n\nFenghuang\n20772.50\n19294.40\nPOLYGON ((109.5239 28.19206…\n\n\nGuzhang\n19471.20\n18156.00\nPOLYGON ((109.8968 28.74034…\n\n\nHuayuan\n19827.33\n19954.75\nPOLYGON ((109.5647 28.61712…\n\n\nJishou\n15466.80\n18145.17\nPOLYGON ((109.8375 28.4696,…\n\n\nLongshan\n12925.67\n12132.75\nPOLYGON ((109.6337 29.62521…\n\n\nLuxi\n18577.17\n18419.29\nPOLYGON ((110.1067 28.41835…\n\n\nYongshun\n14943.00\n14050.83\nPOLYGON ((110.0003 29.29499…\n\n\nAnhua\n24913.00\n23619.75\nPOLYGON ((111.6034 28.63716…\n\n\nNan\n25093.00\n24552.71\nPOLYGON ((112.3232 29.46074…\n\n\nYuanjiang\n24428.80\n24733.67\nPOLYGON ((112.4391 29.1791,…\n\n\nJianghua\n17003.00\n16762.60\nPOLYGON ((111.6461 25.29661…\n\n\nLanshan\n21143.75\n20932.60\nPOLYGON ((112.2286 25.61123…\n\n\nNingyuan\n20435.00\n19467.75\nPOLYGON ((112.0715 26.09892…\n\n\nShuangpai\n17131.33\n18334.00\nPOLYGON ((111.8864 26.11957…\n\n\nXintian\n24569.75\n22541.00\nPOLYGON ((112.2578 26.0796,…\n\n\nHuarong\n23835.50\n26028.00\nPOLYGON ((112.9242 29.69134…\n\n\nLinxiang\n26360.00\n29128.50\nPOLYGON ((113.5502 29.67418…\n\n\nMiluo\n47383.40\n46569.00\nPOLYGON ((112.9902 29.02139…\n\n\nPingjiang\n55157.75\n47576.60\nPOLYGON ((113.8436 29.06152…\n\n\nXiangyin\n37058.00\n36545.50\nPOLYGON ((112.9173 28.98264…\n\n\nCili\n21546.67\n20838.50\nPOLYGON ((110.8822 29.69017…\n\n\nChaling\n23348.67\n22531.00\nPOLYGON ((113.7666 27.10573…\n\n\nLiling\n42323.67\n42115.50\nPOLYGON ((113.5673 27.94346…\n\n\nYanling\n28938.60\n27619.00\nPOLYGON ((113.9292 26.6154,…\n\n\nYou\n25880.80\n27611.33\nPOLYGON ((113.5879 27.41324…\n\n\nZhuzhou\n47345.67\n44523.29\nPOLYGON ((113.2493 28.02411…\n\n\nSangzhi\n18711.33\n18127.43\nPOLYGON ((110.556 29.40543,…\n\n\nYueyang\n29087.29\n28746.38\nPOLYGON ((113.343 29.61064,…\n\n\nQiyang\n20748.29\n20734.50\nPOLYGON ((111.5563 26.81318…\n\n\nTaojiang\n35933.71\n33880.62\nPOLYGON ((112.0508 28.67265…\n\n\nShaoyang\n15439.71\n14716.38\nPOLYGON ((111.5013 27.30207…\n\n\nLianyuan\n29787.50\n28516.22\nPOLYGON ((111.6789 28.02946…\n\n\nHongjiang\n18145.00\n18086.14\nPOLYGON ((110.1441 27.47513…\n\n\nHengyang\n21617.00\n21244.50\nPOLYGON ((112.7144 26.98613…\n\n\nGuiyang\n29203.89\n29568.80\nPOLYGON ((113.0811 26.04963…\n\n\nChangsha\n41363.67\n48119.71\nPOLYGON ((112.9421 28.03722…\n\n\nTaoyuan\n22259.09\n22310.75\nPOLYGON ((112.0612 29.32855…\n\n\nXiangtan\n44939.56\n43151.60\nPOLYGON ((113.0426 27.8942,…\n\n\nDao\n16902.00\n17133.40\nPOLYGON ((111.498 25.81679,…\n\n\nJiangyong\n16930.00\n17009.33\nPOLYGON ((111.3659 25.39472…\n\n\n\n\n\nLastly, qtm() of tmap package is used to plot the lag_gdppc and w_ave_gdppc maps next to each other for quick comparison.\n\nw_avg_gdppc &lt;- qtm(hunan, \"lag_window_avg GDPPC\")\ntmap_arrange(lag_gdppc, w_avg_gdppc, asp=1, ncol=2)\n\n\n\n\nNote: For more effective comparison, it is advicible to use the core tmap mapping functions.\n\n\n\nThe spatial window sum is the counter part of the window average, but without using row-standardized weights.\nTo add the diagonal element to the neighbour list, we just need to use include.self() from spdep.\n\nwm_qs &lt;- include.self(wm_q)\nwm_qs\n\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 536 \nPercentage nonzero weights: 6.921488 \nAverage number of links: 6.090909 \n\n\nNext, we will assign binary weights to the neighbour structure that includes the diagonal element.\n\nb_weights &lt;- lapply(wm_qs, function(x) 0*x + 1)\nb_weights[1]\n\n[[1]]\n[1] 1 1 1 1 1 1\n\n\nNotice that now [1] has six neighbours instead of five.\nAgain, we use nb2listw() and glist() to explicitly assign weight values.\n\nb_weights2 &lt;- nb2listw(wm_qs, \n                       glist = b_weights, \n                       style = \"B\")\nb_weights2\n\nCharacteristics of weights list object:\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 536 \nPercentage nonzero weights: 6.921488 \nAverage number of links: 6.090909 \n\nWeights style: B \nWeights constants summary:\n   n   nn  S0   S1    S2\nB 88 7744 536 1072 14160\n\n\nWith our new weight structure, we can compute the lag variable with lag.listw().\n\nw_sum_gdppc &lt;- list(hunan$NAME_3, lag.listw(b_weights2, hunan$GDPPC))\nw_sum_gdppc\n\n[[1]]\n [1] \"Anxiang\"       \"Hanshou\"       \"Jinshi\"        \"Li\"           \n [5] \"Linli\"         \"Shimen\"        \"Liuyang\"       \"Ningxiang\"    \n [9] \"Wangcheng\"     \"Anren\"         \"Guidong\"       \"Jiahe\"        \n[13] \"Linwu\"         \"Rucheng\"       \"Yizhang\"       \"Yongxing\"     \n[17] \"Zixing\"        \"Changning\"     \"Hengdong\"      \"Hengnan\"      \n[21] \"Hengshan\"      \"Leiyang\"       \"Qidong\"        \"Chenxi\"       \n[25] \"Zhongfang\"     \"Huitong\"       \"Jingzhou\"      \"Mayang\"       \n[29] \"Tongdao\"       \"Xinhuang\"      \"Xupu\"          \"Yuanling\"     \n[33] \"Zhijiang\"      \"Lengshuijiang\" \"Shuangfeng\"    \"Xinhua\"       \n[37] \"Chengbu\"       \"Dongan\"        \"Dongkou\"       \"Longhui\"      \n[41] \"Shaodong\"      \"Suining\"       \"Wugang\"        \"Xinning\"      \n[45] \"Xinshao\"       \"Shaoshan\"      \"Xiangxiang\"    \"Baojing\"      \n[49] \"Fenghuang\"     \"Guzhang\"       \"Huayuan\"       \"Jishou\"       \n[53] \"Longshan\"      \"Luxi\"          \"Yongshun\"      \"Anhua\"        \n[57] \"Nan\"           \"Yuanjiang\"     \"Jianghua\"      \"Lanshan\"      \n[61] \"Ningyuan\"      \"Shuangpai\"     \"Xintian\"       \"Huarong\"      \n[65] \"Linxiang\"      \"Miluo\"         \"Pingjiang\"     \"Xiangyin\"     \n[69] \"Cili\"          \"Chaling\"       \"Liling\"        \"Yanling\"      \n[73] \"You\"           \"Zhuzhou\"       \"Sangzhi\"       \"Yueyang\"      \n[77] \"Qiyang\"        \"Taojiang\"      \"Shaoyang\"      \"Lianyuan\"     \n[81] \"Hongjiang\"     \"Hengyang\"      \"Guiyang\"       \"Changsha\"     \n[85] \"Taoyuan\"       \"Xiangtan\"      \"Dao\"           \"Jiangyong\"    \n\n[[2]]\n [1] 147903 134605 131165 135423 134635 133381 238106 297281 344573 268982\n[11] 106510 136141 126832 103303 151645 196097 207589 143926 178242 175235\n[21] 138765 155699 160150 117145 113730  89002  63532 112988  59330  35930\n[31] 154439 145795 112587 107515 162322 145517  61826  79925  82589  83352\n[41] 119897 116749  81510  63530 151986 174193 210294  97361  96472 108936\n[51]  79819 108871  48531 128935  84305 188958 171869 148402  83813 104663\n[61] 155742  73336 112705  78084  58257 279414 237883 219273  83354  90124\n[71] 168462 165714 165668 311663 126892 229971 165876 271045 117731 256646\n[81] 126603 127467 295688 336838 267729 431516  85667  51028\n\n\nNext, we will convert the lag variable listw object into a data.frame by using as.data.frame().\n\nw_sum_gdppc.res &lt;- as.data.frame(w_sum_gdppc)\ncolnames(w_sum_gdppc.res) &lt;- c(\"NAME_3\", \"w_sum GDPPC\")\n\nNote: The second command line on the code chunk above renames the field names of w_sum_gdppc.res object into NAME_3 and w_sum GDPPC respectively.\nNext, the code chunk below will be used to append w_sum GDPPC values onto hunan sf data.frame by using left_join() of dplyr package.\n\nhunan &lt;- left_join(hunan, w_sum_gdppc.res)\n\nTo compare the values of lag GDPPC and Spatial window average, kable() of Knitr package is used to prepare a table using the code chunk below.\n\nhunan %&gt;%\n  select(\"County\", \"lag_sum GDPPC\", \"w_sum GDPPC\") %&gt;%\n  kable()\n\n\n\n\n\n\n\n\n\n\nCounty\nlag_sum GDPPC\nw_sum GDPPC\ngeometry\n\n\n\n\nAnxiang\n124236\n147903\nPOLYGON ((112.0625 29.75523…\n\n\nHanshou\n113624\n134605\nPOLYGON ((112.2288 29.11684…\n\n\nJinshi\n96573\n131165\nPOLYGON ((111.8927 29.6013,…\n\n\nLi\n110950\n135423\nPOLYGON ((111.3731 29.94649…\n\n\nLinli\n109081\n134635\nPOLYGON ((111.6324 29.76288…\n\n\nShimen\n106244\n133381\nPOLYGON ((110.8825 30.11675…\n\n\nLiuyang\n174988\n238106\nPOLYGON ((113.9905 28.5682,…\n\n\nNingxiang\n235079\n297281\nPOLYGON ((112.7181 28.38299…\n\n\nWangcheng\n273907\n344573\nPOLYGON ((112.7914 28.52688…\n\n\nAnren\n256221\n268982\nPOLYGON ((113.1757 26.82734…\n\n\nGuidong\n98013\n106510\nPOLYGON ((114.1799 26.20117…\n\n\nJiahe\n104050\n136141\nPOLYGON ((112.4425 25.74358…\n\n\nLinwu\n102846\n126832\nPOLYGON ((112.5914 25.55143…\n\n\nRucheng\n92017\n103303\nPOLYGON ((113.6759 25.87578…\n\n\nYizhang\n133831\n151645\nPOLYGON ((113.2621 25.68394…\n\n\nYongxing\n158446\n196097\nPOLYGON ((113.3169 26.41843…\n\n\nZixing\n141883\n207589\nPOLYGON ((113.7311 26.16259…\n\n\nChangning\n119508\n143926\nPOLYGON ((112.6144 26.60198…\n\n\nHengdong\n150757\n178242\nPOLYGON ((113.1056 27.21007…\n\n\nHengnan\n153324\n175235\nPOLYGON ((112.7599 26.98149…\n\n\nHengshan\n113593\n138765\nPOLYGON ((112.607 27.4689, …\n\n\nLeiyang\n129594\n155699\nPOLYGON ((112.9996 26.69276…\n\n\nQidong\n142149\n160150\nPOLYGON ((111.7818 27.0383,…\n\n\nChenxi\n100119\n117145\nPOLYGON ((110.2624 28.21778…\n\n\nZhongfang\n82884\n113730\nPOLYGON ((109.9431 27.72858…\n\n\nHuitong\n74668\n89002\nPOLYGON ((109.9419 27.10512…\n\n\nJingzhou\n43184\n63532\nPOLYGON ((109.8186 26.75842…\n\n\nMayang\n99244\n112988\nPOLYGON ((109.795 27.98008,…\n\n\nTongdao\n46549\n59330\nPOLYGON ((109.9294 26.46561…\n\n\nXinhuang\n20518\n35930\nPOLYGON ((109.227 27.43733,…\n\n\nXupu\n140576\n154439\nPOLYGON ((110.7189 28.30485…\n\n\nYuanling\n121601\n145795\nPOLYGON ((110.9652 28.99895…\n\n\nZhijiang\n92069\n112587\nPOLYGON ((109.8818 27.60661…\n\n\nLengshuijiang\n43258\n107515\nPOLYGON ((111.5307 27.81472…\n\n\nShuangfeng\n144567\n162322\nPOLYGON ((112.263 27.70421,…\n\n\nXinhua\n132119\n145517\nPOLYGON ((111.3345 28.19642…\n\n\nChengbu\n51694\n61826\nPOLYGON ((110.4455 26.69317…\n\n\nDongan\n59024\n79925\nPOLYGON ((111.4531 26.86812…\n\n\nDongkou\n69349\n82589\nPOLYGON ((110.6622 27.37305…\n\n\nLonghui\n73780\n83352\nPOLYGON ((110.985 27.65983,…\n\n\nShaodong\n94651\n119897\nPOLYGON ((111.9054 27.40254…\n\n\nSuining\n100680\n116749\nPOLYGON ((110.389 27.10006,…\n\n\nWugang\n69398\n81510\nPOLYGON ((110.9878 27.03345…\n\n\nXinning\n52798\n63530\nPOLYGON ((111.0736 26.84627…\n\n\nXinshao\n140472\n151986\nPOLYGON ((111.6013 27.58275…\n\n\nShaoshan\n118623\n174193\nPOLYGON ((112.5391 27.97742…\n\n\nXiangxiang\n180933\n210294\nPOLYGON ((112.4549 28.05783…\n\n\nBaojing\n82798\n97361\nPOLYGON ((109.7015 28.82844…\n\n\nFenghuang\n83090\n96472\nPOLYGON ((109.5239 28.19206…\n\n\nGuzhang\n97356\n108936\nPOLYGON ((109.8968 28.74034…\n\n\nHuayuan\n59482\n79819\nPOLYGON ((109.5647 28.61712…\n\n\nJishou\n77334\n108871\nPOLYGON ((109.8375 28.4696,…\n\n\nLongshan\n38777\n48531\nPOLYGON ((109.6337 29.62521…\n\n\nLuxi\n111463\n128935\nPOLYGON ((110.1067 28.41835…\n\n\nYongshun\n74715\n84305\nPOLYGON ((110.0003 29.29499…\n\n\nAnhua\n174391\n188958\nPOLYGON ((111.6034 28.63716…\n\n\nNan\n150558\n171869\nPOLYGON ((112.3232 29.46074…\n\n\nYuanjiang\n122144\n148402\nPOLYGON ((112.4391 29.1791,…\n\n\nJianghua\n68012\n83813\nPOLYGON ((111.6461 25.29661…\n\n\nLanshan\n84575\n104663\nPOLYGON ((112.2286 25.61123…\n\n\nNingyuan\n143045\n155742\nPOLYGON ((112.0715 26.09892…\n\n\nShuangpai\n51394\n73336\nPOLYGON ((111.8864 26.11957…\n\n\nXintian\n98279\n112705\nPOLYGON ((112.2578 26.0796,…\n\n\nHuarong\n47671\n78084\nPOLYGON ((112.9242 29.69134…\n\n\nLinxiang\n26360\n58257\nPOLYGON ((113.5502 29.67418…\n\n\nMiluo\n236917\n279414\nPOLYGON ((112.9902 29.02139…\n\n\nPingjiang\n220631\n237883\nPOLYGON ((113.8436 29.06152…\n\n\nXiangyin\n185290\n219273\nPOLYGON ((112.9173 28.98264…\n\n\nCili\n64640\n83354\nPOLYGON ((110.8822 29.69017…\n\n\nChaling\n70046\n90124\nPOLYGON ((113.7666 27.10573…\n\n\nLiling\n126971\n168462\nPOLYGON ((113.5673 27.94346…\n\n\nYanling\n144693\n165714\nPOLYGON ((113.9292 26.6154,…\n\n\nYou\n129404\n165668\nPOLYGON ((113.5879 27.41324…\n\n\nZhuzhou\n284074\n311663\nPOLYGON ((113.2493 28.02411…\n\n\nSangzhi\n112268\n126892\nPOLYGON ((110.556 29.40543,…\n\n\nYueyang\n203611\n229971\nPOLYGON ((113.343 29.61064,…\n\n\nQiyang\n145238\n165876\nPOLYGON ((111.5563 26.81318…\n\n\nTaojiang\n251536\n271045\nPOLYGON ((112.0508 28.67265…\n\n\nShaoyang\n108078\n117731\nPOLYGON ((111.5013 27.30207…\n\n\nLianyuan\n238300\n256646\nPOLYGON ((111.6789 28.02946…\n\n\nHongjiang\n108870\n126603\nPOLYGON ((110.1441 27.47513…\n\n\nHengyang\n108085\n127467\nPOLYGON ((112.7144 26.98613…\n\n\nGuiyang\n262835\n295688\nPOLYGON ((113.0811 26.04963…\n\n\nChangsha\n248182\n336838\nPOLYGON ((112.9421 28.03722…\n\n\nTaoyuan\n244850\n267729\nPOLYGON ((112.0612 29.32855…\n\n\nXiangtan\n404456\n431516\nPOLYGON ((113.0426 27.8942,…\n\n\nDao\n67608\n85667\nPOLYGON ((111.498 25.81679,…\n\n\nJiangyong\n33860\n51028\nPOLYGON ((111.3659 25.39472…\n\n\n\n\n\nLastly, qtm() of tmap package is used to plot the lag_sum GDPPC and w_sum_gdppc maps next to each other for quick comparison.\n\nw_sum_gdppc &lt;- qtm(hunan, \"w_sum GDPPC\")\ntmap_arrange(lag_sum_gdppc, w_sum_gdppc, asp=1, ncol=2)\n\n\n\n\nNote: For more effective comparison, it is advicible to use the core tmap mapping functions."
  },
  {
    "objectID": "Hands-on Ex/Hands-on Ex 2/Hands-on Exercise 2A.html#references",
    "href": "Hands-on Ex/Hands-on Ex 2/Hands-on Exercise 2A.html#references",
    "title": "Hands-on Exercise 2A: Spatial Weights and Applications",
    "section": "",
    "text": "Creating Neighbours using sf objects"
  },
  {
    "objectID": "Hands-on Ex/Hands-on Ex 2/Hands-on Exercise 2C.html",
    "href": "Hands-on Ex/Hands-on Ex 2/Hands-on Exercise 2C.html",
    "title": "Hands-on Exercise 2C: Local Measures of Spatial Autocorrelation",
    "section": "",
    "text": "In this hands-on exercise, we will compute Global and Local Measure of Spatial Autocorrelation (GLSA) by using spdep package. By the end to this hands-on exercise, you will be able to:\n\nimport geospatial data using appropriate function(s) of sf package,\nimport csv file using appropriate function of readr package,\nperform relational join using appropriate join function of dplyr package,\ncompute Global Spatial Autocorrelation (GSA) statistics by using appropriate functions of spdep package,\n\nplot Moran scatterplot,\ncompute and plot spatial correlogram using appropriate function of spdep package.\n\ncompute Local Indicator of Spatial Association (LISA) statistics for detecting clusters and outliers by using appropriate functions spdep package;\ncompute Getis-Ord’s Gi-statistics for detecting hot spot or/and cold spot area by using appropriate functions of spdep package; and\nto visualise the analysis output by using tmap package."
  },
  {
    "objectID": "Hands-on Ex/Hands-on Ex 2/Hands-on Exercise 2C.html#overview",
    "href": "Hands-on Ex/Hands-on Ex 2/Hands-on Exercise 2C.html#overview",
    "title": "Hands-on Exercise 2C: Local Measures of Spatial Autocorrelation",
    "section": "",
    "text": "In this hands-on exercise, we will compute Global and Local Measure of Spatial Autocorrelation (GLSA) by using spdep package. By the end to this hands-on exercise, you will be able to:\n\nimport geospatial data using appropriate function(s) of sf package,\nimport csv file using appropriate function of readr package,\nperform relational join using appropriate join function of dplyr package,\ncompute Global Spatial Autocorrelation (GSA) statistics by using appropriate functions of spdep package,\n\nplot Moran scatterplot,\ncompute and plot spatial correlogram using appropriate function of spdep package.\n\ncompute Local Indicator of Spatial Association (LISA) statistics for detecting clusters and outliers by using appropriate functions spdep package;\ncompute Getis-Ord’s Gi-statistics for detecting hot spot or/and cold spot area by using appropriate functions of spdep package; and\nto visualise the analysis output by using tmap package."
  },
  {
    "objectID": "Hands-on Ex/Hands-on Ex 2/Hands-on Exercise 2C.html#getting-started",
    "href": "Hands-on Ex/Hands-on Ex 2/Hands-on Exercise 2C.html#getting-started",
    "title": "Hands-on Exercise 2C: Local Measures of Spatial Autocorrelation",
    "section": "2.2 Getting Started",
    "text": "2.2 Getting Started\n\n2.2.1 The analytical question\nIn spatial policy, one of the main development objective of the local govenment and planners is to ensure equal distribution of development in the province. Our task in this study, hence, is to apply appropriate spatial statistical methods to discover if development are even distributed geographically. If the answer is No. Then, our next question will be “is there sign of spatial clustering?”. And, if the answer for this question is yes, then our next question will be “where are these clusters?”\nIn this case study, we are interested to examine the spatial pattern of a selected development indicator (i.e. GDP per capita) of Hunan Provice, People Republic of China.(https://en.wikipedia.org/wiki/Hunan)\n\n\n2.2.2 The Study Area and Data\nTwo data sets will be used in this hands-on exercise, they are:\n\nHunan province administrative boundary layer at county level. This is a geospatial data set in ESRI shapefile format.\nHunan_2012.csv: This csv file contains selected Hunan’s local development indicators in 2012.\n\n\n\n2.2.3 Setting the Analytical Toolls\nBefore we get started, we need to ensure that spdep, sf, tmap and tidyverse packages of R are currently installed in your R.\n\nsf is use for importing and handling geospatial data in R,\ntidyverse is mainly use for wrangling attribute data in R,\nspdep will be used to compute spatial weights, global and local spatial autocorrelation statistics, and\ntmap will be used to prepare cartographic quality chropleth map.\n\nThe code chunk below is used to perform the following tasks:\n\ncreating a package list containing the necessary R packages,\nchecking if the R packages in the package list have been installed in R,\n\nif they have yet to be installed, RStudio will installed the missing packages,\n\nlaunching the packages into R environment.\n\n\npacman::p_load(sf, spdep, tmap, tidyverse)"
  },
  {
    "objectID": "Hands-on Ex/Hands-on Ex 2/Hands-on Exercise 2C.html#getting-the-data-into-r-environment",
    "href": "Hands-on Ex/Hands-on Ex 2/Hands-on Exercise 2C.html#getting-the-data-into-r-environment",
    "title": "Hands-on Exercise 2C: Local Measures of Spatial Autocorrelation",
    "section": "2.3 Getting the Data Into R Environment",
    "text": "2.3 Getting the Data Into R Environment\nIn this section, we will show how to bring a geospatial data and its associated attribute table into R environment. The geospatial data is in ESRI shapefile format and the attribute table is in csv fomat.\n\n2.3.1 Import shapefile into r environment\nThe code chunk below uses st_read() of sf package to import Hunan shapefile into R. The imported shapefile will be simple features Object of sf.\n\nhunan &lt;- st_read(dsn = \"data/geospatial\", \n                 layer = \"Hunan\")\n\nReading layer `Hunan' from data source \n  `D:\\KathyChiu77\\ISSS624\\Hands-on Ex\\Hands-on Ex 2\\data\\geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 88 features and 7 fields\nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: 108.7831 ymin: 24.6342 xmax: 114.2544 ymax: 30.12812\nGeodetic CRS:  WGS 84\n\n\n\n\n2.3.2 Import csv file into r environment\nNext, we will import Hunan_2012.csv into R by using read_csv() of readr package. The output is R data frame class.\n\nhunan2012 &lt;- read_csv(\"data/aspatial/Hunan_2012.csv\")\n\n\n\n2.3.3 Performing relational join\nThe code chunk below will be used to update the attribute table of hunan’s SpatialPolygonsDataFrame with the attribute fields of hunan2012 dataframe. This is performed by using left_join() of dplyr package.\n\nhunan &lt;- left_join(hunan,hunan2012) %&gt;%\n  select(1:4, 7, 15)\n\n\n\n2.3.4 Visualising Regional Development Indicator\nNow, we are going to prepare a basemap and a choropleth map showing the distribution of GDPPC 2012 by using qtm() of tmap package.\n\nequal &lt;- tm_shape(hunan) +\n  tm_fill(\"GDPPC\",\n          n = 5,\n          style = \"equal\") +\n  tm_borders(alpha = 0.5) +\n  tm_layout(main.title = \"Equal interval classification\")\n\nquantile &lt;- tm_shape(hunan) +\n  tm_fill(\"GDPPC\",\n          n = 5,\n          style = \"quantile\") +\n  tm_borders(alpha = 0.5) +\n  tm_layout(main.title = \"Equal quantile classification\")\n\ntmap_arrange(equal, \n             quantile, \n             asp=1, \n             ncol=2)"
  },
  {
    "objectID": "Hands-on Ex/Hands-on Ex 2/Hands-on Exercise 2C.html#global-spatial-autocorrelation",
    "href": "Hands-on Ex/Hands-on Ex 2/Hands-on Exercise 2C.html#global-spatial-autocorrelation",
    "title": "Hands-on Exercise 2C: Local Measures of Spatial Autocorrelation",
    "section": "2.4 Global Spatial Autocorrelation",
    "text": "2.4 Global Spatial Autocorrelation\nIn this section, we will compute global spatial autocorrelation statistics and to perform spatial complete randomness test for global spatial autocorrelation.\n\n2.4.1 Computing Contiguity Spatial Weights\nBefore we can compute the global spatial autocorrelation statistics, we need to construct a spatial weights of the study area. The spatial weights is used to define the neighbourhood relationships between the geographical units (i.e. county) in the study area.\nIn the code chunk below, poly2nb() of spdep package is used to compute contiguity weight matrices for the study area. This function builds a neighbours list based on regions with contiguous boundaries. If you look at the documentation you will see that you can pass a “queen” argument that takes TRUE or FALSE as options. If you do not specify this argument the default is set to TRUE, that is, if you don’t specify queen = FALSE this function will return a list of first order neighbours using the Queen criteria.\nMore specifically, the code chunk below is used to compute Queen contiguity weight matrix.\n\nwm_q &lt;- poly2nb(hunan, \n                queen=TRUE)\nsummary(wm_q)\n\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 448 \nPercentage nonzero weights: 5.785124 \nAverage number of links: 5.090909 \nLink number distribution:\n\n 1  2  3  4  5  6  7  8  9 11 \n 2  2 12 16 24 14 11  4  2  1 \n2 least connected regions:\n30 65 with 1 link\n1 most connected region:\n85 with 11 links\n\n\nThe summary report above shows that there are 88 area units in Hunan. The most connected area unit has 11 neighbours. There are two area units with only one neighbours.\n\n\n2.4.2 Row-standardised weights matrix\nNext, we need to assign weights to each neighboring polygon. In our case, each neighboring polygon will be assigned equal weight (style=“W”). This is accomplished by assigning the fraction 1/(#ofneighbors) to each neighboring county then summing the weighted income values. While this is the most intuitive way to summaries the neighbors’ values it has one drawback in that polygons along the edges of the study area will base their lagged values on fewer polygons thus potentially over- or under-estimating the true nature of the spatial autocorrelation in the data. For this example, we’ll stick with the style=“W” option for simplicity’s sake but note that other more robust options are available, notably style=“B”.\n\nrswm_q &lt;- nb2listw(wm_q, \n                   style=\"W\", \n                   zero.policy = TRUE)\nrswm_q\n\nCharacteristics of weights list object:\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 448 \nPercentage nonzero weights: 5.785124 \nAverage number of links: 5.090909 \n\nWeights style: W \nWeights constants summary:\n   n   nn S0       S1       S2\nW 88 7744 88 37.86334 365.9147\n\n\nThe input of nb2listw() must be an object of class nb. The syntax of the function has two major arguments, namely style and zero.poly.\n\nstyle can take values “W”, “B”, “C”, “U”, “minmax” and “S”. B is the basic binary coding, W is row standardised (sums over all links to n), C is globally standardised (sums over all links to n), U is equal to C divided by the number of neighbours (sums over all links to unity), while S is the variance-stabilizing coding scheme proposed by Tiefelsdorf et al. 1999, p. 167-168 (sums over all links to n).\nIf zero policy is set to TRUE, weights vectors of zero length are inserted for regions without neighbour in the neighbours list. These will in turn generate lag values of zero, equivalent to the sum of products of the zero row t(rep(0, length=length(neighbours))) %*% x, for arbitrary numerical vector x of length length(neighbours). The spatially lagged value of x for the zero-neighbour region will then be zero, which may (or may not) be a sensible choice.\n\n\n\n2.4.3 Global Spatial Autocorrelation: Moran’s I\nIn this section, we will perform Moran’s I statistics testing by using moran.test() of spdep.\n\n\n2.4.4 Maron’s I test\nThe code chunk below performs Moran’s I statistical testing using moran.test() of spdep.\n\nmoran.test(hunan$GDPPC, \n           listw=rswm_q, \n           zero.policy = TRUE, \n           na.action=na.omit)\n\n\n    Moran I test under randomisation\n\ndata:  hunan$GDPPC  \nweights: rswm_q    \n\nMoran I statistic standard deviate = 4.7351, p-value = 1.095e-06\nalternative hypothesis: greater\nsample estimates:\nMoran I statistic       Expectation          Variance \n      0.300749970      -0.011494253       0.004348351 \n\n\n\n2.4.4.1 Computing Monte Carlo Moran’s I\nThe code chunk below performs permutation test for Moran’s I statistic by using moran.mc() of spdep. A total of 1000 simulation will be performed.\n\nset.seed(1234)\nbperm= moran.mc(hunan$GDPPC, \n                listw=rswm_q, \n                nsim=999, \n                zero.policy = TRUE, \n                na.action=na.omit)\nbperm\n\n\n    Monte-Carlo simulation of Moran I\n\ndata:  hunan$GDPPC \nweights: rswm_q  \nnumber of simulations + 1: 1000 \n\nstatistic = 0.30075, observed rank = 1000, p-value = 0.001\nalternative hypothesis: greater\n\n\n\n\n2.4.4.2 Visualising Monte Carlo Moran’s I\nIt is always a good practice for us the examine the simulated Moran’s I test statistics in greater detail. This can be achieved by plotting the distribution of the statistical values as a histogram by using the code chunk below.\nIn the code chunk below hist() and abline() of R Graphics are used.\n\nmean(bperm$res[1:999])\n\n[1] -0.01504572\n\n\n\nvar(bperm$res[1:999])\n\n[1] 0.004371574\n\n\n\nsummary(bperm$res[1:999])\n\n    Min.  1st Qu.   Median     Mean  3rd Qu.     Max. \n-0.18339 -0.06168 -0.02125 -0.01505  0.02611  0.27593 \n\n\n\nhist(bperm$res, \n     freq=TRUE, \n     breaks=20, \n     xlab=\"Simulated Moran's I\")\nabline(v=0, \n       col=\"red\") \n\n\n\n\n\n\n\n2.4.5 Global Spatial Autocorrelation: Geary’s\nIn this section, you will learn how to perform Geary’s c statistics testing by using appropriate functions of spdep package.\n\n2.4.5.1 Geary’s C test\nThe code chunk below performs Geary’s C test for spatial autocorrelation by using geary.test() of spdep.\n\ngeary.test(hunan$GDPPC, listw=rswm_q)\n\n\n    Geary C test under randomisation\n\ndata:  hunan$GDPPC \nweights: rswm_q \n\nGeary C statistic standard deviate = 3.6108, p-value = 0.0001526\nalternative hypothesis: Expectation greater than statistic\nsample estimates:\nGeary C statistic       Expectation          Variance \n        0.6907223         1.0000000         0.0073364 \n\n\n\n\n2.4.5.2 Computing Monte Carlo Geary’s C\nThe code chunk below performs permutation test for Geary’s C statistic by using geary.mc() of spdep.\n\nset.seed(1234)\nbperm=geary.mc(hunan$GDPPC, \n               listw=rswm_q, \n               nsim=999)\nbperm\n\n\n    Monte-Carlo simulation of Geary C\n\ndata:  hunan$GDPPC \nweights: rswm_q \nnumber of simulations + 1: 1000 \n\nstatistic = 0.69072, observed rank = 1, p-value = 0.001\nalternative hypothesis: greater\n\n\n\n\n2.4.5.3 Visualising the Monte Carlo Geary’s C\nNext, we will plot a histogram to reveal the distribution of the simulated values by using the code chunk below.\n\nmean(bperm$res[1:999])\n\n[1] 1.004402\n\n\n\nvar(bperm$res[1:999])\n\n[1] 0.007436493\n\n\n\nsummary(bperm$res[1:999])\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n 0.7142  0.9502  1.0052  1.0044  1.0595  1.2722 \n\n\n\nhist(bperm$res, freq=TRUE, breaks=20, xlab=\"Simulated Geary c\")\nabline(v=1, col=\"red\")"
  },
  {
    "objectID": "Hands-on Ex/Hands-on Ex 2/Hands-on Exercise 2C.html#spatial-correlogram",
    "href": "Hands-on Ex/Hands-on Ex 2/Hands-on Exercise 2C.html#spatial-correlogram",
    "title": "Hands-on Exercise 2C: Local Measures of Spatial Autocorrelation",
    "section": "2.5 Spatial Correlogram",
    "text": "2.5 Spatial Correlogram\nSpatial correlograms are great to examine patterns of spatial autocorrelation in your data or model residuals. They show how correlated are pairs of spatial observations when you increase the distance (lag) between them - they are plots of some index of autocorrelation (Moran’s I or Geary’s c) against distance.Although correlograms are not as fundamental as variograms (a keystone concept of geostatistics), they are very useful as an exploratory and descriptive tool. For this purpose they actually provide richer information than variograms.\n\n2.5.1 Compute Moran’s I correlogram\nIn the code chunk below, sp.correlogram() of spdep package is used to compute a 6-lag spatial correlogram of GDPPC. The global spatial autocorrelation used in Moran’s I. The plot() of base Graph is then used to plot the output.\n\nMI_corr &lt;- sp.correlogram(wm_q, \n                          hunan$GDPPC, \n                          order=6, \n                          method=\"I\", \n                          style=\"W\")\nplot(MI_corr)\n\n\n\n\nBy plotting the output might not allow us to provide complete interpretation. This is because not all autocorrelation values are statistically significant. Hence, it is important for us to examine the full analysis report by printing out the analysis results as in the code chunk below.\n\nprint(MI_corr)\n\nSpatial correlogram for hunan$GDPPC \nmethod: Moran's I\n         estimate expectation   variance standard deviate Pr(I) two sided    \n1 (88)  0.3007500  -0.0114943  0.0043484           4.7351       2.189e-06 ***\n2 (88)  0.2060084  -0.0114943  0.0020962           4.7505       2.029e-06 ***\n3 (88)  0.0668273  -0.0114943  0.0014602           2.0496        0.040400 *  \n4 (88)  0.0299470  -0.0114943  0.0011717           1.2107        0.226015    \n5 (88) -0.1530471  -0.0114943  0.0012440          -4.0134       5.984e-05 ***\n6 (88) -0.1187070  -0.0114943  0.0016791          -2.6164        0.008886 ** \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\n\n\n\n2.5.2 Compute Geary’s C correlogram and plot\nIn the code chunk below, sp.correlogram() of spdep package is used to compute a 6-lag spatial correlogram of GDPPC. The global spatial autocorrelation used in Geary’s C. The plot() of base Graph is then used to plot the output.\n\nGC_corr &lt;- sp.correlogram(wm_q, \n                          hunan$GDPPC, \n                          order=6, \n                          method=\"C\", \n                          style=\"W\")\nplot(GC_corr)\n\n\n\n\nSimilar to the previous step, we will print out the analysis report by using the code chunk below.\n\nprint(GC_corr)\n\nSpatial correlogram for hunan$GDPPC \nmethod: Geary's C\n        estimate expectation  variance standard deviate Pr(I) two sided    \n1 (88) 0.6907223   1.0000000 0.0073364          -3.6108       0.0003052 ***\n2 (88) 0.7630197   1.0000000 0.0049126          -3.3811       0.0007220 ***\n3 (88) 0.9397299   1.0000000 0.0049005          -0.8610       0.3892612    \n4 (88) 1.0098462   1.0000000 0.0039631           0.1564       0.8757128    \n5 (88) 1.2008204   1.0000000 0.0035568           3.3673       0.0007592 ***\n6 (88) 1.0773386   1.0000000 0.0058042           1.0151       0.3100407    \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1"
  },
  {
    "objectID": "Hands-on Ex/Hands-on Ex 2/Hands-on Exercise 2C.html#cluster-and-outlier-analysis",
    "href": "Hands-on Ex/Hands-on Ex 2/Hands-on Exercise 2C.html#cluster-and-outlier-analysis",
    "title": "Hands-on Exercise 2C: Local Measures of Spatial Autocorrelation",
    "section": "2.6 Cluster and Outlier Analysis",
    "text": "2.6 Cluster and Outlier Analysis\nLocal Indicators of Spatial Association or LISA are statistics that evaluate the existence of clusters in the spatial arrangement of a given variable. For instance if we are studying cancer rates among census tracts in a given city local clusters in the rates mean that there are areas that have higher or lower rates than is to be expected by chance alone; that is, the values occurring are above or below those of a random distribution in space.\nIn this section, you will learn how to apply appropriate Local Indicators for Spatial Association (LISA), especially local Moran’I to detect cluster and/or outlier from GDP per capita 2012 of Hunan Province, PRC.\n\n2.6.1 Computing local Moran’s I\nTo compute local Moran’s I, the localmoran() function of spdep will be used. It computes Ii values, given a set of zi values and a listw object providing neighbour weighting information for the polygon associated with the zi values.\nThe code chunks below are used to compute local Moran’s I of GDPPC2012 at the county level.\n\nfips &lt;- order(hunan$County)\nlocalMI &lt;- localmoran(hunan$GDPPC, rswm_q)\nhead(localMI)\n\n            Ii          E.Ii       Var.Ii        Z.Ii Pr(z != E(Ii))\n1 -0.001468468 -2.815006e-05 4.723841e-04 -0.06626904      0.9471636\n2  0.025878173 -6.061953e-04 1.016664e-02  0.26266425      0.7928094\n3 -0.011987646 -5.366648e-03 1.133362e-01 -0.01966705      0.9843090\n4  0.001022468 -2.404783e-07 5.105969e-06  0.45259801      0.6508382\n5  0.014814881 -6.829362e-05 1.449949e-03  0.39085814      0.6959021\n6 -0.038793829 -3.860263e-04 6.475559e-03 -0.47728835      0.6331568\n\n\nlocalmoran() function returns a matrix of values whose columns are:\n\nIi: the local Moran’s I statistics\nE.Ii: the expectation of local moran statistic under the randomisation hypothesis\nVar.Ii: the variance of local moran statistic under the randomisation hypothesis\nZ.Ii:the standard deviate of local moran statistic\nPr(): the p-value of local moran statistic\n\nThe code chunk below list the content of the local Moran matrix derived by using printCoefmat().\n\nprintCoefmat(data.frame(\n  localMI[fips,], \n  row.names=hunan$County[fips]),\n  check.names=FALSE)\n\n                       Ii        E.Ii      Var.Ii        Z.Ii Pr.z....E.Ii..\nAnhua         -2.2493e-02 -5.0048e-03  5.8235e-02 -7.2467e-02         0.9422\nAnren         -3.9932e-01 -7.0111e-03  7.0348e-02 -1.4791e+00         0.1391\nAnxiang       -1.4685e-03 -2.8150e-05  4.7238e-04 -6.6269e-02         0.9472\nBaojing        3.4737e-01 -5.0089e-03  8.3636e-02  1.2185e+00         0.2230\nChaling        2.0559e-02 -9.6812e-04  2.7711e-02  1.2932e-01         0.8971\nChangning     -2.9868e-05 -9.0010e-09  1.5105e-07 -7.6828e-02         0.9388\nChangsha       4.9022e+00 -2.1348e-01  2.3194e+00  3.3590e+00         0.0008\nChengbu        7.3725e-01 -1.0534e-02  2.2132e-01  1.5895e+00         0.1119\nChenxi         1.4544e-01 -2.8156e-03  4.7116e-02  6.8299e-01         0.4946\nCili           7.3176e-02 -1.6747e-03  4.7902e-02  3.4200e-01         0.7324\nDao            2.1420e-01 -2.0824e-03  4.4123e-02  1.0297e+00         0.3032\nDongan         1.5210e-01 -6.3485e-04  1.3471e-02  1.3159e+00         0.1882\nDongkou        5.2918e-01 -6.4461e-03  1.0748e-01  1.6338e+00         0.1023\nFenghuang      1.8013e-01 -6.2832e-03  1.3257e-01  5.1198e-01         0.6087\nGuidong       -5.9160e-01 -1.3086e-02  3.7003e-01 -9.5104e-01         0.3416\nGuiyang        1.8240e-01 -3.6908e-03  3.2610e-02  1.0305e+00         0.3028\nGuzhang        2.8466e-01 -8.5054e-03  1.4152e-01  7.7931e-01         0.4358\nHanshou        2.5878e-02 -6.0620e-04  1.0167e-02  2.6266e-01         0.7928\nHengdong       9.9964e-03 -4.9063e-04  6.7742e-03  1.2742e-01         0.8986\nHengnan        2.8064e-02 -3.2160e-04  3.7597e-03  4.6294e-01         0.6434\nHengshan      -5.8201e-03 -3.0437e-05  5.1076e-04 -2.5618e-01         0.7978\nHengyang       6.2997e-02 -1.3046e-03  2.1865e-02  4.3486e-01         0.6637\nHongjiang      1.8790e-01 -2.3019e-03  3.1725e-02  1.0678e+00         0.2856\nHuarong       -1.5389e-02 -1.8667e-03  8.1030e-02 -4.7503e-02         0.9621\nHuayuan        8.3772e-02 -8.5569e-04  2.4495e-02  5.4072e-01         0.5887\nHuitong        2.5997e-01 -5.2447e-03  1.1077e-01  7.9685e-01         0.4255\nJiahe         -1.2431e-01 -3.0550e-03  5.1111e-02 -5.3633e-01         0.5917\nJianghua       2.8651e-01 -3.8280e-03  8.0968e-02  1.0204e+00         0.3076\nJiangyong      2.4337e-01 -2.7082e-03  1.1746e-01  7.1800e-01         0.4728\nJingzhou       1.8270e-01 -8.5106e-04  2.4363e-02  1.1759e+00         0.2396\nJinshi        -1.1988e-02 -5.3666e-03  1.1334e-01 -1.9667e-02         0.9843\nJishou        -2.8680e-01 -2.6305e-03  4.4028e-02 -1.3543e+00         0.1756\nLanshan        6.3334e-02 -9.6365e-04  2.0441e-02  4.4972e-01         0.6529\nLeiyang        1.1581e-02 -1.4948e-04  2.5082e-03  2.3422e-01         0.8148\nLengshuijiang -1.7903e+00 -8.2129e-02  2.1598e+00 -1.1623e+00         0.2451\nLi             1.0225e-03 -2.4048e-07  5.1060e-06  4.5260e-01         0.6508\nLianyuan      -1.4672e-01 -1.8983e-03  1.9145e-02 -1.0467e+00         0.2952\nLiling         1.3774e+00 -1.5097e-02  4.2601e-01  2.1335e+00         0.0329\nLinli          1.4815e-02 -6.8294e-05  1.4499e-03  3.9086e-01         0.6959\nLinwu         -2.4621e-03 -9.0703e-06  1.9258e-04 -1.7676e-01         0.8597\nLinxiang       6.5904e-02 -2.9028e-03  2.5470e-01  1.3634e-01         0.8916\nLiuyang        3.3688e+00 -7.7502e-02  1.5180e+00  2.7972e+00         0.0052\nLonghui        8.0801e-01 -1.1377e-02  1.5538e-01  2.0787e+00         0.0376\nLongshan       7.5663e-01 -1.1100e-02  3.1449e-01  1.3690e+00         0.1710\nLuxi           1.8177e-01 -2.4855e-03  3.4249e-02  9.9561e-01         0.3194\nMayang         2.1852e-01 -5.8773e-03  9.8049e-02  7.1663e-01         0.4736\nMiluo          1.8704e+00 -1.6927e-02  2.7925e-01  3.5715e+00         0.0004\nNan           -9.5789e-03 -4.9497e-04  6.8341e-03 -1.0988e-01         0.9125\nNingxiang      1.5607e+00 -7.3878e-02  8.0012e-01  1.8274e+00         0.0676\nNingyuan       2.0910e-01 -7.0884e-03  8.2306e-02  7.5356e-01         0.4511\nPingjiang     -9.8964e-01 -2.6457e-03  5.6027e-02 -4.1698e+00         0.0000\nQidong         1.1806e-01 -2.1207e-03  2.4747e-02  7.6396e-01         0.4449\nQiyang         6.1966e-02 -7.3374e-04  8.5743e-03  6.7712e-01         0.4983\nRucheng       -3.6992e-01 -8.8999e-03  2.5272e-01 -7.1814e-01         0.4727\nSangzhi        2.5053e-01 -4.9470e-03  6.8000e-02  9.7972e-01         0.3272\nShaodong      -3.2659e-02 -3.6592e-05  5.0546e-04 -1.4510e+00         0.1468\nShaoshan       2.1223e+00 -5.0227e-02  1.3668e+00  1.8583e+00         0.0631\nShaoyang       5.9499e-01 -1.1253e-02  1.3012e-01  1.6807e+00         0.0928\nShimen        -3.8794e-02 -3.8603e-04  6.4756e-03 -4.7729e-01         0.6332\nShuangfeng     9.2835e-03 -2.2867e-03  3.1516e-02  6.5174e-02         0.9480\nShuangpai      8.0591e-02 -3.1366e-04  8.9838e-03  8.5358e-01         0.3933\nSuining        3.7585e-01 -3.5933e-03  4.1870e-02  1.8544e+00         0.0637\nTaojiang      -2.5394e-01 -1.2395e-03  1.4477e-02 -2.1002e+00         0.0357\nTaoyuan        1.4729e-02 -1.2039e-04  8.5103e-04  5.0903e-01         0.6107\nTongdao        4.6482e-01 -6.9870e-03  1.9879e-01  1.0582e+00         0.2900\nWangcheng      4.4220e+00 -1.1067e-01  1.3596e+00  3.8873e+00         0.0001\nWugang         7.1003e-01 -7.8144e-03  1.0710e-01  2.1935e+00         0.0283\nXiangtan       2.4530e-01 -3.6457e-04  3.2319e-03  4.3213e+00         0.0000\nXiangxiang     2.6271e-01 -1.2703e-03  2.1290e-02  1.8092e+00         0.0704\nXiangyin       5.4525e-01 -4.7442e-03  7.9236e-02  1.9539e+00         0.0507\nXinhua         1.1810e-01 -6.2649e-03  8.6001e-02  4.2409e-01         0.6715\nXinhuang       1.5725e-01 -4.1820e-03  3.6648e-01  2.6667e-01         0.7897\nXinning        6.8928e-01 -9.6674e-03  2.0328e-01  1.5502e+00         0.1211\nXinshao        5.7578e-02 -8.5932e-03  1.1769e-01  1.9289e-01         0.8470\nXintian       -7.4050e-03 -5.1493e-03  1.0877e-01 -6.8395e-03         0.9945\nXupu           3.2406e-01 -5.7468e-03  5.7735e-02  1.3726e+00         0.1699\nYanling       -6.9021e-02 -5.9211e-04  9.9306e-03 -6.8667e-01         0.4923\nYizhang       -2.6844e-01 -2.2463e-03  4.7588e-02 -1.2202e+00         0.2224\nYongshun       6.3064e-01 -1.1350e-02  1.8830e-01  1.4795e+00         0.1390\nYongxing       4.3411e-01 -9.0735e-03  1.5088e-01  1.1409e+00         0.2539\nYou            7.8750e-02 -7.2728e-03  1.2116e-01  2.4714e-01         0.8048\nYuanjiang      2.0004e-04 -1.7760e-04  2.9798e-03  6.9181e-03         0.9945\nYuanling       8.7298e-03 -2.2981e-06  2.3221e-05  1.8121e+00         0.0700\nYueyang        4.1189e-02 -1.9768e-04  2.3113e-03  8.6085e-01         0.3893\nZhijiang       1.0476e-01 -7.8123e-04  1.3100e-02  9.2214e-01         0.3565\nZhongfang     -2.2685e-01 -2.1455e-03  3.5927e-02 -1.1855e+00         0.2358\nZhuzhou        3.2864e-01 -5.2432e-04  7.2391e-03  3.8688e+00         0.0001\nZixing        -7.6849e-01 -8.8210e-02  9.4057e-01 -7.0144e-01         0.4830\n\n\n\n2.6.1.1 Mapping the local Moran’s I\nBefore mapping the local Moran’s I map, it is wise to append the local Moran’s I dataframe (i.e. localMI) onto hunan SpatialPolygonDataFrame. The code chunks below can be used to perform the task. The out SpatialPolygonDataFrame is called hunan.localMI.\n\nhunan.localMI &lt;- cbind(hunan,localMI) %&gt;%\n  rename(Pr.Ii = Pr.z....E.Ii..)\n\n\n\n2.6.1.2 Mapping local Moran’s I values\nUsing choropleth mapping functions of tmap package, we can plot the local Moran’s I values by using the code chinks below.\n\ntm_shape(hunan.localMI) +\n  tm_fill(col = \"Ii\", \n          style = \"pretty\",\n          palette = \"RdBu\",\n          title = \"local moran statistics\") +\n  tm_borders(alpha = 0.5)\n\n\n\n\n\n\n2.6.1.3 Mapping local Moran’s I p-values\nThe choropleth shows there is evidence for both positive and negative Ii values. However, it is useful to consider the p-values for each of these values, as consider above.\nThe code chunks below produce a choropleth map of Moran’s I p-values by using functions of tmap package.\n\ntm_shape(hunan.localMI) +\n  tm_fill(col = \"Pr.Ii\", \n          breaks=c(-Inf, 0.001, 0.01, 0.05, 0.1, Inf),\n          palette=\"-Blues\", \n          title = \"local Moran's I p-values\") +\n  tm_borders(alpha = 0.5)\n\n\n\n\n\n\n2.6.1.4 Mapping both local Moran’s I values and p-values\nFor effective interpretation, it is better to plot both the local Moran’s I values map and its corresponding p-values map next to each other.\nThe code chunk below will be used to create such visualisation.\n\nlocalMI.map &lt;- tm_shape(hunan.localMI) +\n  tm_fill(col = \"Ii\", \n          style = \"pretty\", \n          title = \"local moran statistics\") +\n  tm_borders(alpha = 0.5)\n\npvalue.map &lt;- tm_shape(hunan.localMI) +\n  tm_fill(col = \"Pr.Ii\", \n          breaks=c(-Inf, 0.001, 0.01, 0.05, 0.1, Inf),\n          palette=\"-Blues\", \n          title = \"local Moran's I p-values\") +\n  tm_borders(alpha = 0.5)\n\ntmap_arrange(localMI.map, pvalue.map, asp=1, ncol=2)"
  },
  {
    "objectID": "Hands-on Ex/Hands-on Ex 2/Hands-on Exercise 2C.html#creating-a-lisa-cluster-map",
    "href": "Hands-on Ex/Hands-on Ex 2/Hands-on Exercise 2C.html#creating-a-lisa-cluster-map",
    "title": "Hands-on Exercise 2C: Local Measures of Spatial Autocorrelation",
    "section": "2.7 Creating a LISA Cluster Map",
    "text": "2.7 Creating a LISA Cluster Map\nThe LISA Cluster Map shows the significant locations color coded by type of spatial autocorrelation. The first step before we can generate the LISA cluster map is to plot the Moran scatterplot.\n\n2.7.1 Plotting Moran scatterplot\nThe Moran scatterplot is an illustration of the relationship between the values of the chosen attribute at each location and the average value of the same attribute at neighboring locations.\nThe code chunk below plots the Moran scatterplot of GDPPC 2012 by using moran.plot() of spdep.\n\nnci &lt;- moran.plot(hunan$GDPPC, rswm_q,\n                  labels=as.character(hunan$County), \n                  xlab=\"GDPPC 2012\", \n                  ylab=\"Spatially Lag GDPPC 2012\")\n\n\n\n\nNotice that the plot is split in 4 quadrants. The top right corner belongs to areas that have high GDPPC and are surrounded by other areas that have the average level of GDPPC. This are the high-high locations in the lesson slide.\n\n\n2.7.2 Plotting Moran scatterplot with standardised variable\nFirst we will use scale() to centers and scales the variable. Here centering is done by subtracting the mean (omitting NAs) the corresponding columns, and scaling is done by dividing the (centered) variable by their standard deviations.\n\nhunan$Z.GDPPC &lt;- scale(hunan$GDPPC) %&gt;% \n  as.vector \n\nThe as.vector() added to the end is to make sure that the data type we get out of this is a vector, that map neatly into out dataframe.\nNow, we are ready to plot the Moran scatterplot again by using the code chunk below.\n\nnci2 &lt;- moran.plot(hunan$Z.GDPPC, rswm_q,\n                   labels=as.character(hunan$County),\n                   xlab=\"z-GDPPC 2012\", \n                   ylab=\"Spatially Lag z-GDPPC 2012\")\n\n\n\n\n\n\n2.7.3 Preparing LISA map classes\nThe code chunks below show the steps to prepare a LISA cluster map.\n\nquadrant &lt;- vector(mode=\"numeric\",length=nrow(localMI))\n\nNext, derives the spatially lagged variable of interest (i.e. GDPPC) and centers the spatially lagged variable around its mean.\n\nhunan$lag_GDPPC &lt;- lag.listw(rswm_q, hunan$GDPPC)\nDV &lt;- hunan$lag_GDPPC - mean(hunan$lag_GDPPC)     \n\nThis is follow by centering the local Moran’s around the mean.\n\nLM_I &lt;- localMI[,1] - mean(localMI[,1])    \n\nNext, we will set a statistical significance level for the local Moran.\n\nsignif &lt;- 0.05       \n\nThese four command lines define the low-low (1), low-high (2), high-low (3) and high-high (4) categories.\n\nquadrant[DV &lt;0 & LM_I&gt;0] &lt;- 1\nquadrant[DV &gt;0 & LM_I&lt;0] &lt;- 2\nquadrant[DV &lt;0 & LM_I&lt;0] &lt;- 3  \nquadrant[DV &gt;0 & LM_I&gt;0] &lt;- 4      \n\nLastly, places non-significant Moran in the category 0.\n\nquadrant[localMI[,5]&gt;signif] &lt;- 0\n\nIn fact, we can combined all the steps into one single code chunk as shown below:\n\nquadrant &lt;- vector(mode=\"numeric\",length=nrow(localMI))\nhunan$lag_GDPPC &lt;- lag.listw(rswm_q, hunan$GDPPC)\nDV &lt;- hunan$lag_GDPPC - mean(hunan$lag_GDPPC)     \nLM_I &lt;- localMI[,1]   \nsignif &lt;- 0.05       \nquadrant[DV &lt;0 & LM_I&gt;0] &lt;- 1\nquadrant[DV &gt;0 & LM_I&lt;0] &lt;- 2\nquadrant[DV &lt;0 & LM_I&lt;0] &lt;- 3  \nquadrant[DV &gt;0 & LM_I&gt;0] &lt;- 4    \nquadrant[localMI[,5]&gt;signif] &lt;- 0\n\n\n\n2.7.4 Plotting LISA map\nNow, we can build the LISA map by using the code chunks below.\n\nhunan.localMI$quadrant &lt;- quadrant\ncolors &lt;- c(\"#ffffff\", \"#2c7bb6\", \"#abd9e9\", \"#fdae61\", \"#d7191c\")\nclusters &lt;- c(\"insignificant\", \"low-low\", \"low-high\", \"high-low\", \"high-high\")\n\ntm_shape(hunan.localMI) +\n  tm_fill(col = \"quadrant\", \n          style = \"cat\", \n          palette = colors[c(sort(unique(quadrant)))+1], \n          labels = clusters[c(sort(unique(quadrant)))+1],\n          popup.vars = c(\"\")) +\n  tm_view(set.zoom.limits = c(11,17)) +\n  tm_borders(alpha=0.5)\n\n\n\n\nFor effective interpretation, it is better to plot both the local Moran’s I values map and its corresponding p-values map next to each other.\nThe code chunk below will be used to create such visualisation.\n\ngdppc &lt;- qtm(hunan, \"GDPPC\")\n\nhunan.localMI$quadrant &lt;- quadrant\ncolors &lt;- c(\"#ffffff\", \"#2c7bb6\", \"#abd9e9\", \"#fdae61\", \"#d7191c\")\nclusters &lt;- c(\"insignificant\", \"low-low\", \"low-high\", \"high-low\", \"high-high\")\n\nLISAmap &lt;- tm_shape(hunan.localMI) +\n  tm_fill(col = \"quadrant\", \n          style = \"cat\", \n          palette = colors[c(sort(unique(quadrant)))+1], \n          labels = clusters[c(sort(unique(quadrant)))+1],\n          popup.vars = c(\"\")) +\n  tm_view(set.zoom.limits = c(11,17)) +\n  tm_borders(alpha=0.5)\n\ntmap_arrange(gdppc, LISAmap, \n             asp=1, ncol=2)"
  },
  {
    "objectID": "Hands-on Ex/Hands-on Ex 2/Hands-on Exercise 2C.html#hot-spot-and-cold-spot-area-analysis",
    "href": "Hands-on Ex/Hands-on Ex 2/Hands-on Exercise 2C.html#hot-spot-and-cold-spot-area-analysis",
    "title": "Hands-on Exercise 2C: Local Measures of Spatial Autocorrelation",
    "section": "2.8 Hot Spot and Cold Spot Area Analysis",
    "text": "2.8 Hot Spot and Cold Spot Area Analysis\nBeside detecting cluster and outliers, localised spatial statistics can be also used to detect hot spot and/or cold spot areas.\nThe term ‘hot spot’ has been used generically across disciplines to describe a region or value that is higher relative to its surroundings (Lepers et al 2005, Aben et al 2012, Isobe et al 2015).\n\n2.8.1 Getis and Ord’s G-Statistics\nAn alternative spatial statistics to detect spatial anomalies is the Getis and Ord’s G-statistics (Getis and Ord, 1972; Ord and Getis, 1995). It looks at neighbours within a defined proximity to identify where either high or low values clutser spatially. Here, statistically significant hot-spots are recognised as areas of high values where other areas within a neighbourhood range also share high values too.\nThe analysis consists of three steps:\n\nDeriving spatial weight matrix\nComputing Gi statistics\nMapping Gi statistics\n\n\n\n2.8.2 Deriving distance-based weight matrix\nFirst, we need to define a new set of neighbours. Whist the spatial autocorrelation considered units which shared borders, for Getis-Ord we are defining neighbours based on distance.\nThere are two type of distance-based proximity matrix, they are:\n\nfixed distance weight matrix; and\nadaptive distance weight matrix.\n\n\n2.8.2.1 Deriving the centroid\nWe will need points to associate with each polygon before we can make our connectivity graph. It will be a little more complicated than just running st_centroid() on the sf object: us.bound. We need the coordinates in a separate data frame for this to work. To do this we will use a mapping function. The mapping function applies a given function to each element of a vector and returns a vector of the same length. Our input vector will be the geometry column of us.bound. Our function will be st_centroid(). We will be using map_dbl variation of map from the purrr package. For more documentation, check out map documentation\nTo get our longitude values we map the st_centroid() function over the geometry column of us.bound and access the longitude value through double bracket notation [[]] and 1. This allows us to get only the longitude, which is the first value in each centroid.\n\nlongitude &lt;- map_dbl(hunan$geometry, ~st_centroid(.x)[[1]])\n\nWe do the same for latitude with one key difference. We access the second value per each centroid with [[2]].\n\nlatitude &lt;- map_dbl(hunan$geometry, ~st_centroid(.x)[[2]])\n\nNow that we have latitude and longitude, we use cbind to put longitude and latitude into the same object.\n\ncoords &lt;- cbind(longitude, latitude)\n\n\n\n2.8.2.2 Determine the cut-off distance\nFirstly, we need to determine the upper limit for distance band by using the steps below:\n\nReturn a matrix with the indices of points belonging to the set of the k nearest neighbours of each other by using knearneigh() of spdep.\nConvert the knn object returned by knearneigh() into a neighbours list of class nb with a list of integer vectors containing neighbour region number ids by using knn2nb().\nReturn the length of neighbour relationship edges by using nbdists() of spdep. The function returns in the units of the coordinates if the coordinates are projected, in km otherwise.\nRemove the list structure of the returned object by using unlist().\n\n\n#coords &lt;- coordinates(hunan)\nk1 &lt;- knn2nb(knearneigh(coords))\nk1dists &lt;- unlist(nbdists(k1, coords, longlat = TRUE))\nsummary(k1dists)\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n  24.79   32.57   38.01   39.07   44.52   61.79 \n\n\nThe summary report shows that the largest first nearest neighbour distance is 61.79 km, so using this as the upper threshold gives certainty that all units will have at least one neighbour.\n\n\n2.8.2.3 Computing fixed distance weight matrix\nNow, we will compute the distance weight matrix by using dnearneigh() as shown in the code chunk below.\n\nwm_d62 &lt;- dnearneigh(coords, 0, 62, longlat = TRUE)\nwm_d62\n\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 324 \nPercentage nonzero weights: 4.183884 \nAverage number of links: 3.681818 \n\n\nNext, nb2listw() is used to convert the nb object into spatial weights object.\n\nwm62_lw &lt;- nb2listw(wm_d62, style = 'B')\nsummary(wm62_lw)\n\nCharacteristics of weights list object:\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 324 \nPercentage nonzero weights: 4.183884 \nAverage number of links: 3.681818 \nLink number distribution:\n\n 1  2  3  4  5  6 \n 6 15 14 26 20  7 \n6 least connected regions:\n6 15 30 32 56 65 with 1 link\n7 most connected regions:\n21 28 35 45 50 52 82 with 6 links\n\nWeights style: B \nWeights constants summary:\n   n   nn  S0  S1   S2\nB 88 7744 324 648 5440\n\n\nThe output spatial weights object is called wm62_lw.\n\n\n\n2.8.3 Computing adaptive distance weight matrix\nOne of the characteristics of fixed distance weight matrix is that more densely settled areas (usually the urban areas) tend to have more neighbours and the less densely settled areas (usually the rural counties) tend to have lesser neighbours. Having many neighbours smoothes the neighbour relationship across more neighbours.\nIt is possible to control the numbers of neighbours directly using k-nearest neighbours, either accepting asymmetric neighbours or imposing symmetry as shown in the code chunk below.\n\nknn &lt;- knn2nb(knearneigh(coords, k=8))\nknn\n\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 704 \nPercentage nonzero weights: 9.090909 \nAverage number of links: 8 \nNon-symmetric neighbours list\n\n\nNext, nb2listw() is used to convert the nb object into spatial weights object.\n\nknn_lw &lt;- nb2listw(knn, style = 'B')\nsummary(knn_lw)\n\nCharacteristics of weights list object:\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 704 \nPercentage nonzero weights: 9.090909 \nAverage number of links: 8 \nNon-symmetric neighbours list\nLink number distribution:\n\n 8 \n88 \n88 least connected regions:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 with 8 links\n88 most connected regions:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 with 8 links\n\nWeights style: B \nWeights constants summary:\n   n   nn  S0   S1    S2\nB 88 7744 704 1300 23014"
  },
  {
    "objectID": "Hands-on Ex/Hands-on Ex 2/Hands-on Exercise 2C.html#computing-gi-statistics",
    "href": "Hands-on Ex/Hands-on Ex 2/Hands-on Exercise 2C.html#computing-gi-statistics",
    "title": "Hands-on Exercise 2C: Local Measures of Spatial Autocorrelation",
    "section": "2.9 Computing Gi statistics",
    "text": "2.9 Computing Gi statistics\n\n2.9.1 Gi statistics using fixed distance\n\nfips &lt;- order(hunan$County)\ngi.fixed &lt;- localG(hunan$GDPPC, wm62_lw)\ngi.fixed\n\n [1]  0.436075843 -0.265505650 -0.073033665  0.413017033  0.273070579\n [6] -0.377510776  2.863898821  2.794350420  5.216125401  0.228236603\n[11]  0.951035346 -0.536334231  0.176761556  1.195564020 -0.033020610\n[16]  1.378081093 -0.585756761 -0.419680565  0.258805141  0.012056111\n[21] -0.145716531 -0.027158687 -0.318615290 -0.748946051 -0.961700582\n[26] -0.796851342 -1.033949773 -0.460979158 -0.885240161 -0.266671512\n[31] -0.886168613 -0.855476971 -0.922143185 -1.162328599  0.735582222\n[36] -0.003358489 -0.967459309 -1.259299080 -1.452256513 -1.540671121\n[41] -1.395011407 -1.681505286 -1.314110709 -0.767944457 -0.192889342\n[46]  2.720804542  1.809191360 -1.218469473 -0.511984469 -0.834546363\n[51] -0.908179070 -1.541081516 -1.192199867 -1.075080164 -1.631075961\n[56] -0.743472246  0.418842387  0.832943753 -0.710289083 -0.449718820\n[61] -0.493238743 -1.083386776  0.042979051  0.008596093  0.136337469\n[66]  2.203411744  2.690329952  4.453703219 -0.340842743 -0.129318589\n[71]  0.737806634 -1.246912658  0.666667559  1.088613505 -0.985792573\n[76]  1.233609606 -0.487196415  1.626174042 -1.060416797  0.425361422\n[81] -0.837897118 -0.314565243  0.371456331  4.424392623 -0.109566928\n[86]  1.364597995 -1.029658605 -0.718000620\nattr(,\"internals\")\n               Gi      E(Gi)        V(Gi)        Z(Gi) Pr(z != E(Gi))\n [1,] 0.064192949 0.05747126 2.375922e-04  0.436075843   6.627817e-01\n [2,] 0.042300020 0.04597701 1.917951e-04 -0.265505650   7.906200e-01\n [3,] 0.044961480 0.04597701 1.933486e-04 -0.073033665   9.417793e-01\n [4,] 0.039475779 0.03448276 1.461473e-04  0.413017033   6.795941e-01\n [5,] 0.049767939 0.04597701 1.927263e-04  0.273070579   7.847990e-01\n [6,] 0.008825335 0.01149425 4.998177e-05 -0.377510776   7.057941e-01\n [7,] 0.050807266 0.02298851 9.435398e-05  2.863898821   4.184617e-03\n [8,] 0.083966739 0.04597701 1.848292e-04  2.794350420   5.200409e-03\n [9,] 0.115751554 0.04597701 1.789361e-04  5.216125401   1.827045e-07\n[10,] 0.049115587 0.04597701 1.891013e-04  0.228236603   8.194623e-01\n[11,] 0.045819180 0.03448276 1.420884e-04  0.951035346   3.415864e-01\n[12,] 0.049183846 0.05747126 2.387633e-04 -0.536334231   5.917276e-01\n[13,] 0.048429181 0.04597701 1.924532e-04  0.176761556   8.596957e-01\n[14,] 0.034733752 0.02298851 9.651140e-05  1.195564020   2.318667e-01\n[15,] 0.011262043 0.01149425 4.945294e-05 -0.033020610   9.736582e-01\n[16,] 0.065131196 0.04597701 1.931870e-04  1.378081093   1.681783e-01\n[17,] 0.027587075 0.03448276 1.385862e-04 -0.585756761   5.580390e-01\n[18,] 0.029409313 0.03448276 1.461397e-04 -0.419680565   6.747188e-01\n[19,] 0.061466754 0.05747126 2.383385e-04  0.258805141   7.957856e-01\n[20,] 0.057656917 0.05747126 2.371303e-04  0.012056111   9.903808e-01\n[21,] 0.066518379 0.06896552 2.820326e-04 -0.145716531   8.841452e-01\n[22,] 0.045599896 0.04597701 1.928108e-04 -0.027158687   9.783332e-01\n[23,] 0.030646753 0.03448276 1.449523e-04 -0.318615290   7.500183e-01\n[24,] 0.035635552 0.04597701 1.906613e-04 -0.748946051   4.538897e-01\n[25,] 0.032606647 0.04597701 1.932888e-04 -0.961700582   3.362000e-01\n[26,] 0.035001352 0.04597701 1.897172e-04 -0.796851342   4.255374e-01\n[27,] 0.012746354 0.02298851 9.812587e-05 -1.033949773   3.011596e-01\n[28,] 0.061287917 0.06896552 2.773884e-04 -0.460979158   6.448136e-01\n[29,] 0.014277403 0.02298851 9.683314e-05 -0.885240161   3.760271e-01\n[30,] 0.009622875 0.01149425 4.924586e-05 -0.266671512   7.897221e-01\n[31,] 0.014258398 0.02298851 9.705244e-05 -0.886168613   3.755267e-01\n[32,] 0.005453443 0.01149425 4.986245e-05 -0.855476971   3.922871e-01\n[33,] 0.043283712 0.05747126 2.367109e-04 -0.922143185   3.564539e-01\n[34,] 0.020763514 0.03448276 1.393165e-04 -1.162328599   2.451020e-01\n[35,] 0.081261843 0.06896552 2.794398e-04  0.735582222   4.619850e-01\n[36,] 0.057419907 0.05747126 2.338437e-04 -0.003358489   9.973203e-01\n[37,] 0.013497133 0.02298851 9.624821e-05 -0.967459309   3.333145e-01\n[38,] 0.019289310 0.03448276 1.455643e-04 -1.259299080   2.079223e-01\n[39,] 0.025996272 0.04597701 1.892938e-04 -1.452256513   1.464303e-01\n[40,] 0.016092694 0.03448276 1.424776e-04 -1.540671121   1.233968e-01\n[41,] 0.035952614 0.05747126 2.379439e-04 -1.395011407   1.630124e-01\n[42,] 0.031690963 0.05747126 2.350604e-04 -1.681505286   9.266481e-02\n[43,] 0.018750079 0.03448276 1.433314e-04 -1.314110709   1.888090e-01\n[44,] 0.015449080 0.02298851 9.638666e-05 -0.767944457   4.425202e-01\n[45,] 0.065760689 0.06896552 2.760533e-04 -0.192889342   8.470456e-01\n[46,] 0.098966900 0.05747126 2.326002e-04  2.720804542   6.512325e-03\n[47,] 0.085415780 0.05747126 2.385746e-04  1.809191360   7.042128e-02\n[48,] 0.038816536 0.05747126 2.343951e-04 -1.218469473   2.230456e-01\n[49,] 0.038931873 0.04597701 1.893501e-04 -0.511984469   6.086619e-01\n[50,] 0.055098610 0.06896552 2.760948e-04 -0.834546363   4.039732e-01\n[51,] 0.033405005 0.04597701 1.916312e-04 -0.908179070   3.637836e-01\n[52,] 0.043040784 0.06896552 2.829941e-04 -1.541081516   1.232969e-01\n[53,] 0.011297699 0.02298851 9.615920e-05 -1.192199867   2.331829e-01\n[54,] 0.040968457 0.05747126 2.356318e-04 -1.075080164   2.823388e-01\n[55,] 0.023629663 0.04597701 1.877170e-04 -1.631075961   1.028743e-01\n[56,] 0.006281129 0.01149425 4.916619e-05 -0.743472246   4.571958e-01\n[57,] 0.063918654 0.05747126 2.369553e-04  0.418842387   6.753313e-01\n[58,] 0.070325003 0.05747126 2.381374e-04  0.832943753   4.048765e-01\n[59,] 0.025947288 0.03448276 1.444058e-04 -0.710289083   4.775249e-01\n[60,] 0.039752578 0.04597701 1.915656e-04 -0.449718820   6.529132e-01\n[61,] 0.049934283 0.05747126 2.334965e-04 -0.493238743   6.218439e-01\n[62,] 0.030964195 0.04597701 1.920248e-04 -1.083386776   2.786368e-01\n[63,] 0.058129184 0.05747126 2.343319e-04  0.042979051   9.657182e-01\n[64,] 0.046096514 0.04597701 1.932637e-04  0.008596093   9.931414e-01\n[65,] 0.012459080 0.01149425 5.008051e-05  0.136337469   8.915545e-01\n[66,] 0.091447733 0.05747126 2.377744e-04  2.203411744   2.756574e-02\n[67,] 0.049575872 0.02298851 9.766513e-05  2.690329952   7.138140e-03\n[68,] 0.107907212 0.04597701 1.933581e-04  4.453703219   8.440175e-06\n[69,] 0.019616151 0.02298851 9.789454e-05 -0.340842743   7.332220e-01\n[70,] 0.032923393 0.03448276 1.454032e-04 -0.129318589   8.971056e-01\n[71,] 0.030317663 0.02298851 9.867859e-05  0.737806634   4.606320e-01\n[72,] 0.019437582 0.03448276 1.455870e-04 -1.246912658   2.124295e-01\n[73,] 0.055245460 0.04597701 1.932838e-04  0.666667559   5.049845e-01\n[74,] 0.074278054 0.05747126 2.383538e-04  1.088613505   2.763244e-01\n[75,] 0.013269580 0.02298851 9.719982e-05 -0.985792573   3.242349e-01\n[76,] 0.049407829 0.03448276 1.463785e-04  1.233609606   2.173484e-01\n[77,] 0.028605749 0.03448276 1.455139e-04 -0.487196415   6.261191e-01\n[78,] 0.039087662 0.02298851 9.801040e-05  1.626174042   1.039126e-01\n[79,] 0.031447120 0.04597701 1.877464e-04 -1.060416797   2.889550e-01\n[80,] 0.064005294 0.05747126 2.359641e-04  0.425361422   6.705732e-01\n[81,] 0.044606529 0.05747126 2.357330e-04 -0.837897118   4.020885e-01\n[82,] 0.063700493 0.06896552 2.801427e-04 -0.314565243   7.530918e-01\n[83,] 0.051142205 0.04597701 1.933560e-04  0.371456331   7.102977e-01\n[84,] 0.102121112 0.04597701 1.610278e-04  4.424392623   9.671399e-06\n[85,] 0.021901462 0.02298851 9.843172e-05 -0.109566928   9.127528e-01\n[86,] 0.064931813 0.04597701 1.929430e-04  1.364597995   1.723794e-01\n[87,] 0.031747344 0.04597701 1.909867e-04 -1.029658605   3.031703e-01\n[88,] 0.015893319 0.02298851 9.765131e-05 -0.718000620   4.727569e-01\nattr(,\"cluster\")\n [1] Low  Low  High High High High High High High Low  Low  High Low  Low  Low \n[16] High High High High Low  High High Low  Low  High Low  Low  Low  Low  Low \n[31] Low  Low  Low  High Low  Low  Low  Low  Low  Low  High Low  Low  Low  Low \n[46] High High Low  Low  Low  Low  High Low  Low  Low  Low  Low  High Low  Low \n[61] Low  Low  Low  High High High Low  High Low  Low  High Low  High High Low \n[76] High Low  Low  Low  Low  Low  Low  High High Low  High Low  Low \nLevels: Low High\nattr(,\"gstari\")\n[1] FALSE\nattr(,\"call\")\nlocalG(x = hunan$GDPPC, listw = wm62_lw)\nattr(,\"class\")\n[1] \"localG\"\n\n\nThe output of localG() is a vector of G or Gstar values, with attributes “gstari” set to TRUE or FALSE, “call” set to the function call, and class “localG”.\nThe Gi statistics is represented as a Z-score. Greater values represent a greater intensity of clustering and the direction (positive or negative) indicates high or low clusters.\nNext, we will join the Gi values to their corresponding hunan sf data frame by using the code chunk below.\n\nhunan.gi &lt;- cbind(hunan, as.matrix(gi.fixed)) %&gt;%\n  rename(gstat_fixed = as.matrix.gi.fixed.)\n\nIn fact, the code chunk above performs three tasks. First, it convert the output vector (i.e. gi.fixed) into r matrix object by using as.matrix(). Next, cbind() is used to join hunan@data and gi.fixed matrix to produce a new SpatialPolygonDataFrame called hunan.gi. Lastly, the field name of the gi values is renamed to gstat_fixed by using rename().\n\n\n2.9.2 Mapping Gi values with fixed distance weights\nThe code chunk below shows the functions used to map the Gi values derived using fixed distance weight matrix.\n\ngdppc &lt;- qtm(hunan, \"GDPPC\")\n\nGimap &lt;-tm_shape(hunan.gi) +\n  tm_fill(col = \"gstat_fixed\", \n          style = \"pretty\",\n          palette=\"-RdBu\",\n          title = \"local Gi\") +\n  tm_borders(alpha = 0.5)\n\ntmap_arrange(gdppc, Gimap, asp=1, ncol=2)\n\n\n\n\n\n\n2.9.3 Gi statistics using adaptive distance\nThe code chunk below are used to compute the Gi values for GDPPC2012 by using an adaptive distance weight matrix (i.e knb_lw).\n\nfips &lt;- order(hunan$County)\ngi.adaptive &lt;- localG(hunan$GDPPC, knn_lw)\nhunan.gi &lt;- cbind(hunan, as.matrix(gi.adaptive)) %&gt;%\n  rename(gstat_adaptive = as.matrix.gi.adaptive.)\n\n\n\n2.9.4 Mapping Gi values with adaptive distance weights\nIt is time for us to visualise the locations of hot spot and cold spot areas. The choropleth mapping functions of tmap package will be used to map the Gi values.\nThe code chunk below shows the functions used to map the Gi values derived using fixed distance weight matrix.\n\ngdppc&lt;- qtm(hunan, \"GDPPC\")\n\nGimap &lt;- tm_shape(hunan.gi) + \n  tm_fill(col = \"gstat_adaptive\", \n          style = \"pretty\", \n          palette=\"-RdBu\", \n          title = \"local Gi\") + \n  tm_borders(alpha = 0.5)\n\ntmap_arrange(gdppc, \n             Gimap, \n             asp=1, \n             ncol=2)"
  },
  {
    "objectID": "Hands-on Ex/Hands-on Ex 3/Hands-on_Ex_3.html",
    "href": "Hands-on Ex/Hands-on Ex 3/Hands-on_Ex_3.html",
    "title": "Hands-on Exercise 3: Processing and Visualising Flow Data",
    "section": "",
    "text": "Spatial interaction represent the flow of people, material, or information between locations in geographical space. It encompasses everything from freight shipments, energy flows, and the global trade in rare antiquities, to flight schedules, rush hour woes, and pedestrian foot traffic.\nEach spatial interaction, as an analogy for a set of movements, is composed of a discrete origin/destination pair. Each pair can be represented as a cell in a matrix where rows are related to the locations (centroids) of origin, while columns are related to locations (centroids) of destination. Such a matrix is commonly known as an origin/destination matrix, or a spatial interaction matrix.\nIn this hands-on exercise, we will show how to build an OD matrix by using Passenger Volume by Origin Destination Bus Stops data set downloaded from LTA DataMall. By the end of this hands-on exercise, you will be able:\n\nto import and extract OD data for a selected time interval,\nto import and save geospatial data (i.e. bus stops and mpsz) into sf tibble data frame objects,\nto populate planning subzone code into bus stops sf tibble data frame,\nto construct desire lines geospatial data from the OD data, and\nto visualise passenger volume by origin and destination bus stops by using the desire lines data."
  },
  {
    "objectID": "Hands-on Ex/Hands-on Ex 3/Hands-on_Ex_3.html#overview",
    "href": "Hands-on Ex/Hands-on Ex 3/Hands-on_Ex_3.html#overview",
    "title": "Hands-on Exercise 3: Processing and Visualising Flow Data",
    "section": "",
    "text": "Spatial interaction represent the flow of people, material, or information between locations in geographical space. It encompasses everything from freight shipments, energy flows, and the global trade in rare antiquities, to flight schedules, rush hour woes, and pedestrian foot traffic.\nEach spatial interaction, as an analogy for a set of movements, is composed of a discrete origin/destination pair. Each pair can be represented as a cell in a matrix where rows are related to the locations (centroids) of origin, while columns are related to locations (centroids) of destination. Such a matrix is commonly known as an origin/destination matrix, or a spatial interaction matrix.\nIn this hands-on exercise, we will show how to build an OD matrix by using Passenger Volume by Origin Destination Bus Stops data set downloaded from LTA DataMall. By the end of this hands-on exercise, you will be able:\n\nto import and extract OD data for a selected time interval,\nto import and save geospatial data (i.e. bus stops and mpsz) into sf tibble data frame objects,\nto populate planning subzone code into bus stops sf tibble data frame,\nto construct desire lines geospatial data from the OD data, and\nto visualise passenger volume by origin and destination bus stops by using the desire lines data."
  },
  {
    "objectID": "Hands-on Ex/Hands-on Ex 3/Hands-on_Ex_3.html#getting-started",
    "href": "Hands-on Ex/Hands-on Ex 3/Hands-on_Ex_3.html#getting-started",
    "title": "Hands-on Exercise 3: Processing and Visualising Flow Data",
    "section": "3.2 Getting Started",
    "text": "3.2 Getting Started\nFor the purpose of this exercise, four r packages will be used. They are:\n\nsf for importing, integrating, processing and transforming geospatial data.\ntidyverse for importing, integrating, wrangling and visualising data.\ntmap for creating thematic maps.\n\n\npacman::p_load(tmap, sf, DT, stplanr,\n               performance,\n               ggpubr, tidyverse)"
  },
  {
    "objectID": "Hands-on Ex/Hands-on Ex 3/Hands-on_Ex_3.html#preparing-the-flow-data",
    "href": "Hands-on Ex/Hands-on Ex 3/Hands-on_Ex_3.html#preparing-the-flow-data",
    "title": "Hands-on Exercise 3: Processing and Visualising Flow Data",
    "section": "3.3 Preparing the Flow Data",
    "text": "3.3 Preparing the Flow Data\n\n3.3.1 Importing the OD data\nFirstly, we will import the Passenger Volume by Origin Destination Bus Stops data set downloaded from LTA DataMall by using read_csv() of readr package.\n\nodbus &lt;- read_csv(\"data/aspatial/origin_destination_bus_202310.csv\")\n\nLet use display the odbus tibble data table by using the code chunk below.\n\nglimpse(odbus)\n\nRows: 5,694,297\nColumns: 7\n$ YEAR_MONTH          &lt;chr&gt; \"2023-10\", \"2023-10\", \"2023-10\", \"2023-10\", \"2023-…\n$ DAY_TYPE            &lt;chr&gt; \"WEEKENDS/HOLIDAY\", \"WEEKDAY\", \"WEEKENDS/HOLIDAY\",…\n$ TIME_PER_HOUR       &lt;dbl&gt; 16, 16, 14, 14, 17, 17, 17, 7, 14, 14, 10, 20, 20,…\n$ PT_TYPE             &lt;chr&gt; \"BUS\", \"BUS\", \"BUS\", \"BUS\", \"BUS\", \"BUS\", \"BUS\", \"…\n$ ORIGIN_PT_CODE      &lt;chr&gt; \"04168\", \"04168\", \"80119\", \"80119\", \"44069\", \"2028…\n$ DESTINATION_PT_CODE &lt;chr&gt; \"10051\", \"10051\", \"90079\", \"90079\", \"17229\", \"2014…\n$ TOTAL_TRIPS         &lt;dbl&gt; 3, 5, 3, 5, 4, 1, 24, 2, 1, 7, 3, 2, 5, 1, 1, 1, 1…\n\n\nA quick check of odbus tibble data frame shows that the values in OROGIN_PT_CODE and DESTINATON_PT_CODE are in numeric data type. Hence, the code chunk below is used to convert these data values into character data type.\n\nodbus$ORIGIN_PT_CODE &lt;- as.factor(odbus$ORIGIN_PT_CODE)\nodbus$DESTINATION_PT_CODE &lt;- as.factor(odbus$DESTINATION_PT_CODE) \n\n\n\n3.3.2 Extracting the study data\nFor the purpose of this exercise, we will extract commuting flows on weekday and between 6 and 9 o’clock.\n\nodbus6_9 &lt;- odbus %&gt;%\n  filter(DAY_TYPE == \"WEEKDAY\") %&gt;%\n  filter(TIME_PER_HOUR &gt;= 6 &\n           TIME_PER_HOUR &lt;= 9) %&gt;%\n  group_by(ORIGIN_PT_CODE,\n           DESTINATION_PT_CODE) %&gt;%\n  summarise(TRIPS = sum(TOTAL_TRIPS))\n\nTable below shows the content of odbus6_9\n\ndatatable(odbus6_9)\n\n\n\n\n\n\nWe will save the output in rds format for future used.\n\nwrite_rds(odbus6_9, \"data/rds/odbus6_9.rds\")\n\nThe code chunk below will be used to import the save odbus6_9.rds into R environment.\n\nodbus6_9 &lt;- read_rds(\"data/rds/odbus6_9.rds\")"
  },
  {
    "objectID": "Hands-on Ex/Hands-on Ex 3/Hands-on_Ex_3.html#working-with-geospatial-data",
    "href": "Hands-on Ex/Hands-on Ex 3/Hands-on_Ex_3.html#working-with-geospatial-data",
    "title": "Hands-on Exercise 3: Processing and Visualising Flow Data",
    "section": "3.4 Working with Geospatial Data",
    "text": "3.4 Working with Geospatial Data\nFor the purpose of this exercise, two geospatial data will be used. They are:\n\nBusStop: This data provides the location of bus stop as at last quarter of 2023.\nMPSZ-2019: This data provides the sub-zone boundary of URA Master Plan 2019.\n\n\n3.4.1 Importing geospatial data\nTwo geospatial data will be used in this exercise, they are:\n\nbusstop &lt;- st_read(dsn = \"data/geospatial\",\n                   layer = \"BusStop\") %&gt;%\n  st_transform(crs = 3414)\n\nReading layer `BusStop' from data source \n  `D:\\KathyChiu77\\ISSS624\\Hands-on Ex\\Hands-on Ex 3\\data\\geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 5161 features and 3 fields\nGeometry type: POINT\nDimension:     XY\nBounding box:  xmin: 3970.122 ymin: 26482.1 xmax: 48284.56 ymax: 52983.82\nProjected CRS: SVY21\n\n\n\nmpsz &lt;- st_read(dsn = \"data/geospatial\",\n                   layer = \"MPSZ-2019\") %&gt;%\n  st_transform(crs = 3414)\n\nReading layer `MPSZ-2019' from data source \n  `D:\\KathyChiu77\\ISSS624\\Hands-on Ex\\Hands-on Ex 3\\data\\geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 332 features and 6 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 103.6057 ymin: 1.158699 xmax: 104.0885 ymax: 1.470775\nGeodetic CRS:  WGS 84\n\n\n\nmpsz\n\nSimple feature collection with 332 features and 6 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2667.538 ymin: 15748.72 xmax: 56396.44 ymax: 50256.33\nProjected CRS: SVY21 / Singapore TM\nFirst 10 features:\n                 SUBZONE_N SUBZONE_C       PLN_AREA_N PLN_AREA_C       REGION_N\n1              MARINA EAST    MESZ01      MARINA EAST         ME CENTRAL REGION\n2         INSTITUTION HILL    RVSZ05     RIVER VALLEY         RV CENTRAL REGION\n3           ROBERTSON QUAY    SRSZ01  SINGAPORE RIVER         SR CENTRAL REGION\n4  JURONG ISLAND AND BUKOM    WISZ01  WESTERN ISLANDS         WI    WEST REGION\n5             FORT CANNING    MUSZ02           MUSEUM         MU CENTRAL REGION\n6         MARINA EAST (MP)    MPSZ05    MARINE PARADE         MP CENTRAL REGION\n7                   SUDONG    WISZ03  WESTERN ISLANDS         WI    WEST REGION\n8                  SEMAKAU    WISZ02  WESTERN ISLANDS         WI    WEST REGION\n9           SOUTHERN GROUP    SISZ02 SOUTHERN ISLANDS         SI CENTRAL REGION\n10                 SENTOSA    SISZ01 SOUTHERN ISLANDS         SI CENTRAL REGION\n   REGION_C                       geometry\n1        CR MULTIPOLYGON (((33222.98 29...\n2        CR MULTIPOLYGON (((28481.45 30...\n3        CR MULTIPOLYGON (((28087.34 30...\n4        WR MULTIPOLYGON (((14557.7 304...\n5        CR MULTIPOLYGON (((29542.53 31...\n6        CR MULTIPOLYGON (((35279.55 30...\n7        WR MULTIPOLYGON (((15772.59 21...\n8        WR MULTIPOLYGON (((19843.41 21...\n9        CR MULTIPOLYGON (((30870.53 22...\n10       CR MULTIPOLYGON (((26879.04 26...\n\n\n\n\n\n\n\n\nNote\n\n\n\n\nst_read() function of sf package is used to import the shapefile into R as sf data frame.\nst_transform() function of sf package is used to transform the projection to crs 3414.\n\n\n\nThe code chunk below will be used to write mpsz sf tibble data frame into an rds file for future use.\n\nmpsz &lt;- write_rds(mpsz, \"data/rds/mpsz.rds\")"
  },
  {
    "objectID": "Hands-on Ex/Hands-on Ex 3/Hands-on_Ex_3.html#geospatial-data-wrangling",
    "href": "Hands-on Ex/Hands-on Ex 3/Hands-on_Ex_3.html#geospatial-data-wrangling",
    "title": "Hands-on Exercise 3: Processing and Visualising Flow Data",
    "section": "3.5 Geospatial data wrangling",
    "text": "3.5 Geospatial data wrangling\n\n3.5.1 Combining Busstop and mpsz\nCode chunk below populates the planning subzone code (i.e. SUBZONE_C) of mpsz sf data frame into busstop sf data frame.\n\nbusstop_mpsz &lt;- st_intersection(busstop, mpsz) %&gt;%\n  select(BUS_STOP_N, SUBZONE_C) %&gt;%\n  st_drop_geometry()\n\n\n\n\n\n\n\nNote\n\n\n\n\nst_intersection() is used to perform point and polygon overly and the output will be in point sf object.\nselect() of dplyr package is then use to retain only BUS_STOP_N and SUBZONE_C in the busstop_mpsz sf data frame.\nfive bus stops are excluded in the resultant data frame because they are outside of Singapore bpundary.\n\n\n\n\ndatatable(busstop_mpsz)\n\n\n\n\n\n\nBefore moving to the next step, it is wise to save the output into rds format.\n\nwrite_rds(busstop_mpsz, \"data/rds/busstop_mpsz.rds\")  \n\nNext, we are going to append the planning subzone code from busstop_mpsz data frame onto odbus6_9 data frame.\n\nod_data &lt;- left_join(odbus6_9 , busstop_mpsz,\n            by = c(\"ORIGIN_PT_CODE\" = \"BUS_STOP_N\")) %&gt;%\n  rename(ORIGIN_BS = ORIGIN_PT_CODE,\n         ORIGIN_SZ = SUBZONE_C,\n         DESTIN_BS = DESTINATION_PT_CODE)\n\nBefore continue, it is a good practice for us to check for duplicating records.\n\nduplicate &lt;- od_data %&gt;%\n  group_by_all() %&gt;%\n  filter(n()&gt;1) %&gt;%\n  ungroup()\n\nIf duplicated records are found, the code chunk below will be used to retain the unique records.\n\nod_data &lt;- unique(od_data)\n\nIt will be a good practice to confirm if the duplicating records issue has been addressed fully.\nNext, we will update od_data data frame cwith the planning subzone codes.\n\nod_data &lt;- left_join(od_data , busstop_mpsz,\n            by = c(\"DESTIN_BS\" = \"BUS_STOP_N\")) \n\n\nduplicate &lt;- od_data %&gt;%\n  group_by_all() %&gt;%\n  filter(n()&gt;1) %&gt;%\n  ungroup()\n\n\nod_data &lt;- unique(od_data)\n\n\nod_data &lt;- od_data %&gt;%\n  rename(DESTIN_SZ = SUBZONE_C) %&gt;%\n  drop_na() %&gt;%\n  group_by(ORIGIN_SZ, DESTIN_SZ) %&gt;%\n  summarise(MORNING_PEAK = sum(TRIPS))\n\nIt is time to save the output into an rds file format.\n\nwrite_rds(od_data, \"data/rds/od_data.rds\")\n\n\nod_data &lt;- read_rds(\"data/rds/od_data.rds\")"
  },
  {
    "objectID": "Hands-on Ex/Hands-on Ex 3/Hands-on_Ex_3.html#visualising-spatial-interaction",
    "href": "Hands-on Ex/Hands-on Ex 3/Hands-on_Ex_3.html#visualising-spatial-interaction",
    "title": "Hands-on Exercise 3: Processing and Visualising Flow Data",
    "section": "3.6 Visualising Spatial Interaction",
    "text": "3.6 Visualising Spatial Interaction\nIn this section, you will learn how to prepare a desire line by using stplanr package.\n\n3.6.1 Removing intra-zonal flows\nWe will not plot the intra-zonal flows. The code chunk below will be used to remove intra-zonal flows.\n\nod_data1 &lt;- od_data[od_data$ORIGIN_SZ!=od_data$DESTIN_SZ,]\n\n\n\n3.6.2 Creating desire lines\nIn this code chunk below, od2line() of stplanr package is used to create the desire lines.\n\nflowLine &lt;- od2line(flow = od_data1, \n                    zones = mpsz,\n                    zone_code = \"SUBZONE_C\")\n\n\n\n3.6.3 Visualising the desire lines\nTo visualise the resulting desire lines, the code chunk below is used.\n\ntm_shape(mpsz) +\n  tm_polygons() +\nflowLine %&gt;%  \ntm_shape() +\n  tm_lines(lwd = \"MORNING_PEAK\",\n           style = \"quantile\",\n           scale = c(0.1, 1, 3, 5, 7, 10),\n           n = 6,\n           alpha = 0.3)\n\n\n\n\nWhen the flow data are very messy and highly skewed like the one shown above, it is wiser to focus on selected flows, for example flow greater than or equal to 5000 as shown below.\n\ntm_shape(mpsz) +\n  tm_polygons() +\nflowLine %&gt;%  \n  filter(MORNING_PEAK &gt;= 5000) %&gt;%\ntm_shape() +\n  tm_lines(lwd = \"MORNING_PEAK\",\n           style = \"quantile\",\n           scale = c(0.1, 1, 3, 5, 7, 10),\n           n = 6,\n           alpha = 0.3)"
  },
  {
    "objectID": "In-class Ex/In-class Ex1/data/geospatial/MPSZ-2019.html",
    "href": "In-class Ex/In-class Ex1/data/geospatial/MPSZ-2019.html",
    "title": "ISSS624",
    "section": "",
    "text": "&lt;!DOCTYPE qgis PUBLIC ‘http://mrcc.com/qgis.dtd’ ‘SYSTEM’&gt;     dataset\n\n\n        0 0     false"
  },
  {
    "objectID": "In-class Ex/In-class_Ex2/In-class Ex_2_EHSA.html",
    "href": "In-class Ex/In-class_Ex2/In-class Ex_2_EHSA.html",
    "title": "In-class Exercise 2: Emerging Hot Spot Analysis: sfdep methods",
    "section": "",
    "text": "Emerging Hot Spot Analysis (EHSA) is a spatio-temporal analysis method for revealing and describing how hot spot and cold spot areas evolve over time. The analysis consist of four main steps:\n\nBuilding a space-time cube,\nCalculating Getis-Ord local Gi* statistic for each bin by using an FDR correction,\nEvaluating these hot and cold spot trends by using Mann-Kendall trend test,\nCategorising each study area location by referring to the resultant trend z-score and p-value for each location with data, and with the hot spot z-score and p-value for each bin."
  },
  {
    "objectID": "In-class Ex/In-class_Ex2/In-class Ex_2_EHSA.html#installing-and-loading-the-r-packages",
    "href": "In-class Ex/In-class_Ex2/In-class Ex_2_EHSA.html#installing-and-loading-the-r-packages",
    "title": "In-class Exercise 2: Emerging Hot Spot Analysis: sfdep methods",
    "section": "Installing and Loading the R Packages",
    "text": "Installing and Loading the R Packages\nAs usual, p_load() of pacman package will be used to check if the necessary packages have been installed in R, if yes, load the packages on R environment.\nFive R packages are need for this in-class exercise, they are: sf, sfdep, tmap, plotly and tidyverse.\n\npacman::p_load(sf, sfdep, tmap, plotly, tidyverse)"
  },
  {
    "objectID": "In-class Ex/In-class_Ex2/In-class Ex_2_EHSA.html#importing-geospatial-data",
    "href": "In-class Ex/In-class_Ex2/In-class Ex_2_EHSA.html#importing-geospatial-data",
    "title": "In-class Exercise 2: Emerging Hot Spot Analysis: sfdep methods",
    "section": "Importing geospatial data",
    "text": "Importing geospatial data\nIn the code chunk below, st_read() of sf package is used to import Hunan shapefile into R.\n\nhunan &lt;- st_read(dsn = \"data/geospatial\", \n                 layer = \"Hunan\")\n\nReading layer `Hunan' from data source \n  `D:\\KathyChiu77\\ISSS624\\In-class Ex\\In-class_Ex2\\data\\geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 88 features and 7 fields\nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: 108.7831 ymin: 24.6342 xmax: 114.2544 ymax: 30.12812\nGeodetic CRS:  WGS 84"
  },
  {
    "objectID": "In-class Ex/In-class_Ex2/In-class Ex_2_EHSA.html#importing-attribute-table",
    "href": "In-class Ex/In-class_Ex2/In-class Ex_2_EHSA.html#importing-attribute-table",
    "title": "In-class Exercise 2: Emerging Hot Spot Analysis: sfdep methods",
    "section": "Importing attribute table",
    "text": "Importing attribute table\nIn the code chunk below, read_csv() of readr is used to import Hunan_GDPPC.csv into R.\n\nGDPPC &lt;- read_csv(\"data/aspatial/Hunan_GDPPC.csv\")"
  },
  {
    "objectID": "In-class Ex/In-class_Ex2/In-class Ex_2_EHSA.html#computing-gi",
    "href": "In-class Ex/In-class_Ex2/In-class Ex_2_EHSA.html#computing-gi",
    "title": "In-class Exercise 2: Emerging Hot Spot Analysis: sfdep methods",
    "section": "Computing Gi*",
    "text": "Computing Gi*\nNext, we will compute the local Gi* statistics.\n\nDeriving the spatial weights\nThe code chunk below will be used to identify neighbors and to derive an inverse distance weights.\n\nGDPPC_nb &lt;- GDPPC_st %&gt;%\n  activate(\"geometry\") %&gt;%\n  mutate(nb = include_self(st_contiguity(geometry)),\n         wt = st_inverse_distance(nb, geometry,\n                                  scale = 1,\n                                  alpha = 1),\n         .before = 1) %&gt;%\n  set_nbs(\"nb\") %&gt;%\n  set_wts(\"wt\")\n\nNote that this dataset now has neighbors and weights for each time-slice.\n\nhead(GDPPC_nb)\n\n# A tibble: 6 × 5\n   Year County  GDPPC nb        wt       \n  &lt;dbl&gt; &lt;chr&gt;   &lt;dbl&gt; &lt;list&gt;    &lt;list&gt;   \n1  2005 Anxiang  8184 &lt;int [6]&gt; &lt;dbl [6]&gt;\n2  2005 Hanshou  6560 &lt;int [6]&gt; &lt;dbl [6]&gt;\n3  2005 Jinshi   9956 &lt;int [5]&gt; &lt;dbl [5]&gt;\n4  2005 Li       8394 &lt;int [5]&gt; &lt;dbl [5]&gt;\n5  2005 Linli    8850 &lt;int [5]&gt; &lt;dbl [5]&gt;\n6  2005 Shimen   9244 &lt;int [6]&gt; &lt;dbl [6]&gt;"
  },
  {
    "objectID": "In-class Ex/In-class_Ex2/In-class Ex_2_EHSA.html#computing-gi-1",
    "href": "In-class Ex/In-class_Ex2/In-class Ex_2_EHSA.html#computing-gi-1",
    "title": "In-class Exercise 2: Emerging Hot Spot Analysis: sfdep methods",
    "section": "Computing Gi*",
    "text": "Computing Gi*\nWe can use these new columns to manually calculate the local Gi* for each location. We can do this by grouping by Year and using local_gstar_perm() of sfdep package. After which, we use unnest() to unnest gi_star column of the newly created gi_starts data.frame.\n\ngi_stars &lt;- GDPPC_nb %&gt;% \n  group_by(Year) %&gt;% \n  mutate(gi_star = local_gstar_perm(\n    GDPPC, nb, wt)) %&gt;% \n  tidyr::unnest(gi_star)"
  },
  {
    "objectID": "In-class Ex/In-class_Ex2/In-class Ex_2_EHSA.html#arrange-to-show-significant-emerging-hotcold-spots",
    "href": "In-class Ex/In-class_Ex2/In-class Ex_2_EHSA.html#arrange-to-show-significant-emerging-hotcold-spots",
    "title": "In-class Exercise 2: Emerging Hot Spot Analysis: sfdep methods",
    "section": "Arrange to show significant emerging hot/cold spots",
    "text": "Arrange to show significant emerging hot/cold spots\n\nemerging &lt;- ehsa %&gt;% \n  arrange(sl, abs(tau)) %&gt;% \n  slice(1:5)"
  },
  {
    "objectID": "In-class Ex/In-class_Ex2/In-class Ex_2_EHSA.html#performing-emerging-hotspot-analysis",
    "href": "In-class Ex/In-class_Ex2/In-class Ex_2_EHSA.html#performing-emerging-hotspot-analysis",
    "title": "In-class Exercise 2: Emerging Hot Spot Analysis: sfdep methods",
    "section": "Performing Emerging Hotspot Analysis",
    "text": "Performing Emerging Hotspot Analysis\nLastly, we will perform EHSA analysis by using emerging_hotspot_analysis() of sfdep package. It takes a spacetime object x (i.e. GDPPC_st), and the quoted name of the variable of interest (i.e. GDPPC) for .var argument. The k argument is used to specify the number of time lags which is set to 1 by default. Lastly, nsim map numbers of simulation to be performed.\n\nehsa &lt;- emerging_hotspot_analysis(\n  x = GDPPC_st, \n  .var = \"GDPPC\", \n  k = 1, \n  nsim = 99\n)\n\n\nVisualising the distribution of EHSA classes\nIn the code chunk below, ggplot2 functions ised used to reveal the distribution of EHSA classes as a bar chart.\n\nggplot(data = ehsa,\n       aes(x = classification)) +\n  geom_bar()\n\n\n\n\nFigure above shows that sporadic cold spots class has the high numbers of county.\n\n\nVisualising EHSA\nIn this section, you will learn how to visualise the geographic distribution EHSA classes. However, before we can do so, we need to join both hunan and ehsa together by using the code chunk below.\n\nhunan_ehsa &lt;- hunan %&gt;%\n  left_join(ehsa,\n            by = join_by(County == location))\n\nNext, tmap functions will be used to plot a categorical choropleth map by using the code chunk below.\n\nehsa_sig &lt;- hunan_ehsa  %&gt;%\n  filter(p_value &lt; 0.05)\ntmap_mode(\"plot\")\ntm_shape(hunan_ehsa) +\n  tm_polygons() +\n  tm_borders(alpha = 0.5) +\ntm_shape(ehsa_sig) +\n  tm_fill(\"classification\") + \n  tm_borders(alpha = 0.4)"
  },
  {
    "objectID": "In-class Ex/In-class_Ex2/In-class Ex_2_Spatial-Weights.html",
    "href": "In-class Ex/In-class_Ex2/In-class Ex_2_Spatial-Weights.html",
    "title": "In-class Ex2:Spatial Weights",
    "section": "",
    "text": "This in-class introduces an alternative R package called sfdep. According to Josiah Parry, the developer of the package, “sfdep builds on the great shoulders of spdep package for spatial dependence. sfdep creates an sf and tidyverse friendly interface to the package as well as introduces new functionality that is not present in spdep. sfdep utilizes list columns extensively to make this interface possible.”"
  },
  {
    "objectID": "In-class Ex/In-class_Ex2/In-class Ex_2_Spatial-Weights.html#overview",
    "href": "In-class Ex/In-class_Ex2/In-class Ex_2_Spatial-Weights.html#overview",
    "title": "In-class Ex2:Spatial Weights",
    "section": "",
    "text": "This in-class introduces an alternative R package called sfdep. According to Josiah Parry, the developer of the package, “sfdep builds on the great shoulders of spdep package for spatial dependence. sfdep creates an sf and tidyverse friendly interface to the package as well as introduces new functionality that is not present in spdep. sfdep utilizes list columns extensively to make this interface possible.”"
  },
  {
    "objectID": "In-class Ex/In-class_Ex2/In-class Ex_2_Spatial-Weights.html#getting-started",
    "href": "In-class Ex/In-class_Ex2/In-class Ex_2_Spatial-Weights.html#getting-started",
    "title": "In-class Ex2:Spatial Weights",
    "section": "Getting Started",
    "text": "Getting Started\n\nInstalling and Loading the R packages\nInstall and load sf,tmap, sfdep, tidyverse and knitr packages into R environment for preparation.\n\n#pacman:: is for introducing pacman without installing it into R environment\npacman::p_load(sf, sfdep, knitr, tmap, tidyverse, plotly)"
  },
  {
    "objectID": "In-class Ex/In-class_Ex2/In-class Ex_2_Spatial-Weights.html#data-importing",
    "href": "In-class Ex/In-class_Ex2/In-class Ex_2_Spatial-Weights.html#data-importing",
    "title": "In-class Ex2:Spatial Weights",
    "section": "Data Importing",
    "text": "Data Importing\nFor the purpose of in-class exercise, two data sets will be used:\n\nHunan county boundary layer. This is a geospatial data set in ESRI shapefile format.\nHunan_2012.csv: This csv file contains selected Hunan’s local development indicators in 2012.\n\n\nhunan &lt;- st_read(dsn = \"data/geospatial\", \n                 layer = \"Hunan\")\n\nReading layer `Hunan' from data source \n  `D:\\KathyChiu77\\ISSS624\\In-class Ex\\In-class_Ex2\\data\\geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 88 features and 7 fields\nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: 108.7831 ymin: 24.6342 xmax: 114.2544 ymax: 30.12812\nGeodetic CRS:  WGS 84\n\n\n\nhunan2012 &lt;- read_csv(\"data/aspatial/Hunan_2012.csv\")"
  },
  {
    "objectID": "In-class Ex/In-class_Ex2/In-class Ex_2_Spatial-Weights.html#combining-both-data-frame-by-using-left-join",
    "href": "In-class Ex/In-class_Ex2/In-class Ex_2_Spatial-Weights.html#combining-both-data-frame-by-using-left-join",
    "title": "In-class Ex2:Spatial Weights",
    "section": "Combining Both Data Frame by Using Left Join",
    "text": "Combining Both Data Frame by Using Left Join\nCheck and grasp the basic structure of data.\n\nhead(hunan,5)\n\nSimple feature collection with 5 features and 7 fields\nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: 111.2145 ymin: 28.61762 xmax: 112.3013 ymax: 29.95847\nGeodetic CRS:  WGS 84\n   NAME_2  ID_3  NAME_3   ENGTYPE_3 Shape_Leng Shape_Area  County\n1 Changde 21098 Anxiang      County   1.869074 0.10056190 Anxiang\n2 Changde 21100 Hanshou      County   2.360691 0.19978745 Hanshou\n3 Changde 21101  Jinshi County City   1.425620 0.05302413  Jinshi\n4 Changde 21102      Li      County   3.474325 0.18908121      Li\n5 Changde 21103   Linli      County   2.289506 0.11450357   Linli\n                        geometry\n1 POLYGON ((112.0625 29.75523...\n2 POLYGON ((112.2288 29.11684...\n3 POLYGON ((111.8927 29.6013,...\n4 POLYGON ((111.3731 29.94649...\n5 POLYGON ((111.6324 29.76288...\n\n\n\nhead(hunan2012,5)\n\n# A tibble: 5 × 29\n  County  City  avg_wage deposite   FAI Gov_Rev Gov_Exp    GDP GDPPC   GIO  Loan\n  &lt;chr&gt;   &lt;chr&gt;    &lt;dbl&gt;    &lt;dbl&gt; &lt;dbl&gt;   &lt;dbl&gt;   &lt;dbl&gt;  &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;\n1 Anhua   Yiya…    30544   10967  6832.    457.   2703  13225  14567 9277. 3955.\n2 Anren   Chen…    28058    4599. 6386.    221.   1455.  4941. 12761 4189. 2555.\n3 Anxiang Chan…    31935    5517. 3541     244.   1780. 12482  23667 5109. 2807.\n4 Baojing Huna…    30843    2250  1005.    193.   1379.  4088. 14563 3624. 1254.\n5 Chaling Zhuz…    31251    8241. 6508.    620.   1947  11585  20078 9158. 4287.\n# ℹ 18 more variables: NIPCR &lt;dbl&gt;, Bed &lt;dbl&gt;, Emp &lt;dbl&gt;, EmpR &lt;dbl&gt;,\n#   EmpRT &lt;dbl&gt;, Pri_Stu &lt;dbl&gt;, Sec_Stu &lt;dbl&gt;, Household &lt;dbl&gt;,\n#   Household_R &lt;dbl&gt;, NOIP &lt;dbl&gt;, Pop_R &lt;dbl&gt;, RSCG &lt;dbl&gt;, Pop_T &lt;dbl&gt;,\n#   Agri &lt;dbl&gt;, Service &lt;dbl&gt;, Disp_Inc &lt;dbl&gt;, RORP &lt;dbl&gt;, ROREmp &lt;dbl&gt;\n\n\n\nhunan_GDPPC &lt;- left_join(hunan,hunan2012) %&gt;%\n  select(1:4,7,15)\n\nBy using left_join, the selected column (1, 2, 3, 4, 7, 15) of data frame hunan will be retained in the new one. Notably, the column geometry will be auto-saved for geospatial data.\n\nPlotting a choropleth map\n\ntmap_mode(\"plot\")\ntm_shape(hunan_GDPPC) +\n  tm_fill(\"GDPPC\", \n          style = \"quantile\", \n          palette = \"Blues\",\n          title = \"GDPPC\") +\n  tm_borders(alpha = 0.5) +\n  tm_layout(main.title = \"Distribution of GDP per capita by district, Hunan Province\",\n            main.title.position = \"center\",\n            main.title.size = 1.2,\n            legend.height = 0.45, \n            legend.width = 0.35,\n            frame = TRUE) +\n  tm_compass(type=\"8star\", size = 2) +\n  tm_scale_bar() +\n  tm_grid(alpha =0.2)"
  },
  {
    "objectID": "In-class Ex/In-class_Ex2/In-class Ex_2_Spatial-Weights.html#deriving-contiguity-spatial-weights",
    "href": "In-class Ex/In-class_Ex2/In-class Ex_2_Spatial-Weights.html#deriving-contiguity-spatial-weights",
    "title": "In-class Ex2:Spatial Weights",
    "section": "Deriving Contiguity Spatial Weights",
    "text": "Deriving Contiguity Spatial Weights\nBy and large, there are two types of spatial weights, they are contiguity wights and distance-based weights. In this section, you will learn how to derive contiguity spatial weights by using sfdep.\nTwo steps are required to derive a contiguity spatial weights, they are:\n\nidentifying contiguity neighbour list by st_contiguity() of sfdep package, and\nderiving the contiguity spatial weights by using st_weights() of sfdep package\n\nIn this section, we will learn how to derive the contiguity neighbour list and contiguity spatial weights separately. Then, we will learn how to combine both steps into a single process.\n\nIdentifying contiguity neighbours: Queen’s method\nIn the code chunk below st_contiguity() is used to derive a contiguity neighbour list by using Queen’s method.\n\nnb_queen &lt;- hunan_GDPPC %&gt;% \n  mutate(nb = st_contiguity(geometry),\n         .before = 1)\n\nThe code chunk below is used to print the summary of the first lag neighbour list (i.e. nb) .\n\nsummary(nb_queen$nb)\n\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 448 \nPercentage nonzero weights: 5.785124 \nAverage number of links: 5.090909 \nLink number distribution:\n\n 1  2  3  4  5  6  7  8  9 11 \n 2  2 12 16 24 14 11  4  2  1 \n2 least connected regions:\n30 65 with 1 link\n1 most connected region:\n85 with 11 links\n\n\nThe summary report above shows that there are 88 area units in Hunan province. The most connected area unit has 11 neighbours. There are two are units with only one neighbour.\nTo view the content of the data table, you can either display the output data frame on RStudio data viewer or by printing out the first ten records by using the code chunk below.\n\nnb_queen\n\nSimple feature collection with 88 features and 7 fields\nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: 108.7831 ymin: 24.6342 xmax: 114.2544 ymax: 30.12812\nGeodetic CRS:  WGS 84\nFirst 10 features:\n                               nb   NAME_2  ID_3    NAME_3   ENGTYPE_3\n1                 2, 3, 4, 57, 85  Changde 21098   Anxiang      County\n2               1, 57, 58, 78, 85  Changde 21100   Hanshou      County\n3                     1, 4, 5, 85  Changde 21101    Jinshi County City\n4                      1, 3, 5, 6  Changde 21102        Li      County\n5                     3, 4, 6, 85  Changde 21103     Linli      County\n6                4, 5, 69, 75, 85  Changde 21104    Shimen      County\n7                  67, 71, 74, 84 Changsha 21109   Liuyang County City\n8       9, 46, 47, 56, 78, 80, 86 Changsha 21110 Ningxiang      County\n9           8, 66, 68, 78, 84, 86 Changsha 21111 Wangcheng      County\n10 16, 17, 19, 20, 22, 70, 72, 73 Chenzhou 21112     Anren      County\n      County GDPPC                       geometry\n1    Anxiang 23667 POLYGON ((112.0625 29.75523...\n2    Hanshou 20981 POLYGON ((112.2288 29.11684...\n3     Jinshi 34592 POLYGON ((111.8927 29.6013,...\n4         Li 24473 POLYGON ((111.3731 29.94649...\n5      Linli 25554 POLYGON ((111.6324 29.76288...\n6     Shimen 27137 POLYGON ((110.8825 30.11675...\n7    Liuyang 63118 POLYGON ((113.9905 28.5682,...\n8  Ningxiang 62202 POLYGON ((112.7181 28.38299...\n9  Wangcheng 70666 POLYGON ((112.7914 28.52688...\n10     Anren 12761 POLYGON ((113.1757 26.82734...\n\n\nThe print shows that polygon 1 has five neighbours. They are polygons number 2, 3, 4, 57,and 85.\nOne of the advantage of sfdep over spdep is that the output is an sf tibble data frame.\n\nkable(head(nb_queen,\n           n=10))\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nnb\nNAME_2\nID_3\nNAME_3\nENGTYPE_3\nCounty\nGDPPC\ngeometry\n\n\n\n\n2, 3, 4, 57, 85\nChangde\n21098\nAnxiang\nCounty\nAnxiang\n23667\nPOLYGON ((112.0625 29.75523…\n\n\n1, 57, 58, 78, 85\nChangde\n21100\nHanshou\nCounty\nHanshou\n20981\nPOLYGON ((112.2288 29.11684…\n\n\n1, 4, 5, 85\nChangde\n21101\nJinshi\nCounty City\nJinshi\n34592\nPOLYGON ((111.8927 29.6013,…\n\n\n1, 3, 5, 6\nChangde\n21102\nLi\nCounty\nLi\n24473\nPOLYGON ((111.3731 29.94649…\n\n\n3, 4, 6, 85\nChangde\n21103\nLinli\nCounty\nLinli\n25554\nPOLYGON ((111.6324 29.76288…\n\n\n4, 5, 69, 75, 85\nChangde\n21104\nShimen\nCounty\nShimen\n27137\nPOLYGON ((110.8825 30.11675…\n\n\n67, 71, 74, 84\nChangsha\n21109\nLiuyang\nCounty City\nLiuyang\n63118\nPOLYGON ((113.9905 28.5682,…\n\n\n9, 46, 47, 56, 78, 80, 86\nChangsha\n21110\nNingxiang\nCounty\nNingxiang\n62202\nPOLYGON ((112.7181 28.38299…\n\n\n8, 66, 68, 78, 84, 86\nChangsha\n21111\nWangcheng\nCounty\nWangcheng\n70666\nPOLYGON ((112.7914 28.52688…\n\n\n16, 17, 19, 20, 22, 70, 72, 73\nChenzhou\n21112\nAnren\nCounty\nAnren\n12761\nPOLYGON ((113.1757 26.82734…\n\n\n\n\n\n\n\nIdentify contiguity neighbours: Rooks’ method\n\nnb_rook &lt;- hunan_GDPPC %&gt;% \n  mutate(nb = st_contiguity(geometry,\n                            queen = FALSE),\n         .before = 1)\n\n\n\nIdentifying higher order neighbors\nThere are times that we need to identify high order contiguity neighbours. To accomplish the task, st_nb_lag_cumul() should be used as shown in the code chunk below.\n\nnb2_queen &lt;-  hunan_GDPPC %&gt;% \n  mutate(nb = st_contiguity(geometry),\n         nb2 = st_nb_lag_cumul(nb, 2),\n         .before = 1)\n\nNote that if the order is 2, the result contains both 1st and 2nd order neighbors as shown on the print below.\n\nnb2_queen\n\nSimple feature collection with 88 features and 8 fields\nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: 108.7831 ymin: 24.6342 xmax: 114.2544 ymax: 30.12812\nGeodetic CRS:  WGS 84\nFirst 10 features:\n                               nb\n1                 2, 3, 4, 57, 85\n2               1, 57, 58, 78, 85\n3                     1, 4, 5, 85\n4                      1, 3, 5, 6\n5                     3, 4, 6, 85\n6                4, 5, 69, 75, 85\n7                  67, 71, 74, 84\n8       9, 46, 47, 56, 78, 80, 86\n9           8, 66, 68, 78, 84, 86\n10 16, 17, 19, 20, 22, 70, 72, 73\n                                                                                        nb2\n1                                     2, 3, 4, 5, 6, 32, 56, 57, 58, 64, 69, 75, 76, 78, 85\n2                           1, 3, 4, 5, 6, 8, 9, 32, 56, 57, 58, 64, 68, 69, 75, 76, 78, 85\n3                                                 1, 2, 4, 5, 6, 32, 56, 57, 69, 75, 78, 85\n4                                                             1, 2, 3, 5, 6, 57, 69, 75, 85\n5                                                 1, 2, 3, 4, 6, 32, 56, 57, 69, 75, 78, 85\n6                                         1, 2, 3, 4, 5, 32, 53, 55, 56, 57, 69, 75, 78, 85\n7                                                     9, 19, 66, 67, 71, 73, 74, 76, 84, 86\n8  2, 9, 19, 21, 31, 32, 34, 35, 36, 41, 45, 46, 47, 56, 58, 66, 68, 74, 78, 80, 84, 85, 86\n9               2, 7, 8, 19, 21, 35, 46, 47, 56, 58, 66, 67, 68, 74, 76, 78, 80, 84, 85, 86\n10               11, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 70, 71, 72, 73, 74, 82, 83, 86\n     NAME_2  ID_3    NAME_3   ENGTYPE_3    County GDPPC\n1   Changde 21098   Anxiang      County   Anxiang 23667\n2   Changde 21100   Hanshou      County   Hanshou 20981\n3   Changde 21101    Jinshi County City    Jinshi 34592\n4   Changde 21102        Li      County        Li 24473\n5   Changde 21103     Linli      County     Linli 25554\n6   Changde 21104    Shimen      County    Shimen 27137\n7  Changsha 21109   Liuyang County City   Liuyang 63118\n8  Changsha 21110 Ningxiang      County Ningxiang 62202\n9  Changsha 21111 Wangcheng      County Wangcheng 70666\n10 Chenzhou 21112     Anren      County     Anren 12761\n                         geometry\n1  POLYGON ((112.0625 29.75523...\n2  POLYGON ((112.2288 29.11684...\n3  POLYGON ((111.8927 29.6013,...\n4  POLYGON ((111.3731 29.94649...\n5  POLYGON ((111.6324 29.76288...\n6  POLYGON ((110.8825 30.11675...\n7  POLYGON ((113.9905 28.5682,...\n8  POLYGON ((112.7181 28.38299...\n9  POLYGON ((112.7914 28.52688...\n10 POLYGON ((113.1757 26.82734..."
  },
  {
    "objectID": "In-class Ex/In-class_Ex2/In-class Ex_2_Spatial-Weights.html#deriving-contiguity-weights-queens-method",
    "href": "In-class Ex/In-class_Ex2/In-class Ex_2_Spatial-Weights.html#deriving-contiguity-weights-queens-method",
    "title": "In-class Ex2:Spatial Weights",
    "section": "Deriving contiguity weights: Queen’s method",
    "text": "Deriving contiguity weights: Queen’s method\nNow, you are ready to compute the contiguity weights by using st_weights() of sfdep package.\n\nDeriving contiguity weights: Queen’s method\nIn the code chunk below, queen method is used to derive the contiguity weights.\n\nwm_q &lt;- hunan_GDPPC %&gt;%\n  mutate(nb = st_contiguity(geometry),\n         wt = st_weights(nb,\n                         style = \"W\"),\n         .before = 1) \n\nNotice that st_weights() provides tree arguments, they are:\n\nnb: A neighbor list object as created by st_neighbors().\nstyle: Default “W” for row standardized weights. This value can also be “B”, “C”, “U”, “minmax”, and “S”. B is the basic binary coding, W is row standardised (sums over all links to n), C is globally standardised (sums over all links to n), U is equal to C divided by the number of neighbours (sums over all links to unity), while S is the variance-stabilizing coding scheme proposed by Tiefelsdorf et al. 1999, p. 167-168 (sums over all links to n).\nallow_zero: If TRUE, assigns zero as lagged value to zone without neighbors.\n\n\nwm_q\n\nSimple feature collection with 88 features and 8 fields\nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: 108.7831 ymin: 24.6342 xmax: 114.2544 ymax: 30.12812\nGeodetic CRS:  WGS 84\nFirst 10 features:\n                               nb\n1                 2, 3, 4, 57, 85\n2               1, 57, 58, 78, 85\n3                     1, 4, 5, 85\n4                      1, 3, 5, 6\n5                     3, 4, 6, 85\n6                4, 5, 69, 75, 85\n7                  67, 71, 74, 84\n8       9, 46, 47, 56, 78, 80, 86\n9           8, 66, 68, 78, 84, 86\n10 16, 17, 19, 20, 22, 70, 72, 73\n                                                                            wt\n1                                                      0.2, 0.2, 0.2, 0.2, 0.2\n2                                                      0.2, 0.2, 0.2, 0.2, 0.2\n3                                                       0.25, 0.25, 0.25, 0.25\n4                                                       0.25, 0.25, 0.25, 0.25\n5                                                       0.25, 0.25, 0.25, 0.25\n6                                                      0.2, 0.2, 0.2, 0.2, 0.2\n7                                                       0.25, 0.25, 0.25, 0.25\n8  0.1428571, 0.1428571, 0.1428571, 0.1428571, 0.1428571, 0.1428571, 0.1428571\n9             0.1666667, 0.1666667, 0.1666667, 0.1666667, 0.1666667, 0.1666667\n10                      0.125, 0.125, 0.125, 0.125, 0.125, 0.125, 0.125, 0.125\n     NAME_2  ID_3    NAME_3   ENGTYPE_3    County GDPPC\n1   Changde 21098   Anxiang      County   Anxiang 23667\n2   Changde 21100   Hanshou      County   Hanshou 20981\n3   Changde 21101    Jinshi County City    Jinshi 34592\n4   Changde 21102        Li      County        Li 24473\n5   Changde 21103     Linli      County     Linli 25554\n6   Changde 21104    Shimen      County    Shimen 27137\n7  Changsha 21109   Liuyang County City   Liuyang 63118\n8  Changsha 21110 Ningxiang      County Ningxiang 62202\n9  Changsha 21111 Wangcheng      County Wangcheng 70666\n10 Chenzhou 21112     Anren      County     Anren 12761\n                         geometry\n1  POLYGON ((112.0625 29.75523...\n2  POLYGON ((112.2288 29.11684...\n3  POLYGON ((111.8927 29.6013,...\n4  POLYGON ((111.3731 29.94649...\n5  POLYGON ((111.6324 29.76288...\n6  POLYGON ((110.8825 30.11675...\n7  POLYGON ((113.9905 28.5682,...\n8  POLYGON ((112.7181 28.38299...\n9  POLYGON ((112.7914 28.52688...\n10 POLYGON ((113.1757 26.82734..."
  },
  {
    "objectID": "In-class Ex/In-class_Ex2/In-class Ex_2_Spatial-Weights.html#distance-based-weights",
    "href": "In-class Ex/In-class_Ex2/In-class Ex_2_Spatial-Weights.html#distance-based-weights",
    "title": "In-class Ex2:Spatial Weights",
    "section": "Distance-based Weights",
    "text": "Distance-based Weights\nThere are three popularly used distance-based spatial weights, they are:\n\nfixed distance weights,\nadaptive distance weights, and\ninverse distance weights (IDW).\n\n\nDeriving fixed distance weights\nBefore we can derive the fixed distance weights, we need to determine the upper limit for distance band by using the steps below:\n\ngeo &lt;- sf::st_geometry(hunan_GDPPC)\nnb &lt;- st_knn(geo, longlat = TRUE)\ndists &lt;- unlist(st_nb_dists(geo, nb))\n\nNow, we will go ahead to derive summary statistics of the nearest neighbour distances vector (i.e. dists) by usign the coced chunk below.\n\nsummary(dists)\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n  21.56   29.11   36.89   37.34   43.21   65.80 \n\n\nThe summary statistics report above shows that the maximum nearest neighbour distance is 65.80km. By using a threshold value of 66km will ensure that each area will have at least one neighbour.\nNow we will go ahead to compute the fixed distance weights by using the code chunk below.\n\nwm_fd &lt;- hunan_GDPPC %&gt;%\n  mutate(nb = st_dist_band(geometry,\n                           upper = 66),\n               wt = st_weights(nb),\n               .before = 1)\n\n\n\nDeriving adaptive distance weights\nIn this section, you will derive an adaptive spatial weights by using the code chunk below.\n\nwm_ad &lt;- hunan_GDPPC %&gt;% \n  mutate(nb = st_knn(geometry,\n                     k=8),\n         wt = st_weights(nb),\n               .before = 1)\n\n\n\nCalculate inverse distance weights\nIn this section, you will derive an inverse distance weights by using the code chunk below.\n\nwm_idw &lt;- hunan_GDPPC %&gt;%\n  mutate(nb = st_contiguity(geometry),\n         wts = st_inverse_distance(nb, geometry,\n                                   scale = 1,\n                                   alpha = 1),\n         .before = 1)"
  },
  {
    "objectID": "In-class Ex/In-class_Ex3/In-class_Ex3.html",
    "href": "In-class Ex/In-class_Ex3/In-class_Ex3.html",
    "title": "In-class Exercise 3: Calibrating Spatial Interaction Models with R",
    "section": "",
    "text": "Spatial Interaction Models (SIMs) are mathematical models for estimating flows between spatial entities developed by Alan Wilson in the late 1960s and early 1970, with considerable uptake and refinement for transport modelling since then Boyce and Williams (2015).\nThere are four main types of traditional SIMs (Wilson 1971):\n\nUnconstrained\nProduction-constrained\nAttraction-constrained\nDoubly-constrained\n\nOrdinary least square (OLS), log-normal, Poisson and negative binomial (NB) regression methods have been used extensively to calibrate OD flow models by processing flow data as different types of dependent variables. In this chapter, you will gain hands-on experiences on using appropriate R packages to calibrate SIM by using there four regression methods."
  },
  {
    "objectID": "In-class Ex/In-class_Ex3/In-class_Ex3.html#overview",
    "href": "In-class Ex/In-class_Ex3/In-class_Ex3.html#overview",
    "title": "In-class Exercise 3: Calibrating Spatial Interaction Models with R",
    "section": "",
    "text": "Spatial Interaction Models (SIMs) are mathematical models for estimating flows between spatial entities developed by Alan Wilson in the late 1960s and early 1970, with considerable uptake and refinement for transport modelling since then Boyce and Williams (2015).\nThere are four main types of traditional SIMs (Wilson 1971):\n\nUnconstrained\nProduction-constrained\nAttraction-constrained\nDoubly-constrained\n\nOrdinary least square (OLS), log-normal, Poisson and negative binomial (NB) regression methods have been used extensively to calibrate OD flow models by processing flow data as different types of dependent variables. In this chapter, you will gain hands-on experiences on using appropriate R packages to calibrate SIM by using there four regression methods."
  },
  {
    "objectID": "In-class Ex/In-class_Ex3/In-class_Ex3.html#the-case-study-and-data",
    "href": "In-class Ex/In-class_Ex3/In-class_Ex3.html#the-case-study-and-data",
    "title": "In-class Exercise 3: Calibrating Spatial Interaction Models with R",
    "section": "3.2 The Case Study and Data",
    "text": "3.2 The Case Study and Data\nIn this exercise, we are going to calibrate SIM to determine factors affecting the public bus passenger flows during the morning peak in Singapore."
  },
  {
    "objectID": "In-class Ex/In-class_Ex3/In-class_Ex3.html#getting-started",
    "href": "In-class Ex/In-class_Ex3/In-class_Ex3.html#getting-started",
    "title": "In-class Exercise 3: Calibrating Spatial Interaction Models with R",
    "section": "3.3 Getting Started",
    "text": "3.3 Getting Started\nFor the purpose of this exercise, four r packages will be used. They are:\n\nsf for importing, integrating, processing and transforming geospatial data.\ntidyverse for importing, integrating, wrangling and visualising data.\ntmap for creating thematic maps.\n\n\npacman::p_load(tmap, sf, sp, DT,\n               performance, reshape2,\n               ggpubr, units, tidyverse)"
  },
  {
    "objectID": "In-class Ex/In-class_Ex3/In-class_Ex3.html#the-data",
    "href": "In-class Ex/In-class_Ex3/In-class_Ex3.html#the-data",
    "title": "In-class Exercise 3: Calibrating Spatial Interaction Models with R",
    "section": "3.4 The Data",
    "text": "3.4 The Data\nThis exercise is a continuation of Hands-on Exercise 3: Processing and Visualising Flow Data and the following data will be used:\n\nod_data.rds, weekday morning peak passenger flows at planning subzone level.\nmpsz.rds, URA Master Plan 2019 Planning Subzone boundary in simple feature tibble data frame format.\n\nBeside these two data sets, an additional attribute data file called pop.csv will be provided."
  },
  {
    "objectID": "In-class Ex/In-class_Ex3/In-class_Ex3.html#computing-distance-matrix",
    "href": "In-class Ex/In-class_Ex3/In-class_Ex3.html#computing-distance-matrix",
    "title": "In-class Exercise 3: Calibrating Spatial Interaction Models with R",
    "section": "3.5 Computing Distance Matrix",
    "text": "3.5 Computing Distance Matrix\n\nmpsz &lt;- read_rds(\"data/rds/mpsz.rds\")\nmpsz\n\nSimple feature collection with 332 features and 6 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2667.538 ymin: 15748.72 xmax: 56396.44 ymax: 50256.33\nProjected CRS: SVY21 / Singapore TM\nFirst 10 features:\n                 SUBZONE_N SUBZONE_C       PLN_AREA_N PLN_AREA_C       REGION_N\n1              MARINA EAST    MESZ01      MARINA EAST         ME CENTRAL REGION\n2         INSTITUTION HILL    RVSZ05     RIVER VALLEY         RV CENTRAL REGION\n3           ROBERTSON QUAY    SRSZ01  SINGAPORE RIVER         SR CENTRAL REGION\n4  JURONG ISLAND AND BUKOM    WISZ01  WESTERN ISLANDS         WI    WEST REGION\n5             FORT CANNING    MUSZ02           MUSEUM         MU CENTRAL REGION\n6         MARINA EAST (MP)    MPSZ05    MARINE PARADE         MP CENTRAL REGION\n7                   SUDONG    WISZ03  WESTERN ISLANDS         WI    WEST REGION\n8                  SEMAKAU    WISZ02  WESTERN ISLANDS         WI    WEST REGION\n9           SOUTHERN GROUP    SISZ02 SOUTHERN ISLANDS         SI CENTRAL REGION\n10                 SENTOSA    SISZ01 SOUTHERN ISLANDS         SI CENTRAL REGION\n   REGION_C                       geometry\n1        CR MULTIPOLYGON (((33222.98 29...\n2        CR MULTIPOLYGON (((28481.45 30...\n3        CR MULTIPOLYGON (((28087.34 30...\n4        WR MULTIPOLYGON (((14557.7 304...\n5        CR MULTIPOLYGON (((29542.53 31...\n6        CR MULTIPOLYGON (((35279.55 30...\n7        WR MULTIPOLYGON (((15772.59 21...\n8        WR MULTIPOLYGON (((19843.41 21...\n9        CR MULTIPOLYGON (((30870.53 22...\n10       CR MULTIPOLYGON (((26879.04 26...\n\n\nNotice that it is a sf tibble dataframe object class.\n\n3.5.1 Converting from sf data.table to SpatialPolygonsDataFrame\nThere are at least two ways to compute the required distance matrix. One is based on sf and the other is based on sp. Past experience shown that computing distance matrix by using sf function took relatively longer time that sp method especially the data set is large. In view of this, sp method is used in the code chunks below.\nFirst as.Spatial() will be used to convert mpsz from sf tibble data frame to SpatialPolygonsDataFrame of sp object as shown in the code chunk below.\n\nmpsz_sp &lt;- as(mpsz, \"Spatial\")\nmpsz_sp\n\nclass       : SpatialPolygonsDataFrame \nfeatures    : 332 \nextent      : 2667.538, 56396.44, 15748.72, 50256.33  (xmin, xmax, ymin, ymax)\ncrs         : +proj=tmerc +lat_0=1.36666666666667 +lon_0=103.833333333333 +k=1 +x_0=28001.642 +y_0=38744.572 +ellps=WGS84 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs \nvariables   : 6\nnames       : SUBZONE_N, SUBZONE_C, PLN_AREA_N, PLN_AREA_C,       REGION_N, REGION_C \nmin values  : ADMIRALTY,    AMSZ01, ANG MO KIO,         AM, CENTRAL REGION,       CR \nmax values  :    YUNNAN,    YSSZ09,     YISHUN,         YS,    WEST REGION,       WR \n\n\n\n\n3.5.2 Computing the distance matrix\nNext, spDists() of sp package will be used to compute the Euclidean distance between the centroids of the planning subzones.\n\ndist &lt;- spDists(mpsz_sp, \n                longlat = FALSE)\nhead(dist, n=c(10, 10))\n\n           [,1]       [,2]      [,3]      [,4]       [,5]      [,6]      [,7]\n [1,]     0.000  3926.0025  3939.108 20252.964  2989.9839  1431.330 19211.836\n [2,]  3926.003     0.0000   305.737 16513.865   951.8314  5254.066 16242.523\n [3,]  3939.108   305.7370     0.000 16412.062  1045.9088  5299.849 16026.146\n [4,] 20252.964 16513.8648 16412.062     0.000 17450.3044 21665.795  7229.017\n [5,]  2989.984   951.8314  1045.909 17450.304     0.0000  4303.232 17020.916\n [6,]  1431.330  5254.0664  5299.849 21665.795  4303.2323     0.000 20617.082\n [7,] 19211.836 16242.5230 16026.146  7229.017 17020.9161 20617.082     0.000\n [8,] 14960.942 12749.4101 12477.871 11284.279 13336.0421 16281.453  5606.082\n [9,]  7515.256  7934.8082  7649.776 18427.503  7801.6163  8403.896 14810.930\n[10,]  6391.342  4975.0021  4669.295 15469.566  5226.8731  7707.091 13111.391\n           [,8]      [,9]     [,10]\n [1,] 14960.942  7515.256  6391.342\n [2,] 12749.410  7934.808  4975.002\n [3,] 12477.871  7649.776  4669.295\n [4,] 11284.279 18427.503 15469.566\n [5,] 13336.042  7801.616  5226.873\n [6,] 16281.453  8403.896  7707.091\n [7,]  5606.082 14810.930 13111.391\n [8,]     0.000  9472.024  8575.490\n [9,]  9472.024     0.000  3780.800\n[10,]  8575.490  3780.800     0.000\n\n\nNotice that the output dist is a matrix object class of R. Also notice that the column heanders and row headers are not labeled with the planning subzone codes.\n\n\n3.5.3 Labelling column and row heanders of a distance matrix\nFirst, we will create a list sorted according to the the distance matrix by planning sub-zone code.\n\nsz_names &lt;- mpsz$SUBZONE_C\n\nNext we will attach SUBZONE_C to row and column for distance matrix matching ahead\n\ncolnames(dist) &lt;- paste0(sz_names)\nrownames(dist) &lt;- paste0(sz_names)\n\n\n\n3.5.4 Pivoting distance value by SUBZONE_C\nNext, we will pivot the distance matrix into a long table by using the row and column subzone codes as show in the code chunk below.\n\ndistPair &lt;- melt(dist) %&gt;%\n  rename(dist = value)\nhead(distPair, 10)\n\n     Var1   Var2      dist\n1  MESZ01 MESZ01     0.000\n2  RVSZ05 MESZ01  3926.003\n3  SRSZ01 MESZ01  3939.108\n4  WISZ01 MESZ01 20252.964\n5  MUSZ02 MESZ01  2989.984\n6  MPSZ05 MESZ01  1431.330\n7  WISZ03 MESZ01 19211.836\n8  WISZ02 MESZ01 14960.942\n9  SISZ02 MESZ01  7515.256\n10 SISZ01 MESZ01  6391.342\n\n\nNotice that the within zone distance is 0.\n\n\n3.5.5 Updating intra-zonal distances\nIn this section, we are going to append a constant value to replace the intra-zonal distance of 0.\nFirst, we will select and find out the minimum value of the distance by using summary().\n\ndistPair %&gt;%\n  filter(dist &gt; 0) %&gt;%\n  summary()\n\n      Var1             Var2             dist        \n MESZ01 :   331   MESZ01 :   331   Min.   :  173.8  \n RVSZ05 :   331   RVSZ05 :   331   1st Qu.: 7149.5  \n SRSZ01 :   331   SRSZ01 :   331   Median :11890.0  \n WISZ01 :   331   WISZ01 :   331   Mean   :12229.4  \n MUSZ02 :   331   MUSZ02 :   331   3rd Qu.:16401.7  \n MPSZ05 :   331   MPSZ05 :   331   Max.   :49894.4  \n (Other):107906   (Other):107906                    \n\n\nNext, a constant distance value of 50m is added into intra-zones distance (which won’t affect the minimum distance).\n\ndistPair$dist &lt;- ifelse(distPair$dist == 0,\n                        50, distPair$dist)\n\nThe code chunk below will be used to check the result data.frame.\n\ndistPair %&gt;%\n  summary()\n\n      Var1             Var2             dist      \n MESZ01 :   332   MESZ01 :   332   Min.   :   50  \n RVSZ05 :   332   RVSZ05 :   332   1st Qu.: 7097  \n SRSZ01 :   332   SRSZ01 :   332   Median :11864  \n WISZ01 :   332   WISZ01 :   332   Mean   :12193  \n MUSZ02 :   332   MUSZ02 :   332   3rd Qu.:16388  \n MPSZ05 :   332   MPSZ05 :   332   Max.   :49894  \n (Other):108232   (Other):108232                  \n\n\nThe code chunk below is used to rename the origin and destination fields.\n\ndistPair &lt;- distPair %&gt;%\n  rename(orig = Var1,\n         dest = Var2)\n\nLastly, the code chunk below is used to save the dataframe for future use.\n\nwrite_rds(distPair, \"data/rds/distPair.rds\")"
  },
  {
    "objectID": "In-class Ex/In-class_Ex3/In-class_Ex3.html#preparing-flow-data",
    "href": "In-class Ex/In-class_Ex3/In-class_Ex3.html#preparing-flow-data",
    "title": "In-class Exercise 3: Calibrating Spatial Interaction Models with R",
    "section": "3.6 Preparing flow data",
    "text": "3.6 Preparing flow data\nThe code chunk below is used import od_data save in Hands-on Exercise 3 into R environment.\n\nod_data &lt;- read_rds(\"data/rds/od_data.rds\")\n\nNext, we will compute the total passenger trip between and within planning subzones by using the code chunk below. The output is all flow_data.\n\nflow_data &lt;- od_data %&gt;%\n  group_by(ORIGIN_SZ, DESTIN_SZ) %&gt;% \n  summarize(TRIPS = sum(MORNING_PEAK)) \n\nUse the code chunk below to display flow_data dataframe.\n\nhead(flow_data, 10)\n\n# A tibble: 10 × 3\n# Groups:   ORIGIN_SZ [1]\n   ORIGIN_SZ DESTIN_SZ TRIPS\n   &lt;chr&gt;     &lt;chr&gt;     &lt;dbl&gt;\n 1 AMSZ01    AMSZ01     2694\n 2 AMSZ01    AMSZ02    10591\n 3 AMSZ01    AMSZ03    14980\n 4 AMSZ01    AMSZ04     3106\n 5 AMSZ01    AMSZ05     7734\n 6 AMSZ01    AMSZ06     2306\n 7 AMSZ01    AMSZ07     1824\n 8 AMSZ01    AMSZ08     2734\n 9 AMSZ01    AMSZ09     2300\n10 AMSZ01    AMSZ10      164\n\n\n\n3.6.1 Separating intra-flow from passenger volume df\nCode chunk below is used to add three new fields in flow_data dataframe.\n\nflow_data$FlowNoIntra &lt;- ifelse(\n  flow_data$ORIGIN_SZ == flow_data$DESTIN_SZ, \n  0, flow_data$TRIPS)\nflow_data$offset &lt;- ifelse(\n  flow_data$ORIGIN_SZ == flow_data$DESTIN_SZ, \n  0.000001, 1)\n\n\n\n3.6.2 Combining passenger volume data with distance value\nBefore we can join flow_data and distPair, we need to convert data value type of ORIGIN_SZ and DESTIN_SZ fields of flow_data dataframe into factor data type.\n\nflow_data$ORIGIN_SZ &lt;- as.factor(flow_data$ORIGIN_SZ)\nflow_data$DESTIN_SZ &lt;- as.factor(flow_data$DESTIN_SZ)\n\nNow, left_join() of dplyr will be used to flow_data dataframe and distPair dataframe. The output is called flow_data1.\n\nflow_data1 &lt;- flow_data %&gt;%\n  left_join (distPair,\n             by = c(\"ORIGIN_SZ\" = \"orig\",\n                    \"DESTIN_SZ\" = \"dest\"))"
  },
  {
    "objectID": "In-class Ex/In-class_Ex3/In-class_Ex3.html#preparing-origin-and-destination-attributes",
    "href": "In-class Ex/In-class_Ex3/In-class_Ex3.html#preparing-origin-and-destination-attributes",
    "title": "In-class Exercise 3: Calibrating Spatial Interaction Models with R",
    "section": "3.7 Preparing Origin and Destination Attributes",
    "text": "3.7 Preparing Origin and Destination Attributes\n\n3.7.1 Importing population data\n\npop &lt;- read_csv(\"data/aspatial/pop.csv\")\n\n\n\n3.7.2 Geospatial data wrangling\n\npop &lt;- pop %&gt;%\n  left_join(mpsz,\n            by = c(\"PA\" = \"PLN_AREA_N\",\n                   \"SZ\" = \"SUBZONE_N\")) %&gt;%\n  select(1:6) %&gt;%\n  rename(SZ_NAME = SZ,\n         SZ = SUBZONE_C)\n\n\n\n3.7.3 Preparing origin attribute\n\nflow_data1 &lt;- flow_data1 %&gt;%\n  left_join(pop,\n            by = c(ORIGIN_SZ = \"SZ\")) %&gt;%\n  rename(ORIGIN_AGE7_12 = AGE7_12,\n         ORIGIN_AGE13_24 = AGE13_24,\n         ORIGIN_AGE25_64 = AGE25_64) %&gt;%\n  select(-c(PA, SZ_NAME))\n\n\n\n3.7.4 Preparing destination attribute\n\nflow_data1 &lt;- flow_data1 %&gt;%\n  left_join(pop,\n            by = c(DESTIN_SZ = \"SZ\")) %&gt;%\n  rename(DESTIN_AGE7_12 = AGE7_12,\n         DESTIN_AGE13_24 = AGE13_24,\n         DESTIN_AGE25_64 = AGE25_64) %&gt;%\n  select(-c(PA, SZ_NAME))\n\nWe will called the output data file SIM_data. it is in rds data file format.\n\nwrite_rds(flow_data1, \"data/rds/SIM_data\")"
  },
  {
    "objectID": "In-class Ex/In-class_Ex3/In-class_Ex3.html#calibrating-spatial-interaction-models",
    "href": "In-class Ex/In-class_Ex3/In-class_Ex3.html#calibrating-spatial-interaction-models",
    "title": "In-class Exercise 3: Calibrating Spatial Interaction Models with R",
    "section": "3.8 Calibrating Spatial Interaction Models",
    "text": "3.8 Calibrating Spatial Interaction Models\nIn this section, you will learn how to calibrate Spatial Interaction Models by using Poisson Regression method.\n\n3.8.1 Importing the modelling data\nFirstly, let us import the modelling data by using the code chunk below.\n\nSIM_data &lt;- read_rds(\"data/rds/SIM_data.rds\")\n\n\n\n3.8.2 Visualising the dependent variable\nFirstly, let us plot the distribution of the dependent variable (i.e. TRIPS) by using histogram method by using the code chunk below.\n\nggplot(data = SIM_data,\n       aes(x = TRIPS)) +\n  geom_histogram()\n\n\n\n\nNotice that the distribution is highly skewed and not resemble bell shape or also known as normal distribution.\nNext, let us visualise the relation between the dependent variable and one of the key independent variable in Spatial Interaction Model, namely distance.\n\nggplot(data = SIM_data,\n       aes(x = dist,\n           y = TRIPS)) +\n  geom_point() +\n  geom_smooth(method = lm)\n\n\n\n\nNotice that their relationship hardly resemble linear relationship.\nOn the other hand, if we plot the scatter plot by using the log transformed version of both variables, we can see that their relationship is more resemble linear relationship.\n\nggplot(data = SIM_data,\n       aes(x = log(dist),\n           y = log(TRIPS))) +\n  geom_point() +\n  geom_smooth(method = lm)\n\n\n\n\n\n\n3.8.3 Checking for variables with zero values\nSince Poisson Regression is based of log and log 0 is undefined, it is important for us to ensure that no 0 values in the explanatory variables.\nIn the code chunk below, summary() of Base R is used to compute the summary statistics of all variables in SIM_data data frame.\n\nsummary(SIM_data)\n\n  ORIGIN_SZ          DESTIN_SZ             TRIPS           FlowNoIntra      \n Length:14274       Length:14274       Min.   :     1.0   Min.   :     1.0  \n Class :character   Class :character   1st Qu.:    11.0   1st Qu.:    11.0  \n Mode  :character   Mode  :character   Median :    56.0   Median :    56.0  \n                                       Mean   :   664.3   Mean   :   664.3  \n                                       3rd Qu.:   296.0   3rd Qu.:   296.0  \n                                       Max.   :104167.0   Max.   :104167.0  \n     offset       dist         ORIGIN_AGE7_12 ORIGIN_AGE13_24 ORIGIN_AGE25_64\n Min.   :1   Min.   :  173.8   Min.   :   0   Min.   :    0   Min.   :    0  \n 1st Qu.:1   1st Qu.: 3465.4   1st Qu.: 240   1st Qu.:  460   1st Qu.: 2210  \n Median :1   Median : 6121.0   Median : 710   Median : 1400   Median : 7030  \n Mean   :1   Mean   : 6951.8   Mean   :1037   Mean   : 2278   Mean   :10536  \n 3rd Qu.:1   3rd Qu.: 9725.1   3rd Qu.:1500   3rd Qu.: 3282   3rd Qu.:15830  \n Max.   :1   Max.   :26135.8   Max.   :6340   Max.   :16380   Max.   :74610  \n DESTIN_AGE7_12 DESTIN_AGE13_24 DESTIN_AGE25_64\n Min.   :   0   Min.   :    0   Min.   :    0  \n 1st Qu.: 250   1st Qu.:  460   1st Qu.: 2210  \n Median : 720   Median : 1430   Median : 7120  \n Mean   :1040   Mean   : 2305   Mean   :10648  \n 3rd Qu.:1500   3rd Qu.: 3290   3rd Qu.:15830  \n Max.   :6340   Max.   :16380   Max.   :74610  \n\n\nThe print report above reveals that variables ORIGIN_AGE7_12, ORIGIN_AGE13_24, ORIGIN_AGE25_64,DESTIN_AGE7_12, DESTIN_AGE13_24, DESTIN_AGE25_64 consist of 0 values.\nIn view of this, code chunk below will be used to replace zero values to 0.99.\n\nSIM_data$DESTIN_AGE7_12 &lt;- ifelse(\n  SIM_data$DESTIN_AGE7_12 == 0,\n  0.99, SIM_data$DESTIN_AGE7_12)\nSIM_data$DESTIN_AGE13_24 &lt;- ifelse(\n  SIM_data$DESTIN_AGE13_24 == 0,\n  0.99, SIM_data$DESTIN_AGE13_24)\nSIM_data$DESTIN_AGE25_64 &lt;- ifelse(\n  SIM_data$DESTIN_AGE25_64 == 0,\n  0.99, SIM_data$DESTIN_AGE25_64)\nSIM_data$ORIGIN_AGE7_12 &lt;- ifelse(\n  SIM_data$ORIGIN_AGE7_12 == 0,\n  0.99, SIM_data$ORIGIN_AGE7_12)\nSIM_data$ORIGIN_AGE13_24 &lt;- ifelse(\n  SIM_data$ORIGIN_AGE13_24 == 0,\n  0.99, SIM_data$ORIGIN_AGE13_24)\nSIM_data$ORIGIN_AGE25_64 &lt;- ifelse(\n  SIM_data$ORIGIN_AGE25_64 == 0,\n  0.99, SIM_data$ORIGIN_AGE25_64)\n\nYou can run the summary() again.\n\nsummary(SIM_data)\n\n  ORIGIN_SZ          DESTIN_SZ             TRIPS           FlowNoIntra      \n Length:14274       Length:14274       Min.   :     1.0   Min.   :     1.0  \n Class :character   Class :character   1st Qu.:    11.0   1st Qu.:    11.0  \n Mode  :character   Mode  :character   Median :    56.0   Median :    56.0  \n                                       Mean   :   664.3   Mean   :   664.3  \n                                       3rd Qu.:   296.0   3rd Qu.:   296.0  \n                                       Max.   :104167.0   Max.   :104167.0  \n     offset       dist         ORIGIN_AGE7_12    ORIGIN_AGE13_24   \n Min.   :1   Min.   :  173.8   Min.   :   0.99   Min.   :    0.99  \n 1st Qu.:1   1st Qu.: 3465.4   1st Qu.: 240.00   1st Qu.:  460.00  \n Median :1   Median : 6121.0   Median : 710.00   Median : 1400.00  \n Mean   :1   Mean   : 6951.8   Mean   :1036.73   Mean   : 2278.59  \n 3rd Qu.:1   3rd Qu.: 9725.1   3rd Qu.:1500.00   3rd Qu.: 3282.50  \n Max.   :1   Max.   :26135.8   Max.   :6340.00   Max.   :16380.00  \n ORIGIN_AGE25_64    DESTIN_AGE7_12    DESTIN_AGE13_24    DESTIN_AGE25_64   \n Min.   :    0.99   Min.   :   0.99   Min.   :    0.99   Min.   :    0.99  \n 1st Qu.: 2210.00   1st Qu.: 250.00   1st Qu.:  460.00   1st Qu.: 2210.00  \n Median : 7030.00   Median : 720.00   Median : 1430.00   Median : 7120.00  \n Mean   :10535.93   Mean   :1039.98   Mean   : 2305.33   Mean   :10647.95  \n 3rd Qu.:15830.00   3rd Qu.:1500.00   3rd Qu.: 3290.00   3rd Qu.:15830.00  \n Max.   :74610.00   Max.   :6340.00   Max.   :16380.00   Max.   :74610.00  \n\n\nNotice that all the 0 values have been replaced by 0.99.\n\n\n3.8.4 Unconstrained Spatial Interaction Model\nIn this section, you will learn how to calibrate an unconstrained spatial interaction model by using glm() of Base Stats. The explanatory variables are origin population by different age cohort, destination population by different age cohort (i.e. ORIGIN_AGE25_64) and distance between origin and destination in km (i.e. dist).\nThe code chunk used to calibrate to model is shown below:\n\nuncSIM &lt;- glm(formula = TRIPS ~ \n                log(ORIGIN_AGE25_64) + \n                log(DESTIN_AGE25_64) +\n                log(dist),\n              family = poisson(link = \"log\"),\n              data = SIM_data,\n              na.action = na.exclude)\nuncSIM\n\n\nCall:  glm(formula = TRIPS ~ log(ORIGIN_AGE25_64) + log(DESTIN_AGE25_64) + \n    log(dist), family = poisson(link = \"log\"), data = SIM_data, \n    na.action = na.exclude)\n\nCoefficients:\n         (Intercept)  log(ORIGIN_AGE25_64)  log(DESTIN_AGE25_64)  \n            17.00287               0.21001               0.01289  \n           log(dist)  \n            -1.51785  \n\nDegrees of Freedom: 14273 Total (i.e. Null);  14270 Residual\nNull Deviance:      36120000 \nResidual Deviance: 19960000     AIC: 20040000\n\n\n\n\n3.8.5 R-squared function\nIn order to measure how much variation of the trips can be accounted by the model we will write a function to calculate R-Squared value as shown below.\n\nCalcRSquared &lt;- function(observed,estimated){\n  r &lt;- cor(observed,estimated)\n  R2 &lt;- r^2\n  R2\n}\n\nNext, we will compute the R-squared of the unconstrained SIM by using the code chunk below.\n\nCalcRSquared(uncSIM$data$TRIPS, uncSIM$fitted.values)\n\n[1] 0.1694734\n\n\n\nr2_mcfadden(uncSIM)\n\n# R2 for Generalized Linear Regression\n       R2: 0.446\n  adj. R2: 0.446\n\n\n\n\n3.8.6 Origin (Production) constrained SIM\nIn this section, we will fit an origin constrained SIM by using the code3 chunk below.\n\norcSIM &lt;- glm(formula = TRIPS ~ \n                 ORIGIN_SZ +\n                 log(DESTIN_AGE25_64) +\n                 log(dist),\n              family = poisson(link = \"log\"),\n              data = SIM_data,\n              na.action = na.exclude)\nsummary(orcSIM)\n\n\nCall:\nglm(formula = TRIPS ~ ORIGIN_SZ + log(DESTIN_AGE25_64) + log(dist), \n    family = poisson(link = \"log\"), data = SIM_data, na.action = na.exclude)\n\nCoefficients:\n                       Estimate Std. Error   z value Pr(&gt;|z|)    \n(Intercept)          19.9309957  0.0054015  3689.887  &lt; 2e-16 ***\nORIGIN_SZAMSZ02       0.6805710  0.0052686   129.175  &lt; 2e-16 ***\nORIGIN_SZAMSZ03       0.3597850  0.0054884    65.554  &lt; 2e-16 ***\nORIGIN_SZAMSZ04      -0.1106566  0.0060027   -18.434  &lt; 2e-16 ***\nORIGIN_SZAMSZ05      -0.3140561  0.0067998   -46.186  &lt; 2e-16 ***\nORIGIN_SZAMSZ06       0.0634425  0.0060258    10.528  &lt; 2e-16 ***\nORIGIN_SZAMSZ07      -1.1301580  0.0110298  -102.464  &lt; 2e-16 ***\nORIGIN_SZAMSZ08      -0.6330394  0.0102949   -61.491  &lt; 2e-16 ***\nORIGIN_SZAMSZ09       0.1064915  0.0063450    16.784  &lt; 2e-16 ***\nORIGIN_SZAMSZ10       0.5061899  0.0053889    93.931  &lt; 2e-16 ***\nORIGIN_SZAMSZ11      -1.3167911  0.0144870   -90.895  &lt; 2e-16 ***\nORIGIN_SZAMSZ12      -1.5103004  0.0127453  -118.499  &lt; 2e-16 ***\nORIGIN_SZBDSZ01       1.3626004  0.0051433   264.929  &lt; 2e-16 ***\nORIGIN_SZBDSZ02       0.9554084  0.0059655   160.156  &lt; 2e-16 ***\nORIGIN_SZBDSZ03       1.1476190  0.0054278   211.433  &lt; 2e-16 ***\nORIGIN_SZBDSZ04       2.0110410  0.0046344   433.940  &lt; 2e-16 ***\nORIGIN_SZBDSZ05       1.0658940  0.0053976   197.477  &lt; 2e-16 ***\nORIGIN_SZBDSZ06       1.2719222  0.0054774   232.213  &lt; 2e-16 ***\nORIGIN_SZBDSZ07      -0.5053039  0.0111553   -45.297  &lt; 2e-16 ***\nORIGIN_SZBDSZ08      -0.3556193  0.0102947   -34.544  &lt; 2e-16 ***\nORIGIN_SZBKSZ01      -0.3606399  0.0075473   -47.784  &lt; 2e-16 ***\nORIGIN_SZBKSZ02       0.1357265  0.0061394    22.107  &lt; 2e-16 ***\nORIGIN_SZBKSZ03       0.4101999  0.0058983    69.545  &lt; 2e-16 ***\nORIGIN_SZBKSZ04      -0.3418645  0.0070764   -48.310  &lt; 2e-16 ***\nORIGIN_SZBKSZ05      -0.2986750  0.0074073   -40.322  &lt; 2e-16 ***\nORIGIN_SZBKSZ06      -0.2637855  0.0068739   -38.375  &lt; 2e-16 ***\nORIGIN_SZBKSZ07       0.5498323  0.0051476   106.813  &lt; 2e-16 ***\nORIGIN_SZBKSZ08      -0.0527393  0.0061457    -8.582  &lt; 2e-16 ***\nORIGIN_SZBKSZ09      -0.1564691  0.0067300   -23.249  &lt; 2e-16 ***\nORIGIN_SZBLSZ01      -1.7551329  0.0176599   -99.385  &lt; 2e-16 ***\nORIGIN_SZBLSZ02      -1.9493637  0.0213859   -91.152  &lt; 2e-16 ***\nORIGIN_SZBLSZ03      -2.9057732  0.0535995   -54.213  &lt; 2e-16 ***\nORIGIN_SZBLSZ04      -1.4672066  0.0254726   -57.599  &lt; 2e-16 ***\nORIGIN_SZBMSZ01       0.1806064  0.0060563    29.821  &lt; 2e-16 ***\nORIGIN_SZBMSZ02      -1.4026549  0.0078244  -179.267  &lt; 2e-16 ***\nORIGIN_SZBMSZ03      -0.5976236  0.0063808   -93.660  &lt; 2e-16 ***\nORIGIN_SZBMSZ04      -0.5456513  0.0059061   -92.388  &lt; 2e-16 ***\nORIGIN_SZBMSZ05      -3.1095195  0.0188118  -165.297  &lt; 2e-16 ***\nORIGIN_SZBMSZ06      -3.0273827  0.0194319  -155.794  &lt; 2e-16 ***\nORIGIN_SZBMSZ07      -0.7378197  0.0066865  -110.345  &lt; 2e-16 ***\nORIGIN_SZBMSZ08      -0.9306150  0.0067188  -138.510  &lt; 2e-16 ***\nORIGIN_SZBMSZ09      -1.4137345  0.0101071  -139.876  &lt; 2e-16 ***\nORIGIN_SZBMSZ10      -1.7054195  0.0101582  -167.886  &lt; 2e-16 ***\nORIGIN_SZBMSZ11      -1.2418380  0.0076792  -161.714  &lt; 2e-16 ***\nORIGIN_SZBMSZ12      -1.3746537  0.0109769  -125.231  &lt; 2e-16 ***\nORIGIN_SZBMSZ13      -0.4339494  0.0069335   -62.587  &lt; 2e-16 ***\nORIGIN_SZBMSZ14      -0.9950458  0.0076302  -130.410  &lt; 2e-16 ***\nORIGIN_SZBMSZ15      -0.6544196  0.0068964   -94.892  &lt; 2e-16 ***\nORIGIN_SZBMSZ16      -1.5193747  0.0105329  -144.250  &lt; 2e-16 ***\nORIGIN_SZBMSZ17      -1.6536771  0.0180672   -91.529  &lt; 2e-16 ***\nORIGIN_SZBPSZ01       0.1484355  0.0064734    22.930  &lt; 2e-16 ***\nORIGIN_SZBPSZ02      -0.3602094  0.0073902   -48.741  &lt; 2e-16 ***\nORIGIN_SZBPSZ03      -0.1567975  0.0072226   -21.709  &lt; 2e-16 ***\nORIGIN_SZBPSZ04       0.4504873  0.0058418    77.115  &lt; 2e-16 ***\nORIGIN_SZBPSZ05       0.5028646  0.0053682    93.675  &lt; 2e-16 ***\nORIGIN_SZBPSZ06      -1.0125668  0.0105638   -95.853  &lt; 2e-16 ***\nORIGIN_SZBPSZ07      -0.3859065  0.0098561   -39.154  &lt; 2e-16 ***\nORIGIN_SZBSSZ01       0.1488497  0.0065504    22.724  &lt; 2e-16 ***\nORIGIN_SZBSSZ02       0.4269498  0.0055893    76.387  &lt; 2e-16 ***\nORIGIN_SZBSSZ03      -0.2437385  0.0062020   -39.300  &lt; 2e-16 ***\nORIGIN_SZBTSZ01       0.1987940  0.0066672    29.817  &lt; 2e-16 ***\nORIGIN_SZBTSZ02      -0.4571546  0.0090784   -50.356  &lt; 2e-16 ***\nORIGIN_SZBTSZ03      -0.2697243  0.0077941   -34.606  &lt; 2e-16 ***\nORIGIN_SZBTSZ04      -1.0997236  0.0115225   -95.441  &lt; 2e-16 ***\nORIGIN_SZBTSZ05      -1.0053122  0.0132594   -75.819  &lt; 2e-16 ***\nORIGIN_SZBTSZ06      -1.0841201  0.0102242  -106.035  &lt; 2e-16 ***\nORIGIN_SZBTSZ07      -2.3134497  0.0158499  -145.960  &lt; 2e-16 ***\nORIGIN_SZBTSZ08      -1.1581618  0.0121161   -95.589  &lt; 2e-16 ***\nORIGIN_SZCBSZ01      -1.0805930  0.0577831   -18.701  &lt; 2e-16 ***\nORIGIN_SZCCSZ01      -0.8145372  0.0152638   -53.364  &lt; 2e-16 ***\nORIGIN_SZCHSZ01       0.0377079  0.0133240     2.830 0.004654 ** \nORIGIN_SZCHSZ02      -0.6209553  0.0096388   -64.422  &lt; 2e-16 ***\nORIGIN_SZCHSZ03       1.6790244  0.0069559   241.381  &lt; 2e-16 ***\nORIGIN_SZCKSZ01       0.0839586  0.0059934    14.008  &lt; 2e-16 ***\nORIGIN_SZCKSZ02       0.4379511  0.0062289    70.309  &lt; 2e-16 ***\nORIGIN_SZCKSZ03       0.7956950  0.0051892   153.335  &lt; 2e-16 ***\nORIGIN_SZCKSZ04       1.2740323  0.0053165   239.637  &lt; 2e-16 ***\nORIGIN_SZCKSZ05       0.9326213  0.0061807   150.893  &lt; 2e-16 ***\nORIGIN_SZCKSZ06       0.3976273  0.0085639    46.431  &lt; 2e-16 ***\nORIGIN_SZCLSZ01      -0.7522917  0.0094655   -79.477  &lt; 2e-16 ***\nORIGIN_SZCLSZ02      -1.3937450  0.0153260   -90.940  &lt; 2e-16 ***\nORIGIN_SZCLSZ03      -0.7898683  0.0091016   -86.784  &lt; 2e-16 ***\nORIGIN_SZCLSZ04       0.8451512  0.0051258   164.882  &lt; 2e-16 ***\nORIGIN_SZCLSZ05      -1.6573818  0.0166091   -99.788  &lt; 2e-16 ***\nORIGIN_SZCLSZ06       0.9478181  0.0048182   196.716  &lt; 2e-16 ***\nORIGIN_SZCLSZ07      -0.2499753  0.0064632   -38.677  &lt; 2e-16 ***\nORIGIN_SZCLSZ08       0.1350119  0.0069296    19.483  &lt; 2e-16 ***\nORIGIN_SZCLSZ09      -1.3868782  0.0192743   -71.955  &lt; 2e-16 ***\nORIGIN_SZDTSZ02      -3.7535792  0.0871325   -43.079  &lt; 2e-16 ***\nORIGIN_SZDTSZ03      -3.8462041  0.0840156   -45.780  &lt; 2e-16 ***\nORIGIN_SZDTSZ13      -2.9738127  0.0349241   -85.151  &lt; 2e-16 ***\nORIGIN_SZGLSZ01      -1.5175198  0.0110135  -137.787  &lt; 2e-16 ***\nORIGIN_SZGLSZ02       0.2405712  0.0058742    40.954  &lt; 2e-16 ***\nORIGIN_SZGLSZ03       0.1940241  0.0061989    31.300  &lt; 2e-16 ***\nORIGIN_SZGLSZ04       1.0292572  0.0049028   209.931  &lt; 2e-16 ***\nORIGIN_SZGLSZ05       0.9864552  0.0050898   193.811  &lt; 2e-16 ***\nORIGIN_SZHGSZ01       0.3073609  0.0054307    56.597  &lt; 2e-16 ***\nORIGIN_SZHGSZ02       0.3827293  0.0054555    70.154  &lt; 2e-16 ***\nORIGIN_SZHGSZ03       0.2342580  0.0059240    39.544  &lt; 2e-16 ***\nORIGIN_SZHGSZ04       0.8750090  0.0049639   176.275  &lt; 2e-16 ***\nORIGIN_SZHGSZ05       1.1695280  0.0049468   236.420  &lt; 2e-16 ***\nORIGIN_SZHGSZ06      -0.0462411  0.0063805    -7.247 4.25e-13 ***\nORIGIN_SZHGSZ07       0.4488583  0.0055139    81.404  &lt; 2e-16 ***\nORIGIN_SZHGSZ08       0.2236095  0.0061279    36.490  &lt; 2e-16 ***\nORIGIN_SZHGSZ09      -1.6376674  0.0084442  -193.941  &lt; 2e-16 ***\nORIGIN_SZHGSZ10      -2.9849025  0.0501042   -59.574  &lt; 2e-16 ***\nORIGIN_SZJESZ01       0.3926525  0.0056268    69.783  &lt; 2e-16 ***\nORIGIN_SZJESZ02       0.1230160  0.0056864    21.633  &lt; 2e-16 ***\nORIGIN_SZJESZ03       0.0188276  0.0061020     3.085 0.002032 ** \nORIGIN_SZJESZ04      -1.3611618  0.0117184  -116.156  &lt; 2e-16 ***\nORIGIN_SZJESZ05      -2.0643662  0.0157083  -131.419  &lt; 2e-16 ***\nORIGIN_SZJESZ06       0.1556368  0.0055245    28.172  &lt; 2e-16 ***\nORIGIN_SZJESZ07      -1.7664532  0.0133171  -132.646  &lt; 2e-16 ***\nORIGIN_SZJESZ08      -0.9115981  0.0138203   -65.961  &lt; 2e-16 ***\nORIGIN_SZJESZ09       0.6121916  0.0060381   101.388  &lt; 2e-16 ***\nORIGIN_SZJESZ10      -1.1953045  0.0233216   -51.253  &lt; 2e-16 ***\nORIGIN_SZJESZ11      -1.4088748  0.0220921   -63.773  &lt; 2e-16 ***\nORIGIN_SZJWSZ01       0.5759093  0.0077741    74.081  &lt; 2e-16 ***\nORIGIN_SZJWSZ02       0.9769314  0.0053029   184.227  &lt; 2e-16 ***\nORIGIN_SZJWSZ03       1.3242695  0.0049068   269.882  &lt; 2e-16 ***\nORIGIN_SZJWSZ04       0.5621088  0.0057831    97.199  &lt; 2e-16 ***\nORIGIN_SZJWSZ05      -1.5744341  0.0146904  -107.174  &lt; 2e-16 ***\nORIGIN_SZJWSZ06      -0.9113320  0.0126913   -71.807  &lt; 2e-16 ***\nORIGIN_SZJWSZ07      -2.3083419  0.0357843   -64.507  &lt; 2e-16 ***\nORIGIN_SZJWSZ08       2.0114225  0.0047956   419.429  &lt; 2e-16 ***\nORIGIN_SZJWSZ09       1.9086705  0.0045255   421.759  &lt; 2e-16 ***\nORIGIN_SZKLSZ01       0.2743166  0.0056908    48.204  &lt; 2e-16 ***\nORIGIN_SZKLSZ02      -0.6443386  0.0074521   -86.463  &lt; 2e-16 ***\nORIGIN_SZKLSZ03      -0.3990113  0.0067213   -59.366  &lt; 2e-16 ***\nORIGIN_SZKLSZ04      -2.1413876  0.0138405  -154.719  &lt; 2e-16 ***\nORIGIN_SZKLSZ05      -1.0913697  0.0121512   -89.816  &lt; 2e-16 ***\nORIGIN_SZKLSZ06      -5.6240764  0.1857405   -30.279  &lt; 2e-16 ***\nORIGIN_SZKLSZ07      -1.1885897  0.0096830  -122.750  &lt; 2e-16 ***\nORIGIN_SZKLSZ08      -1.7018593  0.0114317  -148.872  &lt; 2e-16 ***\nORIGIN_SZLKSZ01      -1.6659670  0.0446420   -37.318  &lt; 2e-16 ***\nORIGIN_SZMDSZ01      -1.1210505  0.0318834   -35.161  &lt; 2e-16 ***\nORIGIN_SZMDSZ02      -0.5096299  0.0116645   -43.691  &lt; 2e-16 ***\nORIGIN_SZMDSZ03      -1.9187039  0.0198291   -96.762  &lt; 2e-16 ***\nORIGIN_SZMPSZ01      -0.5260512  0.0094201   -55.844  &lt; 2e-16 ***\nORIGIN_SZMPSZ02      -0.2905084  0.0077974   -37.257  &lt; 2e-16 ***\nORIGIN_SZMPSZ03       0.3342293  0.0063715    52.457  &lt; 2e-16 ***\nORIGIN_SZMUSZ02      -3.8337096  0.1105053   -34.693  &lt; 2e-16 ***\nORIGIN_SZNTSZ01      -2.9845040  0.0397028   -75.171  &lt; 2e-16 ***\nORIGIN_SZNTSZ02      -3.1812985  0.0249470  -127.522  &lt; 2e-16 ***\nORIGIN_SZNTSZ03      -0.9742991  0.0085424  -114.054  &lt; 2e-16 ***\nORIGIN_SZNTSZ05      -4.2086932  0.0579737   -72.597  &lt; 2e-16 ***\nORIGIN_SZNTSZ06      -4.5831822  0.0583494   -78.547  &lt; 2e-16 ***\nORIGIN_SZNVSZ01       0.3186962  0.0052944    60.195  &lt; 2e-16 ***\nORIGIN_SZNVSZ02      -0.5321136  0.0073747   -72.154  &lt; 2e-16 ***\nORIGIN_SZNVSZ03      -0.9911852  0.0090560  -109.451  &lt; 2e-16 ***\nORIGIN_SZNVSZ04      -0.8329721  0.0099590   -83.640  &lt; 2e-16 ***\nORIGIN_SZNVSZ05      -2.1460777  0.0182401  -117.657  &lt; 2e-16 ***\nORIGIN_SZPGSZ01      -0.5604078  0.0151515   -36.987  &lt; 2e-16 ***\nORIGIN_SZPGSZ02      -0.4025139  0.0085135   -47.279  &lt; 2e-16 ***\nORIGIN_SZPGSZ03       0.6975483  0.0055534   125.608  &lt; 2e-16 ***\nORIGIN_SZPGSZ04       1.2175486  0.0051080   238.363  &lt; 2e-16 ***\nORIGIN_SZPGSZ05       0.3895354  0.0069851    55.767  &lt; 2e-16 ***\nORIGIN_SZPLSZ01      -0.5572701  0.0134473   -41.441  &lt; 2e-16 ***\nORIGIN_SZPLSZ02      -0.9854214  0.0172337   -57.180  &lt; 2e-16 ***\nORIGIN_SZPLSZ03      -1.6991954  0.0472629   -35.952  &lt; 2e-16 ***\nORIGIN_SZPLSZ04      -2.2000217  0.0373580   -58.890  &lt; 2e-16 ***\nORIGIN_SZPLSZ05      -1.7086663  0.0260920   -65.486  &lt; 2e-16 ***\nORIGIN_SZPNSZ01       1.5292867  0.0055102   277.535  &lt; 2e-16 ***\nORIGIN_SZPNSZ02       0.7457519  0.0127815    58.346  &lt; 2e-16 ***\nORIGIN_SZPNSZ03      -1.3659046  0.0216180   -63.184  &lt; 2e-16 ***\nORIGIN_SZPNSZ04      -2.0025379  0.0360655   -55.525  &lt; 2e-16 ***\nORIGIN_SZPNSZ05      -0.9157959  0.0320955   -28.533  &lt; 2e-16 ***\nORIGIN_SZPRSZ01       0.0522611  0.0139142     3.756 0.000173 ***\nORIGIN_SZPRSZ02       1.3063371  0.0053809   242.774  &lt; 2e-16 ***\nORIGIN_SZPRSZ03       0.9963670  0.0054293   183.516  &lt; 2e-16 ***\nORIGIN_SZPRSZ04      -0.0300950  0.0088010    -3.419 0.000627 ***\nORIGIN_SZPRSZ05       1.6840313  0.0050839   331.245  &lt; 2e-16 ***\nORIGIN_SZPRSZ06      -0.8277202  0.0131296   -63.042  &lt; 2e-16 ***\nORIGIN_SZPRSZ07      -2.1698449  0.0177362  -122.340  &lt; 2e-16 ***\nORIGIN_SZPRSZ08       0.4559353  0.0072609    62.793  &lt; 2e-16 ***\nORIGIN_SZQTSZ01      -0.3517047  0.0078770   -44.650  &lt; 2e-16 ***\nORIGIN_SZQTSZ02      -0.8199353  0.0071544  -114.605  &lt; 2e-16 ***\nORIGIN_SZQTSZ03      -0.2457614  0.0065555   -37.490  &lt; 2e-16 ***\nORIGIN_SZQTSZ04      -1.2216614  0.0084050  -145.349  &lt; 2e-16 ***\nORIGIN_SZQTSZ05      -0.7219952  0.0072360   -99.778  &lt; 2e-16 ***\nORIGIN_SZQTSZ06      -0.6729363  0.0076658   -87.784  &lt; 2e-16 ***\nORIGIN_SZQTSZ07      -1.4497690  0.0109365  -132.563  &lt; 2e-16 ***\nORIGIN_SZQTSZ08      -0.2770151  0.0070193   -39.465  &lt; 2e-16 ***\nORIGIN_SZQTSZ09      -0.6157554  0.0078739   -78.202  &lt; 2e-16 ***\nORIGIN_SZQTSZ10      -0.3091547  0.0075471   -40.963  &lt; 2e-16 ***\nORIGIN_SZQTSZ11      -1.9698881  0.0151247  -130.243  &lt; 2e-16 ***\nORIGIN_SZQTSZ12      -2.6449643  0.0205857  -128.485  &lt; 2e-16 ***\nORIGIN_SZQTSZ13      -0.3754107  0.0088433   -42.452  &lt; 2e-16 ***\nORIGIN_SZQTSZ14      -1.6537473  0.0134378  -123.067  &lt; 2e-16 ***\nORIGIN_SZQTSZ15      -0.3435351  0.0131956   -26.034  &lt; 2e-16 ***\nORIGIN_SZRCSZ01      -1.7104390  0.0141179  -121.154  &lt; 2e-16 ***\nORIGIN_SZRCSZ06      -1.1250727  0.0094909  -118.542  &lt; 2e-16 ***\nORIGIN_SZRVSZ01      -3.0220116  0.0339694   -88.963  &lt; 2e-16 ***\nORIGIN_SZRVSZ02      -3.6040075  0.0297641  -121.086  &lt; 2e-16 ***\nORIGIN_SZRVSZ03      -3.2345594  0.0259149  -124.814  &lt; 2e-16 ***\nORIGIN_SZRVSZ04      -3.6900313  0.0575908   -64.073  &lt; 2e-16 ***\nORIGIN_SZRVSZ05      -2.9527570  0.0178582  -165.344  &lt; 2e-16 ***\nORIGIN_SZSBSZ01       0.0238445  0.0078563     3.035 0.002405 ** \nORIGIN_SZSBSZ02      -0.5780602  0.0093054   -62.121  &lt; 2e-16 ***\nORIGIN_SZSBSZ03       0.8961719  0.0054586   164.175  &lt; 2e-16 ***\nORIGIN_SZSBSZ04       0.8421798  0.0061888   136.080  &lt; 2e-16 ***\nORIGIN_SZSBSZ05      -0.1682984  0.0078342   -21.482  &lt; 2e-16 ***\nORIGIN_SZSBSZ06      -1.1482701  0.0196421   -58.460  &lt; 2e-16 ***\nORIGIN_SZSBSZ07      -0.8830317  0.0160709   -54.946  &lt; 2e-16 ***\nORIGIN_SZSBSZ08      -1.1039492  0.0174602   -63.226  &lt; 2e-16 ***\nORIGIN_SZSBSZ09      -0.5946691  0.0101961   -58.323  &lt; 2e-16 ***\nORIGIN_SZSESZ02       1.1144933  0.0050948   218.749  &lt; 2e-16 ***\nORIGIN_SZSESZ03       1.1058963  0.0049026   225.574  &lt; 2e-16 ***\nORIGIN_SZSESZ04       0.7427975  0.0056948   130.433  &lt; 2e-16 ***\nORIGIN_SZSESZ05      -0.2812684  0.0069596   -40.414  &lt; 2e-16 ***\nORIGIN_SZSESZ06       0.8168315  0.0055800   146.387  &lt; 2e-16 ***\nORIGIN_SZSESZ07      -2.2842043  0.0231232   -98.784  &lt; 2e-16 ***\nORIGIN_SZSGSZ01      -0.7313790  0.0098957   -73.909  &lt; 2e-16 ***\nORIGIN_SZSGSZ02      -1.1185406  0.0110919  -100.843  &lt; 2e-16 ***\nORIGIN_SZSGSZ03       0.1752618  0.0060508    28.965  &lt; 2e-16 ***\nORIGIN_SZSGSZ04       0.3764395  0.0056165    67.023  &lt; 2e-16 ***\nORIGIN_SZSGSZ05      -1.7203916  0.0118945  -144.637  &lt; 2e-16 ***\nORIGIN_SZSGSZ06       0.4630857  0.0052886    87.563  &lt; 2e-16 ***\nORIGIN_SZSGSZ07      -0.7051233  0.0073133   -96.417  &lt; 2e-16 ***\nORIGIN_SZSKSZ01       0.2053928  0.0100710    20.395  &lt; 2e-16 ***\nORIGIN_SZSKSZ02       1.2630428  0.0063490   198.935  &lt; 2e-16 ***\nORIGIN_SZSKSZ03      -0.3035297  0.0096788   -31.360  &lt; 2e-16 ***\nORIGIN_SZSKSZ04      -1.7952886  0.0359225   -49.977  &lt; 2e-16 ***\nORIGIN_SZSKSZ05      -0.3836861  0.0176686   -21.716  &lt; 2e-16 ***\nORIGIN_SZSLSZ01      -2.5916326  0.0348001   -74.472  &lt; 2e-16 ***\nORIGIN_SZSLSZ04      -0.2251549  0.0088517   -25.436  &lt; 2e-16 ***\nORIGIN_SZSRSZ01      -2.9590365  0.0173638  -170.414  &lt; 2e-16 ***\nORIGIN_SZTHSZ01      -1.9639893  0.0570321   -34.437  &lt; 2e-16 ***\nORIGIN_SZTHSZ03      -1.7281304  0.0272797   -63.349  &lt; 2e-16 ***\nORIGIN_SZTHSZ04      -2.7837906  0.0343179   -81.118  &lt; 2e-16 ***\nORIGIN_SZTHSZ06      -2.1800693  0.0205491  -106.091  &lt; 2e-16 ***\nORIGIN_SZTMSZ01       0.8228136  0.0066824   123.131  &lt; 2e-16 ***\nORIGIN_SZTMSZ02       2.3174781  0.0044978   515.243  &lt; 2e-16 ***\nORIGIN_SZTMSZ03       1.7061757  0.0048615   350.957  &lt; 2e-16 ***\nORIGIN_SZTMSZ04       1.2407899  0.0058389   212.504  &lt; 2e-16 ***\nORIGIN_SZTMSZ05      -0.1000526  0.0124079    -8.064 7.41e-16 ***\nORIGIN_SZTNSZ01      -2.0347519  0.0139596  -145.760  &lt; 2e-16 ***\nORIGIN_SZTNSZ02      -1.8682671  0.0107901  -173.146  &lt; 2e-16 ***\nORIGIN_SZTNSZ03      -2.1737183  0.0146759  -148.115  &lt; 2e-16 ***\nORIGIN_SZTNSZ04      -0.5006452  0.0081501   -61.428  &lt; 2e-16 ***\nORIGIN_SZTPSZ01      -0.6722487  0.0075606   -88.914  &lt; 2e-16 ***\nORIGIN_SZTPSZ02       0.4552916  0.0050191    90.711  &lt; 2e-16 ***\nORIGIN_SZTPSZ03      -0.7865781  0.0072250  -108.869  &lt; 2e-16 ***\nORIGIN_SZTPSZ04      -0.7049044  0.0066456  -106.071  &lt; 2e-16 ***\nORIGIN_SZTPSZ05      -0.5574925  0.0070366   -79.227  &lt; 2e-16 ***\nORIGIN_SZTPSZ06      -0.4247282  0.0068709   -61.815  &lt; 2e-16 ***\nORIGIN_SZTPSZ07      -0.2846984  0.0071030   -40.081  &lt; 2e-16 ***\nORIGIN_SZTPSZ08      -1.0898051  0.0110046   -99.031  &lt; 2e-16 ***\nORIGIN_SZTPSZ09      -0.8092746  0.0079160  -102.232  &lt; 2e-16 ***\nORIGIN_SZTPSZ10      -0.9332072  0.0086809  -107.502  &lt; 2e-16 ***\nORIGIN_SZTPSZ11      -0.0421981  0.0064343    -6.558 5.44e-11 ***\nORIGIN_SZTPSZ12      -0.6330081  0.0078324   -80.819  &lt; 2e-16 ***\nORIGIN_SZTSSZ01      -1.7650409  0.0517357   -34.116  &lt; 2e-16 ***\nORIGIN_SZTSSZ02       1.1707267  0.0094178   124.310  &lt; 2e-16 ***\nORIGIN_SZTSSZ03       0.6581679  0.0095894    68.635  &lt; 2e-16 ***\nORIGIN_SZTSSZ04       0.8736493  0.0104965    83.233  &lt; 2e-16 ***\nORIGIN_SZTSSZ05       0.0957248  0.0178709     5.356 8.49e-08 ***\nORIGIN_SZTSSZ06       1.7581609  0.0206810    85.013  &lt; 2e-16 ***\nORIGIN_SZWCSZ01       0.8097950  0.0105622    76.669  &lt; 2e-16 ***\nORIGIN_SZWCSZ02      -1.9966163  0.0345747   -57.748  &lt; 2e-16 ***\nORIGIN_SZWCSZ03      -5.0687420  0.1474971   -34.365  &lt; 2e-16 ***\nORIGIN_SZWDSZ01       1.4926003  0.0047216   316.124  &lt; 2e-16 ***\nORIGIN_SZWDSZ02       0.9916597  0.0055755   177.859  &lt; 2e-16 ***\nORIGIN_SZWDSZ03       1.5918065  0.0052180   305.062  &lt; 2e-16 ***\nORIGIN_SZWDSZ04       1.3717152  0.0060516   226.669  &lt; 2e-16 ***\nORIGIN_SZWDSZ05       0.6700111  0.0062287   107.569  &lt; 2e-16 ***\nORIGIN_SZWDSZ06       0.8115996  0.0060947   133.165  &lt; 2e-16 ***\nORIGIN_SZWDSZ07      -0.6488914  0.0093567   -69.351  &lt; 2e-16 ***\nORIGIN_SZWDSZ08      -0.3610234  0.0096440   -37.435  &lt; 2e-16 ***\nORIGIN_SZWDSZ09       1.4445461  0.0052279   276.317  &lt; 2e-16 ***\nORIGIN_SZYSSZ01      -0.2039272  0.0069548   -29.322  &lt; 2e-16 ***\nORIGIN_SZYSSZ02       0.8707707  0.0058957   147.697  &lt; 2e-16 ***\nORIGIN_SZYSSZ03       1.8348842  0.0050377   364.231  &lt; 2e-16 ***\nORIGIN_SZYSSZ04       1.0780641  0.0052960   203.564  &lt; 2e-16 ***\nORIGIN_SZYSSZ05       0.3222765  0.0069700    46.237  &lt; 2e-16 ***\nORIGIN_SZYSSZ06      -0.4424689  0.0124866   -35.435  &lt; 2e-16 ***\nORIGIN_SZYSSZ07      -1.0267883  0.0155821   -65.895  &lt; 2e-16 ***\nORIGIN_SZYSSZ08       0.1833117  0.0070935    25.842  &lt; 2e-16 ***\nORIGIN_SZYSSZ09       1.0766070  0.0050451   213.396  &lt; 2e-16 ***\nlog(DESTIN_AGE25_64)  0.0295428  0.0001051   280.998  &lt; 2e-16 ***\nlog(dist)            -1.7024691  0.0004625 -3681.042  &lt; 2e-16 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\n(Dispersion parameter for poisson family taken to be 1)\n\n    Null deviance: 36117615  on 14273  degrees of freedom\nResidual deviance: 12983718  on 13993  degrees of freedom\nAIC: 13068835\n\nNumber of Fisher Scoring iterations: 6\n\n\n\n\n3.8.7 Destination constrained\nIn this section, we will fit a destination constrained SIM by using the code chunk below.\n\ndecSIM &lt;- glm(formula = TRIPS ~ \n                DESTIN_SZ + \n                log(ORIGIN_AGE25_64) + \n                log(dist),\n              family = poisson(link = \"log\"),\n              data = SIM_data,\n              na.action = na.exclude)\nsummary(decSIM)\n\n\nCall:\nglm(formula = TRIPS ~ DESTIN_SZ + log(ORIGIN_AGE25_64) + log(dist), \n    family = poisson(link = \"log\"), data = SIM_data, na.action = na.exclude)\n\nCoefficients:\n                       Estimate Std. Error   z value Pr(&gt;|z|)    \n(Intercept)          19.4822997  0.0050784  3836.298  &lt; 2e-16 ***\nDESTIN_SZAMSZ02       0.1263056  0.0049743    25.392  &lt; 2e-16 ***\nDESTIN_SZAMSZ03       0.0421788  0.0049859     8.460  &lt; 2e-16 ***\nDESTIN_SZAMSZ04      -1.1668479  0.0074254  -157.143  &lt; 2e-16 ***\nDESTIN_SZAMSZ05      -1.2586639  0.0075854  -165.931  &lt; 2e-16 ***\nDESTIN_SZAMSZ06      -1.1414791  0.0073474  -155.359  &lt; 2e-16 ***\nDESTIN_SZAMSZ07      -1.5565804  0.0109476  -142.185  &lt; 2e-16 ***\nDESTIN_SZAMSZ08      -0.3990754  0.0074159   -53.813  &lt; 2e-16 ***\nDESTIN_SZAMSZ09      -1.0109118  0.0076802  -131.626  &lt; 2e-16 ***\nDESTIN_SZAMSZ10       0.0159285  0.0051765     3.077  0.00209 ** \nDESTIN_SZAMSZ11      -0.3653273  0.0094866   -38.510  &lt; 2e-16 ***\nDESTIN_SZAMSZ12       0.5297606  0.0053243    99.500  &lt; 2e-16 ***\nDESTIN_SZBDSZ01       1.0394822  0.0044226   235.037  &lt; 2e-16 ***\nDESTIN_SZBDSZ02       0.1956964  0.0059564    32.855  &lt; 2e-16 ***\nDESTIN_SZBDSZ03       0.3209267  0.0053718    59.742  &lt; 2e-16 ***\nDESTIN_SZBDSZ04       1.2429874  0.0043104   288.370  &lt; 2e-16 ***\nDESTIN_SZBDSZ05       0.8535842  0.0046360   184.122  &lt; 2e-16 ***\nDESTIN_SZBDSZ06       0.5181443  0.0053736    96.423  &lt; 2e-16 ***\nDESTIN_SZBDSZ07      -0.5849371  0.0110468   -52.951  &lt; 2e-16 ***\nDESTIN_SZBDSZ08      -1.2871050  0.0128623  -100.068  &lt; 2e-16 ***\nDESTIN_SZBKSZ01      -1.0633560  0.0077771  -136.730  &lt; 2e-16 ***\nDESTIN_SZBKSZ02      -0.4065316  0.0066712   -60.938  &lt; 2e-16 ***\nDESTIN_SZBKSZ03      -0.6815674  0.0066509  -102.477  &lt; 2e-16 ***\nDESTIN_SZBKSZ04      -0.4185485  0.0058306   -71.785  &lt; 2e-16 ***\nDESTIN_SZBKSZ05      -0.8887654  0.0073867  -120.319  &lt; 2e-16 ***\nDESTIN_SZBKSZ06      -0.9436078  0.0068625  -137.501  &lt; 2e-16 ***\nDESTIN_SZBKSZ07      -0.0067325  0.0048408    -1.391  0.16430    \nDESTIN_SZBKSZ08      -1.2680903  0.0079177  -160.160  &lt; 2e-16 ***\nDESTIN_SZBKSZ09      -0.0350151  0.0054287    -6.450 1.12e-10 ***\nDESTIN_SZBLSZ01      -0.3045203  0.0081978   -37.146  &lt; 2e-16 ***\nDESTIN_SZBLSZ02       0.6432424  0.0074449    86.400  &lt; 2e-16 ***\nDESTIN_SZBLSZ03       1.9595113  0.0084705   231.333  &lt; 2e-16 ***\nDESTIN_SZBLSZ04       0.0149756  0.0172081     0.870  0.38415    \nDESTIN_SZBMSZ01      -0.0378127  0.0055294    -6.838 8.00e-12 ***\nDESTIN_SZBMSZ02      -0.8458055  0.0054043  -156.505  &lt; 2e-16 ***\nDESTIN_SZBMSZ03      -1.1334399  0.0063720  -177.878  &lt; 2e-16 ***\nDESTIN_SZBMSZ04      -1.1164759  0.0057743  -193.353  &lt; 2e-16 ***\nDESTIN_SZBMSZ05      -1.1078742  0.0078703  -140.766  &lt; 2e-16 ***\nDESTIN_SZBMSZ06      -2.2787234  0.0155126  -146.895  &lt; 2e-16 ***\nDESTIN_SZBMSZ07      -0.2739089  0.0051924   -52.752  &lt; 2e-16 ***\nDESTIN_SZBMSZ08      -1.6825978  0.0071842  -234.209  &lt; 2e-16 ***\nDESTIN_SZBMSZ09      -3.0047801  0.0159980  -187.823  &lt; 2e-16 ***\nDESTIN_SZBMSZ10      -2.2232689  0.0096907  -229.423  &lt; 2e-16 ***\nDESTIN_SZBMSZ11      -1.9657136  0.0086445  -227.394  &lt; 2e-16 ***\nDESTIN_SZBMSZ12      -1.5359286  0.0089658  -171.310  &lt; 2e-16 ***\nDESTIN_SZBMSZ13      -0.5657561  0.0059960   -94.355  &lt; 2e-16 ***\nDESTIN_SZBMSZ14      -1.6904858  0.0084858  -199.214  &lt; 2e-16 ***\nDESTIN_SZBMSZ15      -1.5268383  0.0079959  -190.953  &lt; 2e-16 ***\nDESTIN_SZBMSZ16      -2.2045600  0.0130872  -168.452  &lt; 2e-16 ***\nDESTIN_SZBMSZ17      -2.2992381  0.0184895  -124.353  &lt; 2e-16 ***\nDESTIN_SZBPSZ01      -0.8549497  0.0065168  -131.191  &lt; 2e-16 ***\nDESTIN_SZBPSZ02      -1.7470549  0.0095751  -182.457  &lt; 2e-16 ***\nDESTIN_SZBPSZ03      -1.4015145  0.0090888  -154.203  &lt; 2e-16 ***\nDESTIN_SZBPSZ04      -0.5250632  0.0066496   -78.962  &lt; 2e-16 ***\nDESTIN_SZBPSZ05       0.3413171  0.0046404    73.553  &lt; 2e-16 ***\nDESTIN_SZBPSZ06      -0.8569188  0.0090795   -94.380  &lt; 2e-16 ***\nDESTIN_SZBPSZ07      -0.0751284  0.0089704    -8.375  &lt; 2e-16 ***\nDESTIN_SZBSSZ01       0.1015228  0.0055735    18.215  &lt; 2e-16 ***\nDESTIN_SZBSSZ02      -0.7066412  0.0063845  -110.682  &lt; 2e-16 ***\nDESTIN_SZBSSZ03       0.1622730  0.0046689    34.756  &lt; 2e-16 ***\nDESTIN_SZBTSZ01       0.5470615  0.0047984   114.009  &lt; 2e-16 ***\nDESTIN_SZBTSZ02      -0.1393371  0.0078266   -17.803  &lt; 2e-16 ***\nDESTIN_SZBTSZ03       0.1474771  0.0059428    24.816  &lt; 2e-16 ***\nDESTIN_SZBTSZ04      -1.2857827  0.0122000  -105.392  &lt; 2e-16 ***\nDESTIN_SZBTSZ05      -0.2629188  0.0081769   -32.154  &lt; 2e-16 ***\nDESTIN_SZBTSZ06      -0.8319920  0.0081401  -102.209  &lt; 2e-16 ***\nDESTIN_SZBTSZ07      -1.8829448  0.0121227  -155.324  &lt; 2e-16 ***\nDESTIN_SZBTSZ08      -1.5732123  0.0116752  -134.748  &lt; 2e-16 ***\nDESTIN_SZCBSZ01      -3.5334327  0.3333510   -10.600  &lt; 2e-16 ***\nDESTIN_SZCCSZ01      -0.2129306  0.0093782   -22.705  &lt; 2e-16 ***\nDESTIN_SZCHSZ01      -0.1494972  0.0113078   -13.221  &lt; 2e-16 ***\nDESTIN_SZCHSZ02       0.0041774  0.0063195     0.661  0.50860    \nDESTIN_SZCHSZ03       2.5565450  0.0046495   549.857  &lt; 2e-16 ***\nDESTIN_SZCKSZ01       0.0489719  0.0053801     9.102  &lt; 2e-16 ***\nDESTIN_SZCKSZ02      -0.3548993  0.0060671   -58.496  &lt; 2e-16 ***\nDESTIN_SZCKSZ03       0.5386351  0.0044913   119.928  &lt; 2e-16 ***\nDESTIN_SZCKSZ04      -0.4425512  0.0073837   -59.936  &lt; 2e-16 ***\nDESTIN_SZCKSZ05      -0.4092591  0.0077267   -52.967  &lt; 2e-16 ***\nDESTIN_SZCKSZ06       0.2207041  0.0074252    29.724  &lt; 2e-16 ***\nDESTIN_SZCLSZ01       0.2851460  0.0052362    54.457  &lt; 2e-16 ***\nDESTIN_SZCLSZ02      -1.9270528  0.0147688  -130.482  &lt; 2e-16 ***\nDESTIN_SZCLSZ03      -0.6266521  0.0086780   -72.212  &lt; 2e-16 ***\nDESTIN_SZCLSZ04      -0.1335581  0.0054216   -24.634  &lt; 2e-16 ***\nDESTIN_SZCLSZ05      -0.8912963  0.0096015   -92.829  &lt; 2e-16 ***\nDESTIN_SZCLSZ06       0.1781234  0.0048150    36.993  &lt; 2e-16 ***\nDESTIN_SZCLSZ07      -0.5609619  0.0062277   -90.075  &lt; 2e-16 ***\nDESTIN_SZCLSZ08      -0.3875308  0.0068390   -56.665  &lt; 2e-16 ***\nDESTIN_SZCLSZ09       0.2539453  0.0072623    34.968  &lt; 2e-16 ***\nDESTIN_SZDTSZ02      -2.5036295  0.0373421   -67.046  &lt; 2e-16 ***\nDESTIN_SZDTSZ03      -0.8956407  0.0149971   -59.721  &lt; 2e-16 ***\nDESTIN_SZDTSZ13      -1.6562176  0.0175441   -94.403  &lt; 2e-16 ***\nDESTIN_SZGLSZ01      -0.2716152  0.0056553   -48.029  &lt; 2e-16 ***\nDESTIN_SZGLSZ02      -0.1735665  0.0055548   -31.246  &lt; 2e-16 ***\nDESTIN_SZGLSZ03       0.7029507  0.0044934   156.441  &lt; 2e-16 ***\nDESTIN_SZGLSZ04       0.5788027  0.0045449   127.351  &lt; 2e-16 ***\nDESTIN_SZGLSZ05       0.6865291  0.0045131   152.118  &lt; 2e-16 ***\nDESTIN_SZHGSZ01       0.3275950  0.0043866    74.681  &lt; 2e-16 ***\nDESTIN_SZHGSZ02      -0.6326974  0.0063517   -99.610  &lt; 2e-16 ***\nDESTIN_SZHGSZ03      -1.0597982  0.0073914  -143.382  &lt; 2e-16 ***\nDESTIN_SZHGSZ04      -0.2267013  0.0052178   -43.448  &lt; 2e-16 ***\nDESTIN_SZHGSZ05      -0.3063050  0.0055452   -55.238  &lt; 2e-16 ***\nDESTIN_SZHGSZ06      -0.7483961  0.0065544  -114.182  &lt; 2e-16 ***\nDESTIN_SZHGSZ07       0.1096958  0.0051309    21.379  &lt; 2e-16 ***\nDESTIN_SZHGSZ08      -0.1374201  0.0056692   -24.240  &lt; 2e-16 ***\nDESTIN_SZHGSZ09       0.0775400  0.0060230    12.874  &lt; 2e-16 ***\nDESTIN_SZHGSZ10      -3.3017475  0.0289292  -114.132  &lt; 2e-16 ***\nDESTIN_SZJESZ01      -0.0489065  0.0057246    -8.543  &lt; 2e-16 ***\nDESTIN_SZJESZ02      -0.5101614  0.0060074   -84.921  &lt; 2e-16 ***\nDESTIN_SZJESZ03      -0.5328921  0.0064129   -83.097  &lt; 2e-16 ***\nDESTIN_SZJESZ04      -0.7348953  0.0082249   -89.351  &lt; 2e-16 ***\nDESTIN_SZJESZ05      -1.0864570  0.0111740   -97.231  &lt; 2e-16 ***\nDESTIN_SZJESZ06       0.2407920  0.0046801    51.451  &lt; 2e-16 ***\nDESTIN_SZJESZ07      -1.1523093  0.0090103  -127.888  &lt; 2e-16 ***\nDESTIN_SZJESZ08      -0.4627356  0.0094529   -48.952  &lt; 2e-16 ***\nDESTIN_SZJESZ09       0.0528616  0.0068126     7.759 8.53e-15 ***\nDESTIN_SZJESZ10       1.0240660  0.0084045   121.848  &lt; 2e-16 ***\nDESTIN_SZJESZ11       0.7875517  0.0076251   103.284  &lt; 2e-16 ***\nDESTIN_SZJWSZ01      -0.1533418  0.0076198   -20.124  &lt; 2e-16 ***\nDESTIN_SZJWSZ02      -0.0011019  0.0059389    -0.186  0.85280    \nDESTIN_SZJWSZ03       0.9063789  0.0046747   193.892  &lt; 2e-16 ***\nDESTIN_SZJWSZ04       0.7019286  0.0049743   141.112  &lt; 2e-16 ***\nDESTIN_SZJWSZ05      -0.5197057  0.0072971   -71.220  &lt; 2e-16 ***\nDESTIN_SZJWSZ06       0.3350986  0.0061171    54.780  &lt; 2e-16 ***\nDESTIN_SZJWSZ07      -0.5961960  0.0328336   -18.158  &lt; 2e-16 ***\nDESTIN_SZJWSZ08       0.8054662  0.0056006   143.819  &lt; 2e-16 ***\nDESTIN_SZJWSZ09       1.5860146  0.0040282   393.723  &lt; 2e-16 ***\nDESTIN_SZKLSZ01      -0.6500838  0.0063560  -102.279  &lt; 2e-16 ***\nDESTIN_SZKLSZ02      -0.7039434  0.0064465  -109.197  &lt; 2e-16 ***\nDESTIN_SZKLSZ03      -1.1972384  0.0075577  -158.413  &lt; 2e-16 ***\nDESTIN_SZKLSZ04      -1.7172228  0.0097573  -175.993  &lt; 2e-16 ***\nDESTIN_SZKLSZ05      -0.6042386  0.0093730   -64.466  &lt; 2e-16 ***\nDESTIN_SZKLSZ06      -3.0201496  0.0389503   -77.539  &lt; 2e-16 ***\nDESTIN_SZKLSZ07      -1.1522413  0.0076607  -150.409  &lt; 2e-16 ***\nDESTIN_SZKLSZ08      -0.6977825  0.0057610  -121.122  &lt; 2e-16 ***\nDESTIN_SZLKSZ01      -0.6895952  0.0268661   -25.668  &lt; 2e-16 ***\nDESTIN_SZMDSZ01      -0.7155951  0.0228203   -31.358  &lt; 2e-16 ***\nDESTIN_SZMDSZ02      -0.8153643  0.0123003   -66.288  &lt; 2e-16 ***\nDESTIN_SZMDSZ03      -2.7745226  0.0301326   -92.077  &lt; 2e-16 ***\nDESTIN_SZMPSZ01      -0.5492095  0.0087198   -62.984  &lt; 2e-16 ***\nDESTIN_SZMPSZ02      -0.6104744  0.0069346   -88.033  &lt; 2e-16 ***\nDESTIN_SZMPSZ03       0.2775047  0.0054964    50.489  &lt; 2e-16 ***\nDESTIN_SZMUSZ02      -2.6322870  0.0214943  -122.464  &lt; 2e-16 ***\nDESTIN_SZNTSZ01      -4.0762008  0.0531046   -76.758  &lt; 2e-16 ***\nDESTIN_SZNTSZ02      -1.9765545  0.0125659  -157.296  &lt; 2e-16 ***\nDESTIN_SZNTSZ03      -1.4563069  0.0085433  -170.462  &lt; 2e-16 ***\nDESTIN_SZNTSZ05      -2.0125598  0.0270737   -74.336  &lt; 2e-16 ***\nDESTIN_SZNTSZ06      -3.0145357  0.0504986   -59.695  &lt; 2e-16 ***\nDESTIN_SZNVSZ01      -0.4693625  0.0053866   -87.135  &lt; 2e-16 ***\nDESTIN_SZNVSZ02      -0.4525631  0.0060428   -74.894  &lt; 2e-16 ***\nDESTIN_SZNVSZ03      -0.4821492  0.0064725   -74.492  &lt; 2e-16 ***\nDESTIN_SZNVSZ04      -1.8929756  0.0128397  -147.432  &lt; 2e-16 ***\nDESTIN_SZNVSZ05      -1.4501752  0.0099737  -145.400  &lt; 2e-16 ***\nDESTIN_SZPGSZ01      -1.2305867  0.0174321   -70.593  &lt; 2e-16 ***\nDESTIN_SZPGSZ02      -0.8232919  0.0080153  -102.715  &lt; 2e-16 ***\nDESTIN_SZPGSZ03       0.2138480  0.0050850    42.054  &lt; 2e-16 ***\nDESTIN_SZPGSZ04       0.1045757  0.0053579    19.518  &lt; 2e-16 ***\nDESTIN_SZPGSZ05      -0.7542450  0.0088883   -84.858  &lt; 2e-16 ***\nDESTIN_SZPLSZ01      -0.0098642  0.0080428    -1.226  0.22003    \nDESTIN_SZPLSZ02      -1.2630412  0.0152594   -82.771  &lt; 2e-16 ***\nDESTIN_SZPLSZ03      -0.1554479  0.0108611   -14.312  &lt; 2e-16 ***\nDESTIN_SZPLSZ04      -1.5505819  0.0114768  -135.105  &lt; 2e-16 ***\nDESTIN_SZPLSZ05      -0.2417805  0.0130391   -18.543  &lt; 2e-16 ***\nDESTIN_SZPNSZ01       0.7926715  0.0073628   107.659  &lt; 2e-16 ***\nDESTIN_SZPNSZ02       2.1914920  0.0073537   298.013  &lt; 2e-16 ***\nDESTIN_SZPNSZ03       1.0246845  0.0086874   117.951  &lt; 2e-16 ***\nDESTIN_SZPNSZ04       2.5522612  0.0091789   278.057  &lt; 2e-16 ***\nDESTIN_SZPNSZ05       1.7995301  0.0138562   129.872  &lt; 2e-16 ***\nDESTIN_SZPRSZ01      -0.6576686  0.0096037   -68.481  &lt; 2e-16 ***\nDESTIN_SZPRSZ02       0.3113532  0.0059851    52.021  &lt; 2e-16 ***\nDESTIN_SZPRSZ03       0.9255296  0.0044779   206.687  &lt; 2e-16 ***\nDESTIN_SZPRSZ04      -0.0028578  0.0093218    -0.307  0.75917    \nDESTIN_SZPRSZ05       0.2457863  0.0058261    42.187  &lt; 2e-16 ***\nDESTIN_SZPRSZ06       0.3692137  0.0064542    57.205  &lt; 2e-16 ***\nDESTIN_SZPRSZ07      -1.6733306  0.0138440  -120.871  &lt; 2e-16 ***\nDESTIN_SZPRSZ08      -0.2221048  0.0074846   -29.675  &lt; 2e-16 ***\nDESTIN_SZQTSZ01      -1.0185488  0.0093179  -109.311  &lt; 2e-16 ***\nDESTIN_SZQTSZ02      -1.2802688  0.0081670  -156.761  &lt; 2e-16 ***\nDESTIN_SZQTSZ03      -1.3322708  0.0079106  -168.415  &lt; 2e-16 ***\nDESTIN_SZQTSZ04      -1.1803631  0.0077366  -152.568  &lt; 2e-16 ***\nDESTIN_SZQTSZ05      -1.2215818  0.0072829  -167.734  &lt; 2e-16 ***\nDESTIN_SZQTSZ06      -1.3213145  0.0074858  -176.509  &lt; 2e-16 ***\nDESTIN_SZQTSZ07      -1.6426306  0.0123347  -133.171  &lt; 2e-16 ***\nDESTIN_SZQTSZ08      -0.2224169  0.0058405   -38.082  &lt; 2e-16 ***\nDESTIN_SZQTSZ09      -0.8142678  0.0069796  -116.665  &lt; 2e-16 ***\nDESTIN_SZQTSZ10      -0.1090496  0.0062573   -17.428  &lt; 2e-16 ***\nDESTIN_SZQTSZ11      -0.0108951  0.0061145    -1.782  0.07477 .  \nDESTIN_SZQTSZ12      -0.8582515  0.0090243   -95.105  &lt; 2e-16 ***\nDESTIN_SZQTSZ13       0.1834409  0.0065231    28.122  &lt; 2e-16 ***\nDESTIN_SZQTSZ14       0.1994454  0.0073615    27.093  &lt; 2e-16 ***\nDESTIN_SZQTSZ15       0.6740197  0.0088699    75.990  &lt; 2e-16 ***\nDESTIN_SZRCSZ01      -0.7746427  0.0079375   -97.593  &lt; 2e-16 ***\nDESTIN_SZRCSZ06      -1.4394098  0.0209931   -68.566  &lt; 2e-16 ***\nDESTIN_SZRVSZ01      -2.6060495  0.0175759  -148.274  &lt; 2e-16 ***\nDESTIN_SZRVSZ02      -2.5823769  0.0354706   -72.803  &lt; 2e-16 ***\nDESTIN_SZRVSZ03      -2.5890601  0.0152644  -169.614  &lt; 2e-16 ***\nDESTIN_SZRVSZ04      -2.2277482  0.0165661  -134.477  &lt; 2e-16 ***\nDESTIN_SZRVSZ05      -3.8610445  0.0298251  -129.456  &lt; 2e-16 ***\nDESTIN_SZSBSZ01      -1.2035529  0.0103954  -115.777  &lt; 2e-16 ***\nDESTIN_SZSBSZ02      -1.0267199  0.0085239  -120.452  &lt; 2e-16 ***\nDESTIN_SZSBSZ03       0.5977382  0.0050336   118.750  &lt; 2e-16 ***\nDESTIN_SZSBSZ04       0.5362769  0.0060573    88.534  &lt; 2e-16 ***\nDESTIN_SZSBSZ05      -1.0440525  0.0089622  -116.495  &lt; 2e-16 ***\nDESTIN_SZSBSZ06      -1.3939595  0.0246679   -56.509  &lt; 2e-16 ***\nDESTIN_SZSBSZ07       0.1029116  0.0235414     4.372 1.23e-05 ***\nDESTIN_SZSBSZ08       1.3564902  0.0060529   224.105  &lt; 2e-16 ***\nDESTIN_SZSBSZ09       0.4573712  0.0056585    80.829  &lt; 2e-16 ***\nDESTIN_SZSESZ02      -0.1553609  0.0056716   -27.393  &lt; 2e-16 ***\nDESTIN_SZSESZ03       0.5412776  0.0043801   123.576  &lt; 2e-16 ***\nDESTIN_SZSESZ04      -0.6382091  0.0065411   -97.568  &lt; 2e-16 ***\nDESTIN_SZSESZ05      -0.3332093  0.0055002   -60.581  &lt; 2e-16 ***\nDESTIN_SZSESZ06      -0.3085951  0.0072340   -42.659  &lt; 2e-16 ***\nDESTIN_SZSESZ07      -2.6237684  0.0245753  -106.764  &lt; 2e-16 ***\nDESTIN_SZSGSZ01      -0.1062372  0.0066634   -15.943  &lt; 2e-16 ***\nDESTIN_SZSGSZ02      -0.0475568  0.0058908    -8.073 6.85e-16 ***\nDESTIN_SZSGSZ03      -0.2118402  0.0055056   -38.477  &lt; 2e-16 ***\nDESTIN_SZSGSZ04      -0.1099618  0.0054841   -20.051  &lt; 2e-16 ***\nDESTIN_SZSGSZ05      -2.1556963  0.0113821  -189.394  &lt; 2e-16 ***\nDESTIN_SZSGSZ06       0.4416352  0.0043842   100.734  &lt; 2e-16 ***\nDESTIN_SZSGSZ07      -0.3949335  0.0059250   -66.655  &lt; 2e-16 ***\nDESTIN_SZSISZ01      -1.2847094  0.0288610   -44.514  &lt; 2e-16 ***\nDESTIN_SZSKSZ01       0.3089834  0.0082924    37.261  &lt; 2e-16 ***\nDESTIN_SZSKSZ02       1.4139309  0.0059981   235.729  &lt; 2e-16 ***\nDESTIN_SZSKSZ03       0.2427688  0.0067373    36.034  &lt; 2e-16 ***\nDESTIN_SZSKSZ04      -0.2527488  0.0161286   -15.671  &lt; 2e-16 ***\nDESTIN_SZSKSZ05       0.6046051  0.0122766    49.249  &lt; 2e-16 ***\nDESTIN_SZSLSZ01      -0.3927387  0.0099790   -39.356  &lt; 2e-16 ***\nDESTIN_SZSLSZ04      -0.5942110  0.0086225   -68.914  &lt; 2e-16 ***\nDESTIN_SZSRSZ01      -2.6855766  0.0138707  -193.615  &lt; 2e-16 ***\nDESTIN_SZTHSZ01      -3.2750084  0.0402668   -81.333  &lt; 2e-16 ***\nDESTIN_SZTHSZ03      -1.7964408  0.0261810   -68.616  &lt; 2e-16 ***\nDESTIN_SZTHSZ04      -2.6323994  0.0241831  -108.853  &lt; 2e-16 ***\nDESTIN_SZTHSZ06      -1.9444390  0.0166052  -117.098  &lt; 2e-16 ***\nDESTIN_SZTMSZ01       0.3856054  0.0063086    61.123  &lt; 2e-16 ***\nDESTIN_SZTMSZ02       1.8586526  0.0039229   473.790  &lt; 2e-16 ***\nDESTIN_SZTMSZ03       1.2601385  0.0044018   286.278  &lt; 2e-16 ***\nDESTIN_SZTMSZ04       1.5884327  0.0043362   366.316  &lt; 2e-16 ***\nDESTIN_SZTMSZ05       1.0377553  0.0063271   164.018  &lt; 2e-16 ***\nDESTIN_SZTNSZ01      -0.9954275  0.0080345  -123.895  &lt; 2e-16 ***\nDESTIN_SZTNSZ02      -2.1032696  0.0109228  -192.557  &lt; 2e-16 ***\nDESTIN_SZTNSZ03      -2.0044892  0.0129215  -155.128  &lt; 2e-16 ***\nDESTIN_SZTNSZ04      -0.9750326  0.0081677  -119.377  &lt; 2e-16 ***\nDESTIN_SZTPSZ01      -0.7788383  0.0068769  -113.254  &lt; 2e-16 ***\nDESTIN_SZTPSZ02       0.2866080  0.0042843    66.898  &lt; 2e-16 ***\nDESTIN_SZTPSZ03      -0.8749841  0.0065470  -133.646  &lt; 2e-16 ***\nDESTIN_SZTPSZ04      -1.6852792  0.0081488  -206.812  &lt; 2e-16 ***\nDESTIN_SZTPSZ05      -1.3721346  0.0068230  -201.104  &lt; 2e-16 ***\nDESTIN_SZTPSZ06      -0.7832133  0.0069164  -113.239  &lt; 2e-16 ***\nDESTIN_SZTPSZ07      -2.3109126  0.0130830  -176.635  &lt; 2e-16 ***\nDESTIN_SZTPSZ08      -1.6406531  0.0104897  -156.406  &lt; 2e-16 ***\nDESTIN_SZTPSZ09      -0.5636273  0.0076848   -73.343  &lt; 2e-16 ***\nDESTIN_SZTPSZ10      -1.5640843  0.0099984  -156.433  &lt; 2e-16 ***\nDESTIN_SZTPSZ11      -0.3700482  0.0059834   -61.846  &lt; 2e-16 ***\nDESTIN_SZTPSZ12      -0.8828228  0.0072302  -122.102  &lt; 2e-16 ***\nDESTIN_SZTSSZ01       0.3529526  0.0221887    15.907  &lt; 2e-16 ***\nDESTIN_SZTSSZ02       1.0265792  0.0153515    66.871  &lt; 2e-16 ***\nDESTIN_SZTSSZ03       1.9647347  0.0092388   212.662  &lt; 2e-16 ***\nDESTIN_SZTSSZ04       1.8649836  0.0089976   207.275  &lt; 2e-16 ***\nDESTIN_SZTSSZ05       2.8437058  0.0085738   331.673  &lt; 2e-16 ***\nDESTIN_SZTSSZ06       3.4238870  0.0161304   212.263  &lt; 2e-16 ***\nDESTIN_SZWCSZ01       2.9550693  0.0051690   571.689  &lt; 2e-16 ***\nDESTIN_SZWCSZ02      -0.8214103  0.0129213   -63.570  &lt; 2e-16 ***\nDESTIN_SZWCSZ03      -1.7393427  0.0347472   -50.057  &lt; 2e-16 ***\nDESTIN_SZWDSZ01       1.3424417  0.0039957   335.972  &lt; 2e-16 ***\nDESTIN_SZWDSZ02      -0.2103694  0.0068601   -30.666  &lt; 2e-16 ***\nDESTIN_SZWDSZ03       0.8268551  0.0051363   160.983  &lt; 2e-16 ***\nDESTIN_SZWDSZ04      -0.0643997  0.0079076    -8.144 3.82e-16 ***\nDESTIN_SZWDSZ05       0.0451985  0.0075732     5.968 2.40e-09 ***\nDESTIN_SZWDSZ06       0.6981330  0.0051936   134.423  &lt; 2e-16 ***\nDESTIN_SZWDSZ07      -0.0403233  0.0067749    -5.952 2.65e-09 ***\nDESTIN_SZWDSZ08       0.2850631  0.0069225    41.179  &lt; 2e-16 ***\nDESTIN_SZWDSZ09       1.3016106  0.0050365   258.433  &lt; 2e-16 ***\nDESTIN_SZYSSZ01       0.7598564  0.0044144   172.133  &lt; 2e-16 ***\nDESTIN_SZYSSZ02       0.2648061  0.0058239    45.469  &lt; 2e-16 ***\nDESTIN_SZYSSZ03      -0.0412163  0.0068337    -6.031 1.63e-09 ***\nDESTIN_SZYSSZ04      -0.0561054  0.0060829    -9.223  &lt; 2e-16 ***\nDESTIN_SZYSSZ05      -0.9970159  0.0121827   -81.839  &lt; 2e-16 ***\nDESTIN_SZYSSZ06      -1.3808376  0.0125738  -109.819  &lt; 2e-16 ***\nDESTIN_SZYSSZ07      -0.7128364  0.0165296   -43.125  &lt; 2e-16 ***\nDESTIN_SZYSSZ08       0.9409510  0.0045886   205.064  &lt; 2e-16 ***\nDESTIN_SZYSSZ09       0.3738436  0.0047971    77.930  &lt; 2e-16 ***\nlog(ORIGIN_AGE25_64)  0.1928847  0.0001667  1157.214  &lt; 2e-16 ***\nlog(dist)            -1.7828141  0.0004794 -3718.501  &lt; 2e-16 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\n(Dispersion parameter for poisson family taken to be 1)\n\n    Null deviance: 36117615  on 14273  degrees of freedom\nResidual deviance: 12319763  on 13992  degrees of freedom\nAIC: 12404881\n\nNumber of Fisher Scoring iterations: 7\n\n\nWe can examine how the constraints hold for destinations this time.\n\nCalcRSquared(decSIM$data$TRIPS, decSIM$fitted.values)\n\n[1] 0.496166\n\n\n\n\n3.8.8 Doubly constrained\nIn this section, we will fit a doubly constrained SIM by using the code chunk below.\n\ndbcSIM &lt;- glm(formula = TRIPS ~ \n                ORIGIN_SZ + \n                DESTIN_SZ + \n                log(dist),\n              family = poisson(link = \"log\"),\n              data = SIM_data,\n              na.action = na.exclude)\nsummary(dbcSIM)\n\n\nCall:\nglm(formula = TRIPS ~ ORIGIN_SZ + DESTIN_SZ + log(dist), family = poisson(link = \"log\"), \n    data = SIM_data, na.action = na.exclude)\n\nCoefficients:\n                  Estimate Std. Error   z value Pr(&gt;|z|)    \n(Intercept)     21.9587595  0.0066831  3285.715  &lt; 2e-16 ***\nORIGIN_SZAMSZ02  0.4778050  0.0054127    88.275  &lt; 2e-16 ***\nORIGIN_SZAMSZ03  0.2895973  0.0055517    52.163  &lt; 2e-16 ***\nORIGIN_SZAMSZ04 -0.2628080  0.0060720   -43.282  &lt; 2e-16 ***\nORIGIN_SZAMSZ05 -0.2631404  0.0069008   -38.132  &lt; 2e-16 ***\nORIGIN_SZAMSZ06  0.1722337  0.0062028    27.767  &lt; 2e-16 ***\nORIGIN_SZAMSZ07 -0.9883200  0.0111224   -88.859  &lt; 2e-16 ***\nORIGIN_SZAMSZ08 -0.4052821  0.0104095   -38.934  &lt; 2e-16 ***\nORIGIN_SZAMSZ09  0.0356290  0.0064816     5.497 3.86e-08 ***\nORIGIN_SZAMSZ10  0.4815569  0.0055521    86.735  &lt; 2e-16 ***\nORIGIN_SZAMSZ11 -1.4440079  0.0146079   -98.851  &lt; 2e-16 ***\nORIGIN_SZAMSZ12 -1.7862677  0.0128071  -139.475  &lt; 2e-16 ***\nORIGIN_SZBDSZ01  0.8653749  0.0054381   159.132  &lt; 2e-16 ***\nORIGIN_SZBDSZ02  0.0841000  0.0062834    13.385  &lt; 2e-16 ***\nORIGIN_SZBDSZ03  0.3158343  0.0057510    54.918  &lt; 2e-16 ***\nORIGIN_SZBDSZ04  1.4556701  0.0049986   291.215  &lt; 2e-16 ***\nORIGIN_SZBDSZ05  0.6363125  0.0057193   111.257  &lt; 2e-16 ***\nORIGIN_SZBDSZ06  0.6749341  0.0058650   115.078  &lt; 2e-16 ***\nORIGIN_SZBDSZ07 -1.2176407  0.0113698  -107.095  &lt; 2e-16 ***\nORIGIN_SZBDSZ08 -0.9803580  0.0105604   -92.833  &lt; 2e-16 ***\nORIGIN_SZBKSZ01 -0.2919642  0.0080763   -36.151  &lt; 2e-16 ***\nORIGIN_SZBKSZ02  0.4609570  0.0067997    67.791  &lt; 2e-16 ***\nORIGIN_SZBKSZ03  0.6273448  0.0065989    95.068  &lt; 2e-16 ***\nORIGIN_SZBKSZ04 -0.2499063  0.0076555   -32.644  &lt; 2e-16 ***\nORIGIN_SZBKSZ05 -0.2628428  0.0078905   -33.311  &lt; 2e-16 ***\nORIGIN_SZBKSZ06 -0.2174034  0.0075134   -28.936  &lt; 2e-16 ***\nORIGIN_SZBKSZ07  0.7094093  0.0058574   121.114  &lt; 2e-16 ***\nORIGIN_SZBKSZ08 -0.1614362  0.0067626   -23.872  &lt; 2e-16 ***\nORIGIN_SZBKSZ09 -0.2739085  0.0072969   -37.537  &lt; 2e-16 ***\nORIGIN_SZBLSZ01 -2.4281074  0.0181172  -134.022  &lt; 2e-16 ***\nORIGIN_SZBLSZ02 -2.7305447  0.0219341  -124.489  &lt; 2e-16 ***\nORIGIN_SZBLSZ03 -3.3071431  0.0540398   -61.198  &lt; 2e-16 ***\nORIGIN_SZBLSZ04 -2.4550671  0.0263946   -93.014  &lt; 2e-16 ***\nORIGIN_SZBMSZ01  0.1198976  0.0065964    18.176  &lt; 2e-16 ***\nORIGIN_SZBMSZ02 -1.3908667  0.0083230  -167.112  &lt; 2e-16 ***\nORIGIN_SZBMSZ03 -0.6999122  0.0069754  -100.339  &lt; 2e-16 ***\nORIGIN_SZBMSZ04 -0.2691159  0.0066184   -40.662  &lt; 2e-16 ***\nORIGIN_SZBMSZ05 -2.6163780  0.0190989  -136.991  &lt; 2e-16 ***\nORIGIN_SZBMSZ06 -2.9729956  0.0197182  -150.774  &lt; 2e-16 ***\nORIGIN_SZBMSZ07 -0.7309916  0.0072407  -100.956  &lt; 2e-16 ***\nORIGIN_SZBMSZ08 -1.0019514  0.0073169  -136.936  &lt; 2e-16 ***\nORIGIN_SZBMSZ09 -1.3667460  0.0105325  -129.764  &lt; 2e-16 ***\nORIGIN_SZBMSZ10 -1.6907268  0.0106687  -158.476  &lt; 2e-16 ***\nORIGIN_SZBMSZ11 -1.2288802  0.0082919  -148.202  &lt; 2e-16 ***\nORIGIN_SZBMSZ12 -1.6517767  0.0115101  -143.507  &lt; 2e-16 ***\nORIGIN_SZBMSZ13 -0.7251351  0.0075289   -96.314  &lt; 2e-16 ***\nORIGIN_SZBMSZ14 -1.1534912  0.0082629  -139.599  &lt; 2e-16 ***\nORIGIN_SZBMSZ15 -0.5476774  0.0075710   -72.339  &lt; 2e-16 ***\nORIGIN_SZBMSZ16 -1.5195034  0.0111459  -136.329  &lt; 2e-16 ***\nORIGIN_SZBMSZ17 -1.6026767  0.0184419   -86.904  &lt; 2e-16 ***\nORIGIN_SZBPSZ01  0.5571291  0.0071866    77.523  &lt; 2e-16 ***\nORIGIN_SZBPSZ02  0.0523197  0.0082259     6.360 2.01e-10 ***\nORIGIN_SZBPSZ03  0.2942047  0.0080482    36.555  &lt; 2e-16 ***\nORIGIN_SZBPSZ04  0.6246296  0.0065878    94.816  &lt; 2e-16 ***\nORIGIN_SZBPSZ05  0.8663708  0.0060852   142.372  &lt; 2e-16 ***\nORIGIN_SZBPSZ06 -0.9896182  0.0109551   -90.334  &lt; 2e-16 ***\nORIGIN_SZBPSZ07 -0.5219250  0.0101830   -51.255  &lt; 2e-16 ***\nORIGIN_SZBSSZ01  0.3299588  0.0066440    49.663  &lt; 2e-16 ***\nORIGIN_SZBSSZ02  0.2851357  0.0057077    49.956  &lt; 2e-16 ***\nORIGIN_SZBSSZ03 -0.2084740  0.0063364   -32.901  &lt; 2e-16 ***\nORIGIN_SZBTSZ01  0.1425664  0.0071103    20.051  &lt; 2e-16 ***\nORIGIN_SZBTSZ02 -0.5591999  0.0093616   -59.733  &lt; 2e-16 ***\nORIGIN_SZBTSZ03 -0.3648190  0.0081677   -44.666  &lt; 2e-16 ***\nORIGIN_SZBTSZ04 -1.4555078  0.0120138  -121.152  &lt; 2e-16 ***\nORIGIN_SZBTSZ05 -0.8635510  0.0133848   -64.517  &lt; 2e-16 ***\nORIGIN_SZBTSZ06 -1.1383111  0.0106421  -106.963  &lt; 2e-16 ***\nORIGIN_SZBTSZ07 -2.3477669  0.0160858  -145.953  &lt; 2e-16 ***\nORIGIN_SZBTSZ08 -1.2918779  0.0124862  -103.464  &lt; 2e-16 ***\nORIGIN_SZCBSZ01 -3.3713588  0.0578683   -58.259  &lt; 2e-16 ***\nORIGIN_SZCCSZ01 -0.6029242  0.0153385   -39.308  &lt; 2e-16 ***\nORIGIN_SZCHSZ01 -0.7641380  0.0135100   -56.561  &lt; 2e-16 ***\nORIGIN_SZCHSZ02 -0.8400736  0.0101951   -82.400  &lt; 2e-16 ***\nORIGIN_SZCHSZ03  1.2753127  0.0072576   175.720  &lt; 2e-16 ***\nORIGIN_SZCKSZ01  0.2470943  0.0067135    36.806  &lt; 2e-16 ***\nORIGIN_SZCKSZ02  0.5793581  0.0070498    82.181  &lt; 2e-16 ***\nORIGIN_SZCKSZ03  1.0795767  0.0060642   178.025  &lt; 2e-16 ***\nORIGIN_SZCKSZ04  1.4947920  0.0063122   236.808  &lt; 2e-16 ***\nORIGIN_SZCKSZ05  0.7457580  0.0074071   100.681  &lt; 2e-16 ***\nORIGIN_SZCKSZ06  0.5760952  0.0094861    60.730  &lt; 2e-16 ***\nORIGIN_SZCLSZ01 -0.9061335  0.0098617   -91.884  &lt; 2e-16 ***\nORIGIN_SZCLSZ02 -1.7609479  0.0156124  -112.791  &lt; 2e-16 ***\nORIGIN_SZCLSZ03 -1.0081325  0.0095171  -105.929  &lt; 2e-16 ***\nORIGIN_SZCLSZ04  0.6181200  0.0057953   106.659  &lt; 2e-16 ***\nORIGIN_SZCLSZ05 -2.0462335  0.0168934  -121.127  &lt; 2e-16 ***\nORIGIN_SZCLSZ06  0.7902389  0.0055680   141.924  &lt; 2e-16 ***\nORIGIN_SZCLSZ07 -0.5472929  0.0071001   -77.082  &lt; 2e-16 ***\nORIGIN_SZCLSZ08 -0.2197650  0.0077460   -28.372  &lt; 2e-16 ***\nORIGIN_SZCLSZ09 -1.8175782  0.0195989   -92.739  &lt; 2e-16 ***\nORIGIN_SZDTSZ02 -3.7618796  0.0872098   -43.136  &lt; 2e-16 ***\nORIGIN_SZDTSZ03 -3.4514766  0.0840812   -41.049  &lt; 2e-16 ***\nORIGIN_SZDTSZ13 -3.0627578  0.0352485   -86.891  &lt; 2e-16 ***\nORIGIN_SZGLSZ01 -1.8055929  0.0111938  -161.303  &lt; 2e-16 ***\nORIGIN_SZGLSZ02 -0.1588829  0.0061413   -25.871  &lt; 2e-16 ***\nORIGIN_SZGLSZ03 -0.2508524  0.0064276   -39.027  &lt; 2e-16 ***\nORIGIN_SZGLSZ04  0.8819358  0.0051993   169.627  &lt; 2e-16 ***\nORIGIN_SZGLSZ05  0.6062778  0.0053735   112.828  &lt; 2e-16 ***\nORIGIN_SZHGSZ01  0.3841503  0.0056776    67.660  &lt; 2e-16 ***\nORIGIN_SZHGSZ02  0.3962330  0.0057579    68.815  &lt; 2e-16 ***\nORIGIN_SZHGSZ03  0.2159531  0.0061671    35.017  &lt; 2e-16 ***\nORIGIN_SZHGSZ04  0.7831941  0.0052216   149.992  &lt; 2e-16 ***\nORIGIN_SZHGSZ05  1.1741558  0.0051799   226.677  &lt; 2e-16 ***\nORIGIN_SZHGSZ06 -0.1891403  0.0065556   -28.852  &lt; 2e-16 ***\nORIGIN_SZHGSZ07  0.3105421  0.0057186    54.304  &lt; 2e-16 ***\nORIGIN_SZHGSZ08 -0.0766364  0.0063474   -12.074  &lt; 2e-16 ***\nORIGIN_SZHGSZ09 -1.2211107  0.0101434  -120.384  &lt; 2e-16 ***\nORIGIN_SZHGSZ10 -3.4844709  0.0504793   -69.028  &lt; 2e-16 ***\nORIGIN_SZJESZ01  0.4916496  0.0063444    77.493  &lt; 2e-16 ***\nORIGIN_SZJESZ02  0.1343893  0.0063762    21.077  &lt; 2e-16 ***\nORIGIN_SZJESZ03 -0.2761723  0.0068085   -40.563  &lt; 2e-16 ***\nORIGIN_SZJESZ04 -1.5932744  0.0121402  -131.240  &lt; 2e-16 ***\nORIGIN_SZJESZ05 -2.3041311  0.0160245  -143.788  &lt; 2e-16 ***\nORIGIN_SZJESZ06  0.2811076  0.0062495    44.981  &lt; 2e-16 ***\nORIGIN_SZJESZ07 -1.9413956  0.0136276  -142.461  &lt; 2e-16 ***\nORIGIN_SZJESZ08 -1.3315645  0.0143168   -93.007  &lt; 2e-16 ***\nORIGIN_SZJESZ09  0.4418314  0.0069208    63.841  &lt; 2e-16 ***\nORIGIN_SZJESZ10 -1.5551555  0.0236523   -65.751  &lt; 2e-16 ***\nORIGIN_SZJESZ11 -1.8888230  0.0224630   -84.086  &lt; 2e-16 ***\nORIGIN_SZJWSZ01  0.2564586  0.0084699    30.279  &lt; 2e-16 ***\nORIGIN_SZJWSZ02  0.6899398  0.0061751   111.729  &lt; 2e-16 ***\nORIGIN_SZJWSZ03  1.4761229  0.0057392   257.198  &lt; 2e-16 ***\nORIGIN_SZJWSZ04  0.5701272  0.0065749    86.713  &lt; 2e-16 ***\nORIGIN_SZJWSZ05 -2.1253657  0.0150769  -140.968  &lt; 2e-16 ***\nORIGIN_SZJWSZ06 -1.5307265  0.0131906  -116.047  &lt; 2e-16 ***\nORIGIN_SZJWSZ07 -2.8801618  0.0360772   -79.833  &lt; 2e-16 ***\nORIGIN_SZJWSZ08  1.4428820  0.0059638   241.938  &lt; 2e-16 ***\nORIGIN_SZJWSZ09  1.8968475  0.0055649   340.860  &lt; 2e-16 ***\nORIGIN_SZKLSZ01  0.1116580  0.0059844    18.658  &lt; 2e-16 ***\nORIGIN_SZKLSZ02 -0.9618787  0.0077344  -124.364  &lt; 2e-16 ***\nORIGIN_SZKLSZ03 -0.7070626  0.0070275  -100.613  &lt; 2e-16 ***\nORIGIN_SZKLSZ04 -2.2742765  0.0139991  -162.459  &lt; 2e-16 ***\nORIGIN_SZKLSZ05 -1.1907262  0.0123719   -96.244  &lt; 2e-16 ***\nORIGIN_SZKLSZ06 -5.9774897  0.1857994   -32.172  &lt; 2e-16 ***\nORIGIN_SZKLSZ07 -1.4258369  0.0103083  -138.320  &lt; 2e-16 ***\nORIGIN_SZKLSZ08 -1.7625888  0.0116107  -151.808  &lt; 2e-16 ***\nORIGIN_SZLKSZ01 -2.0541388  0.0448216   -45.829  &lt; 2e-16 ***\nORIGIN_SZMDSZ01 -0.8571117  0.0321054   -26.697  &lt; 2e-16 ***\nORIGIN_SZMDSZ02 -0.6034597  0.0120724   -49.987  &lt; 2e-16 ***\nORIGIN_SZMDSZ03 -2.1681163  0.0201078  -107.825  &lt; 2e-16 ***\nORIGIN_SZMPSZ01 -0.9331562  0.0096218   -96.984  &lt; 2e-16 ***\nORIGIN_SZMPSZ02 -1.0268229  0.0081379  -126.178  &lt; 2e-16 ***\nORIGIN_SZMPSZ03  0.0054001  0.0066875     0.807 0.419385    \nORIGIN_SZMUSZ02 -3.6269863  0.1105492   -32.809  &lt; 2e-16 ***\nORIGIN_SZNTSZ01 -3.0593717  0.0399843   -76.514  &lt; 2e-16 ***\nORIGIN_SZNTSZ02 -3.3331415  0.0251754  -132.397  &lt; 2e-16 ***\nORIGIN_SZNTSZ03 -0.8351522  0.0090372   -92.413  &lt; 2e-16 ***\nORIGIN_SZNTSZ05 -4.2082472  0.0583343   -72.140  &lt; 2e-16 ***\nORIGIN_SZNTSZ06 -3.8549296  0.0593793   -64.920  &lt; 2e-16 ***\nORIGIN_SZNVSZ01  0.2789069  0.0056024    49.784  &lt; 2e-16 ***\nORIGIN_SZNVSZ02 -0.6036857  0.0077126   -78.273  &lt; 2e-16 ***\nORIGIN_SZNVSZ03 -1.0072683  0.0092678  -108.685  &lt; 2e-16 ***\nORIGIN_SZNVSZ04 -0.8723996  0.0101399   -86.037  &lt; 2e-16 ***\nORIGIN_SZNVSZ05 -2.1552928  0.0183064  -117.734  &lt; 2e-16 ***\nORIGIN_SZPGSZ01  0.0520607  0.0157846     3.298 0.000973 ***\nORIGIN_SZPGSZ02 -0.3481687  0.0089328   -38.976  &lt; 2e-16 ***\nORIGIN_SZPGSZ03  0.9095292  0.0058835   154.590  &lt; 2e-16 ***\nORIGIN_SZPGSZ04  1.3653717  0.0054727   249.489  &lt; 2e-16 ***\nORIGIN_SZPGSZ05  0.3762720  0.0073841    50.957  &lt; 2e-16 ***\nORIGIN_SZPLSZ01 -0.9142754  0.0136552   -66.954  &lt; 2e-16 ***\nORIGIN_SZPLSZ02 -1.0987582  0.0175891   -62.468  &lt; 2e-16 ***\nORIGIN_SZPLSZ03 -2.3427113  0.0474176   -49.406  &lt; 2e-16 ***\nORIGIN_SZPLSZ04 -2.9140779  0.0374458   -77.821  &lt; 2e-16 ***\nORIGIN_SZPLSZ05 -2.2381965  0.0261572   -85.567  &lt; 2e-16 ***\nORIGIN_SZPNSZ01  0.9659006  0.0075177   128.484  &lt; 2e-16 ***\nORIGIN_SZPNSZ02 -0.0158348  0.0143869    -1.101 0.271053    \nORIGIN_SZPNSZ03 -2.1837321  0.0224396   -97.316  &lt; 2e-16 ***\nORIGIN_SZPNSZ04 -3.2481509  0.0370762   -87.608  &lt; 2e-16 ***\nORIGIN_SZPNSZ05 -2.0450679  0.0328165   -62.318  &lt; 2e-16 ***\nORIGIN_SZPRSZ01 -0.6701245  0.0141567   -47.336  &lt; 2e-16 ***\nORIGIN_SZPRSZ02  0.7931907  0.0058079   136.570  &lt; 2e-16 ***\nORIGIN_SZPRSZ03  0.4249094  0.0058610    72.498  &lt; 2e-16 ***\nORIGIN_SZPRSZ04 -0.8529967  0.0090997   -93.739  &lt; 2e-16 ***\nORIGIN_SZPRSZ05  0.7865479  0.0055282   142.278  &lt; 2e-16 ***\nORIGIN_SZPRSZ06 -1.3303664  0.0134512   -98.903  &lt; 2e-16 ***\nORIGIN_SZPRSZ07 -3.0458370  0.0181514  -167.802  &lt; 2e-16 ***\nORIGIN_SZPRSZ08 -0.5342399  0.0075966   -70.327  &lt; 2e-16 ***\nORIGIN_SZQTSZ01 -0.2548930  0.0086485   -29.473  &lt; 2e-16 ***\nORIGIN_SZQTSZ02 -0.8662439  0.0076549  -113.162  &lt; 2e-16 ***\nORIGIN_SZQTSZ03 -0.0890168  0.0072455   -12.286  &lt; 2e-16 ***\nORIGIN_SZQTSZ04 -1.4634370  0.0089384  -163.724  &lt; 2e-16 ***\nORIGIN_SZQTSZ05 -0.6535669  0.0077612   -84.210  &lt; 2e-16 ***\nORIGIN_SZQTSZ06 -0.8275765  0.0081835  -101.128  &lt; 2e-16 ***\nORIGIN_SZQTSZ07 -1.5369800  0.0112808  -136.248  &lt; 2e-16 ***\nORIGIN_SZQTSZ08 -0.4437979  0.0075302   -58.936  &lt; 2e-16 ***\nORIGIN_SZQTSZ09 -0.8184934  0.0083589   -97.918  &lt; 2e-16 ***\nORIGIN_SZQTSZ10 -0.6906597  0.0080980   -85.288  &lt; 2e-16 ***\nORIGIN_SZQTSZ11 -2.3251162  0.0154191  -150.795  &lt; 2e-16 ***\nORIGIN_SZQTSZ12 -3.0442790  0.0208985  -145.670  &lt; 2e-16 ***\nORIGIN_SZQTSZ13 -0.7241013  0.0093441   -77.493  &lt; 2e-16 ***\nORIGIN_SZQTSZ14 -1.8225351  0.0138207  -131.870  &lt; 2e-16 ***\nORIGIN_SZQTSZ15 -0.8720806  0.0138589   -62.926  &lt; 2e-16 ***\nORIGIN_SZRCSZ01 -1.8063415  0.0144295  -125.184  &lt; 2e-16 ***\nORIGIN_SZRCSZ06 -0.5370905  0.0101573   -52.877  &lt; 2e-16 ***\nORIGIN_SZRVSZ01 -2.7426167  0.0341386   -80.338  &lt; 2e-16 ***\nORIGIN_SZRVSZ02 -3.0827269  0.0302299  -101.976  &lt; 2e-16 ***\nORIGIN_SZRVSZ03 -2.9133853  0.0262543  -110.968  &lt; 2e-16 ***\nORIGIN_SZRVSZ04 -3.4220022  0.0582209   -58.776  &lt; 2e-16 ***\nORIGIN_SZRVSZ05 -2.6206257  0.0197470  -132.710  &lt; 2e-16 ***\nORIGIN_SZSBSZ01  0.1010337  0.0085117    11.870  &lt; 2e-16 ***\nORIGIN_SZSBSZ02 -0.8810456  0.0098244   -89.680  &lt; 2e-16 ***\nORIGIN_SZSBSZ03  0.8303668  0.0063009   131.785  &lt; 2e-16 ***\nORIGIN_SZSBSZ04  0.3489128  0.0071456    48.829  &lt; 2e-16 ***\nORIGIN_SZSBSZ05 -0.3182914  0.0085560   -37.201  &lt; 2e-16 ***\nORIGIN_SZSBSZ06 -0.9074308  0.0200035   -45.364  &lt; 2e-16 ***\nORIGIN_SZSBSZ07 -0.2217124  0.0167188   -13.261  &lt; 2e-16 ***\nORIGIN_SZSBSZ08 -1.3007367  0.0178771   -72.760  &lt; 2e-16 ***\nORIGIN_SZSBSZ09 -0.9813703  0.0107885   -90.965  &lt; 2e-16 ***\nORIGIN_SZSESZ02  1.1283424  0.0054209   208.146  &lt; 2e-16 ***\nORIGIN_SZSESZ03  1.2389996  0.0051926   238.610  &lt; 2e-16 ***\nORIGIN_SZSESZ04  0.7535119  0.0060371   124.814  &lt; 2e-16 ***\nORIGIN_SZSESZ05 -0.2347978  0.0071482   -32.847  &lt; 2e-16 ***\nORIGIN_SZSESZ06  0.9520620  0.0057572   165.368  &lt; 2e-16 ***\nORIGIN_SZSESZ07 -2.4296685  0.0231677  -104.873  &lt; 2e-16 ***\nORIGIN_SZSGSZ01 -0.6995899  0.0099969   -69.980  &lt; 2e-16 ***\nORIGIN_SZSGSZ02 -1.2602157  0.0111471  -113.053  &lt; 2e-16 ***\nORIGIN_SZSGSZ03  0.0725860  0.0061970    11.713  &lt; 2e-16 ***\nORIGIN_SZSGSZ04  0.2738315  0.0057524    47.603  &lt; 2e-16 ***\nORIGIN_SZSGSZ05 -2.0207710  0.0119838  -168.625  &lt; 2e-16 ***\nORIGIN_SZSGSZ06  0.4885608  0.0054646    89.404  &lt; 2e-16 ***\nORIGIN_SZSGSZ07 -0.8892155  0.0075074  -118.445  &lt; 2e-16 ***\nORIGIN_SZSKSZ01 -0.3682754  0.0108025   -34.092  &lt; 2e-16 ***\nORIGIN_SZSKSZ02  1.1826086  0.0071388   165.659  &lt; 2e-16 ***\nORIGIN_SZSKSZ03 -0.3230177  0.0101683   -31.767  &lt; 2e-16 ***\nORIGIN_SZSKSZ04 -1.8504236  0.0362400   -51.060  &lt; 2e-16 ***\nORIGIN_SZSKSZ05 -0.2759035  0.0185157   -14.901  &lt; 2e-16 ***\nORIGIN_SZSLSZ01 -2.2757902  0.0348766   -65.253  &lt; 2e-16 ***\nORIGIN_SZSLSZ04 -0.0899820  0.0090356    -9.959  &lt; 2e-16 ***\nORIGIN_SZSRSZ01 -2.1460151  0.0187871  -114.228  &lt; 2e-16 ***\nORIGIN_SZTHSZ01 -2.6851549  0.0571841   -46.956  &lt; 2e-16 ***\nORIGIN_SZTHSZ03 -1.0121495  0.0275551   -36.732  &lt; 2e-16 ***\nORIGIN_SZTHSZ04 -2.6129645  0.0345167   -75.701  &lt; 2e-16 ***\nORIGIN_SZTHSZ06 -1.7229100  0.0208134   -82.779  &lt; 2e-16 ***\nORIGIN_SZTMSZ01 -0.2254986  0.0070312   -32.071  &lt; 2e-16 ***\nORIGIN_SZTMSZ02  1.7271575  0.0049219   350.914  &lt; 2e-16 ***\nORIGIN_SZTMSZ03  0.9891319  0.0052266   189.250  &lt; 2e-16 ***\nORIGIN_SZTMSZ04  0.2018090  0.0062114    32.490  &lt; 2e-16 ***\nORIGIN_SZTMSZ05 -1.1882870  0.0125842   -94.427  &lt; 2e-16 ***\nORIGIN_SZTNSZ01 -1.6122620  0.0141911  -113.611  &lt; 2e-16 ***\nORIGIN_SZTNSZ02 -1.5630967  0.0112227  -139.280  &lt; 2e-16 ***\nORIGIN_SZTNSZ03 -2.0739538  0.0149298  -138.914  &lt; 2e-16 ***\nORIGIN_SZTNSZ04 -0.2816960  0.0085295   -33.026  &lt; 2e-16 ***\nORIGIN_SZTPSZ01 -0.7822239  0.0077901  -100.412  &lt; 2e-16 ***\nORIGIN_SZTPSZ02  0.5735478  0.0053042   108.131  &lt; 2e-16 ***\nORIGIN_SZTPSZ03 -0.8748650  0.0074202  -117.903  &lt; 2e-16 ***\nORIGIN_SZTPSZ04 -0.8537831  0.0069792  -122.332  &lt; 2e-16 ***\nORIGIN_SZTPSZ05 -0.5581114  0.0077012   -72.471  &lt; 2e-16 ***\nORIGIN_SZTPSZ06  0.0262001  0.0075241     3.482 0.000497 ***\nORIGIN_SZTPSZ07 -0.5969952  0.0074272   -80.380  &lt; 2e-16 ***\nORIGIN_SZTPSZ08 -1.0537959  0.0111297   -94.683  &lt; 2e-16 ***\nORIGIN_SZTPSZ09 -0.9588508  0.0081314  -117.920  &lt; 2e-16 ***\nORIGIN_SZTPSZ10 -1.1177249  0.0089403  -125.021  &lt; 2e-16 ***\nORIGIN_SZTPSZ11 -0.2799677  0.0067135   -41.702  &lt; 2e-16 ***\nORIGIN_SZTPSZ12 -0.8898871  0.0080215  -110.938  &lt; 2e-16 ***\nORIGIN_SZTSSZ01 -2.6146463  0.0521606   -50.127  &lt; 2e-16 ***\nORIGIN_SZTSSZ02  0.1682588  0.0119965    14.026  &lt; 2e-16 ***\nORIGIN_SZTSSZ03  0.2587653  0.0123809    20.900  &lt; 2e-16 ***\nORIGIN_SZTSSZ04 -0.5473825  0.0135215   -40.482  &lt; 2e-16 ***\nORIGIN_SZTSSZ05 -0.9967379  0.0206068   -48.369  &lt; 2e-16 ***\nORIGIN_SZTSSZ06  0.4933147  0.0229597    21.486  &lt; 2e-16 ***\nORIGIN_SZWCSZ01  1.2524706  0.0111133   112.700  &lt; 2e-16 ***\nORIGIN_SZWCSZ02 -2.8544820  0.0347805   -82.071  &lt; 2e-16 ***\nORIGIN_SZWCSZ03 -5.1277334  0.1475585   -34.751  &lt; 2e-16 ***\nORIGIN_SZWDSZ01  1.4725308  0.0056496   260.645  &lt; 2e-16 ***\nORIGIN_SZWDSZ02  0.1571680  0.0064909    24.214  &lt; 2e-16 ***\nORIGIN_SZWDSZ03  1.2584097  0.0061471   204.717  &lt; 2e-16 ***\nORIGIN_SZWDSZ04  0.8578765  0.0069277   123.833  &lt; 2e-16 ***\nORIGIN_SZWDSZ05  0.1702728  0.0069687    24.434  &lt; 2e-16 ***\nORIGIN_SZWDSZ06  0.1736910  0.0069507    24.989  &lt; 2e-16 ***\nORIGIN_SZWDSZ07 -1.5610176  0.0100803  -154.859  &lt; 2e-16 ***\nORIGIN_SZWDSZ08 -0.9490906  0.0102047   -93.005  &lt; 2e-16 ***\nORIGIN_SZWDSZ09  1.2107011  0.0062294   194.354  &lt; 2e-16 ***\nORIGIN_SZYSSZ01 -0.3324158  0.0074537   -44.598  &lt; 2e-16 ***\nORIGIN_SZYSSZ02  0.8177113  0.0066108   123.693  &lt; 2e-16 ***\nORIGIN_SZYSSZ03  1.6751777  0.0058470   286.503  &lt; 2e-16 ***\nORIGIN_SZYSSZ04  0.8130044  0.0059025   137.738  &lt; 2e-16 ***\nORIGIN_SZYSSZ05  0.3678420  0.0072431    50.785  &lt; 2e-16 ***\nORIGIN_SZYSSZ06 -0.6024384  0.0126722   -47.540  &lt; 2e-16 ***\nORIGIN_SZYSSZ07 -0.7631918  0.0158478   -48.157  &lt; 2e-16 ***\nORIGIN_SZYSSZ08  0.2141930  0.0076154    28.126  &lt; 2e-16 ***\nORIGIN_SZYSSZ09  1.0809368  0.0057973   186.457  &lt; 2e-16 ***\nDESTIN_SZAMSZ02  0.0761304  0.0051207    14.867  &lt; 2e-16 ***\nDESTIN_SZAMSZ03  0.0143394  0.0050755     2.825 0.004724 ** \nDESTIN_SZAMSZ04 -1.2516780  0.0074947  -167.008  &lt; 2e-16 ***\nDESTIN_SZAMSZ05 -1.2312375  0.0076598  -160.741  &lt; 2e-16 ***\nDESTIN_SZAMSZ06 -1.0333412  0.0075283  -137.261  &lt; 2e-16 ***\nDESTIN_SZAMSZ07 -1.5338249  0.0110036  -139.392  &lt; 2e-16 ***\nDESTIN_SZAMSZ08 -0.3751665  0.0075358   -49.784  &lt; 2e-16 ***\nDESTIN_SZAMSZ09 -1.1633493  0.0077556  -150.001  &lt; 2e-16 ***\nDESTIN_SZAMSZ10  0.1017717  0.0053151    19.148  &lt; 2e-16 ***\nDESTIN_SZAMSZ11 -0.8840362  0.0097007   -91.131  &lt; 2e-16 ***\nDESTIN_SZAMSZ12  0.1628123  0.0055220    29.484  &lt; 2e-16 ***\nDESTIN_SZBDSZ01  1.0040794  0.0047922   209.523  &lt; 2e-16 ***\nDESTIN_SZBDSZ02 -0.2478149  0.0063085   -39.283  &lt; 2e-16 ***\nDESTIN_SZBDSZ03  0.1016088  0.0057420    17.696  &lt; 2e-16 ***\nDESTIN_SZBDSZ04  1.1082928  0.0047747   232.116  &lt; 2e-16 ***\nDESTIN_SZBDSZ05  0.8737933  0.0050593   172.712  &lt; 2e-16 ***\nDESTIN_SZBDSZ06  0.2897032  0.0058244    49.740  &lt; 2e-16 ***\nDESTIN_SZBDSZ07 -0.9026193  0.0113656   -79.416  &lt; 2e-16 ***\nDESTIN_SZBDSZ08 -1.7063577  0.0131234  -130.024  &lt; 2e-16 ***\nDESTIN_SZBKSZ01 -1.3892839  0.0083307  -166.767  &lt; 2e-16 ***\nDESTIN_SZBKSZ02 -0.6661120  0.0073464   -90.672  &lt; 2e-16 ***\nDESTIN_SZBKSZ03 -0.9536826  0.0073196  -130.292  &lt; 2e-16 ***\nDESTIN_SZBKSZ04 -0.6655610  0.0065868  -101.044  &lt; 2e-16 ***\nDESTIN_SZBKSZ05 -0.9053119  0.0079264  -114.215  &lt; 2e-16 ***\nDESTIN_SZBKSZ06 -1.2622159  0.0075079  -168.119  &lt; 2e-16 ***\nDESTIN_SZBKSZ07 -0.0423370  0.0056686    -7.469 8.10e-14 ***\nDESTIN_SZBKSZ08 -1.3811240  0.0084985  -162.515  &lt; 2e-16 ***\nDESTIN_SZBKSZ09 -0.0797012  0.0061428   -12.975  &lt; 2e-16 ***\nDESTIN_SZBLSZ01 -0.8859670  0.0088108  -100.555  &lt; 2e-16 ***\nDESTIN_SZBLSZ02  0.1362723  0.0082167    16.585  &lt; 2e-16 ***\nDESTIN_SZBLSZ03  1.2037396  0.0093508   128.732  &lt; 2e-16 ***\nDESTIN_SZBLSZ04 -0.9316219  0.0178080   -52.315  &lt; 2e-16 ***\nDESTIN_SZBMSZ01  0.7188470  0.0061160   117.536  &lt; 2e-16 ***\nDESTIN_SZBMSZ02 -0.0597895  0.0061206    -9.769  &lt; 2e-16 ***\nDESTIN_SZBMSZ03 -0.2427075  0.0069937   -34.704  &lt; 2e-16 ***\nDESTIN_SZBMSZ04 -0.0622494  0.0065569    -9.494  &lt; 2e-16 ***\nDESTIN_SZBMSZ05 -0.2857019  0.0086450   -33.048  &lt; 2e-16 ***\nDESTIN_SZBMSZ06 -1.3486558  0.0158904   -84.872  &lt; 2e-16 ***\nDESTIN_SZBMSZ07  0.4549687  0.0058315    78.020  &lt; 2e-16 ***\nDESTIN_SZBMSZ08 -0.8730268  0.0077814  -112.195  &lt; 2e-16 ***\nDESTIN_SZBMSZ09 -2.0319890  0.0163038  -124.633  &lt; 2e-16 ***\nDESTIN_SZBMSZ10 -1.4319101  0.0102616  -139.541  &lt; 2e-16 ***\nDESTIN_SZBMSZ11 -1.2429176  0.0092250  -134.733  &lt; 2e-16 ***\nDESTIN_SZBMSZ12 -0.8526549  0.0096009   -88.810  &lt; 2e-16 ***\nDESTIN_SZBMSZ13  0.1399907  0.0066885    20.930  &lt; 2e-16 ***\nDESTIN_SZBMSZ14 -1.0103155  0.0091377  -110.566  &lt; 2e-16 ***\nDESTIN_SZBMSZ15 -0.6819769  0.0086179   -79.135  &lt; 2e-16 ***\nDESTIN_SZBMSZ16 -1.4468308  0.0134051  -107.931  &lt; 2e-16 ***\nDESTIN_SZBMSZ17 -1.5312175  0.0186843   -81.952  &lt; 2e-16 ***\nDESTIN_SZBPSZ01 -1.1726725  0.0073257  -160.077  &lt; 2e-16 ***\nDESTIN_SZBPSZ02 -2.1072012  0.0103320  -203.949  &lt; 2e-16 ***\nDESTIN_SZBPSZ03 -1.6944911  0.0098520  -171.995  &lt; 2e-16 ***\nDESTIN_SZBPSZ04 -0.7664610  0.0074458  -102.939  &lt; 2e-16 ***\nDESTIN_SZBPSZ05  0.1358370  0.0056258    24.145  &lt; 2e-16 ***\nDESTIN_SZBPSZ06 -1.2425471  0.0096942  -128.175  &lt; 2e-16 ***\nDESTIN_SZBPSZ07 -0.1666192  0.0094969   -17.545  &lt; 2e-16 ***\nDESTIN_SZBSSZ01  0.3857894  0.0057261    67.374  &lt; 2e-16 ***\nDESTIN_SZBSSZ02 -0.5293265  0.0064886   -81.578  &lt; 2e-16 ***\nDESTIN_SZBSSZ03  0.3909966  0.0048540    80.551  &lt; 2e-16 ***\nDESTIN_SZBTSZ01  0.7114965  0.0054528   130.482  &lt; 2e-16 ***\nDESTIN_SZBTSZ02 -0.0487084  0.0082474    -5.906 3.51e-09 ***\nDESTIN_SZBTSZ03  0.5539032  0.0064423    85.979  &lt; 2e-16 ***\nDESTIN_SZBTSZ04 -0.7120734  0.0128676   -55.339  &lt; 2e-16 ***\nDESTIN_SZBTSZ05  0.2176097  0.0086791    25.073  &lt; 2e-16 ***\nDESTIN_SZBTSZ06 -0.2167084  0.0084925   -25.518  &lt; 2e-16 ***\nDESTIN_SZBTSZ07 -1.4045618  0.0124363  -112.940  &lt; 2e-16 ***\nDESTIN_SZBTSZ08 -0.8213918  0.0120793   -68.000  &lt; 2e-16 ***\nDESTIN_SZCBSZ01 -5.7340877  0.3333916   -17.199  &lt; 2e-16 ***\nDESTIN_SZCCSZ01 -0.0304192  0.0095920    -3.171 0.001518 ** \nDESTIN_SZCHSZ01 -0.2598507  0.0115311   -22.535  &lt; 2e-16 ***\nDESTIN_SZCHSZ02  0.3497750  0.0068334    51.186  &lt; 2e-16 ***\nDESTIN_SZCHSZ03  2.4550172  0.0050883   482.481  &lt; 2e-16 ***\nDESTIN_SZCKSZ01 -0.4691744  0.0063130   -74.319  &lt; 2e-16 ***\nDESTIN_SZCKSZ02 -0.9557084  0.0069331  -137.847  &lt; 2e-16 ***\nDESTIN_SZCKSZ03  0.0442112  0.0057117     7.740 9.91e-15 ***\nDESTIN_SZCKSZ04 -0.8592063  0.0081238  -105.764  &lt; 2e-16 ***\nDESTIN_SZCKSZ05 -1.1745333  0.0087305  -134.532  &lt; 2e-16 ***\nDESTIN_SZCKSZ06 -0.4982877  0.0085514   -58.269  &lt; 2e-16 ***\nDESTIN_SZCLSZ01  0.2665065  0.0059712    44.632  &lt; 2e-16 ***\nDESTIN_SZCLSZ02 -1.9758876  0.0150823  -131.007  &lt; 2e-16 ***\nDESTIN_SZCLSZ03 -0.9051310  0.0091479   -98.944  &lt; 2e-16 ***\nDESTIN_SZCLSZ04 -0.0828732  0.0061559   -13.462  &lt; 2e-16 ***\nDESTIN_SZCLSZ05 -1.1414780  0.0100760  -113.287  &lt; 2e-16 ***\nDESTIN_SZCLSZ06  0.3229402  0.0056269    57.392  &lt; 2e-16 ***\nDESTIN_SZCLSZ07 -0.4833612  0.0069777   -69.272  &lt; 2e-16 ***\nDESTIN_SZCLSZ08 -0.3219670  0.0075615   -42.580  &lt; 2e-16 ***\nDESTIN_SZCLSZ09  0.0564166  0.0080703     6.991 2.74e-12 ***\nDESTIN_SZDTSZ02 -1.6384236  0.0374725   -43.723  &lt; 2e-16 ***\nDESTIN_SZDTSZ03 -0.4021571  0.0152716   -26.334  &lt; 2e-16 ***\nDESTIN_SZDTSZ13 -1.2799441  0.0177095   -72.274  &lt; 2e-16 ***\nDESTIN_SZGLSZ01 -0.0190303  0.0060665    -3.137 0.001707 ** \nDESTIN_SZGLSZ02 -0.0308469  0.0058724    -5.253 1.50e-07 ***\nDESTIN_SZGLSZ03  0.6927638  0.0048456   142.969  &lt; 2e-16 ***\nDESTIN_SZGLSZ04  0.9325848  0.0049183   189.616  &lt; 2e-16 ***\nDESTIN_SZGLSZ05  0.8480056  0.0048801   173.768  &lt; 2e-16 ***\nDESTIN_SZHGSZ01  0.0652969  0.0047795    13.662  &lt; 2e-16 ***\nDESTIN_SZHGSZ02 -0.9498251  0.0066577  -142.667  &lt; 2e-16 ***\nDESTIN_SZHGSZ03 -1.4372499  0.0076387  -188.154  &lt; 2e-16 ***\nDESTIN_SZHGSZ04 -0.5236292  0.0055353   -94.599  &lt; 2e-16 ***\nDESTIN_SZHGSZ05 -0.5420295  0.0058099   -93.295  &lt; 2e-16 ***\nDESTIN_SZHGSZ06 -0.9054730  0.0067581  -133.983  &lt; 2e-16 ***\nDESTIN_SZHGSZ07  0.0215109  0.0054019     3.982 6.83e-05 ***\nDESTIN_SZHGSZ08 -0.0490979  0.0059206    -8.293  &lt; 2e-16 ***\nDESTIN_SZHGSZ09 -0.0711560  0.0062875   -11.317  &lt; 2e-16 ***\nDESTIN_SZHGSZ10 -3.5807154  0.0290642  -123.200  &lt; 2e-16 ***\nDESTIN_SZJESZ01 -0.4023638  0.0065057   -61.848  &lt; 2e-16 ***\nDESTIN_SZJESZ02 -0.7654353  0.0067096  -114.081  &lt; 2e-16 ***\nDESTIN_SZJESZ03 -0.8778812  0.0071238  -123.232  &lt; 2e-16 ***\nDESTIN_SZJESZ04 -1.1998075  0.0088733  -135.215  &lt; 2e-16 ***\nDESTIN_SZJESZ05 -1.5623652  0.0116898  -133.652  &lt; 2e-16 ***\nDESTIN_SZJESZ06  0.2311474  0.0055595    41.577  &lt; 2e-16 ***\nDESTIN_SZJESZ07 -1.2753348  0.0094838  -134.475  &lt; 2e-16 ***\nDESTIN_SZJESZ08 -0.7654533  0.0099306   -77.081  &lt; 2e-16 ***\nDESTIN_SZJESZ09  0.1637628  0.0074164    22.081  &lt; 2e-16 ***\nDESTIN_SZJESZ10  0.7394958  0.0091249    81.041  &lt; 2e-16 ***\nDESTIN_SZJESZ11  0.5157364  0.0086546    59.591  &lt; 2e-16 ***\nDESTIN_SZJWSZ01 -1.0165204  0.0083025  -122.435  &lt; 2e-16 ***\nDESTIN_SZJWSZ02 -0.8530646  0.0067851  -125.727  &lt; 2e-16 ***\nDESTIN_SZJWSZ03  0.5176135  0.0056449    91.695  &lt; 2e-16 ***\nDESTIN_SZJWSZ04  0.3427105  0.0058499    58.584  &lt; 2e-16 ***\nDESTIN_SZJWSZ05 -1.1695940  0.0080069  -146.073  &lt; 2e-16 ***\nDESTIN_SZJWSZ06 -0.7466462  0.0070240  -106.299  &lt; 2e-16 ***\nDESTIN_SZJWSZ07 -3.0124535  0.0333481   -90.334  &lt; 2e-16 ***\nDESTIN_SZJWSZ08 -0.4253502  0.0066584   -63.881  &lt; 2e-16 ***\nDESTIN_SZJWSZ09  0.9428005  0.0053190   177.251  &lt; 2e-16 ***\nDESTIN_SZKLSZ01 -0.2965013  0.0066422   -44.639  &lt; 2e-16 ***\nDESTIN_SZKLSZ02 -0.4921137  0.0067689   -72.702  &lt; 2e-16 ***\nDESTIN_SZKLSZ03 -0.8489213  0.0078294  -108.427  &lt; 2e-16 ***\nDESTIN_SZKLSZ04 -1.2656342  0.0099918  -126.667  &lt; 2e-16 ***\nDESTIN_SZKLSZ05 -0.3570126  0.0096300   -37.073  &lt; 2e-16 ***\nDESTIN_SZKLSZ06 -2.4764906  0.0390868   -63.359  &lt; 2e-16 ***\nDESTIN_SZKLSZ07 -0.7316189  0.0080994   -90.330  &lt; 2e-16 ***\nDESTIN_SZKLSZ08 -0.1115398  0.0061168   -18.235  &lt; 2e-16 ***\nDESTIN_SZLKSZ01 -1.4940710  0.0271518   -55.027  &lt; 2e-16 ***\nDESTIN_SZMDSZ01 -1.6101440  0.0231238   -69.631  &lt; 2e-16 ***\nDESTIN_SZMDSZ02 -0.9339318  0.0126277   -73.959  &lt; 2e-16 ***\nDESTIN_SZMDSZ03 -3.4868547  0.0303657  -114.829  &lt; 2e-16 ***\nDESTIN_SZMPSZ01 -0.4518483  0.0089869   -50.279  &lt; 2e-16 ***\nDESTIN_SZMPSZ02 -0.5868264  0.0073193   -80.176  &lt; 2e-16 ***\nDESTIN_SZMPSZ03  0.4805365  0.0059041    81.391  &lt; 2e-16 ***\nDESTIN_SZMUSZ02 -1.3837581  0.0218713   -63.268  &lt; 2e-16 ***\nDESTIN_SZNTSZ01 -3.0694691  0.0533346   -57.551  &lt; 2e-16 ***\nDESTIN_SZNTSZ02 -1.4992973  0.0130358  -115.014  &lt; 2e-16 ***\nDESTIN_SZNTSZ03 -0.5221236  0.0089923   -58.064  &lt; 2e-16 ***\nDESTIN_SZNTSZ05 -1.9751162  0.0282369   -69.948  &lt; 2e-16 ***\nDESTIN_SZNTSZ06 -3.9959411  0.0511214   -78.166  &lt; 2e-16 ***\nDESTIN_SZNVSZ01 -0.1126966  0.0057077   -19.745  &lt; 2e-16 ***\nDESTIN_SZNVSZ02 -0.0259250  0.0064427    -4.024 5.72e-05 ***\nDESTIN_SZNVSZ03 -0.0123214  0.0067692    -1.820 0.068725 .  \nDESTIN_SZNVSZ04 -1.3371298  0.0130261  -102.650  &lt; 2e-16 ***\nDESTIN_SZNVSZ05 -0.9686333  0.0101539   -95.395  &lt; 2e-16 ***\nDESTIN_SZPGSZ01 -1.1798309  0.0180543   -65.349  &lt; 2e-16 ***\nDESTIN_SZPGSZ02 -1.3289737  0.0085335  -155.736  &lt; 2e-16 ***\nDESTIN_SZPGSZ03 -0.1661373  0.0055166   -30.116  &lt; 2e-16 ***\nDESTIN_SZPGSZ04 -0.3046408  0.0058469   -52.103  &lt; 2e-16 ***\nDESTIN_SZPGSZ05 -1.5412612  0.0093261  -165.264  &lt; 2e-16 ***\nDESTIN_SZPLSZ01 -0.3439667  0.0083504   -41.192  &lt; 2e-16 ***\nDESTIN_SZPLSZ02 -1.7574919  0.0154244  -113.942  &lt; 2e-16 ***\nDESTIN_SZPLSZ03 -0.3455776  0.0112089   -30.831  &lt; 2e-16 ***\nDESTIN_SZPLSZ04 -2.0749385  0.0141153  -146.999  &lt; 2e-16 ***\nDESTIN_SZPLSZ05 -0.4855216  0.0134069   -36.214  &lt; 2e-16 ***\nDESTIN_SZPNSZ01  0.0117816  0.0083558     1.410 0.158543    \nDESTIN_SZPNSZ02  0.7389858  0.0089823    82.272  &lt; 2e-16 ***\nDESTIN_SZPNSZ03 -0.4708719  0.0098588   -47.761  &lt; 2e-16 ***\nDESTIN_SZPNSZ04  1.3156771  0.0111200   118.316  &lt; 2e-16 ***\nDESTIN_SZPNSZ05  0.9881886  0.0153169    64.516  &lt; 2e-16 ***\nDESTIN_SZPRSZ01 -1.0678999  0.0098295  -108.642  &lt; 2e-16 ***\nDESTIN_SZPRSZ02  0.0650279  0.0063927    10.172  &lt; 2e-16 ***\nDESTIN_SZPRSZ03  0.6348138  0.0050147   126.592  &lt; 2e-16 ***\nDESTIN_SZPRSZ04 -0.3640286  0.0097572   -37.309  &lt; 2e-16 ***\nDESTIN_SZPRSZ05  0.0380410  0.0062577     6.079 1.21e-09 ***\nDESTIN_SZPRSZ06  0.3153712  0.0068742    45.877  &lt; 2e-16 ***\nDESTIN_SZPRSZ07 -1.6669973  0.0145573  -114.513  &lt; 2e-16 ***\nDESTIN_SZPRSZ08 -0.6170648  0.0078424   -78.683  &lt; 2e-16 ***\nDESTIN_SZQTSZ01 -0.5496582  0.0098285   -55.925  &lt; 2e-16 ***\nDESTIN_SZQTSZ02 -0.7318114  0.0086807   -84.303  &lt; 2e-16 ***\nDESTIN_SZQTSZ03 -0.5893064  0.0084789   -69.503  &lt; 2e-16 ***\nDESTIN_SZQTSZ04 -0.7103906  0.0085341   -83.242  &lt; 2e-16 ***\nDESTIN_SZQTSZ05 -0.4721472  0.0078164   -60.405  &lt; 2e-16 ***\nDESTIN_SZQTSZ06 -0.6591466  0.0080069   -82.322  &lt; 2e-16 ***\nDESTIN_SZQTSZ07 -0.9540454  0.0126807   -75.236  &lt; 2e-16 ***\nDESTIN_SZQTSZ08  0.4508867  0.0064870    69.507  &lt; 2e-16 ***\nDESTIN_SZQTSZ09 -0.4061810  0.0075485   -53.810  &lt; 2e-16 ***\nDESTIN_SZQTSZ10  0.1351889  0.0068202    19.822  &lt; 2e-16 ***\nDESTIN_SZQTSZ11  0.3181553  0.0067958    46.816  &lt; 2e-16 ***\nDESTIN_SZQTSZ12 -0.1055766  0.0095576   -11.046  &lt; 2e-16 ***\nDESTIN_SZQTSZ13  0.5199663  0.0071928    72.290  &lt; 2e-16 ***\nDESTIN_SZQTSZ14  0.6086332  0.0078537    77.496  &lt; 2e-16 ***\nDESTIN_SZQTSZ15  1.3906866  0.0092250   150.753  &lt; 2e-16 ***\nDESTIN_SZRCSZ01 -0.0862091  0.0085363   -10.099  &lt; 2e-16 ***\nDESTIN_SZRCSZ06 -1.0186282  0.0211113   -48.250  &lt; 2e-16 ***\nDESTIN_SZRVSZ01 -1.5294454  0.0179337   -85.283  &lt; 2e-16 ***\nDESTIN_SZRVSZ02 -2.3607754  0.0355628   -66.383  &lt; 2e-16 ***\nDESTIN_SZRVSZ03 -1.5266254  0.0156276   -97.688  &lt; 2e-16 ***\nDESTIN_SZRVSZ04 -1.0986565  0.0168695   -65.127  &lt; 2e-16 ***\nDESTIN_SZRVSZ05 -2.4004418  0.0320917   -74.799  &lt; 2e-16 ***\nDESTIN_SZSBSZ01 -1.4023966  0.0109496  -128.078  &lt; 2e-16 ***\nDESTIN_SZSBSZ02 -1.3899893  0.0090891  -152.929  &lt; 2e-16 ***\nDESTIN_SZSBSZ03  0.4509008  0.0059864    75.321  &lt; 2e-16 ***\nDESTIN_SZSBSZ04  0.1796309  0.0070142    25.610  &lt; 2e-16 ***\nDESTIN_SZSBSZ05 -1.3159699  0.0096485  -136.391  &lt; 2e-16 ***\nDESTIN_SZSBSZ06 -1.7705263  0.0253064   -69.964  &lt; 2e-16 ***\nDESTIN_SZSBSZ07 -0.7471529  0.0238628   -31.310  &lt; 2e-16 ***\nDESTIN_SZSBSZ08  0.7884520  0.0069638   113.221  &lt; 2e-16 ***\nDESTIN_SZSBSZ09  0.0131702  0.0066350     1.985 0.047150 *  \nDESTIN_SZSESZ02 -0.7247347  0.0060626  -119.541  &lt; 2e-16 ***\nDESTIN_SZSESZ03  0.1032728  0.0048330    21.368  &lt; 2e-16 ***\nDESTIN_SZSESZ04 -1.0992420  0.0068328  -160.878  &lt; 2e-16 ***\nDESTIN_SZSESZ05 -0.8374712  0.0058155  -144.006  &lt; 2e-16 ***\nDESTIN_SZSESZ06 -0.5531619  0.0074766   -73.985  &lt; 2e-16 ***\nDESTIN_SZSESZ07 -3.0328672  0.0246371  -123.101  &lt; 2e-16 ***\nDESTIN_SZSGSZ01 -0.1933777  0.0068235   -28.340  &lt; 2e-16 ***\nDESTIN_SZSGSZ02 -0.3000845  0.0060284   -49.779  &lt; 2e-16 ***\nDESTIN_SZSGSZ03 -0.4322879  0.0057308   -75.433  &lt; 2e-16 ***\nDESTIN_SZSGSZ04 -0.1214792  0.0056548   -21.482  &lt; 2e-16 ***\nDESTIN_SZSGSZ05 -2.0309074  0.0114993  -176.611  &lt; 2e-16 ***\nDESTIN_SZSGSZ06  0.6592095  0.0046364   142.182  &lt; 2e-16 ***\nDESTIN_SZSGSZ07 -0.4618538  0.0062027   -74.460  &lt; 2e-16 ***\nDESTIN_SZSISZ01 -0.5227257  0.0293399   -17.816  &lt; 2e-16 ***\nDESTIN_SZSKSZ01 -0.4797341  0.0091087   -52.668  &lt; 2e-16 ***\nDESTIN_SZSKSZ02  0.8477357  0.0067821   124.996  &lt; 2e-16 ***\nDESTIN_SZSKSZ03 -0.2477566  0.0074817   -33.115  &lt; 2e-16 ***\nDESTIN_SZSKSZ04 -1.3315992  0.0167055   -79.710  &lt; 2e-16 ***\nDESTIN_SZSKSZ05 -0.3519096  0.0131326   -26.797  &lt; 2e-16 ***\nDESTIN_SZSLSZ01 -0.8570431  0.0102100   -83.941  &lt; 2e-16 ***\nDESTIN_SZSLSZ04 -0.9949105  0.0088280  -112.699  &lt; 2e-16 ***\nDESTIN_SZSRSZ01 -1.0260696  0.0154393   -66.458  &lt; 2e-16 ***\nDESTIN_SZTHSZ01 -4.2040410  0.0404795  -103.856  &lt; 2e-16 ***\nDESTIN_SZTHSZ03 -2.4907000  0.0264056   -94.325  &lt; 2e-16 ***\nDESTIN_SZTHSZ04 -3.0701470  0.0244975  -125.325  &lt; 2e-16 ***\nDESTIN_SZTHSZ06 -2.5308161  0.0169699  -149.135  &lt; 2e-16 ***\nDESTIN_SZTMSZ01 -0.2354889  0.0067201   -35.042  &lt; 2e-16 ***\nDESTIN_SZTMSZ02  1.7379292  0.0044573   389.906  &lt; 2e-16 ***\nDESTIN_SZTMSZ03  0.9112458  0.0048718   187.043  &lt; 2e-16 ***\nDESTIN_SZTMSZ04  1.0731075  0.0048626   220.685  &lt; 2e-16 ***\nDESTIN_SZTMSZ05  0.6398583  0.0067321    95.046  &lt; 2e-16 ***\nDESTIN_SZTNSZ01 -0.3500456  0.0083835   -41.754  &lt; 2e-16 ***\nDESTIN_SZTNSZ02 -1.0573515  0.0112412   -94.060  &lt; 2e-16 ***\nDESTIN_SZTNSZ03 -1.4069979  0.0132733  -106.002  &lt; 2e-16 ***\nDESTIN_SZTNSZ04 -0.3616604  0.0085207   -42.445  &lt; 2e-16 ***\nDESTIN_SZTPSZ01 -0.5919243  0.0071153   -83.190  &lt; 2e-16 ***\nDESTIN_SZTPSZ02  0.7083350  0.0046540   152.198  &lt; 2e-16 ***\nDESTIN_SZTPSZ03 -0.5746433  0.0069625   -82.534  &lt; 2e-16 ***\nDESTIN_SZTPSZ04 -1.5821259  0.0084517  -187.196  &lt; 2e-16 ***\nDESTIN_SZTPSZ05 -1.1796256  0.0073039  -161.505  &lt; 2e-16 ***\nDESTIN_SZTPSZ06 -0.3968272  0.0077295   -51.339  &lt; 2e-16 ***\nDESTIN_SZTPSZ07 -2.1796617  0.0135199  -161.219  &lt; 2e-16 ***\nDESTIN_SZTPSZ08 -1.2568483  0.0107267  -117.170  &lt; 2e-16 ***\nDESTIN_SZTPSZ09 -0.2446623  0.0080840   -30.265  &lt; 2e-16 ***\nDESTIN_SZTPSZ10 -1.2542191  0.0102049  -122.904  &lt; 2e-16 ***\nDESTIN_SZTPSZ11 -0.0886883  0.0062888   -14.102  &lt; 2e-16 ***\nDESTIN_SZTPSZ12 -0.7211823  0.0075086   -96.048  &lt; 2e-16 ***\nDESTIN_SZTSSZ01 -1.6271921  0.0238498   -68.227  &lt; 2e-16 ***\nDESTIN_SZTSSZ02 -0.3340439  0.0169137   -19.750  &lt; 2e-16 ***\nDESTIN_SZTSSZ03  0.3924580  0.0111060    35.338  &lt; 2e-16 ***\nDESTIN_SZTSSZ04  0.4169932  0.0114926    36.283  &lt; 2e-16 ***\nDESTIN_SZTSSZ05  1.3206287  0.0120381   109.704  &lt; 2e-16 ***\nDESTIN_SZTSSZ06  2.4023725  0.0192840   124.579  &lt; 2e-16 ***\nDESTIN_SZWCSZ01  2.0697378  0.0061379   337.206  &lt; 2e-16 ***\nDESTIN_SZWCSZ02 -2.0934025  0.0134782  -155.318  &lt; 2e-16 ***\nDESTIN_SZWCSZ03 -3.0670149  0.0349748   -87.692  &lt; 2e-16 ***\nDESTIN_SZWDSZ01  1.0113215  0.0051461   196.522  &lt; 2e-16 ***\nDESTIN_SZWDSZ02 -1.3383793  0.0076482  -174.993  &lt; 2e-16 ***\nDESTIN_SZWDSZ03  0.3394361  0.0060396    56.202  &lt; 2e-16 ***\nDESTIN_SZWDSZ04 -0.8324928  0.0086019   -96.780  &lt; 2e-16 ***\nDESTIN_SZWDSZ05 -0.8279090  0.0083251   -99.447  &lt; 2e-16 ***\nDESTIN_SZWDSZ06 -0.2252899  0.0061074   -36.888  &lt; 2e-16 ***\nDESTIN_SZWDSZ07 -1.3638599  0.0077990  -174.877  &lt; 2e-16 ***\nDESTIN_SZWDSZ08 -0.4350176  0.0077566   -56.083  &lt; 2e-16 ***\nDESTIN_SZWDSZ09  0.5461048  0.0060745    89.901  &lt; 2e-16 ***\nDESTIN_SZYSSZ01  0.0243093  0.0053476     4.546 5.47e-06 ***\nDESTIN_SZYSSZ02 -0.3398962  0.0065947   -51.540  &lt; 2e-16 ***\nDESTIN_SZYSSZ03 -0.3694187  0.0074032   -49.900  &lt; 2e-16 ***\nDESTIN_SZYSSZ04 -0.5222848  0.0067396   -77.495  &lt; 2e-16 ***\nDESTIN_SZYSSZ05 -1.5460539  0.0124899  -123.784  &lt; 2e-16 ***\nDESTIN_SZYSSZ06 -1.5556892  0.0127640  -121.881  &lt; 2e-16 ***\nDESTIN_SZYSSZ07 -0.8673403  0.0167723   -51.713  &lt; 2e-16 ***\nDESTIN_SZYSSZ08  0.5389364  0.0052540   102.577  &lt; 2e-16 ***\nDESTIN_SZYSSZ09  0.1199483  0.0055235    21.716  &lt; 2e-16 ***\nlog(dist)       -1.8906989  0.0005319 -3554.786  &lt; 2e-16 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\n(Dispersion parameter for poisson family taken to be 1)\n\n    Null deviance: 36117615  on 14273  degrees of freedom\nResidual deviance:  8091747  on 13715  degrees of freedom\nAIC: 8177420\n\nNumber of Fisher Scoring iterations: 7\n\n\nWe can examine how the constraints hold for destinations this time.\n\nCalcRSquared(dbcSIM$data$TRIPS, dbcSIM$fitted.values)\n\n[1] 0.6883675\n\n\n\n\n3.8.9 Model comparison\nAnother useful model performance measure for continuous dependent variable is Root Mean Squared Error. In this sub-section, you will learn how to use compare_performance() of performance package\nFirst of all, let us create a list called model_list by using the code chun below.\n\nmodel_list &lt;- list(unconstrained=uncSIM,\n                   originConstrained=orcSIM,\n                   destinationConstrained=decSIM,\n                   doublyConstrained=dbcSIM)\n\nNext, we will compute the RMSE of all the models in model_list file by using the code chunk below.\n\ncompare_performance(model_list,\n                    metrics = \"RMSE\")\n\n# Comparison of Model Performance Indices\n\nName                   | Model |     RMSE\n-----------------------------------------\nunconstrained          |   glm | 2429.978\noriginConstrained      |   glm | 2057.579\ndestinationConstrained |   glm | 1891.724\ndoublyConstrained      |   glm | 1487.111\n\n\nThe print above reveals that doubly constrained SIM is the best model among all the four SIMs because it has the smallest RMSE value of 1487.111.\n\n\n3.8.10 Visualising fitted\nIn this section, you will learn how to visualise the observed values and the fitted values.\nFirstly we will extract the fitted values from each model by using the code chunk below.\n\ndf &lt;- as.data.frame(uncSIM$fitted.values) %&gt;%\n  round(digits = 0)\n\nNext, we will join the values to SIM_data data frame.\n\nSIM_data &lt;- SIM_data %&gt;%\n  cbind(df) %&gt;%\n  rename(uncTRIPS = \"uncSIM$fitted.values\")\n\nRepeat the same step by for Origin Constrained SIM (i.e. orcSIM)\n\ndf &lt;- as.data.frame(orcSIM$fitted.values) %&gt;%\n  round(digits = 0)\n\n\nSIM_data &lt;- SIM_data %&gt;%\n  cbind(df) %&gt;%\n  rename(orcTRIPS = \"orcSIM$fitted.values\")\n\nRepeat the same step by for Destination Constrained SIM (i.e. decSIM)\n\ndf &lt;- as.data.frame(decSIM$fitted.values) %&gt;%\n  round(digits = 0)\n\n\nSIM_data &lt;- SIM_data %&gt;%\n  cbind(df) %&gt;%\n  rename(decTRIPS = \"decSIM$fitted.values\")\n\nRepeat the same step by for Doubly Constrained SIM (i.e. dbcSIM)\n\ndf &lt;- as.data.frame(dbcSIM$fitted.values) %&gt;%\n  round(digits = 0)\n\n\nSIM_data &lt;- SIM_data %&gt;%\n  cbind(df) %&gt;%\n  rename(dbcTRIPS = \"dbcSIM$fitted.values\")\n\n\nunc_p &lt;- ggplot(data = SIM_data,\n                aes(x = uncTRIPS,\n                    y = TRIPS)) +\n  geom_point() +\n  geom_smooth(method = lm)\n\norc_p &lt;- ggplot(data = SIM_data,\n                aes(x = orcTRIPS,\n                    y = TRIPS)) +\n  geom_point() +\n  geom_smooth(method = lm)\n\ndec_p &lt;- ggplot(data = SIM_data,\n                aes(x = decTRIPS,\n                    y = TRIPS)) +\n  geom_point() +\n  geom_smooth(method = lm)\n\ndbc_p &lt;- ggplot(data = SIM_data,\n                aes(x = dbcTRIPS,\n                    y = TRIPS)) +\n  geom_point() +\n  geom_smooth(method = lm)\n\nggarrange(unc_p, orc_p, dec_p, dbc_p,\n          ncol = 2,\n          nrow = 2)"
  },
  {
    "objectID": "In-class Ex/In-class_Ex4/data/geospatial/entertn.html",
    "href": "In-class Ex/In-class_Ex4/data/geospatial/entertn.html",
    "title": "ISSS624",
    "section": "",
    "text": "&lt;!DOCTYPE qgis PUBLIC ‘http://mrcc.com/qgis.dtd’ ‘SYSTEM’&gt;     dataset\n\n\n       GEOGCRS[“WGS 84”,ENSEMBLE[“World Geodetic System 1984 ensemble”,MEMBER[“World Geodetic System 1984 (Transit)”],MEMBER[“World Geodetic System 1984 (G730)”],MEMBER[“World Geodetic System 1984 (G873)”],MEMBER[“World Geodetic System 1984 (G1150)”],MEMBER[“World Geodetic System 1984 (G1674)”],MEMBER[“World Geodetic System 1984 (G1762)”],MEMBER[“World Geodetic System 1984 (G2139)”],ELLIPSOID[“WGS 84”,6378137,298.257223563,LENGTHUNIT[“metre”,1]],ENSEMBLEACCURACY[2.0]],PRIMEM[“Greenwich”,0,ANGLEUNIT[“degree”,0.0174532925199433]],CS[ellipsoidal,2],AXIS[“geodetic latitude (Lat)”,north,ORDER[1],ANGLEUNIT[“degree”,0.0174532925199433]],AXIS[“geodetic longitude (Lon)”,east,ORDER[2],ANGLEUNIT[“degree”,0.0174532925199433]],USAGE[SCOPE[“Horizontal component of 3D system.”],AREA[“World.”],BBOX[-90,-180,90,180]],ID[“EPSG”,4326]] +proj=longlat +datum=WGS84 +no_defs 3452 4326 EPSG:4326 WGS 84 longlat EPSG:7030 true"
  },
  {
    "objectID": "In-class Ex/In-class_Ex4/data/geospatial/FinServ.html",
    "href": "In-class Ex/In-class_Ex4/data/geospatial/FinServ.html",
    "title": "ISSS624",
    "section": "",
    "text": "&lt;!DOCTYPE qgis PUBLIC ‘http://mrcc.com/qgis.dtd’ ‘SYSTEM’&gt;     dataset\n\n\n       GEOGCRS[“WGS 84”,ENSEMBLE[“World Geodetic System 1984 ensemble”,MEMBER[“World Geodetic System 1984 (Transit)”],MEMBER[“World Geodetic System 1984 (G730)”],MEMBER[“World Geodetic System 1984 (G873)”],MEMBER[“World Geodetic System 1984 (G1150)”],MEMBER[“World Geodetic System 1984 (G1674)”],MEMBER[“World Geodetic System 1984 (G1762)”],MEMBER[“World Geodetic System 1984 (G2139)”],ELLIPSOID[“WGS 84”,6378137,298.257223563,LENGTHUNIT[“metre”,1]],ENSEMBLEACCURACY[2.0]],PRIMEM[“Greenwich”,0,ANGLEUNIT[“degree”,0.0174532925199433]],CS[ellipsoidal,2],AXIS[“geodetic latitude (Lat)”,north,ORDER[1],ANGLEUNIT[“degree”,0.0174532925199433]],AXIS[“geodetic longitude (Lon)”,east,ORDER[2],ANGLEUNIT[“degree”,0.0174532925199433]],USAGE[SCOPE[“Horizontal component of 3D system.”],AREA[“World.”],BBOX[-90,-180,90,180]],ID[“EPSG”,4326]] +proj=longlat +datum=WGS84 +no_defs 3452 4326 EPSG:4326 WGS 84 longlat EPSG:7030 true"
  },
  {
    "objectID": "In-class Ex/In-class_Ex4/data/geospatial/MPSZ-2019.html",
    "href": "In-class Ex/In-class_Ex4/data/geospatial/MPSZ-2019.html",
    "title": "ISSS624",
    "section": "",
    "text": "&lt;!DOCTYPE qgis PUBLIC ‘http://mrcc.com/qgis.dtd’ ‘SYSTEM’&gt;     dataset\n\n\n        0 0     false"
  },
  {
    "objectID": "In-class Ex/In-class_Ex4/In-class_Ex_4.html",
    "href": "In-class Ex/In-class_Ex4/In-class_Ex_4.html",
    "title": "In-class Exercise 4: Preparing Spatial Interaction Modelling Variables",
    "section": "",
    "text": "A healthy baby need healthy food. Likewise, a well calibrated Spatial Interaction Model need conceptually logical and well prepared propulsiveness and attractiveness variables. In this in-class exercise, you will gain hands-on experience on preparing propulsiveness and attractiveness variables require for calibrating spatial interaction models. By the end of this in-class exercise, you will be able to:\n\nperform geocoding by using SLA OneMap API,\nconvert an aspatial data into a simple feature tibble data.frame,\nperform point-in-polygon count analysis, and\nappend the propulsiveness and attractiveness variables onto a flow data."
  },
  {
    "objectID": "In-class Ex/In-class_Ex4/In-class_Ex_4.html#overview",
    "href": "In-class Ex/In-class_Ex4/In-class_Ex_4.html#overview",
    "title": "In-class Exercise 4: Preparing Spatial Interaction Modelling Variables",
    "section": "",
    "text": "A healthy baby need healthy food. Likewise, a well calibrated Spatial Interaction Model need conceptually logical and well prepared propulsiveness and attractiveness variables. In this in-class exercise, you will gain hands-on experience on preparing propulsiveness and attractiveness variables require for calibrating spatial interaction models. By the end of this in-class exercise, you will be able to:\n\nperform geocoding by using SLA OneMap API,\nconvert an aspatial data into a simple feature tibble data.frame,\nperform point-in-polygon count analysis, and\nappend the propulsiveness and attractiveness variables onto a flow data."
  },
  {
    "objectID": "In-class Ex/In-class_Ex4/In-class_Ex_4.html#getting-started",
    "href": "In-class Ex/In-class_Ex4/In-class_Ex_4.html#getting-started",
    "title": "In-class Exercise 4: Preparing Spatial Interaction Modelling Variables",
    "section": "Getting Started",
    "text": "Getting Started\nTo get start, the following R packages will be loaded into R environment. They are:\n\ntidyverse, provide a family of modern R packages for data import, wrangling\n\n\npacman::p_load(tidyverse, sf, httr,\n               tmap)"
  },
  {
    "objectID": "In-class Ex/In-class_Ex4/In-class_Ex_4.html#counting-number-of-schools-in-each-ura-planning-subzone",
    "href": "In-class Ex/In-class_Ex4/In-class_Ex_4.html#counting-number-of-schools-in-each-ura-planning-subzone",
    "title": "In-class Exercise 4: Preparing Spatial Interaction Modelling Variables",
    "section": "Counting number of schools in each URA Planning Subzone",
    "text": "Counting number of schools in each URA Planning Subzone\n\nDownloading General information of schools data from data.gov.sg\nTo get started, you are required to download General information of schools data set of School Directory and Information from data.gov.sg."
  },
  {
    "objectID": "In-class Ex/In-class_Ex4/In-class_Ex_4.html#geocoding-using-sla-api",
    "href": "In-class Ex/In-class_Ex4/In-class_Ex_4.html#geocoding-using-sla-api",
    "title": "In-class Exercise 4: Preparing Spatial Interaction Modelling Variables",
    "section": "Geocoding using SLA API",
    "text": "Geocoding using SLA API\nAddress geocoding, or simply geocoding, is the process of taking a aspatial description of a location, such as an address or postcode, and returning geographic coordinates, frequently latitude/longitude pair, to identify a location on the Earth’s surface.\nSingapore Land Authority (SLA) supports an online geocoding service called OneMap API. The Search API looks up the address data or 6-digit postal code for an entered value. It then returns both latitude, longitude and x,y coordinates of the searched location.\nThe code chunks below will perform geocoding using SLA OneMap API. The input data will be in csv file format. It will be read into R Studio environment using read_csv function of readr package. A collection of http call functions of httr package of R will then be used to pass the individual records to the geocoding server at OneMap.\nTwo tibble data.frames will be created if the geocoding process completed successfully. They are called found and not_found. found contains all records that are geocoded correctly and not_found contains postal that failed to be geocoded.\nLastly, the found data table will joined with the initial csv data table by using a unique identifier (i.e. POSTAL) common to both data tables. The output data table will then save as an csv file called found.\n\nurl&lt;-\"https://www.onemap.gov.sg/api/common/elastic/search\"\n\ncsv&lt;-read_csv(\"data/aspatial/Generalinformationofschools.csv\")\npostcodes&lt;-csv$`postal_code`\n\nfound&lt;-data.frame()\nnot_found&lt;-data.frame()\n\nfor(postcode in postcodes){\n  query&lt;-list('searchVal'=postcode,'returnGeom'='Y','getAddrDetails'='Y','pageNum'='1')\n  res&lt;- GET(url,query=query)\n  \n  if((content(res)$found)!=0){\n    found&lt;-rbind(found,data.frame(content(res))[4:13])\n  } else{\n    not_found = data.frame(postcode)\n  }\n}\n\nNext, the code chunk below will be used to combine both found and not_found data.frames into a single tibble data.frame called merged. At the same time, we will write merged and not_found tibble data.frames into two separate csv files called schools and not_found respectively.\n\nmerged = merge(csv, found, by.x = 'postal_code', by.y = 'results.POSTAL', all = TRUE)\nwrite.csv(merged, file = \"data/aspatial/schools.csv\")\nwrite.csv(not_found, file = \"data/aspatial/not_found.csv\")\n\n\nTidying schools data.frame\nIn this sub-section, you will import schools.csv into R environment and at the same time tidying the data by selecting only the necessary fields as well as rename some fields.\n\nschools &lt;- read_csv(\"data/aspatial/schools.csv\") %&gt;%\n  rename(latitude = \"results.LATITUDE\",\n         longitude = \"results.LONGITUDE\")%&gt;%\n  select(postal_code, school_name, latitude, longitude)\n\n\n\nConverting an aspatial data into sf tibble data.frame\nNext, you will convert schools tibble data.frame data into a simple feature tibble data.frame called schools_sf by using values in latitude and longitude fields.\nRefer to st_as_sf() of sf package.\n\nschools &lt;- schools[complete.cases(schools$longitude, schools$latitude), ]\nschools_sf &lt;- st_as_sf(schools, \n                       coords = c(\"longitude\", \"latitude\"),\n                       crs=4326) %&gt;%\n  st_transform(crs = 3414)\n\n\n\nPlotting a point simple feature layer\nTo ensure that schools sf tibble data.frame has been projected and converted correctly, you can plot the schools point data for visual inspection.\nFirst, let us import MPSZ-2019 shapefile into R environment and save it as an sf tibble data.frame called mpsz.\n\nmpsz &lt;- st_read(dsn = \"data/geospatial/\",\n                layer = \"MPSZ-2019\") %&gt;%\n  st_transform(crs = 3414)\n\nReading layer `MPSZ-2019' from data source \n  `D:\\KathyChiu77\\ISSS624\\In-class Ex\\In-class_Ex4\\data\\geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 332 features and 6 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 103.6057 ymin: 1.158699 xmax: 104.0885 ymax: 1.470775\nGeodetic CRS:  WGS 84\n\n\n\n\nPlotting a point simple feature layer\nTo ensure that schools sf tibble data.frame has been projected and converted correctly, you can plot the schools point data for visual inspection.\nFirst, let us import MPSZ-2019 shapefile into R environment and save it as an sf tibble data.frame called mpsz.\n\nmpsz &lt;- st_read(dsn = \"data/geospatial/\",\n                layer = \"MPSZ-2019\") %&gt;%\n  st_transform(crs = 3414)\n\nReading layer `MPSZ-2019' from data source \n  `D:\\KathyChiu77\\ISSS624\\In-class Ex\\In-class_Ex4\\data\\geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 332 features and 6 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 103.6057 ymin: 1.158699 xmax: 104.0885 ymax: 1.470775\nGeodetic CRS:  WGS 84\n\n\nUsing the steps you learned in previous exercises, create a point symbol map showing the location of schools with OSM as the background map.\n\ntmap_options(check.and.fix = TRUE)\ntm_shape(mpsz) +\n  tm_polygons() +\ntm_shape(schools_sf) +\n  tm_dots()\n\n\n\n\n\n\nPerforming point-in-polygon count process\nNext, we will count the number of schools located inside the planning subzones.\n\nmpsz$`SCHOOL_COUNT`&lt;- lengths(\n  st_intersects(\n    mpsz, schools_sf))\n\nIt is always a good practice to examine the summary statistics of the derived variable.\n\nsummary(mpsz$SCHOOL_COUNT)\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n  0.000   0.000   0.000   1.051   2.000  12.000"
  },
  {
    "objectID": "In-class Ex/In-class_Ex4/In-class_Ex_4.html#data-integration-and-final-touch-up",
    "href": "In-class Ex/In-class_Ex4/In-class_Ex_4.html#data-integration-and-final-touch-up",
    "title": "In-class Exercise 4: Preparing Spatial Interaction Modelling Variables",
    "section": "Data Integration and Final Touch-up",
    "text": "Data Integration and Final Touch-up\n\nbusiness_sf &lt;- st_read(dsn = \"data/geospatial\",\n                      layer = \"Business\")\n\nReading layer `Business' from data source \n  `D:\\KathyChiu77\\ISSS624\\In-class Ex\\In-class_Ex4\\data\\geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 6550 features and 3 fields\nGeometry type: POINT\nDimension:     XY\nBounding box:  xmin: 3669.148 ymin: 25408.41 xmax: 47034.83 ymax: 50148.54\nProjected CRS: SVY21 / Singapore TM\n\n\n\ntmap_options(check.and.fix = TRUE)\ntm_shape(mpsz) +\n  tm_polygons() +\ntm_shape(business_sf) +\n  tm_dots()\n\n\n\n\n\nmpsz$`BUSINESS_COUNT`&lt;- lengths(\n  st_intersects(\n    mpsz, business_sf))\n\n\nsummary(mpsz$BUSINESS_COUNT)\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n   0.00    0.00    2.00   19.73   13.00  307.00 \n\n\nNow, it is time for us to bring in the flow_data.rds saved after Hands-on Exercise 3.\n\nflow_data &lt;- read_rds(\"data/rds/flow_data_tidy.rds\")\nflow_data\n\nSimple feature collection with 14734 features and 12 fields\nGeometry type: LINESTRING\nDimension:     XY\nBounding box:  xmin: 5105.594 ymin: 25813.33 xmax: 49483.22 ymax: 49552.79\nProjected CRS: SVY21 / Singapore TM\nFirst 10 features:\n   ORIGIN_SZ DESTIN_SZ MORNING_PEAK      dist ORIGIN_AGE7_12 ORIGIN_AGE13_24\n1     AMSZ01    AMSZ01         1998   50.0000            310             710\n2     AMSZ01    AMSZ02         8289  810.4491            310             710\n3     AMSZ01    AMSZ03         8971 1360.9294            310             710\n4     AMSZ01    AMSZ04         2252  840.4432            310             710\n5     AMSZ01    AMSZ05         6136 1076.7916            310             710\n6     AMSZ01    AMSZ06         2148  805.2979            310             710\n7     AMSZ01    AMSZ07         1620 1798.7526            310             710\n8     AMSZ01    AMSZ08         1925 2576.0199            310             710\n9     AMSZ01    AMSZ09         1773 1204.2846            310             710\n10    AMSZ01    AMSZ10           63 1417.8035            310             710\n   ORIGIN_AGE25_64 DESTIN_AGE7_12 DESTIN_AGE13_24 DESTIN_AGE25_64 SCHOOL_COUNT\n1             2780         310.00          710.00         2780.00         0.99\n2             2780        1140.00         2770.00        15700.00         2.00\n3             2780        1010.00         2650.00        14240.00         2.00\n4             2780         980.00         2000.00        11320.00         1.00\n5             2780         810.00         1920.00         9650.00         3.00\n6             2780        1050.00         2390.00        12460.00         2.00\n7             2780         420.00         1120.00         3620.00         0.99\n8             2780         390.00         1150.00         4350.00         0.99\n9             2780        1190.00         3260.00        13350.00         3.00\n10            2780           0.99            0.99            0.99         1.00\n   RETAIL_COUNT                       geometry\n1          1.00 LINESTRING (29501.77 39419....\n2          0.99 LINESTRING (29501.77 39419....\n3          6.00 LINESTRING (29501.77 39419....\n4          0.99 LINESTRING (29501.77 39419....\n5          0.99 LINESTRING (29501.77 39419....\n6          0.99 LINESTRING (29501.77 39419....\n7          1.00 LINESTRING (29501.77 39419....\n8        117.00 LINESTRING (29501.77 39419....\n9          0.99 LINESTRING (29501.77 39419....\n10        20.00 LINESTRING (29501.77 39419....\n\n\nNotice that this is an sf tibble data.frame and the features are polylines linking the centroid of origins and destination planning subzone.\n\nmpsz_tidy &lt;- mpsz %&gt;%\n  st_drop_geometry() %&gt;%\n  select(SUBZONE_C, SCHOOL_COUNT, BUSINESS_COUNT)\n\nNow, we will append SCHOOL_COUNT and BUSINESS_COUNT fields from mpsz_tidy data.frame into flow_data sf tibble data.frame by using the code chunk below.\n\nflow_data &lt;- flow_data %&gt;%\n  left_join(mpsz_tidy,\n            by = c(\"DESTIN_SZ\" = \"SUBZONE_C\")) %&gt;%\n  rename(TRIPS = MORNING_PEAK,\n         DIST = dist)\n\n\nChecking for variables with zero values\nSince Poisson Regression is based of log and log 0 is undefined, it is important for us to ensure that no 0 values in the explanatory variables.\nIn the code chunk below, summary() of Base R is used to compute the summary statistics of all variables in wd_od data frame.\n\nsummary(flow_data)\n\n  ORIGIN_SZ          DESTIN_SZ             TRIPS             DIST      \n Length:14734       Length:14734       Min.   :     1   Min.   :   50  \n Class :character   Class :character   1st Qu.:    14   1st Qu.: 3346  \n Mode  :character   Mode  :character   Median :    76   Median : 6067  \n                                       Mean   :  1021   Mean   : 6880  \n                                       3rd Qu.:   426   3rd Qu.: 9729  \n                                       Max.   :232187   Max.   :26136  \n ORIGIN_AGE7_12    ORIGIN_AGE13_24    ORIGIN_AGE25_64    DESTIN_AGE7_12   \n Min.   :   0.99   Min.   :    0.99   Min.   :    0.99   Min.   :   0.99  \n 1st Qu.: 240.00   1st Qu.:  440.00   1st Qu.: 2200.00   1st Qu.: 240.00  \n Median : 700.00   Median : 1350.00   Median : 6810.00   Median : 720.00  \n Mean   :1031.86   Mean   : 2268.84   Mean   :10487.62   Mean   :1033.40  \n 3rd Qu.:1480.00   3rd Qu.: 3260.00   3rd Qu.:15770.00   3rd Qu.:1500.00  \n Max.   :6340.00   Max.   :16380.00   Max.   :74610.00   Max.   :6340.00  \n DESTIN_AGE13_24    DESTIN_AGE25_64    SCHOOL_COUNT.x    RETAIL_COUNT   \n Min.   :    0.99   Min.   :    0.99   Min.   : 0.990   Min.   :  0.99  \n 1st Qu.:  460.00   1st Qu.: 2200.00   1st Qu.: 0.990   1st Qu.:  0.99  \n Median : 1420.00   Median : 7030.00   Median : 1.000   Median :  3.00  \n Mean   : 2290.35   Mean   :10574.46   Mean   : 1.987   Mean   : 16.47  \n 3rd Qu.: 3260.00   3rd Qu.:15830.00   3rd Qu.: 2.000   3rd Qu.: 12.00  \n Max.   :16380.00   Max.   :74610.00   Max.   :12.000   Max.   :307.00  \n SCHOOL_COUNT.y  BUSINESS_COUNT            geometry    \n Min.   : 0.00   Min.   :  0.00   LINESTRING   :14734  \n 1st Qu.: 0.00   1st Qu.:  0.00   epsg:3414    :    0  \n Median : 1.00   Median :  3.00   +proj=tmer...:    0  \n Mean   : 1.58   Mean   : 16.17                        \n 3rd Qu.: 2.00   3rd Qu.: 12.00                        \n Max.   :12.00   Max.   :307.00                        \n\n\n(The data processing below is only for reference as it is already the tidy version)\nThe print report above reveals that variables ORIGIN_AGE7_12, ORIGIN_AGE13_24, ORIGIN_AGE25_64, DESTIN_AGE7_12, DESTIN_AGE13_24, DESTIN_AGE25_64 consist of 0 values.\nIn view of this, code chunk below will be used to replace zero values to 0.99.\n\n#flow_data$SCHOOL_COUNT &lt;- ifelse(\n # flow_data$SCHOOL_COUNT == 0,\n  #0.99, flow_data$SCHOOL_COUNT)\n#flow_data$BUSINESS_COUNT &lt;- ifelse(\n#  flow_data$BUSINESS_COUNT == 0,\n#  0.99, flow_data$BUSINESS_COUNT)\n\nYou can run the summary() again.\n\nsummary(flow_data)\n\n  ORIGIN_SZ          DESTIN_SZ             TRIPS             DIST      \n Length:14734       Length:14734       Min.   :     1   Min.   :   50  \n Class :character   Class :character   1st Qu.:    14   1st Qu.: 3346  \n Mode  :character   Mode  :character   Median :    76   Median : 6067  \n                                       Mean   :  1021   Mean   : 6880  \n                                       3rd Qu.:   426   3rd Qu.: 9729  \n                                       Max.   :232187   Max.   :26136  \n ORIGIN_AGE7_12    ORIGIN_AGE13_24    ORIGIN_AGE25_64    DESTIN_AGE7_12   \n Min.   :   0.99   Min.   :    0.99   Min.   :    0.99   Min.   :   0.99  \n 1st Qu.: 240.00   1st Qu.:  440.00   1st Qu.: 2200.00   1st Qu.: 240.00  \n Median : 700.00   Median : 1350.00   Median : 6810.00   Median : 720.00  \n Mean   :1031.86   Mean   : 2268.84   Mean   :10487.62   Mean   :1033.40  \n 3rd Qu.:1480.00   3rd Qu.: 3260.00   3rd Qu.:15770.00   3rd Qu.:1500.00  \n Max.   :6340.00   Max.   :16380.00   Max.   :74610.00   Max.   :6340.00  \n DESTIN_AGE13_24    DESTIN_AGE25_64    SCHOOL_COUNT.x    RETAIL_COUNT   \n Min.   :    0.99   Min.   :    0.99   Min.   : 0.990   Min.   :  0.99  \n 1st Qu.:  460.00   1st Qu.: 2200.00   1st Qu.: 0.990   1st Qu.:  0.99  \n Median : 1420.00   Median : 7030.00   Median : 1.000   Median :  3.00  \n Mean   : 2290.35   Mean   :10574.46   Mean   : 1.987   Mean   : 16.47  \n 3rd Qu.: 3260.00   3rd Qu.:15830.00   3rd Qu.: 2.000   3rd Qu.: 12.00  \n Max.   :16380.00   Max.   :74610.00   Max.   :12.000   Max.   :307.00  \n SCHOOL_COUNT.y  BUSINESS_COUNT            geometry    \n Min.   : 0.00   Min.   :  0.00   LINESTRING   :14734  \n 1st Qu.: 0.00   1st Qu.:  0.00   epsg:3414    :    0  \n Median : 1.00   Median :  3.00   +proj=tmer...:    0  \n Mean   : 1.58   Mean   : 16.17                        \n 3rd Qu.: 2.00   3rd Qu.: 12.00                        \n Max.   :12.00   Max.   :307.00                        \n\n\nNotice that all the 0 values have been replaced by 0.99.\nBefore we move on to calibrate the Spatial Interaction Models, let us save flow_data sf tibble data.frame into an rds file. Call the file flow_data_tidy.\n\n#write_rds(flow_data,\n#          \"data/rds/flow_data_tidy.rds\")"
  },
  {
    "objectID": "In-class Ex/In-class_Ex5/data/geospatial/Business.html",
    "href": "In-class Ex/In-class_Ex5/data/geospatial/Business.html",
    "title": "ISSS624",
    "section": "",
    "text": "&lt;!DOCTYPE qgis PUBLIC ‘http://mrcc.com/qgis.dtd’ ‘SYSTEM’&gt;     dataset\n\n\n       GEOGCRS[“WGS 84”,ENSEMBLE[“World Geodetic System 1984 ensemble”,MEMBER[“World Geodetic System 1984 (Transit)”],MEMBER[“World Geodetic System 1984 (G730)”],MEMBER[“World Geodetic System 1984 (G873)”],MEMBER[“World Geodetic System 1984 (G1150)”],MEMBER[“World Geodetic System 1984 (G1674)”],MEMBER[“World Geodetic System 1984 (G1762)”],MEMBER[“World Geodetic System 1984 (G2139)”],ELLIPSOID[“WGS 84”,6378137,298.257223563,LENGTHUNIT[“metre”,1]],ENSEMBLEACCURACY[2.0]],PRIMEM[“Greenwich”,0,ANGLEUNIT[“degree”,0.0174532925199433]],CS[ellipsoidal,2],AXIS[“geodetic latitude (Lat)”,north,ORDER[1],ANGLEUNIT[“degree”,0.0174532925199433]],AXIS[“geodetic longitude (Lon)”,east,ORDER[2],ANGLEUNIT[“degree”,0.0174532925199433]],USAGE[SCOPE[“Horizontal component of 3D system.”],AREA[“World.”],BBOX[-90,-180,90,180]],ID[“EPSG”,4326]] +proj=longlat +datum=WGS84 +no_defs 3452 4326 EPSG:4326 WGS 84 longlat EPSG:7030 true"
  },
  {
    "objectID": "In-class Ex/In-class_Ex5/data/geospatial/F&B.html",
    "href": "In-class Ex/In-class_Ex5/data/geospatial/F&B.html",
    "title": "ISSS624",
    "section": "",
    "text": "&lt;!DOCTYPE qgis PUBLIC ‘http://mrcc.com/qgis.dtd’ ‘SYSTEM’&gt;     dataset\n\n\n       GEOGCRS[“WGS 84”,ENSEMBLE[“World Geodetic System 1984 ensemble”,MEMBER[“World Geodetic System 1984 (Transit)”],MEMBER[“World Geodetic System 1984 (G730)”],MEMBER[“World Geodetic System 1984 (G873)”],MEMBER[“World Geodetic System 1984 (G1150)”],MEMBER[“World Geodetic System 1984 (G1674)”],MEMBER[“World Geodetic System 1984 (G1762)”],MEMBER[“World Geodetic System 1984 (G2139)”],ELLIPSOID[“WGS 84”,6378137,298.257223563,LENGTHUNIT[“metre”,1]],ENSEMBLEACCURACY[2.0]],PRIMEM[“Greenwich”,0,ANGLEUNIT[“degree”,0.0174532925199433]],CS[ellipsoidal,2],AXIS[“geodetic latitude (Lat)”,north,ORDER[1],ANGLEUNIT[“degree”,0.0174532925199433]],AXIS[“geodetic longitude (Lon)”,east,ORDER[2],ANGLEUNIT[“degree”,0.0174532925199433]],USAGE[SCOPE[“Horizontal component of 3D system.”],AREA[“World.”],BBOX[-90,-180,90,180]],ID[“EPSG”,4326]] +proj=longlat +datum=WGS84 +no_defs 3452 4326 EPSG:4326 WGS 84 longlat EPSG:7030 true"
  },
  {
    "objectID": "In-class Ex/In-class_Ex5/data/geospatial/Liesure&Recreation.html",
    "href": "In-class Ex/In-class_Ex5/data/geospatial/Liesure&Recreation.html",
    "title": "ISSS624",
    "section": "",
    "text": "&lt;!DOCTYPE qgis PUBLIC ‘http://mrcc.com/qgis.dtd’ ‘SYSTEM’&gt;     dataset\n\n\n       GEOGCRS[“WGS 84”,ENSEMBLE[“World Geodetic System 1984 ensemble”,MEMBER[“World Geodetic System 1984 (Transit)”],MEMBER[“World Geodetic System 1984 (G730)”],MEMBER[“World Geodetic System 1984 (G873)”],MEMBER[“World Geodetic System 1984 (G1150)”],MEMBER[“World Geodetic System 1984 (G1674)”],MEMBER[“World Geodetic System 1984 (G1762)”],MEMBER[“World Geodetic System 1984 (G2139)”],ELLIPSOID[“WGS 84”,6378137,298.257223563,LENGTHUNIT[“metre”,1]],ENSEMBLEACCURACY[2.0]],PRIMEM[“Greenwich”,0,ANGLEUNIT[“degree”,0.0174532925199433]],CS[ellipsoidal,2],AXIS[“geodetic latitude (Lat)”,north,ORDER[1],ANGLEUNIT[“degree”,0.0174532925199433]],AXIS[“geodetic longitude (Lon)”,east,ORDER[2],ANGLEUNIT[“degree”,0.0174532925199433]],USAGE[SCOPE[“Horizontal component of 3D system.”],AREA[“World.”],BBOX[-90,-180,90,180]],ID[“EPSG”,4326]] +proj=longlat +datum=WGS84 +no_defs 3452 4326 EPSG:4326 WGS 84 longlat EPSG:7030 true"
  },
  {
    "objectID": "In-class Ex/In-class_Ex5/data/geospatial/Retails.html",
    "href": "In-class Ex/In-class_Ex5/data/geospatial/Retails.html",
    "title": "ISSS624",
    "section": "",
    "text": "&lt;!DOCTYPE qgis PUBLIC ‘http://mrcc.com/qgis.dtd’ ‘SYSTEM’&gt;     dataset\n\n\n       GEOGCRS[“WGS 84”,ENSEMBLE[“World Geodetic System 1984 ensemble”,MEMBER[“World Geodetic System 1984 (Transit)”],MEMBER[“World Geodetic System 1984 (G730)”],MEMBER[“World Geodetic System 1984 (G873)”],MEMBER[“World Geodetic System 1984 (G1150)”],MEMBER[“World Geodetic System 1984 (G1674)”],MEMBER[“World Geodetic System 1984 (G1762)”],MEMBER[“World Geodetic System 1984 (G2139)”],ELLIPSOID[“WGS 84”,6378137,298.257223563,LENGTHUNIT[“metre”,1]],ENSEMBLEACCURACY[2.0]],PRIMEM[“Greenwich”,0,ANGLEUNIT[“degree”,0.0174532925199433]],CS[ellipsoidal,2],AXIS[“geodetic latitude (Lat)”,north,ORDER[1],ANGLEUNIT[“degree”,0.0174532925199433]],AXIS[“geodetic longitude (Lon)”,east,ORDER[2],ANGLEUNIT[“degree”,0.0174532925199433]],USAGE[SCOPE[“Horizontal component of 3D system.”],AREA[“World.”],BBOX[-90,-180,90,180]],ID[“EPSG”,4326]] +proj=longlat +datum=WGS84 +no_defs 3452 4326 EPSG:4326 WGS 84 longlat EPSG:7030 true"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "ISSS624",
    "section": "",
    "text": "Welcome to ISSS624 Geospatial Analytics Applications!\nIn this webpage, I am going to share with you my learning journey of geospatial analytics.\nTo learn more about Quarto websites visit https://quarto.org/docs/websites."
  },
  {
    "objectID": "Take-home Ex/Take-home Ex 2/data/geospatial/Business.html",
    "href": "Take-home Ex/Take-home Ex 2/data/geospatial/Business.html",
    "title": "ISSS624",
    "section": "",
    "text": "&lt;!DOCTYPE qgis PUBLIC ‘http://mrcc.com/qgis.dtd’ ‘SYSTEM’&gt;     dataset\n\n\n       GEOGCRS[“WGS 84”,ENSEMBLE[“World Geodetic System 1984 ensemble”,MEMBER[“World Geodetic System 1984 (Transit)”],MEMBER[“World Geodetic System 1984 (G730)”],MEMBER[“World Geodetic System 1984 (G873)”],MEMBER[“World Geodetic System 1984 (G1150)”],MEMBER[“World Geodetic System 1984 (G1674)”],MEMBER[“World Geodetic System 1984 (G1762)”],MEMBER[“World Geodetic System 1984 (G2139)”],ELLIPSOID[“WGS 84”,6378137,298.257223563,LENGTHUNIT[“metre”,1]],ENSEMBLEACCURACY[2.0]],PRIMEM[“Greenwich”,0,ANGLEUNIT[“degree”,0.0174532925199433]],CS[ellipsoidal,2],AXIS[“geodetic latitude (Lat)”,north,ORDER[1],ANGLEUNIT[“degree”,0.0174532925199433]],AXIS[“geodetic longitude (Lon)”,east,ORDER[2],ANGLEUNIT[“degree”,0.0174532925199433]],USAGE[SCOPE[“Horizontal component of 3D system.”],AREA[“World.”],BBOX[-90,-180,90,180]],ID[“EPSG”,4326]] +proj=longlat +datum=WGS84 +no_defs 3452 4326 EPSG:4326 WGS 84 longlat EPSG:7030 true"
  },
  {
    "objectID": "Take-home Ex/Take-home Ex 2/data/geospatial/F&B.html",
    "href": "Take-home Ex/Take-home Ex 2/data/geospatial/F&B.html",
    "title": "ISSS624",
    "section": "",
    "text": "&lt;!DOCTYPE qgis PUBLIC ‘http://mrcc.com/qgis.dtd’ ‘SYSTEM’&gt;     dataset\n\n\n       GEOGCRS[“WGS 84”,ENSEMBLE[“World Geodetic System 1984 ensemble”,MEMBER[“World Geodetic System 1984 (Transit)”],MEMBER[“World Geodetic System 1984 (G730)”],MEMBER[“World Geodetic System 1984 (G873)”],MEMBER[“World Geodetic System 1984 (G1150)”],MEMBER[“World Geodetic System 1984 (G1674)”],MEMBER[“World Geodetic System 1984 (G1762)”],MEMBER[“World Geodetic System 1984 (G2139)”],ELLIPSOID[“WGS 84”,6378137,298.257223563,LENGTHUNIT[“metre”,1]],ENSEMBLEACCURACY[2.0]],PRIMEM[“Greenwich”,0,ANGLEUNIT[“degree”,0.0174532925199433]],CS[ellipsoidal,2],AXIS[“geodetic latitude (Lat)”,north,ORDER[1],ANGLEUNIT[“degree”,0.0174532925199433]],AXIS[“geodetic longitude (Lon)”,east,ORDER[2],ANGLEUNIT[“degree”,0.0174532925199433]],USAGE[SCOPE[“Horizontal component of 3D system.”],AREA[“World.”],BBOX[-90,-180,90,180]],ID[“EPSG”,4326]] +proj=longlat +datum=WGS84 +no_defs 3452 4326 EPSG:4326 WGS 84 longlat EPSG:7030 true"
  },
  {
    "objectID": "Take-home Ex/Take-home Ex 2/data/geospatial/Liesure&Recreation.html",
    "href": "Take-home Ex/Take-home Ex 2/data/geospatial/Liesure&Recreation.html",
    "title": "ISSS624",
    "section": "",
    "text": "&lt;!DOCTYPE qgis PUBLIC ‘http://mrcc.com/qgis.dtd’ ‘SYSTEM’&gt;     dataset\n\n\n       GEOGCRS[“WGS 84”,ENSEMBLE[“World Geodetic System 1984 ensemble”,MEMBER[“World Geodetic System 1984 (Transit)”],MEMBER[“World Geodetic System 1984 (G730)”],MEMBER[“World Geodetic System 1984 (G873)”],MEMBER[“World Geodetic System 1984 (G1150)”],MEMBER[“World Geodetic System 1984 (G1674)”],MEMBER[“World Geodetic System 1984 (G1762)”],MEMBER[“World Geodetic System 1984 (G2139)”],ELLIPSOID[“WGS 84”,6378137,298.257223563,LENGTHUNIT[“metre”,1]],ENSEMBLEACCURACY[2.0]],PRIMEM[“Greenwich”,0,ANGLEUNIT[“degree”,0.0174532925199433]],CS[ellipsoidal,2],AXIS[“geodetic latitude (Lat)”,north,ORDER[1],ANGLEUNIT[“degree”,0.0174532925199433]],AXIS[“geodetic longitude (Lon)”,east,ORDER[2],ANGLEUNIT[“degree”,0.0174532925199433]],USAGE[SCOPE[“Horizontal component of 3D system.”],AREA[“World.”],BBOX[-90,-180,90,180]],ID[“EPSG”,4326]] +proj=longlat +datum=WGS84 +no_defs 3452 4326 EPSG:4326 WGS 84 longlat EPSG:7030 true"
  },
  {
    "objectID": "Take-home Ex/Take-home Ex 2/data/geospatial/Retails.html",
    "href": "Take-home Ex/Take-home Ex 2/data/geospatial/Retails.html",
    "title": "ISSS624",
    "section": "",
    "text": "&lt;!DOCTYPE qgis PUBLIC ‘http://mrcc.com/qgis.dtd’ ‘SYSTEM’&gt;     dataset\n\n\n       GEOGCRS[“WGS 84”,ENSEMBLE[“World Geodetic System 1984 ensemble”,MEMBER[“World Geodetic System 1984 (Transit)”],MEMBER[“World Geodetic System 1984 (G730)”],MEMBER[“World Geodetic System 1984 (G873)”],MEMBER[“World Geodetic System 1984 (G1150)”],MEMBER[“World Geodetic System 1984 (G1674)”],MEMBER[“World Geodetic System 1984 (G1762)”],MEMBER[“World Geodetic System 1984 (G2139)”],ELLIPSOID[“WGS 84”,6378137,298.257223563,LENGTHUNIT[“metre”,1]],ENSEMBLEACCURACY[2.0]],PRIMEM[“Greenwich”,0,ANGLEUNIT[“degree”,0.0174532925199433]],CS[ellipsoidal,2],AXIS[“geodetic latitude (Lat)”,north,ORDER[1],ANGLEUNIT[“degree”,0.0174532925199433]],AXIS[“geodetic longitude (Lon)”,east,ORDER[2],ANGLEUNIT[“degree”,0.0174532925199433]],USAGE[SCOPE[“Horizontal component of 3D system.”],AREA[“World.”],BBOX[-90,-180,90,180]],ID[“EPSG”,4326]] +proj=longlat +datum=WGS84 +no_defs 3452 4326 EPSG:4326 WGS 84 longlat EPSG:7030 true"
  },
  {
    "objectID": "Take-home Ex/Take-home Ex 2/Take-home_Ex_2.html#visualising-commute-flow",
    "href": "Take-home Ex/Take-home Ex 2/Take-home_Ex_2.html#visualising-commute-flow",
    "title": "Take-home Exercise 2: Analyzing the Dynamics of Bus Commute Flow and Spatial Interaction in Singapore",
    "section": "6.Visualising Commute Flow",
    "text": "6.Visualising Commute Flow\n\n6.1Removing Intra-zonal Flows\nThe code filters out intra-zonal flows from four separate data frames by excluding rows where the origin hexagon (ORIGIN_HEX) is the same as the destination hexagon (DESTIN_HEX). This step is crucial for analysis as it removes trips that start and end within the same traffic analysis zone, focusing the study on inter-zonal movements which are more significant for understanding commuting patterns and the broader transportation network efficiency.\n\nweekday_morning_od1 &lt;- weekday_morning_od[weekday_morning_od$ORIGIN_HEX!=weekday_morning_od$DESTIN_HEX,]\n\n\nweekday_afternoon_od1 &lt;- weekday_afternoon_od[weekday_afternoon_od$ORIGIN_HEX!=weekday_afternoon_od$DESTIN_HEX,]\n\n\nweekend_morning_od1 &lt;- weekend_morning_od[weekend_morning_od$ORIGIN_HEX!=weekend_morning_od$DESTIN_HEX,]\n\n\nweekend_evening_od1 &lt;- weekend_evening_od[weekend_evening_od$ORIGIN_HEX!=weekend_evening_od$DESTIN_HEX,]\n\n\n\n6.2Creating the Desire Lines\nThe code uses the od2line function to transform the inter-zonal flow data from each time period into desire lines, which are spatial representations of the volume and direction of trips between different hexagons. These lines are prepared for visualization, allowing us to graphically depict and analyze commuting patterns for different times of the day and week on a map.\n\nweekday_morning_flowLine &lt;- od2line(flow = weekday_morning_od1, \n                    zones = hex_grid_sf,\n                    zone_code = \"hex_id\")\n\n\nweekday_afternoon_flowLine &lt;- od2line(flow = weekday_afternoon_od1, \n                    zones = hex_grid_sf,\n                    zone_code = \"hex_id\")\n\n\nweekend_morning_flowLine &lt;- od2line(flow = weekend_morning_od1, \n                    zones = hex_grid_sf,\n                    zone_code = \"hex_id\")\n\n\nweekend_evening_flowLine &lt;- od2line(flow = weekend_evening_od1, \n                    zones = hex_grid_sf,\n                    zone_code = \"hex_id\")\n\n\n\n6.3Visualising the Desire Lines\n\n6.3.1Weekday Morning Peak Commute Flow Map\nThis visualization code uses the tmap package to plot the hexagonal grid as a base, draws the boundaries of the metropolitan planning zones (MPZ), and overlays the desire lines representing high-volume weekday morning commute flows in Singapore. The lines are styled to vary in width and color intensity based on the volume of commutes, with thicker, darker lines indicating higher numbers of trips.\n\ntm_shape(hex_grid_sf) +\n  tm_polygons(\n    border.col = \"grey50\", \n    border.alpha = 0.6, \n    alpha = 0.1\n  ) +\n  tm_shape(weekday_morning_flowLine %&gt;% \n             filter(WEEKDAY_MORNING_PEAK &gt;= 5000)) +\n  tm_lines(\n    lwd = \"WEEKDAY_MORNING_PEAK\",\n    style = \"quantile\",\n    scale = c(0.1, 1, 3, 5, 7, 10),\n    n = 6,\n    alpha = 0.5,\n    palette = \"Blues\"\n  ) +\n  tm_shape(mpsz) +\n  tm_borders(\n    col = \"darkblue\", \n    alpha = 0.1,\n    lwd = 1.5\n  ) +\n  tm_layout(\n    main.title = \"Weekday Morning Commute Flows in Singapore\",\n    main.title.position = \"center\",\n    main.title.size = 1.0,\n    legend.title.size = 0.8,\n    legend.text.size = 0.7,\n    legend.position = c(\"left\", \"bottom\"),\n    frame = FALSE,\n    inner.margins = c(0.05, 0.05, 0.05, 0.05)\n  ) +\n  tm_credits(\"Source: LTA DataMall\", position = c(\"RIGHT\", \"BOTTOM\"), size = 0.5)\n\n\n\n\nInsight from the Map:\nThe “Weekday Morning Commute Flows in Singapore” map reveals significant commuter traffic between various regions during peak morning hours. The thicker, darker lines suggest heavy flow between central business districts and outlying residential areas, indicating a typical urban commute pattern where many residents travel towards city centers for work. Areas with dense hexagon clusters, likely representing central and suburban residential zones, show extensive outward flow, highlighting these as key commuter hubs. Conversely, some regions exhibit sparse lines, suggesting lower population density or less reliance on public bus transit.\n\n\n6.3.2Weekday Afternoon Peak Commute Flow Map\n\ntm_shape(hex_grid_sf) +\n  tm_polygons(\n    border.col = \"grey50\", \n    border.alpha = 0.6, \n    alpha = 0.1\n  ) +\n  tm_shape(weekday_afternoon_flowLine %&gt;% \n             filter(WEEKDAY_AFTERNOON_PEAK &gt;= 5000)) +\n  tm_lines(\n    lwd = \"WEEKDAY_AFTERNOON_PEAK\",\n    style = \"quantile\",\n    scale = c(0.1, 1, 3, 5, 7, 10),\n    n = 6,\n    alpha = 0.5,\n    palette = \"Blues\"\n  ) +\n  tm_shape(mpsz) +\n  tm_borders(\n    col = \"darkblue\", \n    alpha = 0.1,\n    lwd = 1.5\n  ) +\n  tm_layout(\n    main.title = \"Weekday Afternoon Commute Flows in Singapore\",\n    main.title.position = \"center\",\n    main.title.size = 1.0,\n    legend.title.size = 0.8,\n    legend.text.size = 0.7,\n    legend.position = c(\"left\", \"bottom\"),\n    frame = FALSE,\n    inner.margins = c(0.05, 0.05, 0.05, 0.05)\n  ) +\n  tm_credits(\"Source: LTA DataMall\", position = c(\"RIGHT\", \"BOTTOM\"), size = 0.5)\n\n\n\n\nInsight from the Map:\nThe “Weekday Afternoon Commute Flows in Singapore” map suggests a reverse commute pattern from the morning, with significant flows from central areas to the outskirts, likely as people return home from work. The dense lines indicate high traffic volumes, particularly from the CBD and other employment hubs to residential districts. The distribution and volume of these lines can indicate areas with a high demand for evening public transportation services, and such insights could inform enhancements to bus service capacity and frequency to meet commuter needs during peak hours.\n\n\n6.3.3Weekend Morning Peak Commute Flow Map\n\ntm_shape(hex_grid_sf) +\n  tm_polygons(\n    border.col = \"grey50\", \n    border.alpha = 0.6, \n    alpha = 0.1\n  ) +\n  tm_shape(weekend_morning_flowLine %&gt;% \n             filter(WEEKEND_MORNING_PEAK &gt;= 3000)) +\n  tm_lines(\n    lwd = \"WEEKEND_MORNING_PEAK\",\n    style = \"quantile\",\n    scale = c(0.1, 1, 3, 5, 7, 13, 15),\n    n = 7,\n    alpha = 0.5,\n    palette = \"Blues\"\n  ) +\n  tm_shape(mpsz) +\n  tm_borders(\n    col = \"darkblue\", \n    alpha = 0.1,\n    lwd = 1.5\n  ) +\n  tm_layout(\n    main.title = \"Weekend Morning Commute Flows in Singapore\",\n    main.title.position = \"center\",\n    main.title.size = 1.0,\n    legend.title.size = 0.8,\n    legend.text.size = 0.7,\n    legend.position = c(\"left\", \"bottom\"),\n    frame = FALSE,\n    inner.margins = c(0.05, 0.05, 0.05, 0.05)\n  ) +\n  tm_credits(\"Source: LTA DataMall\", position = c(\"RIGHT\", \"BOTTOM\"), size = 0.5)\n\n\n\n\nInsight from the Map:\nThe “Weekend Morning Commute Flows in Singapore” map shows a noticeable reduction in volume and fewer dense flow lines compared to weekdays, reflecting a typical decrease in commuting activity during weekends. The flows that are present may indicate travel to weekend-specific destinations like markets, recreational areas, or places of worship. The patterns suggest that the weekend movement is more dispersed and possibly oriented towards leisure or non-work-related activities, contrasting the concentrated, work-directed flows of weekday mornings.\n\n\n6.3.4Weekend Evening Peak Commute Flow Map\n\ntm_shape(hex_grid_sf) +\n  tm_polygons(\n    border.col = \"grey50\", \n    border.alpha = 0.6, \n    alpha = 0.1\n  ) +\n  tm_shape(weekend_evening_flowLine %&gt;% \n             filter(WEEKEND_EVENING_PEAK &gt;= 3000)) +\n  tm_lines(\n    lwd = \"WEEKEND_EVENING_PEAK\",\n    style = \"quantile\",\n    scale = c(0.1, 1, 3, 5, 7, 10),\n    n = 6,\n    alpha = 0.5,\n    palette = \"Blues\"\n  ) +\n  tm_shape(mpsz) +\n  tm_borders(\n    col = \"darkblue\", \n    alpha = 0.1,\n    lwd = 1.5\n  ) +\n  tm_layout(\n    main.title = \"Weekend Evening Commute Flows in Singapore\",\n    main.title.position = \"center\",\n    main.title.size = 1.0,\n    legend.title.size = 0.8,\n    legend.text.size = 0.7,\n    legend.position = c(\"left\", \"bottom\"),\n    frame = FALSE,\n    inner.margins = c(0.05, 0.05, 0.05, 0.05)\n  ) +\n  tm_credits(\"Source: LTA DataMall\", position = c(\"RIGHT\", \"BOTTOM\"), size = 0.5)\n\n\n\n\nInsight from the Map:\nThe “Weekend Evening Commute Flows in Singapore” map likely indicates an increase in volume compared to the morning, with more pronounced traffic flows towards residential areas and perhaps popular evening destinations. This contrasts with weekday evenings, where the flow would primarily be homeward from work centers. The patterns may suggest leisure and social activities are influencing travel, with possibly greater flows to entertainment or dining hubs and a more dispersed pattern as people return from various activities across the city.\n\nrm(duplicate, weekday_morning_flowLine, weekday_morning_od, weekday_morning_od1,\n   weekend_morning_flowLine, weekend_morning_od, weekend_morning_od1,\n   weekend_evening_flowLine, weekend_evening_od, weekend_evening_od1)"
  },
  {
    "objectID": "Take-home Ex/Take-home Ex 2/Take-home_Ex_2.html#creating-complete-data-for-spatial-interaction-modeling",
    "href": "Take-home Ex/Take-home Ex 2/Take-home_Ex_2.html#creating-complete-data-for-spatial-interaction-modeling",
    "title": "Take-home Exercise 2: Analyzing the Dynamics of Bus Commute Flow and Spatial Interaction in Singapore",
    "section": "10.Creating Complete Data for Spatial Interaction Modeling",
    "text": "10.Creating Complete Data for Spatial Interaction Modeling\n\nweekday_afternoon_od1$ORIGIN_HEX &lt;- as.factor(weekday_afternoon_od1$ORIGIN_HEX)\nweekday_afternoon_od1$DESTIN_HEX &lt;- as.factor(weekday_afternoon_od1$DESTIN_HEX)\ndistPair$orig &lt;- as.factor(distPair$orig)\ndistPair$dest &lt;- as.factor(distPair$dest)\n\n\nweekday_afternoon_od2 &lt;- weekday_afternoon_od1 %&gt;%\n  left_join (distPair,\n             by = c(\"ORIGIN_HEX\" = \"orig\",\n                    \"DESTIN_HEX\" = \"dest\"))\n\n\nhex_grid_df &lt;- as.data.frame(hex_grid_sf) %&gt;%\n  select(hex_id, bus_stop_count, business_count, school_count, finserv_count, \n         entertn_count, FB_count, lere_count, retail_count, trainexits_count, residential_count) %&gt;%\n  mutate(hex_id = as.character(hex_id))\n\n\norigin_factors &lt;- hex_grid_df %&gt;%\n  select(hex_id, bus_stop_count, business_count, school_count, finserv_count)\nweekday_afternoon_od2 &lt;- weekday_afternoon_od2 %&gt;%\n  mutate(ORIGIN_HEX = as.character(ORIGIN_HEX),\n         DESTIN_HEX = as.character(DESTIN_HEX))\n\n\nweekday_afternoon_od2_with_origin &lt;- weekday_afternoon_od2 %&gt;%\n  left_join(origin_factors, by = c(\"ORIGIN_HEX\" = \"hex_id\"))\n\n\ndestin_factors &lt;- hex_grid_df %&gt;%\n  select(hex_id, entertn_count, FB_count, lere_count, retail_count, trainexits_count, residential_count)\n\n\nweekday_afternoon_od2_complete &lt;- weekday_afternoon_od2_with_origin %&gt;%\n  left_join(destin_factors, by = c(\"DESTIN_HEX\" = \"hex_id\"))\n\n\nglimpse(weekday_afternoon_od2_complete)\n\nRows: 161,671\nColumns: 14\nGroups: ORIGIN_HEX [1,808]\n$ ORIGIN_HEX             &lt;chr&gt; \"393\", \"393\", \"393\", \"393\", \"393\", \"393\", \"393\"…\n$ DESTIN_HEX             &lt;chr&gt; \"535\", \"585\", \"723\", \"770\", \"779\", \"824\", \"827\"…\n$ WEEKDAY_AFTERNOON_PEAK &lt;dbl&gt; 3, 34, 182, 1, 1, 18, 6, 145, 2, 16, 250, 23, 2…\n$ dist                   &lt;dbl&gt; 750.000, 3122.499, 1561.249, 1887.459, 7697.402…\n$ bus_stop_count         &lt;int&gt; 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,…\n$ business_count         &lt;int&gt; 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 0, 0, 0, 0,…\n$ school_count           &lt;int&gt; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,…\n$ finserv_count          &lt;int&gt; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,…\n$ entertn_count          &lt;int&gt; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,…\n$ FB_count               &lt;int&gt; 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0,…\n$ lere_count             &lt;int&gt; 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0,…\n$ retail_count           &lt;int&gt; 0, 1, 0, 0, 0, 0, 3, 0, 2, 0, 3, 9, 2, 1, 0, 0,…\n$ trainexits_count       &lt;int&gt; 0, 0, 0, 0, 0, 0, 2, 2, 0, 0, 2, 2, 0, 0, 0, 0,…\n$ residential_count      &lt;dbl&gt; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,…\n\n\n\nwrite_rds(weekday_afternoon_od2_complete, \"data/rds/SIM_data.rds\")\n\n\nrm(business, busstop, busstop_hex, busstop_mpsz, destin_factors, dist, distPair, entertn, FB, finserv, hdb, hex_grid_df, hex_grid_sf, hex_grid_sp, lere, mpsz, origin_factors, residential, retail, schools, trainexits, weekday_afternoon_flowLine, weekday_afternoon_od, weekday_afternoon_od1, weekday_afternoon_od2, weekday_afternoon_od2_complete, weekday_afternoon_od2_with_origin, hex_names)"
  }
]